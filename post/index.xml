<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog Einträge | Norman&#39;s Academic Blog</title>
    <link>https://sefiroth.net/nab/post/</link>
      <atom:link href="https://sefiroth.net/nab/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Blog Einträge</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>de-de</language><copyright>© in 2017-2021 by Norman Markgraf</copyright><lastBuildDate>Fri, 11 Jun 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://sefiroth.net/nab/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Blog Einträge</title>
      <link>https://sefiroth.net/nab/post/</link>
    </image>
    
    <item>
      <title>Wege zur Normalverteilung</title>
      <link>https://sefiroth.net/nab/post/wege-zur-normalverteilung/</link>
      <pubDate>Fri, 11 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/wege-zur-normalverteilung/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/post/wege-zur-normalverteilung/index.de_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Der fairen Wurf einer fairen Münze, also eine Münze bei der Kopf und Zahl gleich wahrscheinlich geworfen wird, sei der Ausgang des ersten Weges.&lt;/p&gt;
&lt;p&gt;Wir können den Münzwurf mit R simulieren:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mosaic)
set.seed(2009)

rflip(1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Flipping 1 coin [ Prob(Heads) = 0.5 ] ...
## 
## T
## 
## Number of Heads: 0 [Proportion Heads: 0]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Genauso wie den Wurf zweier Münzen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rflip(2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Flipping 2 coins [ Prob(Heads) = 0.5 ] ...
## 
## H H
## 
## Number of Heads: 2 [Proportion Heads: 1]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oder auch von 20 Münzwürfen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rflip(20)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Flipping 20 coins [ Prob(Heads) = 0.5 ] ...
## 
## T T T T H H T T T H H H H T H T T H H H
## 
## Number of Heads: 10 [Proportion Heads: 0.5]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wir wollen uns dafür interessieren, wie der Zufall auf jeweils &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; Münzwürfe einwirkt&lt;/p&gt;
&lt;p&gt;Und wieder holen dafür die drei Experiment jeweils &lt;span class=&#34;math inline&#34;&gt;\(N=10^{4}\)&lt;/span&gt; mal und schauen
uns danach anwie die Anzahl der &lt;em&gt;Kopf&lt;/em&gt; Würfe variiert:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;N &amp;lt;- 10000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n &amp;lt;- 1
vrtlg_1 &amp;lt;- do(N) * rflip(n)
gf_bar(~ heads, data = vrtlg_1) %&amp;gt;%
  gf_refine(scale_x_continuous(breaks = 0:n, limits = c(-0.5,n + 0.5)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/wege-zur-normalverteilung/index.de_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n=2\)&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n &amp;lt;- 2
vrtlg_2 &amp;lt;- do(N) * rflip(n)
gf_bar(~ heads, data = vrtlg_2) %&amp;gt;%
  gf_refine(scale_x_continuous(breaks = 0:n, limits = c(-0.5, n + 0.5)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/wege-zur-normalverteilung/index.de_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(n=20\)&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n &amp;lt;- 20
vrtlg_20 &amp;lt;- do(N) * rflip(n)
gf_bar(~ heads, data = vrtlg_20) %&amp;gt;%
  gf_refine(scale_x_continuous(breaks = 0:n, limits = c(-0.5, n + 0.5)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/wege-zur-normalverteilung/index.de_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;
&lt;span class=&#34;math inline&#34;&gt;\(n=50\)&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n &amp;lt; -50&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;vrtlg_50 &amp;lt;- do(N) * rflip(n)
gf_bar(~ heads, data = vrtlg_50) %&amp;gt;%
  gf_refine(scale_x_continuous(breaks = 0:n, limits = c(-0.5, n + 0.5)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/wege-zur-normalverteilung/index.de_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Der faire Wurf eine fairen Münze &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; ist aber vorallem ein Gedanken-Expermiment,
bei dem wir davon ausgehen, dass die Wahrscheinlichkeit für Kopf gleich der Wahrscheinlichkeit für Zahl ist:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[P(X = \text{&amp;quot;Kopf&amp;quot;}) = P(X = \text{&amp;quot;Zahl&amp;quot;}) = 50\,\% = 0{,}5\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir wollen die beiden Ergebnisse kodieren: &lt;span class=&#34;math inline&#34;&gt;\(\text{&amp;quot;Kopf&amp;quot;}\)&lt;/span&gt; mit &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(\text{&amp;quot;Zahl&amp;quot;}\)&lt;/span&gt; mit &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt;. Somit können wir schreiben:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[P(X = 0)  = 0{,}5 = P(X = 1)\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Für denn Fall, dass die Münze nicht mehr fair ist wollen wir vereinbaren, dass wir
mit &lt;span class=&#34;math inline&#34;&gt;\(q = P(X = 0)\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(p = P(X = 1)\)&lt;/span&gt; die jeweiligen Wahrscheinlichkeiten bezeichnen wollen. Es gilt aber immer, dass &lt;span class=&#34;math inline&#34;&gt;\(q+p = 1\)&lt;/span&gt; ist!&lt;/p&gt;
&lt;p&gt;Eine Variable &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; die dem Zufall ein Wert &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; zuweist, wollen wir &lt;strong&gt;Zufallsvariable&lt;/strong&gt; nennen.&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ausgehen von der Annahme können wir uns diese theoretischen Verteilungen auch einmal ansehen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p = 0.5
n = 1
gf_dist(&amp;quot;binom&amp;quot;, size = n, prob = p)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/wege-zur-normalverteilung/index.de_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n = 2
tab &amp;lt;- tally( ~ heads, format = &amp;quot;proportion&amp;quot;, data = vrtlg_2)
dist_2 &amp;lt;- data.frame(
  x = as.numeric(names(tab)),
  density = as.numeric(tab)
) 

gf_dist(&amp;quot;binom&amp;quot;, size = n, prob = p) %&amp;gt;%
  gf_point(density ~ x, data = dist_2, color = &amp;quot;lightgreen&amp;quot;, alpha = 0.7)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/wege-zur-normalverteilung/index.de_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n = 20
gf_dist(&amp;quot;binom&amp;quot;, size = n, prob = p)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/wege-zur-normalverteilung/index.de_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n = 20
tab &amp;lt;- tally( ~ heads, format = &amp;quot;proportion&amp;quot;, data = vrtlg_20)
dist_20 &amp;lt;- data.frame(
  x = as.numeric(names(tab)),
  density = as.numeric(tab)
) 

gf_dist(&amp;quot;binom&amp;quot;, size = n, prob = p) %&amp;gt;%
  gf_point(density ~ x, data = dist_20, color = &amp;quot;lightgreen&amp;quot;, alpha = 0.7)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/wege-zur-normalverteilung/index.de_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n = 50
tab &amp;lt;- tally( ~ heads, format = &amp;quot;proportion&amp;quot;, data = vrtlg_50)
dist_50 &amp;lt;- data.frame(
  x = as.numeric(names(tab)),
  density = as.numeric(tab)
) 

gf_dist(&amp;quot;binom&amp;quot;, size = n, prob = 0.5) %&amp;gt;%
  gf_point(density ~ x, data = dist_50, color = &amp;quot;lightgreen&amp;quot;, alpha = 0.7)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/wege-zur-normalverteilung/index.de_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n &amp;lt;- 100
N &amp;lt;- 5 * n**2
vrtlg_100 &amp;lt;- do(N) * rflip(n)
tab &amp;lt;- tally( ~ heads, format = &amp;quot;proportion&amp;quot;, data = vrtlg_100)
dist_100 &amp;lt;- data.frame(
  x = as.numeric(names(tab)),
  density = as.numeric(tab)
) 

gf_dist(&amp;quot;binom&amp;quot;, size = n, prob = p) %&amp;gt;%
  gf_point(density ~ x, data = dist_100, color = &amp;quot;lightgreen&amp;quot;, alpha = 0.7)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/wege-zur-normalverteilung/index.de_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n &amp;lt;- 300
N &amp;lt;- 5 * n**2
vrtlg_300 &amp;lt;- do(N) * rflip(n)
tab &amp;lt;- tally( ~ heads, format = &amp;quot;proportion&amp;quot;, data = vrtlg_300)
dist_300 &amp;lt;- data.frame(
  x = as.numeric(names(tab)),
  density = as.numeric(tab)
) 

gf_dist(&amp;quot;binom&amp;quot;, size = n, prob = p) %&amp;gt;%
  gf_point(density ~ x, data = dist_300, color = &amp;quot;lightgreen&amp;quot;, alpha = 0.7)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/wege-zur-normalverteilung/index.de_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Zeichnen wir nun die &lt;em&gt;Gauß’sche Glockenkurve&lt;/em&gt; in rot dazu:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_dist(&amp;quot;binom&amp;quot;, size = n, prob = p) %&amp;gt;%
  gf_point(density ~ x, data = dist_300, color = &amp;quot;lightgreen&amp;quot;, alpha = 0.7) %&amp;gt;%
  gf_dist(&amp;quot;norm&amp;quot;, mean = n*p, sd = sqrt(n*p*(1 - p)), color = &amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/wege-zur-normalverteilung/index.de_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Die &lt;em&gt;Gauß’sche Glockenkurve&lt;/em&gt; ist die &lt;strong&gt;Dichtefunktion&lt;/strong&gt; der Normalverteilung und ist definiert durch:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[f(x) = \frac{1}{\sqrt{2 \pi \sigma^2}} e^{- \frac{(x-\mu)^2}{2\sigma^2}}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Mit den beiden Parameter &lt;span class=&#34;math inline&#34;&gt;\(\mu\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(\sigma^2\)&lt;/span&gt; kann man den &lt;em&gt;Mittelwert der Verteilung&lt;/em&gt; (auch &lt;strong&gt;Erwartungswert&lt;/strong&gt; genannt) und die &lt;em&gt;Varianz der Verteilung&lt;/em&gt; einstellen.&lt;/p&gt;
&lt;p&gt;Wir haben diese Werte oben mit den theoretischen Werten der &lt;em&gt;Binomialverteilung&lt;/em&gt;
&lt;span class=&#34;math inline&#34;&gt;\(\mu = E[X] = p \cdot n\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(\sigma = \sqrt{\sigma^2}= \sqrt{Var[X]} = \sqrt{n \cdot p \cdot (1-p)}\)&lt;/span&gt; belegt.&lt;/p&gt;
&lt;p&gt;Wir sehen, die (simulierten) relativen Häufigkeiten der Münzwürfe streben mit steigendem &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; mehr und mehr in Richtung der (theoretischen) Wahrscheinlichkeiten der Binomialverteilung und diese (mit steigendem &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;) gegen die Gauß’sche Glockenkurve der Normalverteilung.&lt;/p&gt;
&lt;p&gt;Eine &lt;strong&gt;Verteilungsfunktion&lt;/strong&gt; &lt;span class=&#34;math inline&#34;&gt;\(F(x)\)&lt;/span&gt; gibt an, wie wahrscheinlich es ist, einen Wert &lt;span class=&#34;math inline&#34;&gt;\(\leq x\)&lt;/span&gt; zu beobachten:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[F(x) = P(X \leq x)\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Natürlich ist damit immer &lt;span class=&#34;math inline&#34;&gt;\(0 \leq F(x) \leq 1\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Eine &lt;em&gt;empirische Verteilungsfunktion&lt;/em&gt; &lt;span class=&#34;math inline&#34;&gt;\(F_n(x)\)&lt;/span&gt;gibt an, wie groß die relative Häufigkeit
des eintretens von Werten &lt;span class=&#34;math inline&#34;&gt;\(\leq x\)&lt;/span&gt; bei einem Stichprobenumfang von &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; waren:
&lt;span class=&#34;math display&#34;&gt;\[F_n(x) = \frac{\text{Anzahl der Werte} \leq x}{n}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Betrachen wir nun &lt;em&gt;empirische Verteilungsfunktion&lt;/em&gt; unserer Experimente:&lt;/p&gt;
&lt;p&gt;n = 2&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_ecdf( ~ heads, data=vrtlg_2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/wege-zur-normalverteilung/index.de_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;n = 20&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_ecdf( ~ heads, data=vrtlg_20)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/wege-zur-normalverteilung/index.de_files/figure-html/unnamed-chunk-18-1.png&#34; width=&#34;672&#34; /&gt;
n = 50&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_ecdf( ~ heads, data=vrtlg_50)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/wege-zur-normalverteilung/index.de_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;n = 300&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_ecdf( ~ heads, data=vrtlg_300)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/wege-zur-normalverteilung/index.de_files/figure-html/unnamed-chunk-20-1.png&#34; width=&#34;672&#34; /&gt;
Tragen wir zur &lt;em&gt;empirische Verteilungsfunktion&lt;/em&gt; auch die &lt;em&gt;Verteilungsfunktion&lt;/em&gt; der Normalverteilung von oben ein:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n &amp;lt;- 300
gf_ecdf( ~ heads, data = vrtlg_300) %&amp;gt;%
  gf_dist(&amp;quot;norm&amp;quot;, mean = n*p, sd = sqrt(n*p*(1 - p)), kind=&amp;quot;cdf&amp;quot;, color = &amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/wege-zur-normalverteilung/index.de_files/figure-html/unnamed-chunk-21-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Die &lt;em&gt;empirische Verteilungsfunktion&lt;/em&gt; strebt also gegen die (theoretisch) &lt;em&gt;Verteilungsfunktion&lt;/em&gt; der Normalverteilung. Sie lautet:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[F(x) = \int_{-\infty}^x f(u)\, \text{d} u = \int_{-\infty}^x\frac{1}{\sqrt{2 \pi \sigma^2}} e^{- \frac{(x-\mu)^2}{2\sigma^2}}\]&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Eigentlich handelt es sich damit strenggenommen um eine Funktion. Und es müssen noch weitere Eigenschaften erfüllt sein. Aber darauf gehen wir hier nicht weiter ein.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Über die Koeffizienten einer linearen Regression</title>
      <link>https://sefiroth.net/nab/post/ueber-die-koeffizienten-einer-linearen-regression/</link>
      <pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/ueber-die-koeffizienten-einer-linearen-regression/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/post/ueber-die-koeffizienten-einer-linearen-regression/index.de_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Bei einer &lt;em&gt;einfachen Regression&lt;/em&gt; versuchen wir zu gegebenen
Datenpunkten &lt;span class=&#34;math inline&#34;&gt;\((x_1, y_1), ..., (x_n, y_n)\)&lt;/span&gt; eine &lt;em&gt;möglichst passende&lt;/em&gt; Funktion
&lt;span class=&#34;math inline&#34;&gt;\(g(x)\)&lt;/span&gt; zu finden, so dass
&lt;span class=&#34;math display&#34;&gt;\[y_i = g(x_i) + e_i\]&lt;/span&gt;
gilt. Dabei tollerieren wir eine (kleine) Abweichung &lt;span class=&#34;math inline&#34;&gt;\(e_i\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Bei einer &lt;em&gt;einfachen &lt;strong&gt;linearen&lt;/strong&gt; Regression&lt;/em&gt; gehen wir davon aus, dass die Datenpunkte (im wesendlichen) auf einer Geraden liegen. Mit &lt;span class=&#34;math inline&#34;&gt;\(g(x)=\beta_0 + \beta1 \cdot x\)&lt;/span&gt; ergibt sich dann für die Datenpunkte die Gleichung:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[y_i = \beta_0 + \beta_1 \cdot x_i + e_i\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Unsere Aufgabe besteht nun darin die Parameter &lt;span class=&#34;math inline&#34;&gt;\(\beta_0\)&lt;/span&gt; (y-Achenabschnitt) und &lt;span class=&#34;math inline&#34;&gt;\(\beta_1\)&lt;/span&gt; (Steigung) an hand der &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; Datenpunkte zu schätzen.
Alle unsere Schätzungen kennzeichnen wir mit einem Dach (&lt;span class=&#34;math inline&#34;&gt;\(\hat{.}\)&lt;/span&gt;), um sie von den (in der Regel unbekannten) Parametern besser zu unterscheiden.&lt;/p&gt;
&lt;p&gt;Wir suchen somit nach &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta= \left(\hat\beta_0,\, \hat\beta_1\right)\)&lt;/span&gt;,
so dass die Gerade &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_0 + \hat\beta_1 \cdot x\)&lt;/span&gt; zu gegebenem &lt;span class=&#34;math inline&#34;&gt;\(x_i\)&lt;/span&gt;
eine möglichst gute Schätzung von &lt;span class=&#34;math inline&#34;&gt;\(y_i\)&lt;/span&gt; (genannt &lt;span class=&#34;math inline&#34;&gt;\(\hat{y}_i\)&lt;/span&gt;) hat:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\hat{y_i} = \hat\beta_0 + \hat\beta_1 \cdot x_i
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Die Abweichung &lt;span class=&#34;math inline&#34;&gt;\(\hat{e_i}\)&lt;/span&gt; unserer Schätzung &lt;span class=&#34;math inline&#34;&gt;\(\hat{y}_i\)&lt;/span&gt; von dem
gegebenen Wert &lt;span class=&#34;math inline&#34;&gt;\(y_i\)&lt;/span&gt; lässt sich schreiben als:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\hat{e_i} =  \hat{y_i} - y_i =  \hat\beta_0 + \hat\beta_1 \cdot x_i - y_i
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wenn wir diese Abweichung über alle &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; minimieren, finden wir unser &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Doch das wirft eine Frage auf:
&lt;em&gt;Wie genau messen wir die möglichst &lt;strong&gt;kleinste Abweichung&lt;/strong&gt; der &lt;span class=&#34;math inline&#34;&gt;\(\hat{e_i}\)&lt;/span&gt; konkret?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Wir betrachten zunächst drei einfache Ideen:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Idee: &lt;em&gt;Betrag der Summe der Abweichungen&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Idee: &lt;em&gt;Summe der absoluten Abweichungen&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Idee: &lt;em&gt;Summe der quadratischen Abweichungen&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Gewöhnlich nutzen wir die &lt;em&gt;quadratischen Abweichungen&lt;/em&gt;, wesshalb
wir die drei Ideen ebenso in umgekehrter Reihenfolge betrachten wollen:&lt;/p&gt;
&lt;div id=&#34;idee-summe-der-quadratischen-abweichungen&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;3. Idee: Summe der quadratischen Abweichungen&lt;/h2&gt;
&lt;p&gt;Wir bezeichnen mit&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{aligned}
QS &amp;amp;= QS(\hat\beta) = QS(\hat\beta_0, \hat\beta_1) \\
  &amp;amp;= \sum\limits_{i=1}^n \hat{e_i}^2 = \sum\limits_{i=1}^n \left(\hat{y_i} - y_i \right)^2 \\
  &amp;amp;= \sum\limits_{i=1}^n \left(\hat\beta_0 + \hat\beta_1 \cdot x_i - y_i \right)^2
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;die &lt;strong&gt;Q&lt;/strong&gt;uadrat-&lt;strong&gt;S&lt;/strong&gt;umme der Abweichungen.&lt;/p&gt;
&lt;p&gt;Gesucht wird &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta=\left(\hat\beta_0,\,\hat\beta_1\right)\)&lt;/span&gt;,
so das &lt;span class=&#34;math inline&#34;&gt;\(QS\)&lt;/span&gt; minimiert wird.&lt;/p&gt;
&lt;p&gt;Dies ist ein Minimierungsproblem, bei dem wir zumindestens eine (exakte)
mathematisch-algebraisch Lösung in Form eines stationären Punktes finden können.
Dazu berechnen wir die Nullstelle der ersten partiellen Ableitung von &lt;span class=&#34;math inline&#34;&gt;\(QS\)&lt;/span&gt; nach &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_0\)&lt;/span&gt; bzw. &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_1\)&lt;/span&gt;.&lt;/p&gt;
&lt;div id=&#34;vorbemerkungen&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Vorbemerkungen&lt;/h3&gt;
&lt;p&gt;Wegen &lt;span class=&#34;math inline&#34;&gt;\(\bar{x} = \frac{1}{n} \sum\limits_{i=1}^n x_i\)&lt;/span&gt; ist &lt;span class=&#34;math inline&#34;&gt;\(n \cdot \bar{x} =\sum\limits_{i=1}^n x_i\)&lt;/span&gt; und analog &lt;span class=&#34;math inline&#34;&gt;\(n \cdot \bar{y} =\sum\limits_{i=1}^n y_i\)&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;schätzen-des-y-achenabschnitts-hatbeta_0&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Schätzen des y-Achenabschnitts &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_0\)&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Es ist:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{aligned}
 \frac{\partial}{\partial \hat\beta_0} \, QS &amp;amp;= 2 \cdot \sum\limits_{i=1}^n \left(\hat\beta_0 + \hat\beta_1 \cdot x_i - y_i \right) \cdot 1 \\
  &amp;amp;= 2 \cdot \left(\sum\limits_{i=1}^n \hat\beta_0 + \sum\limits_{i=1}^n\hat\beta_1 \cdot x_i - \sum\limits_{i=1}^n y_i\right) \\
  &amp;amp;= 2 \cdot \left( n \cdot \hat\beta_0 + \hat\beta_1\cdot\sum\limits_{i=1}^n x_i - \sum\limits_{i=1}^n y_i \right) \\
  &amp;amp;= 2 \cdot \left( n \cdot \hat\beta_0 + \hat\beta_1\cdot n \cdot \bar{x} - n \cdot\bar{y} \right) \\
  &amp;amp;= 2 \cdot n \cdot \left( \hat\beta_0 + \hat\beta_1\cdot \bar{x} -\bar{y} \right)
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Um stationäre Punkte zu ermitteln, müssen wir den Ausdruck nun gleich Null setzen und erhalten:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{aligned}
  0 &amp;amp;= \frac{\partial}{\partial \hat\beta_0} \, QS \\
  &amp;amp;= 2 \cdot n \cdot \left( \hat\beta_0 + \hat\beta_1\cdot \bar{x} -\bar{y} \right) \qquad | : (2 \cdot n) \\
  &amp;amp;= \hat\beta_0 + \hat\beta_1\cdot \bar{x} -\bar{y}
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Stellen wir nach &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_0\)&lt;/span&gt; um, erhalten wir:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{aligned}
  \hat\beta_0 &amp;amp;= - \hat\beta_1\cdot\bar{x} + \bar{y} \\
  \hat\beta_0 &amp;amp;= \bar{y} - \hat\beta_1\cdot\bar{x}
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Um &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_0\)&lt;/span&gt; zu bestimmen, benötigen wir &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_1\)&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;schätzen-der-steigung-hatbeta_1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Schätzen der Steigung &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_1\)&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Es ist:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{aligned}
  \frac{\partial}{\partial \hat\beta_1} \, QS &amp;amp;= 2 \cdot \sum\limits_{i=1}^n \left(\hat\beta_0 + \hat\beta_1 \cdot x_i - y_i \right) \cdot x_i \\
  &amp;amp;= 2 \cdot \left(\sum\limits_{i=1}^n \hat\beta_0 \cdot x_i + \sum\limits_{i=1}^n \hat\beta_1 \cdot x_i\cdot x_i- \sum\limits_{i=1}^n y_i \cdot x_i\right) \\
    &amp;amp;= 2 \cdot \left(\hat\beta_0 \cdot \sum\limits_{i=1}^n  x_i + \hat\beta_1 \cdot\sum\limits_{i=1}^n x_i^2- \sum\limits_{i=1}^n y_i \cdot x_i\right) \\
    &amp;amp;= 2 \cdot \left(\hat\beta_0 \cdot n \cdot \bar{x} + \hat\beta_1 \cdot\sum\limits_{i=1}^n x_i^2- \sum\limits_{i=1}^n y_i \cdot x_i\right)
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir ersetzen nun &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_0\)&lt;/span&gt; durch &lt;span class=&#34;math inline&#34;&gt;\(\bar{y} - \hat\beta_1\cdot \bar{x}\)&lt;/span&gt; und erhalten:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{aligned}
  \frac{\partial}{\partial \hat\beta_1} \, QS  &amp;amp;=
  2 \cdot \left(\hat\beta_0 \cdot n \cdot \bar{x} + \hat\beta_1 \cdot\sum\limits_{i=1}^n x_i^2- \sum\limits_{i=1}^n y_i \cdot x_i\right) \\
  &amp;amp;= 2 \cdot \left(\left(\bar{y} - \hat\beta_1\cdot \bar{x}\right) \cdot n \cdot \bar{x} + \hat\beta_1 \cdot\sum\limits_{i=1}^n  x_i^2- \sum\limits_{i=1}^n y_i \cdot x_i\right) \\
  &amp;amp;= 2 \cdot \left(n \cdot\bar{y} \cdot \bar{x} - n \cdot \hat\beta_1 \cdot  \bar{x}^2  + \hat\beta_1 \cdot\sum\limits_{i=1}^n  x_i^2- \sum\limits_{i=1}^n y_i \cdot x_i\right) \\
  &amp;amp;= 2 \cdot \left(n \cdot\bar{y} \cdot \bar{x} - \sum\limits_{i=1}^n y_i \cdot x_i  + \hat\beta_1 \cdot \left(\sum\limits_{i=1}^n  x_i^2- n \cdot  \bar{x}^2\right)\right) \\
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Mit Hilfe des &lt;a href=&#34;https://de.wikipedia.org/wiki/Verschiebungssatz_(Statistik)&#34;&gt;&lt;em&gt;Verschiebesatzes von Steiner&lt;/em&gt;&lt;/a&gt; (zweimal angewendet) erhalten wir:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{aligned}
  \frac{\partial}{\partial \hat\beta_1} \, QS  
    &amp;amp;=2 \cdot \left(n \cdot\bar{y} \cdot \bar{x} - \sum\limits_{i=1}^n y_i \cdot x_i  + \hat\beta_1 \cdot \left(\sum\limits_{i=1}^n  x_i^2- n \cdot  \bar{x}^2\right)\right) \\
    &amp;amp;=2 \cdot \left(- \left(\sum\limits_{i=1}^n y_i \cdot x_i - n \cdot \bar{y} \cdot \bar{x}   \right)+ \hat\beta_1 \cdot \left(\sum\limits_{i=1}^n  x_i^2- n \cdot  \bar{x}^2\right)\right) \\
    &amp;amp;=2 \cdot \left(\hat\beta_1 \cdot \left(\sum\limits_{i=1}^n  x_i^2- n \cdot  \bar{x}^2\right)- \left(\sum\limits_{i=1}^n y_i \cdot x_i - n \cdot \bar{y} \cdot \bar{x}   \right)\right) \\
    &amp;amp;= 2 \cdot \left(\hat\beta_1 \cdot \sum\limits_{i=1}^n(x_i-\bar{x})^2 - \sum\limits_{i=1}^n (x_i-\bar{x}) \cdot (y_i-\bar{y})\right)
\end{aligned}\]&lt;/span&gt;
Wir setzen nun wieder den Ausdruck gleich Null:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{aligned}
 0 &amp;amp;= 2 \cdot \left(\hat\beta_1 \cdot \sum\limits_{i=1}^n(x_i-\bar{x})^2 - \sum\limits_{i=1}^n (x_i-\bar{x}) \cdot (y_i-\bar{y})\right)  \qquad | : 2\\
   &amp;amp;= \hat\beta_1 \cdot \sum\limits_{i=1}^n(x_i-\bar{x})^2 - \sum\limits_{i=1}^n (x_i-\bar{x}) \cdot (y_i-\bar{y})
 \end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Und stellen dann nach &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_1\)&lt;/span&gt; um:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{aligned}
  \hat\beta_1 \cdot \sum\limits_{i=1}^n(x_i-\bar{x})^2 
    &amp;amp;= \sum\limits_{i=1}^n (x_i-\bar{x}) \cdot (y_i-\bar{y}) \\
  \hat\beta_1 
    &amp;amp;= \frac{\sum\limits_{i=1}^n (x_i-\bar{x}) \cdot (y_i-\bar{y})}{\sum\limits_{i=1}^n(x_i-\bar{x})^2}
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir können nun Zähler und Nenner der rechten Seite mit &lt;span class=&#34;math inline&#34;&gt;\(\frac{1}{n}\)&lt;/span&gt; erweitern
und erhlaten so:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{aligned}
\hat\beta_1 
      &amp;amp;= \frac{\frac{1}{n} \cdot\sum\limits_{i=1}^n (x_i-\bar{x}) \cdot (y_i-\bar{y})}{\frac{1}{n} \cdot\sum\limits_{i=1}^n  (x_i-\bar{x})^2} \\
      &amp;amp;= \frac{\sigma_{x,y}}{\sigma^2_x} \\
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Oder aber wir erweitern mit &lt;span class=&#34;math inline&#34;&gt;\(\frac{1}{n-1}\)&lt;/span&gt; und erhalten:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{aligned}
\hat\beta_1 
      &amp;amp;= \frac{\frac{1}{n-1} \cdot\sum\limits_{i=1}^n (x_i-\bar{x}) \cdot (y_i-\bar{y})}{\frac{1}{n-1} \cdot\sum\limits_{i=1}^n  (x_i-\bar{x})^2} \\
      &amp;amp;= \frac{s_{x,y}}{s^2_{x}}
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Damit können wir zur Berechnung sowohl die Kovarianz der Grundgesamtheit &lt;span class=&#34;math inline&#34;&gt;\(\sigma_{x,y}\)&lt;/span&gt; und die Varianz &lt;span class=&#34;math inline&#34;&gt;\(\sigma^2_x\)&lt;/span&gt; von &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;, als auch deren Schätzer &lt;span class=&#34;math inline&#34;&gt;\(s_{x,y}\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(s^2_x\)&lt;/span&gt; verwendet werden!&lt;/p&gt;
&lt;p&gt;Diese Methode nennt sich &lt;strong&gt;Methode der kleinsten Quadrate&lt;/strong&gt;
(engl. &lt;em&gt;ordenary least square method&lt;/em&gt;) und wir sprechen
dann auch von den &lt;strong&gt;Kleinste-Quadrate-Schätzern&lt;/strong&gt;
(oder kurz &lt;strong&gt;KQ-Schätzer&lt;/strong&gt; bzw. &lt;strong&gt;OLS-Schätzer&lt;/strong&gt;) &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_0\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_1\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Erweitern wir den Ausdruck mit Standardabweichung &lt;span class=&#34;math inline&#34;&gt;\(\sigma_y\)&lt;/span&gt; bzw. &lt;span class=&#34;math inline&#34;&gt;\(s_y\)&lt;/span&gt;, so erhalten wir:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{aligned}
\hat\beta_1 &amp;amp;= \frac{\sigma_{x,y}}{\sigma^2_x} \cdot \frac{\sigma_y}{\sigma_y} \\
 &amp;amp;= \frac{\sigma_{x,y}}{\sigma_x \cdot \sigma_x} \cdot \frac{\sigma_y}{\sigma_y}\\
 &amp;amp;= \frac{\sigma_{x,y}}{\sigma_x \cdot \sigma_y} \cdot \frac{\sigma_y}{\sigma_x} \\
 &amp;amp;= \rho_{x,y} \cdot \frac{\sigma_y}{\sigma_x} \\
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;und analog für die Schätzer:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{aligned}
\hat\beta_1 &amp;amp;= \frac{s_{x,y}}{s^2_x} \cdot \frac{s_y}{s_y} \\
 &amp;amp;= \frac{s_{x,y}}{s_x \cdot s_x} \cdot \frac{s_y}{s_y}\\
 &amp;amp;= \frac{s_{x,y}}{s_x \cdot s_y} \cdot \frac{s_y}{s_x} \\
 &amp;amp;= r_{x,y} \cdot \frac{s_y}{s_x} \\
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Die Steigung &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_1\)&lt;/span&gt; hat somit eine direkte Beziehung mit dem &lt;em&gt;Korrelationskoeffizenten&lt;/em&gt; &lt;span class=&#34;math inline&#34;&gt;\(\rho\)&lt;/span&gt; (der Grundgesamtheit) bzw. &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; (der Stichprobe).&lt;/p&gt;
&lt;p&gt;Für eine Berechnung in &lt;strong&gt;R&lt;/strong&gt; heißt dies: wir können die Regressionskoeffizienten
&lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_0\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_1\)&lt;/span&gt; direkt algebraisch ausrechnen, wenn wir&lt;/p&gt;
&lt;ol style=&#34;list-style-type: lower-alpha&#34;&gt;
&lt;li&gt;&lt;p&gt;die Standardabweichungen von &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; und den Korrelationskoeffizienten oder&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;die Varianz von &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; und Kovarianz von &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;haben.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ein-beispiel-in-r&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Ein Beispiel in R:&lt;/h3&gt;
&lt;p&gt;Auf Grundlage der Datentabelle &lt;em&gt;mtcars&lt;/em&gt; wollen wir Prüfen wie ein linearer
Zusammenhang zwischen dem Verbrauch (in Meilen pro Gallone &lt;em&gt;mpg&lt;/em&gt;) und der Leistung
(Pferdestärke &lt;em&gt;hp&lt;/em&gt;) modelliert werden kann.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mosaic)
# Wir nehmen eie Datentabelle &amp;#39;mtcars&amp;#39;:
mtcars %&amp;gt;%
  select(hp, mpg) -&amp;gt; dt
# und vergleichen Verbrauch (mpg, miles per gallon) mit der Pferdestärke (hp)
# Mit Hilfe eines Streudiagramms
gf_point(mpg ~ hp, data = dt) %&amp;gt;%
  gf_lims(y = c(5,35))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/ueber-die-koeffizienten-einer-linearen-regression/index.de_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;90%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Berechnen wir zunächst die Mittelwerte von &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; (also ‘hp’) und &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; (also ‘mpg’)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(mean_hp = mean(~ hp, data = dt))
#&amp;gt; [1] 146.6875
(mean_mpg = mean(~ mpg, data = dt))
#&amp;gt; [1] 20.09062&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;und zeichnen die Punkt &lt;span class=&#34;math inline&#34;&gt;\((\bar{x}, \bar{y}) = (146.69, 20.09)\)&lt;/span&gt; in unser
Streudiagramm ein:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_point(mpg ~ hp, data = dt) %&amp;gt;%
  gf_hline(yintercept = ~ mean_mpg, color = &amp;quot;grey60&amp;quot;, linetype = &amp;quot;dashed&amp;quot;) %&amp;gt;%
  gf_vline(xintercept = ~ mean_hp, color = &amp;quot;grey60&amp;quot;, linetype = &amp;quot;dashed&amp;quot;) %&amp;gt;%
  gf_point(mean_mpg ~ mean_hp, color = &amp;quot;red&amp;quot;, size = 5, alpha = 0.2) %&amp;gt;%
  gf_lims(y = c(5,35))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/ueber-die-koeffizienten-einer-linearen-regression/index.de_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;90%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Berechnen wir nun die Schätzwerte für die Regressiongerade&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(beta_1 = cov(mpg ~ hp, data = dt) / var(~ hp, data = dt))
#&amp;gt; [1] -0.06822828
(beta_0 = mean_mpg - beta_1 * mean_hp)
#&amp;gt; [1] 30.09886&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;und zeichnen diese in unser Streudiagramm ein:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_point(mpg ~ hp, data = dt) %&amp;gt;%
  gf_hline(yintercept = ~ mean_mpg, color = &amp;quot;grey60&amp;quot;, linetype = &amp;quot;dashed&amp;quot;) %&amp;gt;%
  gf_vline(xintercept = ~ mean_hp, color = &amp;quot;grey60&amp;quot;, linetype = &amp;quot;dashed&amp;quot;) %&amp;gt;%
  gf_point(mean_mpg ~ mean_hp, color = &amp;quot;red&amp;quot;, size = 5, alpha = 0.2) %&amp;gt;%
  gf_abline(slope = ~ beta_1, intercept = ~beta_0, color = &amp;quot;dodgerblue&amp;quot;) %&amp;gt;%
  gf_lims(y = c(5,35))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/ueber-die-koeffizienten-einer-linearen-regression/index.de_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;90%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Die Funktionsvorschrift für die (blaue) Regressionsgerade lautet:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{aligned}
  \hat{y} &amp;amp;= \hat\beta_0 + \hat\beta_1 \cdot x \\ 
          &amp;amp;\approx 30.0988605 -0.0682283 \cdot x \\
          &amp;amp;\approx 30.099 -0.068 \cdot x
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;studentisieren-einmal-hin-und-einmal-zurück&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Studentisieren – einmal hin und einmal zurück&lt;/h3&gt;
&lt;p&gt;Was passiert eigentlich, wenn wir unsere &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; Werte studentisieren (aka standardisieren oder z-transformieren)?&lt;/p&gt;
&lt;p&gt;Zur Erinnerung, studentisieren geht so:
&lt;span class=&#34;math display&#34;&gt;\[x^{stud} = \frac{x - \bar{x}}{s_x}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;R&lt;/strong&gt; können wir das mit der Funktion ‘zscore’ wie folgt:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dt %&amp;gt;%
  mutate(
    hp_stud = zscore(hp),
    mpg_stud = zscore(mpg)
  ) -&amp;gt; dt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Natürlich sind die Mittelwerte nun Null und die Standardabweichungen Eins:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;c(mean( ~ hp_stud, data = dt), mean( ~ mpg_stud, data = dt))
#&amp;gt; [1] 1.040834e-17 7.112366e-17
c(sd( ~ hp_stud, data = dt), sd( ~ mpg_stud, data = dt))
#&amp;gt; [1] 1 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Der Grund für die kleinen Abweichungen von der Null beim Mittelwert
sind Rundungsfehler, die der Computer macht!&lt;/p&gt;
&lt;p&gt;Schauen wir uns nun das Streudiagramm an, zusammen mit dem Mittelpunkt &lt;span class=&#34;math inline&#34;&gt;\((0,0)\)&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_point(mpg_stud ~ hp_stud, data = dt) %&amp;gt;%
  gf_point(0 ~ 0, color = &amp;quot;red&amp;quot;, size = 5, alpha = 0.2) %&amp;gt;%
  gf_lims(y = c(-2, 2))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/ueber-die-koeffizienten-einer-linearen-regression/index.de_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;90%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;
Auch wenn die Skalierungen sich geändert haben, die Diagramme sind sehr ähnlich.&lt;/p&gt;
&lt;p&gt;Bestimmen wir die Koeffizienten der Regressionsgerade&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(beta_stud_1 = cov(mpg_stud ~ hp_stud, data = dt))
#&amp;gt; [1] -0.7761684
(beta_stud_0 = 0 - beta_stud_1 * 0)
#&amp;gt; [1] 0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;und setzen sie in das Steudiagramm ein:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/ueber-die-koeffizienten-einer-linearen-regression/index.de_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;90%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Wir können das studentisierte Problem auch wieder auf unser ursprüngliches
zurück rechnen.&lt;/p&gt;
&lt;p&gt;Die Regressionsgerade im studentisierten Problem lautet:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{aligned}
  \hat{y}^{stud} &amp;amp;= \hat\beta^{stud}_0 + \hat\beta_1^{stud} \cdot x^{stud} \\ 
          &amp;amp;\approx 0 -0.7761684 \cdot x^{stud} \\
          &amp;amp;\approx 0 -0.776 \cdot x^{stud}
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Rechnen wir nun mittels der Formel
&lt;span class=&#34;math display&#34;&gt;\[\hat\beta_1 = \hat\beta_1^{stud} \cdot \frac{s_y}{s_x}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;die Steigung um, so erhalten wir:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(b1 &amp;lt;- beta_stud_1 * sd(dt$mpg) / sd(dt$hp))
#&amp;gt; [1] -0.06822828&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Und setzen wir das in unsere Gleichung zur Bestimmung von &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_0\)&lt;/span&gt; ein:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(b0 &amp;lt;- mean(dt$mpg) - b1 * mean(dt$hp))
#&amp;gt; [1] 30.09886&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;so erhalten wir die Schätzwerte des ursprünglichen Problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ein-anderer-weg-um-die-regressionskoeffizenten-zu-bestimmen&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Ein anderer Weg um die Regressionskoeffizenten zu bestimmen…&lt;/h3&gt;
&lt;p&gt;Gehen wir das Problem noch einmal neu an. Wir suchen &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta=(\hat\beta_0, \hat\beta_1)\)&lt;/span&gt; welches &lt;span class=&#34;math inline&#34;&gt;\(QS(\hat\beta) = QS(\hat\beta_0, \hat\beta_1) = \sum\limits_{i=1}^n \left(\hat\beta_0 + \hat\beta_1 \cdot x_i - y_i \right)^2\)&lt;/span&gt; minimiert.&lt;/p&gt;
&lt;p&gt;Statt es direkt, wie oben durch Nullsetzen der partiellen Ableitungen, zu bestimmen, wählen wir nun einen mathematisch-&lt;em&gt;numerischen&lt;/em&gt; Ansatz und wollen &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta \in \mathbf{R}^2\)&lt;/span&gt; als &lt;em&gt;Optimierungsproblem&lt;/em&gt; mit Hilfe des &lt;em&gt;Gradientenverfahrens&lt;/em&gt; lösen.&lt;/p&gt;
&lt;p&gt;Beim Gradientenverfahren wird versucht, ausgehend von einem Startwert &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta^0 \in \mathbf{R}^2\)&lt;/span&gt;, gemäß der Iterationsvorschrift&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\hat\beta^{k+1} = \hat\beta^{k} + \alpha^k \cdot d^k
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;für alle &lt;span class=&#34;math inline&#34;&gt;\(k=0,1, ...\)&lt;/span&gt; eine Näherungslösung für &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta\)&lt;/span&gt; zu finden.
Dabei ist &lt;span class=&#34;math inline&#34;&gt;\(\alpha^k &amp;gt; 0\)&lt;/span&gt; eine &lt;em&gt;positive Schrittweite&lt;/em&gt; und &lt;span class=&#34;math inline&#34;&gt;\(d^k\in\mathbf{R}^n\)&lt;/span&gt; eine &lt;em&gt;Abstiegsrichtung&lt;/em&gt;, welche wir in jedem Iterationsschritt &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; so bestimmen,
dass die Folge &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta^k\)&lt;/span&gt; zu einem stationären Punkt, unserer Näherungslösung, konvergiert.&lt;/p&gt;
&lt;p&gt;Im einfachsten Fall, dem &lt;strong&gt;Verfahren des steilsten Abstieges&lt;/strong&gt;, wird der
Abstiegsvektor &lt;span class=&#34;math inline&#34;&gt;\(d^k\)&lt;/span&gt; aus dem Gradienten &lt;span class=&#34;math inline&#34;&gt;\(\nabla QS\)&lt;/span&gt; wie folgt bestimmt:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[d^k = -\nabla QS\left(\hat\beta^k\right)\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wegen
&lt;span class=&#34;math display&#34;&gt;\[
\frac{\partial}{\partial \hat\beta_0} \, QS = 2 \cdot n \cdot \left(  \hat\beta_0 + \hat\beta_1\cdot\bar{x} - \bar{y} \right)
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;und&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\frac{\partial}{\partial \hat\beta_1} \, QS = 2 \cdot \left(\hat\beta_1 \cdot \sum\limits_{i=1}^n(x_i-\bar{x})^2 - \sum\limits_{i=1}^n (x_i-\bar{x}) \cdot (y_i-\bar{y}) \right)
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;gilt:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{aligned}
\nabla QS(\hat\beta) &amp;amp;= \nabla QS(\hat\beta_0, \hat\beta_1) \\
&amp;amp;= 2 \cdot \begin{pmatrix}
n \cdot(\hat\beta_0 + \hat\beta_1\cdot\bar{x} - \bar{y})  \\
\hat\beta_1 \cdot \sum\limits_{i=1}^n(x_i-\bar{x})^2 - \sum\limits_{i=1}^n (x_i-\bar{x}) \cdot (y_i-\bar{y})
\end{pmatrix}
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir wollen hier von Anfang an mit den studentisierten Werten arbeiten, weil diese numerisch viele Vorteile haben.
Darum vereinfachen sich die beiden partiellen Ableitungen noch einmal zu:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\frac{\partial}{\partial \hat\beta_0} \, QS = 2 \cdot v
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;und&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{aligned}
\frac{\partial}{\partial \hat\beta_1} \, QS &amp;amp;= 2 \cdot \left(\hat\beta_1 \cdot \sum\limits_{i=1}^n(x_i-\bar{x})^2 - \sum\limits_{i=1}^n (x_i-\bar{x}) \cdot (y_i-\bar{y})\right) \\
 &amp;amp;= 2 \cdot (n-1) \left(\hat\beta_1 \cdot s^2_{x} - s_{x,y}\right)
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Somit gilt:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{aligned}
\nabla QS(\hat\beta) &amp;amp;= \nabla QS(\hat\beta_0, \hat\beta_1) \\
&amp;amp;= 2 \cdot \begin{pmatrix}
n \cdot \hat\beta_0 \\
 (n-1) \left(\hat\beta_1 \cdot s^2_{x} - s_{x,y}\right) 
\end{pmatrix}
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Um die Varianz und die Kovarianz nicht jedesmal neu zu berechnen, speichern
wir die Ergebnisse vorab. Ebenso, damit der Quellcode kürzer wird, speichern
wir in &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; die studentisierten Werte von &lt;span class=&#34;math inline&#34;&gt;\(hp\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(mpg\)&lt;/span&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Vorbereitungen 
var_x &amp;lt;- var(~ hp_stud, data = dt)
cov_xy &amp;lt;- cov(mpg_stud ~ hp_stud, data = dt)

n &amp;lt;- length(dt$hp_stud)

x &amp;lt;- dt$hp_stud
y &amp;lt;- dt$mpg_stud&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nun erstellen wir die &lt;span class=&#34;math inline&#34;&gt;\(QS\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(\nabla QS\)&lt;/span&gt; Funktionen:
Wir definieren diese Funktion wie folgt in &lt;strong&gt;R&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qs &amp;lt;- function(b_0, b_1) {
  sum((b_1 * x - y)**2)
}

nabla_qs &amp;lt;- function(b_0, b_1) {
  c(2 * n * b_0,
    2 * (n - 1) * (b_1 * var_x - cov_xy)
  )
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Die Schrittweite &lt;span class=&#34;math inline&#34;&gt;\(alpha\)&lt;/span&gt; bestimmen wir mit Hilfe der &lt;em&gt;Armijo-Bedingung&lt;/em&gt; und der &lt;em&gt;Backtracking Liniensuche&lt;/em&gt;:
Diese formalisiert das Konzept “genügend” in der geforderten Verringerung des Funktionswertes. Die Bedingung &lt;span class=&#34;math inline&#34;&gt;\(f(x^k + \alpha d^k) &amp;lt; f(x^k)\)&lt;/span&gt; wird modifiziert zu
&lt;span class=&#34;math display&#34;&gt;\[f(x^k + \alpha d^k) \leq f(x^k) + \sigma \alpha \left(\nabla f(x^k)\right)^T d^k,\]&lt;/span&gt;
mit &lt;span class=&#34;math inline&#34;&gt;\(\sigma\in (0,1)\)&lt;/span&gt;.
Die Armijo-Bedingung umgeht Konvergenzprobleme der einfachen Bedingung, indem sie fordert, dass die Verringerung zumindest proportional zur Schrittweite und zur Richtungsableitung &lt;span class=&#34;math inline&#34;&gt;\(\left(\nabla f(x^k)\right)^T d^k\)&lt;/span&gt; ist, mit Hilfe der Proportionalitätskonstante &lt;span class=&#34;math inline&#34;&gt;\(\sigma\)&lt;/span&gt;.
In der Praxis werden oft sehr kleine Werte verwendet, z.B. &lt;span class=&#34;math inline&#34;&gt;\(\sigma=0.0001\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Die &lt;em&gt;Backtracking-Liniensuche&lt;/em&gt; verringert die Schrittweite wiederholt um den
Faktor &lt;span class=&#34;math inline&#34;&gt;\(\rho\)&lt;/span&gt; (&lt;code&gt;rho&lt;/code&gt;) , bis die Armijo-Bedingung erfüllt ist.
Sie terminiert garantiert nach einer endlichen Anzahl von Schritten. Wesshalb wir
sie hier einsetzen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;alpha_k &amp;lt;- function(b_0, b_1, d_k, alpha = 1, sigma = 0.0001, rho = 0.5) {
  d_0 &amp;lt;- d_k[1]
  d_1 &amp;lt;- d_k[2]
  nabla &amp;lt;- nabla_qs(b_0, b_1)
  n_0 &amp;lt;- nabla[1]
  n_1 &amp;lt;- nabla[2]

  lhs &amp;lt;- qs(b_0 + alpha*d_0, b_1 + alpha*d_1)
  rhs &amp;lt;- qs(b_0, b_1) + sigma*alpha*(n_0*d_0 + n_1*d_1)

  while (lhs &amp;gt; rhs) {
    alpha &amp;lt;- rho * alpha
    lhs &amp;lt;- qs(b_0 + alpha*d_0, b_1 + alpha*d_1)
    rhs &amp;lt;- qs(b_0, b_1) + sigma*alpha*(n_0*d_0 + n_1*d_1)
  }
  return(alpha)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ein paar Einstellungen vorab:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# maximale Anzahl an Iterationen
max_iter &amp;lt;- 1000
iter &amp;lt;- 0

# Genauigkeit
eps &amp;lt;- 10**-6

# Startwerte
b_0 &amp;lt;- 0 
b_1 &amp;lt;- -1 &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Für eine vorgegebene Genauigkeit &lt;span class=&#34;math inline&#34;&gt;\(eps=10^{-6}\)&lt;/span&gt;, den Startwerten &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_0^0 = 0\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_1^0 = -1\)&lt;/span&gt; können wir somit das Verfahren starten:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;while (TRUE) {
  iter &amp;lt;- iter + 1

  d_k &amp;lt;- -nabla_qs(b_0, b_1)

  ad_ &amp;lt;- alpha_k(b_0, b_1, d_k) * d_k

  x0 &amp;lt;- b_0 + ad_[1]
  x1 &amp;lt;- b_1 + ad_[2]

  if ((abs(b_0 - x0) &amp;lt; eps) &amp;amp; (abs(b_1 - x1) &amp;lt; eps) | (iter &amp;gt; max_iter)) {
    break
  }
  b_0 &amp;lt;- x0
  b_1 &amp;lt;- x1
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wir haben somit mit &lt;span class=&#34;math inline&#34;&gt;\(203\)&lt;/span&gt; Iterationsschritten das folgende Ergebnisse für die Regressionskoeffizienten:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\hat\beta_0^{stud} = 0` \qquad \hat\beta_1 {stud} = -0.7761689\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Betrachten wir die daraus erstellte Regressionsgerade:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/ueber-die-koeffizienten-einer-linearen-regression/index.de_files/figure-html/unnamed-chunk-18-1.png&#34; width=&#34;90%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Um die ursprünglichen Regressionskoeffizenten zu erhalten müssen wir zurück rechnen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(b1 &amp;lt;- b_1 * sd(dt$mpg) / sd(dt$hp))
#&amp;gt; [1] -0.06822832
(b0 &amp;lt;- mean(dt$mpg) -  b1 * mean(dt$hp))
#&amp;gt; [1] 30.09887&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Die Geradengleichung für unser ursprüngliches Problem lautet somit:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{aligned}
  \hat{y} &amp;amp;= \hat\beta_0 + \hat\beta_1 \cdot x \\ 
          &amp;amp;\approx 30.0988668 -0.0682283 \cdot x \\
          &amp;amp;\approx 30.099 -0.068 \cdot x
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;die-r-funktion-optim&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Die R Funktion &lt;code&gt;optim&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;In &lt;strong&gt;R&lt;/strong&gt; gibt es bessere Optimierungsmethoden, als die hier verwendete.
Zum Beispiel kännen wir die Funktion &lt;code&gt;optim&lt;/code&gt; verwenden.
Die Funktion &lt;code&gt;optim&lt;/code&gt; benötigt die zu optimierende &lt;span class=&#34;math inline&#34;&gt;\(f(x)\)&lt;/span&gt; und
ggf. die Gradientenfunkt &lt;span class=&#34;math inline&#34;&gt;\(gf(x)\)&lt;/span&gt; sowie einen Startpunkt &lt;span class=&#34;math inline&#34;&gt;\(x^0\)&lt;/span&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;f &amp;lt;- function(beta) {
  qs(beta[1], beta[2])
}

grf &amp;lt;- function(beta) {
  nabla_qs(beta[1], beta[2])
}

# Der eigentliche Aufruf von optim:
ergb &amp;lt;- optim(c(0,-0.5),f , grf, method = &amp;quot;CG&amp;quot;)

# Auslesen der Schätzer aus dem Ergbnis:
(optim_beta_0 &amp;lt;- ergb$par[1])
#&amp;gt; [1] 0
(optim_beta_1 &amp;lt;- ergb$par[2])
#&amp;gt; [1] -0.7761683&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wir erhalten somit für das studentisierte Problem die Gerade:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{aligned}
  \hat{y}^{stud} &amp;amp;= \hat\beta_0^{stud} + \hat\beta_1^{stud} \cdot x^{stud} \\ 
          &amp;amp;\approx 0 -0.7761683 \cdot  x^{stud} \\
          &amp;amp;\approx 0 -0.776 \cdot  x^{stud}
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Für das ursprüngliche Problem rechnen wir mittels&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;optim_b1 &amp;lt;- optim_beta_1 * sd(dt$mpg) / sd(dt$hp)
optim_b0 &amp;lt;- mean(dt$mpg) -  optim_b1 * mean(dt$hp)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;um und erhalten:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{aligned}
  \hat{y} &amp;amp;= \hat\beta_0 + \hat\beta_1 \cdot x \\ 
          &amp;amp;\approx 30.0988601 -0.0682283 \cdot x \\
          &amp;amp;\approx 30.099 -0.068 \cdot x
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;idee-summe-der-absoluten-abweichungen&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;2. Idee: Summe der absoluten Abweichungen&lt;/h2&gt;
&lt;p&gt;Wir ändern nun die Abweichungsmessfunktion von der &lt;em&gt;Q&lt;/em&gt;uadrat-&lt;em&gt;S&lt;/em&gt;umme hin zu
den &lt;strong&gt;A&lt;/strong&gt;bsolut-&lt;em&gt;S&lt;/em&gt;ummen:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[AS = AS(\hat\beta) = AS(\hat\beta_0, \hat\beta_1) = \sum_{i=1}^n |\hat{y}_i - y_i|\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Auch hier wollen wir mit den studentisierten Daten arbeiten und stellen
die Funktion der &lt;em&gt;A&lt;/em&gt;bsolut-&lt;em&gt;S&lt;/em&gt;ummen auf:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Absolute Abweichungssummen
as &amp;lt;- function(b_0, b_1) {
  return(sum(abs(b_0 + b_1 * x - y)))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Danach konstuieren wir die zu optimierende Funktion &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Zu optimierende Funktion
f &amp;lt;- function(beta) {
  as(beta[1], beta[2])
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Diesmal nutzen wir &lt;code&gt;optim&lt;/code&gt; ohne eine Gradientenfunktion:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ergb &amp;lt;- optim(c(0,-1), f)

# Schätzer auslesen
(opti_as_beta_0 &amp;lt;- ergb$par[1])
#&amp;gt; [1] -0.1304518
(opti_as_beta_1 &amp;lt;- ergb$par[2])
#&amp;gt; [1] -0.6844911&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Schauen wir uns nun die so erhaltene Gerade im Vergleich mit der ‘normalen’ Regressionsgerade an:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/ueber-die-koeffizienten-einer-linearen-regression/index.de_files/figure-html/unnamed-chunk-25-1.png&#34; width=&#34;90%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In grün und gestrichelt sehen wir die Gerade aus der &lt;em&gt;Idee der quadratsichen Abweichungssummen&lt;/em&gt;, in blau die aus der &lt;em&gt;Idee der absoluten Abweichungssummen&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Für unser ursprüngliches Problem rechnen wir um:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Umrechnen in die urspüngliche Fragestellung
(as_b1 &amp;lt;- opti_as_beta_1 * sd(dt$mpg) / sd(dt$hp))
#&amp;gt; [1] -0.06016948
(as_b0 &amp;lt;- (mean(dt$mpg) - as_b1 * mean(dt$hp)) + opti_as_beta_0 * sd(dt$mpg))
#&amp;gt; [1] 28.13051&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Und die dazu gehörige Darstellung:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/ueber-die-koeffizienten-einer-linearen-regression/index.de_files/figure-html/unnamed-chunk-27-1.png&#34; width=&#34;90%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Die Funktionsvorschrift für die (blaue) Regressionsgerade lautet:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{aligned}
  \hat{y} &amp;amp;= \hat\beta_0 + \hat\beta_1 \cdot x \\ 
          &amp;amp;\approx 28.1305094 -0.0601695 \cdot x \\
          &amp;amp;\approx 28.131 -0.06 \cdot x
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Diese Methode nennt sich &lt;strong&gt;Median-Regression&lt;/strong&gt; und ein ein Spezialfall der &lt;strong&gt;Quantilsregression&lt;/strong&gt;, die sich u.a. mit dem R-Paket &lt;a href=&#34;https://cran.r-project.org/web/packages/quantreg/index.html&#34;&gt;&lt;em&gt;quantreg&lt;/em&gt;&lt;/a&gt;
unmittelbar umsetzen lässt:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(quantreg)
ergmedianreg &amp;lt;- rq(mpg ~ hp, data = dt)
coef(ergmedianreg)
#&amp;gt; (Intercept)          hp 
#&amp;gt; 28.13050847 -0.06016949&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;idee-betrag-der-summe-der-abweichungen&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;1. Idee: Betrag der Summe der Abweichungen&lt;/h2&gt;
&lt;p&gt;Wenn wir die Summe der Abweichungen &lt;span class=&#34;math inline&#34;&gt;\(\sum\limits_{i=1}^n \hat{e}_i\)&lt;/span&gt; minimieren
wollen, dann ist es sinnvoll den Betrag davon zu minimieren.
Wir suchen also die Schätzer &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_0\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_1\)&lt;/span&gt;, so dass der Ausdruck
&lt;span class=&#34;math display&#34;&gt;\[
\left| \sum_{i=1}^n \hat{e}_i \right| = \left| \sum_{i=1}^n (\hat\beta_0 + \hat\beta_1 \cdot x_i - y_i) \right|
\]&lt;/span&gt;
minimal ist.&lt;/p&gt;
&lt;p&gt;Wegen:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{aligned}
\sum_{i=1}^n (\hat\beta_0 + \hat\beta_1 \cdot x_i - y_i)
&amp;amp;= \sum_{i=1}^n \hat\beta_0 + \sum_{i=1}^n \hat\beta_1 \cdot x_i - \sum_{i=1}^n y_i \\
&amp;amp;= n \cdot \hat\beta_0 + \hat\beta_1 \cdot \sum_{i=1}^n x_i - \sum_{i=1}^n y_i \\
&amp;amp;= n \cdot \hat\beta_0 + \hat\beta_1 \cdot n \cdot \bar{x} - n \cdot \bar{y} \\
&amp;amp;= n \cdot \left( \hat\beta_0 + \hat\beta_1 \cdot \bar{x} - \bar{y} \right) \\
&amp;amp;= n \cdot \left( \hat\beta_0 - \bar{y} + \hat\beta_1 \cdot \bar{x}  \right)
\end{aligned}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;können wir das absolute Mininum bei &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_0 - \bar{y} =0\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_1 \cdot \bar{x}=0\)&lt;/span&gt; erreichen, was zur Lösung
&lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_0 =\bar{y}\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_1 = 0\)&lt;/span&gt; führt.
Dies ist unser &lt;em&gt;Nullmodel&lt;/em&gt; in dem die &lt;span class=&#34;math inline&#34;&gt;\(x_i\)&lt;/span&gt; keinen Einfluss auf die &lt;span class=&#34;math inline&#34;&gt;\(y_i\)&lt;/span&gt; haben und
wir daher pauschal die &lt;span class=&#34;math inline&#34;&gt;\(y_i\)&lt;/span&gt; mit &lt;span class=&#34;math inline&#34;&gt;\(\hat{y}_i=\bar{y}\)&lt;/span&gt;, also dem Mittelwert der &lt;span class=&#34;math inline&#34;&gt;\(y_i\)&lt;/span&gt; abschätzen.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;zusammenfassung&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Zusammenfassung&lt;/h2&gt;
&lt;p&gt;Als Vergleich können wir uns die Quadratsumme &lt;span class=&#34;math inline&#34;&gt;\(QS\)&lt;/span&gt; und Absolutsumme &lt;span class=&#34;math inline&#34;&gt;\(AS\)&lt;/span&gt; der drei
Modelle einmal ansehen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Quadratische Abweichungssummen
qs &amp;lt;- function(b_0, b_1) {
  sum(((b_0 + b_1 * dt$hp) - dt$mpg )**2)
}

# Absolute Abweichungssummen
as &amp;lt;- function(b_0, b_1) {
  sum(abs((b_0 + b_1 * dt$hp) - dt$mpg))
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Quadratsummen:
quad_sum &amp;lt;- c(qs(b0, b1), qs(as_b0, as_b1), qs(mean_mpg, 0))

# Absolutsummen:
abs_sum &amp;lt;- c(as(b0, b1), as(as_b0, as_b1), as(mean_mpg, 0))

tab &amp;lt;- tibble(
  sums = c(quad_sum, abs_sum),
  sum_type = rep(c(&amp;quot;quad&amp;quot;, &amp;quot;abs&amp;quot;), each = 3),
  methode = rep(c(&amp;quot;Idee 3&amp;quot;, &amp;quot;Idee 2&amp;quot;, &amp;quot;Idee 1&amp;quot;), 2)
)

pivot_wider(tab, names_from=sum_type, values_from=sums, names_sort=T)
#&amp;gt; # A tibble: 3 x 3
#&amp;gt;   methode   abs  quad
#&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
#&amp;gt; 1 Idee 3   93.0  448.
#&amp;gt; 2 Idee 2   87.3  477.
#&amp;gt; 3 Idee 1  151.  1126.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;reproduzierbarkeitsinformationen&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Reproduzierbarkeitsinformationen&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; R version 4.1.0 (2021-05-18)
#&amp;gt; Platform: x86_64-apple-darwin17.0 (64-bit)
#&amp;gt; Running under: macOS Catalina 10.15.7
#&amp;gt; 
#&amp;gt; Locale: de_DE.UTF-8 / de_DE.UTF-8 / de_DE.UTF-8 / C / de_DE.UTF-8 / de_DE.UTF-8
#&amp;gt; 
#&amp;gt; Package version:
#&amp;gt;   mosaic_1.8.3  quantreg_5.86 tidyr_1.1.3   xfun_0.24&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>GraalVM 21.0.0, PyPy 3.7-7.3.3 und Python 3.9.4 im kurzen Test</title>
      <link>https://sefiroth.net/nab/post/2021-04-08-graalvm-21-0-0-pypy-3-7-7-3-3-und-python3-9-2-im-kurzen-test/</link>
      <pubDate>Thu, 08 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/2021-04-08-graalvm-21-0-0-pypy-3-7-7-3-3-und-python3-9-2-im-kurzen-test/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/post/2021-04-08-graalvm-21-0-0-pypy-3-7-7-3-3-und-python3-9-2-im-kurzen-test/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;ein-kleiner-speed-test-für-python3-pypy-und-graalpython&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Ein kleiner Speed-Test für Python3, pypy und GraalPython&lt;/h2&gt;
&lt;p&gt;Heute habe ich mit Pyenv einen kleinen Speed-Test für CPython3, PyPy und GraalPython gemacht:&lt;/p&gt;
&lt;p&gt;Grundlage war das n-Damen Problem mit dem &lt;a href=&#34;https://github.com/sol-prog/N-Queens-Puzzle/blob/master/nqueens.py&#34;&gt;Quellcode&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Die Ergebnisse:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CPython (3.9.4): Calculation took 316.97 seconds&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PyPy (3.7-7.3.3): Calculation took 10.14 seconds&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GraalPython (21.0.0): Calculation took 15.75 seconds&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;test-vom-8.6.2021&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Test vom 8.6.2021&lt;/h2&gt;
&lt;p&gt;Die Ergebnisse für n = 11: (python -m timeit -r 5 -n 1 ‘import nqueens; nqueens.main()’)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CPython (3.9.4): 1 loops, best of 5: 7.03 sec per loop&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PyPy (3.7-7.3.4):&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GraalPython (21.1.0): 1 loops, best of 5: 7.01 sec per loop&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Über die t-Verteilung mit einem bzw. zwei Freiheitsgraden</title>
      <link>https://sefiroth.net/nab/post/2021-02-14-uber-die-t-verteilung-mit-einem-bzw-zwei-freiheitsgraden/</link>
      <pubDate>Wed, 17 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/2021-02-14-uber-die-t-verteilung-mit-einem-bzw-zwei-freiheitsgraden/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/post/2021-02-14-uber-die-t-verteilung-mit-einem-bzw-zwei-freiheitsgraden/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;vorbereitungen-für-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Vorbereitungen für R&lt;/h2&gt;
&lt;p&gt;Für die graphischen Ausgaben nutzen wir R und das Paket &lt;code&gt;mosaic&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mosaic)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;vorbemerkungen-und-notationen&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Vorbemerkungen und Notationen&lt;/h2&gt;
&lt;p&gt;Da alle t-Verteilungen symmetrisch sind, betrachten wir im wesendlichen nur den
positiven Teil.&lt;/p&gt;
&lt;p&gt;Zwei reelle Funktionen &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(g\)&lt;/span&gt; sind genau dann, im Sinne von de Bruijn&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; (§1.4), &lt;strong&gt;asymptotisch äquivalent&lt;/strong&gt; &lt;span class=&#34;math inline&#34;&gt;\(f \sim g\)&lt;/span&gt;, wenn&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\lim\limits_{x \to \infty} \frac{f(x)}{g(x)} = 1
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;gilt.&lt;/p&gt;
&lt;p&gt;Ist &lt;span class=&#34;math inline&#34;&gt;\(f \sim g\)&lt;/span&gt;, so können wir auch&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f(x) = g(x)\cdot(1+o(1))
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;dafür schreiben.
Dabei ist &lt;span class=&#34;math inline&#34;&gt;\(h(x) = o(\phi(x))\)&lt;/span&gt; für &lt;span class=&#34;math inline&#34;&gt;\(x \to \infty\)&lt;/span&gt;, falls &lt;span class=&#34;math inline&#34;&gt;\(\lim\limits_{x \to \infty} \frac{h(x)}{\phi(x)} = 0\)&lt;/span&gt; gilt.
Aus der asymptotischen Äquivalenz von &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(g\)&lt;/span&gt; folgt nun direkt:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\lim\limits_{x \to \infty}\frac{f(x)}{g(x)}-1 =\frac{f(x)-g(x)}{g(x)} = 0
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Mit &lt;span class=&#34;math inline&#34;&gt;\(h(x) = \frac{f(x)-g(x)}{g(x)}\)&lt;/span&gt; ist &lt;span class=&#34;math inline&#34;&gt;\(h(x) = o(1)\)&lt;/span&gt; und daher &lt;span class=&#34;math inline&#34;&gt;\(f(x)-g(x) = g(x)o(1)\)&lt;/span&gt; und schliesslich &lt;span class=&#34;math inline&#34;&gt;\(f(x) = g(x)+g(x)o(1)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Ein wichtiges Korrolar sagt:&lt;/p&gt;
&lt;p&gt;Ist &lt;span class=&#34;math inline&#34;&gt;\(f \sim g\)&lt;/span&gt;, so ist auch &lt;span class=&#34;math inline&#34;&gt;\(\log(f) \sim \log(g)\)&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;die-t-verteilung-im-allgemeinen&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Die t-Verteilung im Allgemeinen&lt;/h2&gt;
&lt;p&gt;Die Dichtefunktion der t-Verteilung lauten im Allgemeinen:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_n(x) = \frac{\Gamma\left(\frac{n+1}{2}\right)} {\sqrt{n\pi}~\Gamma\left(\frac{n}{2}\right)}\left(1+\frac{x^{2}}{n}\right)^{-\frac{n+1}{2}}\quad \mathrm{für}\quad -\infty &amp;lt; x &amp;lt; +\infty
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;wobei wir mit &lt;span class=&#34;math inline&#34;&gt;\(\Gamma(x)\)&lt;/span&gt; die Gammafunktion&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\Gamma(x)=\int\limits_{0}^{+\infty}t^{x-1}e^{-t}\operatorname{d}t
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;bezeichnen.
Für einige &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; nimmt die Gammafunktion leicht zu berechnende Werte an:&lt;/p&gt;
&lt;p&gt;So ist für alle &lt;span class=&#34;math inline&#34;&gt;\(n\in\mathbf{N_0}\)&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(\Gamma(n+1) = n!\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(\Gamma\left(n + \frac{1}{2}\right) = \frac{(2n)!}{n!4^n}\sqrt{\pi}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;mit der gewöhnlichen Fakultät &lt;span class=&#34;math inline&#34;&gt;\(n! = \prod_{i=0}^n i\)&lt;/span&gt;, wobei per Definition &lt;span class=&#34;math inline&#34;&gt;\(0!=1\)&lt;/span&gt; ist.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;die-t-verteilung-mit-einem-freiheitsgrad&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Die t-Verteilung mit einem Freiheitsgrad&lt;/h2&gt;
&lt;p&gt;Für &lt;span class=&#34;math inline&#34;&gt;\(f_1(x)\)&lt;/span&gt; ergibt sich somit:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{align*}
f_1(x) &amp;amp;= \frac{\Gamma\left(\frac{n+1}{2}\right)} {\sqrt{n\pi}~\Gamma\left(\frac{n}{2}\right)}\left(1+\frac{x^{2}}{n}\right)^{-\frac{n+1}{2}} \\
 &amp;amp;= \frac{\Gamma\left(\frac{2}{2}\right)} {\sqrt{\pi}~\Gamma\left(\frac{1}{2}\right)}\left(1+x^{2}\right)^{-\frac{2}{2}} \\
 &amp;amp;= \frac{\Gamma\left(1\right)} {\sqrt{\pi}~\Gamma\left(\frac{1}{2}\right)}\left(1+x^{2}\right)^{-1} \\
\end{align*}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wegen &lt;span class=&#34;math inline&#34;&gt;\(\Gamma(1) = 0! = 1\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(\Gamma\left(\frac{1}{2}\right)=\sqrt{\pi}\)&lt;/span&gt; ergibt sich nun:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{align*}
f_1(x) &amp;amp;= \frac{1} {\sqrt{\pi} \cdot \sqrt{\pi}} \cdot \left(1+x^{2}\right)^{-1} \\
       &amp;amp;= \frac{1}{\pi} \cdot \frac{1}{1+x^{2}} 
\end{align*}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Das ist die Dichtefunktion der standardisierten Cauchy-Verteilung&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_{(\mu,\lambda)}(x) = \frac{1}{\pi} \cdot \frac{\lambda}{\lambda^2+(x-\mu)^2}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;mit (&lt;span class=&#34;math inline&#34;&gt;\(\mu = 0\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(\lambda=1\)&lt;/span&gt;), welche – bekanntermaßen – keinen Erwartungwert hat.&lt;/p&gt;
&lt;p&gt;Wegen&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{align*}
\lim_{x \to +\infty} \frac{f_1(k \cdot x)}{f_1(x)} 
      &amp;amp;= \lim_{x \to +\infty} \frac{\frac{1}{\pi} \cdot \frac{1}{1+(kx)^{2}}}{\frac{1}{\pi} \cdot \frac{1}{1+x^{2}}} = \lim_{x \to +\infty} \frac{1+x^2}{1+k^2x^2} \\
      &amp;amp;=\lim_{x \to +\infty} \frac{\frac{1}{x^2}+\frac{x^2}{x^2}}{\frac{1}{x^2}+k^2\frac{x^2}{x^2}} =\frac{1}{k^2}=k^{-2}
\end{align*}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;für alle reellen &lt;span class=&#34;math inline&#34;&gt;\(k&amp;gt;0\)&lt;/span&gt; ist &lt;span class=&#34;math inline&#34;&gt;\(f_1(x)\)&lt;/span&gt; eine regulär variierende Funktion mit Variationsindex &lt;span class=&#34;math inline&#34;&gt;\(\rho = -2\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Die Überlebensfunktion zur t-Verteilung mit einem Freiheitsgrad lautet nun:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\overline{F}_1(x) = \int_x^\infty f_1(t) \operatorname{d}t = \frac{1}{\pi} \cdot \int_x^\infty  \frac{1}{1+x^{2}} \operatorname{d}t = \frac{\arctan(x)}{\pi}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;da wir das optionale &lt;span class=&#34;math inline&#34;&gt;\(+C\)&lt;/span&gt; mit &lt;span class=&#34;math inline&#34;&gt;\(C=0\)&lt;/span&gt; annehmen dürfen.&lt;/p&gt;
&lt;p&gt;Es gilt nun:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\arctan`(x)= \frac{1}{1+x^2} \to \frac{1}{x^2} \text{ für } x\to \infty
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Genauer gilt wegen&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\lim\limits_{x \to \infty} \frac{\frac{1}{1+x^2}}{\frac{1}{x^2}} 
 = \lim\limits_{x \to \infty} \frac{x^2}{1+x^2} =1,
\]&lt;/span&gt;
dass &lt;span class=&#34;math inline&#34;&gt;\(\frac{1}{1+x^2} \sim \frac{1}{x^2}\)&lt;/span&gt;,
also asymptotisch äquivalent sind und somit auch
&lt;span class=&#34;math inline&#34;&gt;\(\log\left(\frac{1}{1+x^2}\right) \sim \log\left(\frac{1}{x^2}\right)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Zusammen gefasst gilt somit:
&lt;span class=&#34;math display&#34;&gt;\[
 \log\left(\frac{1}{\pi} \cdot \frac{1}{1+x^{2}}\right) \to -2\log(x) - \log(\pi) \text{ für } x \to \infty
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Sei &lt;span class=&#34;math inline&#34;&gt;\(f_1^*(x) = C \cdot x^{-\alpha}\)&lt;/span&gt; mit &lt;span class=&#34;math inline&#34;&gt;\(\alpha = 2\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(C=\frac{1}{\pi} \approx0.3183\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Schauen wir uns das einmal als Grafik an:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lower_bound &amp;lt;- 2
upper_bound &amp;lt;- 100
dfree &amp;lt;- 1

f_star &amp;lt;- function(x) {
  alpha &amp;lt;- 2
  C &amp;lt;- 1/pi
  C * x**(-alpha)
}

x &amp;lt;- seq(lower_bound, upper_bound, 0.1)

gf_dist(&amp;quot;t&amp;quot;, df = dfree, 
        xlim = c(lower_bound, upper_bound), 
        color = &amp;quot;darkred&amp;quot;) %&amp;gt;%
  gf_line(f_star(x) ~ x, 
          color = &amp;quot;darkgreen&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/2021-02-14-uber-die-t-verteilung-mit-einem-bzw-zwei-freiheitsgraden/index_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;384&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Hier eine doppelt-logarithmische Darstellung:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_dist(&amp;quot;t&amp;quot;, df = dfree, 
        xlim = c(lower_bound, upper_bound), 
        color = &amp;quot;darkred&amp;quot;) %&amp;gt;%
  gf_line( f_star(x) ~ x, 
           color = &amp;quot;darkgreen&amp;quot;) %&amp;gt;%
  gf_refine(
    scale_x_log10(),
    scale_y_log10()
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/2021-02-14-uber-die-t-verteilung-mit-einem-bzw-zwei-freiheitsgraden/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;384&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Wie groß ist nun der (absolute) Fehler zwischen &lt;span class=&#34;math inline&#34;&gt;\(f_1^*\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(f_1\)&lt;/span&gt;?&lt;/p&gt;
&lt;p&gt;Eine Grafik von &lt;span class=&#34;math inline&#34;&gt;\(f_1^*-f_1\)&lt;/span&gt; zeigt:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- seq(1,1000,1)
  gf_line(x**-2 - 1/(1+x**2) ~ x, 
           color = &amp;quot;darkgreen&amp;quot;) %&amp;gt;%
  gf_refine(
    scale_x_log10(),
    scale_y_log10()
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/2021-02-14-uber-die-t-verteilung-mit-einem-bzw-zwei-freiheitsgraden/index_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;384&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Genauer gilt:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_1^*(x) - f_1(x) = \frac{1}{x^2+x^4}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir können also für ein hinreichend großes &lt;span class=&#34;math inline&#34;&gt;\(x &amp;gt;&amp;gt; 1\)&lt;/span&gt; statt &lt;span class=&#34;math inline&#34;&gt;\(f_1\)&lt;/span&gt; auch &lt;span class=&#34;math inline&#34;&gt;\(f_1^*\)&lt;/span&gt;
verwenden und erhalten somit:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{align*}
\overline{F}_1(x) &amp;amp;\approx \int_x^\infty f_1^*(t) \operatorname{d}t 
  = \int_x^\infty  C \cdot t^{-\alpha} \operatorname{d}t \\
  &amp;amp;= \frac{1}{\pi} \cdot \int_x^\infty  t^{-2} \operatorname{d}t
  = \frac{1}{\pi}\left[\lim\limits_{\epsilon \to \infty} \left(-\epsilon^{-1}\right) -\left(-x^{-1}\right)\right]\\
  &amp;amp;= \frac{1}{\pi}\cdot\left[0 + \frac{1}{x}\right] = \frac{1}{\pi \cdot x}
\end{align*}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Wie hinreichend ist hier hinreichend groß?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Taleb schreibt an dieser Stelle gerne, dass man jenseits des &lt;em&gt;Karamata-Punktes&lt;/em&gt;
die &lt;em&gt;Karamata-Konstante&lt;/em&gt; anwenden kann.
Beides Begriffe, die keine echte Definition haben und ausserhalb der Sphäre von Taleb auch kaum Verwendung finden.&lt;/p&gt;
&lt;p&gt;Die &lt;em&gt;Karamata-Konstante&lt;/em&gt; ist &lt;span class=&#34;math inline&#34;&gt;\(\rho = -\alpha\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Der &lt;em&gt;Karamata-Punkt&lt;/em&gt; bleibt nebulös. Vermutlich könnte man hier so argumentieren:&lt;/p&gt;
&lt;p&gt;Wenn die Fehler zwischen &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(f^*\)&lt;/span&gt; hinreichend klein ist.&lt;/p&gt;
&lt;p&gt;Hierfür könnte man einen absoluten Fehler oder einen relativen Fehler als Maßstab ansehen.&lt;/p&gt;
&lt;p&gt;Für einen relativen Fehler vielleicht &lt;span class=&#34;math inline&#34;&gt;\(\frac{f^*-f}{x} &amp;lt; k\)&lt;/span&gt;?&lt;/p&gt;
&lt;p&gt;Oder man betrachtet hier gleich &lt;span class=&#34;math inline&#34;&gt;\(\frac{f^*-f}{\log(x)} &amp;lt; k^*\)&lt;/span&gt;?&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;t-verteilung-mit-zwei-freiheitsgeraden&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;t-Verteilung mit zwei Freiheitsgeraden&lt;/h2&gt;
&lt;p&gt;Für &lt;span class=&#34;math inline&#34;&gt;\(f_2(x)\)&lt;/span&gt; ergibt sich somit:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{align*}
f_2(x) &amp;amp;= \frac{\Gamma\left(\frac{n+1}{2}\right)} {\sqrt{n\pi}~\Gamma\left(\frac{n}{2}\right)}\left(1+\frac{x^{2}}{n}\right)^{-\frac{n+1}{2}} \\
       &amp;amp;= \frac{\Gamma\left(\frac{3}{2}\right)} {\sqrt{2\pi}~\Gamma\left(\frac{2}{2}\right)}\left(1+\frac{x^{2}}{2}\right)^{-\frac{3}{2}} \\
       &amp;amp;= \frac{\Gamma\left(\frac{3}{2}\right)} {\sqrt{2\pi}~\Gamma\left(1\right)}\left(1+\frac{x^{2}}{2}\right)^{-\frac{3}{2}} \\
\end{align*}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wegen &lt;span class=&#34;math inline&#34;&gt;\(\Gamma(1) = 0! = 1\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(\Gamma\left(\frac{3}{2}\right)=\frac{\sqrt{\pi}}{2}\)&lt;/span&gt; ergibt sich nun:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{align*}
f_2(x) &amp;amp;= \frac{1}{2\sqrt{2}} \cdot \left(1+\frac{x^{2}}{2}\right)^{-\frac{3}{2}} \\
  &amp;amp;= \frac{1}{\sqrt[2]{2^3} \cdot \sqrt[2]{\left(1+\frac{x^{2}}{2}\right)^3}}  \\
  &amp;amp;= \frac{1}{(x^2+2)^{\frac{3}{2}}} \\
  &amp;amp;= \frac{1}{\sqrt{(x^2+2)^3}}
\end{align*}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wegen&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{align*}
\lim_{x \to +\infty} \frac{f_2(k \cdot x)}{f_2(x)} 
    &amp;amp;= \lim_{x \to +\infty} \frac{\frac{1}{\sqrt{((k\cdot x)^2+2)^3}}}{\frac{1}{\sqrt{(x^2+2)^3}}} = \lim_{x \to +\infty} \frac{\sqrt{(x^2+2)^3}}{\sqrt{((k\cdot x)^2+2)^3}} \\
    &amp;amp;= \lim_{x \to +\infty} \left(\frac{x^2+2}{k^2x^2+2}\right)^\frac{3}{2}=\lim_{x \to +\infty} \left(\frac{\frac{x^2}{x^2}+\frac{2}{x^2}}{k^2\frac{x^2}{x^2}+\frac{2}{x^2}}\right)^\frac{3}{2} \\ 
    &amp;amp;=\left(\frac{1}{k^2}\right)^\frac{3}{2}=\frac{1}{k^3}=k^{-3}
\end{align*}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;für alle reellen &lt;span class=&#34;math inline&#34;&gt;\(k&amp;gt;0\)&lt;/span&gt; ist &lt;span class=&#34;math inline&#34;&gt;\(f_2(x)\)&lt;/span&gt; eine regulär variierende Funktion mit Variationsindex &lt;span class=&#34;math inline&#34;&gt;\(\rho = -3\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Die Überlebensfunktion zur t-Verteilung mit einem Freiheitsgrad lautet nun:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{align*}
\overline{F}_2(x) &amp;amp;= \int_x^\infty f_2(t) \operatorname{d}t = \int_x^\infty \frac{1}{\sqrt{(t^2+2)^3}} \operatorname{d}t \\
  &amp;amp;= \frac{x}{2 \cdot \sqrt{x^2+2}}
\end{align*}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;da wir das optionale &lt;span class=&#34;math inline&#34;&gt;\(+C\)&lt;/span&gt; mit &lt;span class=&#34;math inline&#34;&gt;\(C=0\)&lt;/span&gt; annehmen dürfen.&lt;/p&gt;
&lt;p&gt;Es gilt für jedes feste &lt;span class=&#34;math inline&#34;&gt;\(k&amp;gt;0\)&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{align*}
\lim\limits_{x \to \infty} \frac{\overline{F}_2(k x)}{\overline{F}_2(x)} &amp;amp;= \lim\limits_{x \to \infty}k \cdot \sqrt{\frac{x^2+2}{k^2x^2+2}} \\
  &amp;amp;=  k \cdot \lim\limits_{x \to \infty}  \sqrt{\frac{1}{k^2} \cdot \frac{x^2+2}{x^2+\frac{2}{k^2}}} \\
  &amp;amp;= \frac{k}{k} \cdot \lim\limits_{x \to \infty}  \sqrt{ \frac{x^2+2}{x^2+\frac{2}{k^2}}} = 1\end{align*}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wegen&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\lim_{x \to \infty} \frac{\frac{1}{\sqrt{(x^2+2)^3}}}{\frac{1}{x^3}} =\lim\limits_{x \to \infty} \frac{x^3}{(\sqrt{x^2+2})^3} = \lim\limits_{x \to \infty} \left(\frac{x}{\sqrt{x^2+2}}\right)^3= 1
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;ist &lt;span class=&#34;math inline&#34;&gt;\(f_2 \sim f^*_2\)&lt;/span&gt; und somit auch &lt;span class=&#34;math inline&#34;&gt;\(\log(f_2) \sim \log(f^*_2)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Aus &lt;span class=&#34;math inline&#34;&gt;\(\log\left(\frac{1}{x^3}\right) = \log(1)- 3\cdot\log(x)\)&lt;/span&gt; können wir daher
auf &lt;span class=&#34;math inline&#34;&gt;\(\alpha = 3\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(C=1\)&lt;/span&gt; schliesse und schreiben:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f_2^*(x) = C \cdot x^{-\alpha} = x^{-3}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Schauen wir uns das einmal als Grafik an:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lower_bound &amp;lt;- 2
upper_bound &amp;lt;- 100
dfree &amp;lt;- 2

f_star &amp;lt;- function(x) {
  alpha &amp;lt;- 3
  C &amp;lt;- 1
  C * x**(-alpha)
}

x &amp;lt;- seq(lower_bound, upper_bound, 0.1)

gf_dist(&amp;quot;t&amp;quot;, df = dfree, 
        xlim = c(lower_bound, upper_bound), 
        color = &amp;quot;darkred&amp;quot;) %&amp;gt;%
  gf_line(f_star(x) ~ x, 
          color = &amp;quot;darkgreen&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/2021-02-14-uber-die-t-verteilung-mit-einem-bzw-zwei-freiheitsgraden/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;384&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Hier eine doppelt-logarithmische Darstellung:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_dist(&amp;quot;t&amp;quot;, df = dfree, 
        xlim = c(lower_bound, upper_bound), 
        color = &amp;quot;darkred&amp;quot;) %&amp;gt;%
  gf_line( f_star(x) ~ x, 
           color = &amp;quot;darkgreen&amp;quot;) %&amp;gt;%
  gf_refine(
    scale_x_log10(),
    scale_y_log10()
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/2021-02-14-uber-die-t-verteilung-mit-einem-bzw-zwei-freiheitsgraden/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;384&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Wie groß ist nun der absolute Fehler zwischen &lt;span class=&#34;math inline&#34;&gt;\(f_2^*\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(f_2\)&lt;/span&gt; genau?&lt;/p&gt;
&lt;p&gt;Eine Grafik zeigt von &lt;span class=&#34;math inline&#34;&gt;\(f_2^*-2_1\)&lt;/span&gt; zeigt:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- seq(1,1000,1)
  gf_line(f_star(x) - dt(x,df=2) ~ x, 
           color = &amp;quot;darkgreen&amp;quot;) %&amp;gt;%
  gf_refine(
    scale_x_log10(),
    scale_y_log10()
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/2021-02-14-uber-die-t-verteilung-mit-einem-bzw-zwei-freiheitsgraden/index_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;384&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;fussnoten&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Fussnoten&lt;/h2&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://de.wikipedia.org/wiki/Nicolaas_Govert_de_Bruijn&#34;&gt;de Bruijn, N. G.&lt;/a&gt; (1981), &lt;a href=&#34;https://books.google.com/books?id=Oqj9AgAAQBAJ&#34;&gt;Asymptotic Methods in Analysis&lt;/a&gt;, Dover Publications, ISBN 9780486642215&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Behäbige Funktionen aka slowly varying function</title>
      <link>https://sefiroth.net/nab/post/2021-02-13-behabige-funktionen-aka-slowly-varying-function/</link>
      <pubDate>Sat, 13 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/2021-02-13-behabige-funktionen-aka-slowly-varying-function/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/post/2021-02-13-behabige-funktionen-aka-slowly-varying-function/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Reelle Funktionen, die ihren Funktionswert kaum ändern, kann man mit
Fug und Recht durchaus behäbig nennen,
korrekter wäre aber von &lt;strong&gt;langsam variierenden&lt;/strong&gt; Funktionen zu sprechen&lt;/p&gt;
&lt;p&gt;Im Kontext von potenzgesetzlichen Verteilungen kommt der Begriff
&lt;strong&gt;slowly varying function&lt;/strong&gt; vor, der Funktionen beschreibt die nur sehr gering
auf Änderungen ihres Parameters reagieren.&lt;/p&gt;
&lt;p&gt;Die Definition dieser &lt;em&gt;behäbigen&lt;/em&gt; besser &lt;strong&gt;langsam variierenden&lt;/strong&gt; Funktionen
stammt von &lt;a href=&#34;https://de.wikipedia.org/wiki/Jovan_Karamata&#34;&gt;Jovan Karamata&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;Eine positive stetige Funktion &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt;&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; auf den positiven reelen Zahlen ist
&lt;strong&gt;langsam variierend (im unendlichen)&lt;/strong&gt;, falls für alle reellen &lt;span class=&#34;math inline&#34;&gt;\(t&amp;gt;0\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\lim_{x \to +\infty} \frac{L(t\cdot x)}{L(x)} = 1\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;gilt.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Beispiele:&lt;/strong&gt;&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Jede konstante Funktionen (&lt;span class=&#34;math inline&#34;&gt;\(\neq 0\)&lt;/span&gt;) ist &lt;em&gt;langsam variierend&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Beweisskizze:&lt;/strong&gt;
Mit &lt;span class=&#34;math inline&#34;&gt;\(L(x) = c\)&lt;/span&gt; ist &lt;span class=&#34;math inline&#34;&gt;\(L(x) = L(t x) = c\)&lt;/span&gt; und damit &lt;span class=&#34;math inline&#34;&gt;\(\frac{L(t x)}{L(x)}= 1\)&lt;/span&gt;.&lt;/p&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Jeder Funktion &lt;span class=&#34;math inline&#34;&gt;\(L(x)\)&lt;/span&gt; mit einem Grenzwert &lt;span class=&#34;math inline&#34;&gt;\(b&amp;gt;0\)&lt;/span&gt; ist &lt;em&gt;langsam variierend&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Beweisskizze:&lt;/strong&gt;
Da &lt;span class=&#34;math inline&#34;&gt;\(\lim_{x \to +\infty} L(x) = b = \lim_{x \to +\infty} L(t\cdot x)\)&lt;/span&gt; ist
&lt;span class=&#34;math inline&#34;&gt;\(\lim_{x \to +\infty} \frac{L(t\cdot x)}{L(x)} = \frac{\lim_{x \to +\infty} L(t\cdot x)}{\lim_{x \to +\infty} L(x)} = \frac{b}{b} = 1\)&lt;/span&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Für jedes reellwertige &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt; ist &lt;span class=&#34;math inline&#34;&gt;\(L(x) = log_\beta(x)\)&lt;/span&gt; &lt;em&gt;langsam variierend&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Beweisskizze:&lt;/strong&gt;
Es gilt:
- Für jede reelle Zahl &lt;span class=&#34;math inline&#34;&gt;\(x&amp;gt;0\)&lt;/span&gt; ist &lt;span class=&#34;math inline&#34;&gt;\(\log_x(x) = 1\)&lt;/span&gt;.
- Für reelle Zahlen &lt;span class=&#34;math inline&#34;&gt;\(a, b\)&lt;/span&gt; gilt: &lt;span class=&#34;math inline&#34;&gt;\(\frac{log(a)}{\log(b)} = \log_b(a)\)&lt;/span&gt;
- Für reelle Zahlen &lt;span class=&#34;math inline&#34;&gt;\(a, b\)&lt;/span&gt; gilt. &lt;span class=&#34;math inline&#34;&gt;\(\log(a \cdot b) = log(a) + log(b)\)&lt;/span&gt;
- Für jede Konstante &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; gilt &lt;span class=&#34;math inline&#34;&gt;\(\lim_{x \to +\infty} \log_x (k) = 0\)&lt;/span&gt;
Somit gilt &lt;span class=&#34;math inline&#34;&gt;\(\frac{\log_\beta(k \cdot x)}{\log_\beta(x)} = \log_x(k\cdot x) = \log_x(k) + \log_x(x) = \log_x(k) +1 \to 1\)&lt;/span&gt; wenn &lt;span class=&#34;math inline&#34;&gt;\(x \to +\infty\)&lt;/span&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Die Funktion &lt;span class=&#34;math inline&#34;&gt;\(x^\beta\)&lt;/span&gt; ist für alle &lt;span class=&#34;math inline&#34;&gt;\(\beta \neq 0\)&lt;/span&gt; &lt;em&gt;&lt;strong&gt;nicht&lt;/strong&gt; langsam variierend&lt;/em&gt;.
&lt;strong&gt;Beweisskizze:&lt;/strong&gt;
Für &lt;span class=&#34;math inline&#34;&gt;\(t \neq 1\)&lt;/span&gt; gilt:
&lt;span class=&#34;math display&#34;&gt;\[\lim_{x \to +\infty} \frac{(tx)^\beta}{x^\beta} = t^\beta \neq 1\]&lt;/span&gt;
Damit sind die Funktionen zwar (s.u.) &lt;em&gt;regulär variierend&lt;/em&gt;, aber nicht &lt;em&gt;langsam variierend&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Eine &lt;strong&gt;regulär variierende&lt;/strong&gt; Funktion &lt;span class=&#34;math inline&#34;&gt;\(L:(0,+\infty) \to (0,+\infty)\)&lt;/span&gt;
ist eine Funktion für die der Term&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\lim_{x \to +\infty} \frac{L(t\cdot x)}{L(x)} = g(t)\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;mit &lt;span class=&#34;math inline&#34;&gt;\(g(t)\)&lt;/span&gt; für alle &lt;span class=&#34;math inline&#34;&gt;\(t&amp;gt;0\)&lt;/span&gt; einen endlichen aber nicht verschwindenen Wert
(m.a.W.: &lt;span class=&#34;math inline&#34;&gt;\(g(t) \neq 0\)&lt;/span&gt;) hat .&lt;/p&gt;
&lt;p&gt;Karamata hat die regulär variierenden Funktionen nun wie folgt charaterisiert:&lt;/p&gt;
&lt;div id=&#34;charakterisierungssatz-von-karamata&#34; class=&#34;section level3 theorem&#34;&gt;
&lt;h3&gt;Charakterisierungssatz von Karamata&lt;/h3&gt;
&lt;p&gt;Jede &lt;em&gt;regulär variierende&lt;/em&gt; Funktion &lt;span class=&#34;math inline&#34;&gt;\(f:(0,+\infty) \to (0,+\infty)\)&lt;/span&gt; ist
von der Form&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[f(x) = x^\beta \cdot L(x),\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;wobei &lt;span class=&#34;math inline&#34;&gt;\(\beta \in \mathbf{R}\)&lt;/span&gt; eine reelle Zahl
und &lt;span class=&#34;math inline&#34;&gt;\(L(x)\)&lt;/span&gt; eine &lt;em&gt;langsam variiernde&lt;/em&gt; Funktion ist.&lt;/p&gt;
&lt;!-- ENDE THEOREM--&gt;
&lt;p&gt;Eine Konsequenz aus dem &lt;em&gt;Charakterisierungssatz von Karamata&lt;/em&gt; ist, das die
Funktion &lt;span class=&#34;math inline&#34;&gt;\(g(t)\)&lt;/span&gt; aus der Definition der &lt;em&gt;regulär variierenden&lt;/em&gt; Funktionen
notwendigerweise die Gestalt&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[g(t) = t^\rho,\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;mit einem &lt;span class=&#34;math inline&#34;&gt;\(\rho \in \mathbf{R}\)&lt;/span&gt;, haben muss.&lt;/p&gt;
&lt;p&gt;Dieser Wert &lt;span class=&#34;math inline&#34;&gt;\(\rho\)&lt;/span&gt; wird &lt;strong&gt;Index der Varition&lt;/strong&gt; (engl. &lt;em&gt;index of variation&lt;/em&gt;)
genannt.&lt;/p&gt;
&lt;p&gt;Die Katamata Theorie ist eine Theorie “erster Ordnung” für reguläre Variation.
Weiterführend gibt es mit der
&lt;a href=&#34;https://encyclopediaofmath.org/wiki/De_Haan_theory&#34;&gt;de Haan Theorie&lt;/a&gt; als Theorie “zweiter Ordnung”.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quellen:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://encyclopediaofmath.org/index.php?title=Karamata_theory&amp;amp;direction=next&amp;amp;oldid=25937&#34;&gt;Encylopedia of Math&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://archive.org/details/regularvariation0000bing&#34;&gt;Bingham, N. H.; Goldie, C. M.; Teugels, J. L. (1987), Regular Variation, Encyclopedia of Mathematics and its Applications, 27, Cambridge: Cambridge University Press, ISBN 0-521-30787-2, MR 0898871, Zbl 0617.26001&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt; oder auch &lt;span class=&#34;math inline&#34;&gt;\(l\)&lt;/span&gt; wird (angeblich) hier für den Begriff &lt;em&gt;lente&lt;/em&gt; (serb. für &lt;strong&gt;faul&lt;/strong&gt;) verwendet. Behäbig ist also doch nicht so falsch. ;-)&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Ein paar Gedanken über potenzgesetzliche Verteilungen (power law distributions)</title>
      <link>https://sefiroth.net/nab/post/2021-02-12-ein-paar-gedanken-uber-potenzgesetzliche-verteilungen-power-law-distributions/</link>
      <pubDate>Fri, 12 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/2021-02-12-ein-paar-gedanken-uber-potenzgesetzliche-verteilungen-power-law-distributions/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/post/2021-02-12-ein-paar-gedanken-uber-potenzgesetzliche-verteilungen-power-law-distributions/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Eine Funktion &lt;span class=&#34;math inline&#34;&gt;\(f(x)\)&lt;/span&gt; heißt &lt;strong&gt;potenzgesetzlich&lt;/strong&gt;,
falls&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[f(x) = C \cdot x^a\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;gilt, für mindestens alle reellen &lt;span class=&#34;math inline&#34;&gt;\(x &amp;gt; x_{min}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Gewöhnlich setzt man &lt;span class=&#34;math inline&#34;&gt;\(\alpha = -a\)&lt;/span&gt; und schreibt&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[f(x) = C \cdot x^{-\alpha}.\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Damit ergibt sich für &lt;span class=&#34;math inline&#34;&gt;\(f&amp;#39;(x)\)&lt;/span&gt; die Form:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f&amp;#39;(x) = -C \cdot \alpha \cdot x^{-\alpha -1} = C^* \cdot x^{-(\alpha + 1)}
\]&lt;/span&gt;
mit &lt;span class=&#34;math inline&#34;&gt;\(C^* = -C \cdot \alpha\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Eine &lt;strong&gt;(streng) potenzgesetzliche Verteilungen&lt;/strong&gt; (engl. &lt;strong&gt;(strong) power-law probability distribution&lt;/strong&gt;)
zur ZV &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt;
ist eine Verteilung deren Überlebensfunktion &lt;span class=&#34;math inline&#34;&gt;\(\overline{F}_X(x)=P(X &amp;gt; x)\)&lt;/span&gt; die folgende Gestalt hat:
&lt;span class=&#34;math display&#34;&gt;\[\overline{F}(x)=P(X &amp;gt; x) = C \cdot x^{-\alpha}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Mit der Dichte &lt;span class=&#34;math inline&#34;&gt;\(f_X\)&lt;/span&gt; ergibt sich:
&lt;span class=&#34;math display&#34;&gt;\[\overline{F}(x)=P(X &amp;gt; x) = C \cdot x^{-\alpha} =\int_x^\infty f_X(t) \text{d}t = C^* \cdot \int_x^\infty  t^{-(\alpha+1)} \text{d}t = C^* \cdot \int_x^\infty t^{-\alpha} \text{d}t\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Anstelle der Konstanten &lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt; tritt oft eine &lt;strong&gt;langsam variierende Funktion&lt;/strong&gt;
(engl. &lt;strong&gt;slowly varying funktion&lt;/strong&gt;).
Wir erhalten somit die folgende, allgemeinere Definition:&lt;/p&gt;
&lt;p&gt;Eine &lt;strong&gt;potenzgesetzliche Verteilungen&lt;/strong&gt;
(engl. &lt;strong&gt;power-law probability distribution&lt;/strong&gt;)
(zu einer Zufallsvariable &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt;)
ist eine Verteilung deren Überlebensfunktion &lt;span class=&#34;math inline&#34;&gt;\(\overline{F}(x)=P(X &amp;gt; x)\)&lt;/span&gt;
die folgende Gestalt hat:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\overline{F}(x)=P(X &amp;gt; x) = L(x) \cdot x^{-\alpha}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Dabei ist &lt;span class=&#34;math inline&#34;&gt;\(L(x):(x_{\min}, +\infty) \to (x_{\min}, +\infty)\)&lt;/span&gt; eine &lt;em&gt;langsam variierende Funktion&lt;/em&gt;,
also gilt für alle &lt;span class=&#34;math inline&#34;&gt;\(t&amp;gt;0\)&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\lim_{x \to +\infty} \frac{L(t \cdot x)}{L(x)} = 1
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Ist nun wieder &lt;span class=&#34;math inline&#34;&gt;\(f_X\)&lt;/span&gt; die Dichte, so erhalten wir:
&lt;span class=&#34;math display&#34;&gt;\[\overline{F}(x)=P(X &amp;gt; x) = L(x) \cdot x^{-\alpha} = \int_x^\infty f_X(t) dt\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[f&amp;#39;(x) = [L(x)x^{-\alpha}]&amp;#39;\]&lt;/span&gt;
&lt;span class=&#34;math display&#34;&gt;\[\int_x^\infty f_X(t) dt= \int_x^\infty [L(t)t^{-\alpha}]&amp;#39; dt\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(\Delta x_0 = h = x_1 - x_0\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(x_1 = x_0 + \Delta x_0 = x_0 + h\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(x_1 = c \cdot x_0\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(x_0 + h = c \cdot x_0 &amp;lt;=&amp;gt; c = 1 + \frac{h}{x_0}\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(L(x_1) = L(x_0+h) = L(c \cdot x_0)\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(L(x_1) - L(x_0) = L(c \cdot x_0) - L(x_0) = L(x_0 + h) - L(x_0)}\)&lt;/span&gt;
$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fakten&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sinnvoll nur, wenn &lt;span class=&#34;math inline&#34;&gt;\(\alpha &amp;gt; 0\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Ist &lt;span class=&#34;math inline&#34;&gt;\(\alpha &amp;lt; 3\)&lt;/span&gt;, dann ist die &lt;em&gt;Varianz&lt;/em&gt; und die
&lt;em&gt;Schiefe&lt;/em&gt; (engl. &lt;em&gt;skewness&lt;/em&gt;) (mathematisch) nicht definiert.&lt;/li&gt;
&lt;li&gt;Für &lt;span class=&#34;math inline&#34;&gt;\(k &amp;gt; \alpha-1\)&lt;/span&gt; ist das k. Moment unendlich.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Logarithmiert man &lt;span class=&#34;math inline&#34;&gt;\(y=f(x)=C \cdot x^{-\alpha}\)&lt;/span&gt;, so erhält mensch:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\log(y) = \log(C) -\alpha \cdot \log(x)\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Ist eine Verteilung potenzgesetzlich, dann kann man &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt;,
wie folgt abschätzen:&lt;/p&gt;
&lt;p&gt;Seien &lt;span class=&#34;math inline&#34;&gt;\(x_0, x_1 &amp;gt; x_{min}\)&lt;/span&gt; zwei reelle Zahlen, &lt;span class=&#34;math inline&#34;&gt;\(y_0=f(x_0)\)&lt;/span&gt; bzw. &lt;span class=&#34;math inline&#34;&gt;\(y_1 = f(y_1)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Dann kann mensch wegen&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\begin{align*}
  \log(y_1) - \log(y_0) &amp;amp;= \log(C) - \alpha \cdot\log(x_1) - \log(C) + \alpha \cdot \log(x_0) \\
                        &amp;amp;= \alpha \cdot\left(\log(x_0)- \log(x_1) \right)
\end{align*}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;den Wert für &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt;, so kann man mittels&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\alpha = \frac{\log(y_1) - \log(y_0)}{\log(x_0)- \log(x_1)}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;den Wert für &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt; bestimmen.&lt;/p&gt;
&lt;p&gt;Mit dem so ermittelten &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt;, können wir &lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt; wegen&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\log(C) = \log(y)+ \alpha\log(x)\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;mit Hilfe von&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[C = y \cdot x_0^\alpha = f(x_0) \cdot x_0^\alpha\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;für ein &lt;span class=&#34;math inline&#34;&gt;\(x_0 &amp;gt; x_{min}\)&lt;/span&gt; abschätzen.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Beispiel&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Nehmen wir die t-Verteilung mit &lt;span class=&#34;math inline&#34;&gt;\(n=2\)&lt;/span&gt; Freiheitsgeraden.
Die Dichtefunktion bezeichnen wir mit &lt;span class=&#34;math inline&#34;&gt;\(t_{2}(x)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Dann dann können wir &lt;span class=&#34;math inline&#34;&gt;\(\alpha=3\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(C=1\)&lt;/span&gt; abschätzen.&lt;/p&gt;
&lt;p&gt;Schauen wir uns das einmal als Grafik an:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lower_bound &amp;lt;- 2
upper_bound &amp;lt;- 100
x &amp;lt;- seq(lower_bound, upper_bound, 0.1)

gf_dist(&amp;quot;t&amp;quot;, df = dfree, 
        xlim = c(lower_bound, upper_bound), 
        color = &amp;quot;darkred&amp;quot;) %&amp;gt;%
  gf_line(C*x**(-alpha) ~ x, 
          color = &amp;quot;darkgreen&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/2021-02-12-ein-paar-gedanken-uber-potenzgesetzliche-verteilungen-power-law-distributions/index_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Hier eine doppelt-logarithmische Darstellung:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_dist(&amp;quot;t&amp;quot;, df = dfree, 
        xlim = c(lower_bound, upper_bound), 
        color = &amp;quot;darkred&amp;quot;) %&amp;gt;%
  gf_line( C*x**(-alpha) ~ x, 
           color = &amp;quot;darkgreen&amp;quot;) %&amp;gt;%
  gf_refine(
    scale_x_log10(),
    scale_y_log10()
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/2021-02-12-ein-paar-gedanken-uber-potenzgesetzliche-verteilungen-power-law-distributions/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Noch ein Beispiel:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Nehmen wir die t-Verteilung mit &lt;span class=&#34;math inline&#34;&gt;\(n=1\)&lt;/span&gt; Freiheitsgeraden.
Die Dichtefunktion bezeichnen wir mit &lt;span class=&#34;math inline&#34;&gt;\(t_{1}(x)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Dann dann können wir &lt;span class=&#34;math inline&#34;&gt;\(\alpha=2\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(C=0.32\)&lt;/span&gt; abschätzen.&lt;/p&gt;
&lt;p&gt;Schauen wir uns das einmal als Grafik an:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lower_bound &amp;lt;- 2
upper_bound &amp;lt;- 100
x &amp;lt;- seq(lower_bound, upper_bound, 0.1)

gf_dist(&amp;quot;t&amp;quot;, df = dfree, 
        xlim = c(lower_bound, upper_bound), 
        color = &amp;quot;darkred&amp;quot;) %&amp;gt;%
  gf_line(C*x**(-alpha) ~ x, 
          color = &amp;quot;darkgreen&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/2021-02-12-ein-paar-gedanken-uber-potenzgesetzliche-verteilungen-power-law-distributions/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Hier eine doppelt-logarithmische Darstellung:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_dist(&amp;quot;t&amp;quot;, df = dfree, 
        xlim = c(lower_bound, upper_bound), 
        color = &amp;quot;darkred&amp;quot;) %&amp;gt;%
  gf_line( C*x**(-alpha) ~ x, 
           color = &amp;quot;darkgreen&amp;quot;) %&amp;gt;%
  gf_refine(
    scale_x_log10(),
    scale_y_log10()
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/2021-02-12-ein-paar-gedanken-uber-potenzgesetzliche-verteilungen-power-law-distributions/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ein ’Gegen-’Beispiel:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Betrachten wir nun die (rechte Seite – &lt;span class=&#34;math inline&#34;&gt;\(x&amp;gt;1=x_{min}\)&lt;/span&gt;) einer Gauß’schen Standardnormalverteilung.&lt;/p&gt;
&lt;p&gt;Mit den Stützstellen &lt;span class=&#34;math inline&#34;&gt;\(x_0 = 1\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(x_1 = 5\)&lt;/span&gt; können wir &lt;span class=&#34;math inline&#34;&gt;\(\alpha=7.46\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(C=0.24\)&lt;/span&gt; abschätzen.
Schauen wir uns das einmal als Grafik an:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lower_bound &amp;lt;- 1
upper_bound &amp;lt;- 8
x &amp;lt;- seq(lower_bound, upper_bound, 0.1)

gf_dist(&amp;quot;norm&amp;quot;,
        xlim = c(lower_bound, upper_bound), 
        color = &amp;quot;darkred&amp;quot;) %&amp;gt;%
  gf_line(C*x**(-alpha) ~ x, 
          color = &amp;quot;darkgreen&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/2021-02-12-ein-paar-gedanken-uber-potenzgesetzliche-verteilungen-power-law-distributions/index_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Hier eine doppelt-logarithmische Darstellung:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_dist(&amp;quot;norm&amp;quot;, 
        xlim = c(lower_bound, upper_bound), 
        color = &amp;quot;darkred&amp;quot;) %&amp;gt;%
  gf_line( C*x**(-alpha) ~ x, 
           color = &amp;quot;darkgreen&amp;quot;) %&amp;gt;%
  gf_refine(
    scale_x_log10(),
    scale_y_log10()
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/2021-02-12-ein-paar-gedanken-uber-potenzgesetzliche-verteilungen-power-law-distributions/index_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Wir erkennen, dass hier etwas nicht passt.
Die Standardnormalverteilung ist (vielleicht) keine &lt;em&gt;potenzgesetzich&lt;/em&gt; Verteilung?&lt;/p&gt;
&lt;p&gt;Ein oft verwendetes Kriterium ist, dass sich die Funktion in der doppelt-logarithmischen Darstellung als Gerade offenbart.&lt;/p&gt;
&lt;p&gt;Schauen wir daher einmal nach:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lower_bound &amp;lt;- 1
upper_bound &amp;lt;- 8

gf_dist(&amp;quot;norm&amp;quot;, 
        xlim = c(lower_bound, upper_bound), 
        color = &amp;quot;darkred&amp;quot;) %&amp;gt;%
  gf_refine(
    scale_x_log10(),
    scale_y_log10()
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/2021-02-12-ein-paar-gedanken-uber-potenzgesetzliche-verteilungen-power-law-distributions/index_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;** — **&lt;/p&gt;
&lt;p&gt;Weiter gilt für &lt;em&gt;potenzgesetzliche Verteilungen&lt;/em&gt; wegen&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\frac{f(x)}{f(c\cdot x)} = \frac{C \cdot x^{-\alpha}}{C \cdot (c\cdot x)^{-\alpha}}
 = c^\alpha\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(f(x)\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(f(c\cdot x)\)&lt;/span&gt; für alle (beliebig aber festen) &lt;span class=&#34;math inline&#34;&gt;\(c&amp;gt;0\)&lt;/span&gt; &lt;em&gt;proportional&lt;/em&gt;,
was man gerne als &lt;span class=&#34;math inline&#34;&gt;\(f(x) \propto f(c \cdot x)\)&lt;/span&gt; schreibt.&lt;/p&gt;
&lt;p&gt;** — **&lt;/p&gt;
&lt;p&gt;Die Wahrscheinlichkeit für ein (mindestens) &lt;span class=&#34;math inline&#34;&gt;\(8-\sigma\)&lt;/span&gt; Ereignis liegt bei einer Standardnormalverteilung bei etwa &lt;span class=&#34;math inline&#34;&gt;\(6.66133814775094\times 10^{-16}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Bei einer t-Verteilung mit 2 Freiheitsgeraden bei etwa 0.00763403608266899$.&lt;/p&gt;
&lt;p&gt;Während die Eintrittschance eines (mindestens) &lt;span class=&#34;math inline&#34;&gt;\(8-\sigma\)&lt;/span&gt; Ereignisses bei der Standardnormalverteilung bei etwa &lt;span class=&#34;math inline&#34;&gt;\(1 : round(1/(1-pnorm(8)),0)\)&lt;/span&gt; liegt, ist diese der t-Verteilung mit einem Freiheitsgrad bei etwa $1 : 131&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gedankenstütze zu wichtigen Funktionsbegriffen in der Statistik</title>
      <link>https://sefiroth.net/nab/post/2021-02-12-gedankenstutze-zu-wichtigen-funktionsbegriffen-in-der-statistik/</link>
      <pubDate>Fri, 12 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/2021-02-12-gedankenstutze-zu-wichtigen-funktionsbegriffen-in-der-statistik/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/post/2021-02-12-gedankenstutze-zu-wichtigen-funktionsbegriffen-in-der-statistik/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;eine-kleine-liste-von-fundermentalen-begriffen-in-der-statistik.&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Eine kleine Liste von fundermentalen Begriffen in der Statistik.&lt;/h1&gt;
&lt;p&gt;Gilt für eine reelle Funktion &lt;span class=&#34;math inline&#34;&gt;\(f: \mathbf{R} \to \mathbf{R}\)&lt;/span&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(f(x)\)&lt;/span&gt; ist &lt;em&gt;nichtnegativ&lt;/em&gt;, d.h., &lt;span class=&#34;math inline&#34;&gt;\(f(x) \geq 0\)&lt;/span&gt;, für alle &lt;span class=&#34;math inline&#34;&gt;\(x \in \mathbf{R}\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(f(x)\)&lt;/span&gt; ist &lt;em&gt;integrierbar&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(f(x)\)&lt;/span&gt; ist &lt;em&gt;normiert&lt;/em&gt; in dem Sinne, dass
&lt;span class=&#34;math display&#34;&gt;\[\int_{-\infty}^\infty f(x) \text{d}x = 1\]&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dann nennen wir &lt;span class=&#34;math inline&#34;&gt;\(f(x)\)&lt;/span&gt; eine &lt;strong&gt;Wahrscheinlichkeitsdichtefunktion&lt;/strong&gt; (engl. &lt;strong&gt;probability density funktion&lt;/strong&gt; kurz &lt;strong&gt;pdf&lt;/strong&gt;) oder kurz &lt;strong&gt;Dichte&lt;/strong&gt; (engl. &lt;strong&gt;density&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;Durch
&lt;span class=&#34;math display&#34;&gt;\[P([a, b]) := \int_a^b f(x) \text{d} x\]&lt;/span&gt;
definiert &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; eine &lt;em&gt;Wahrscheinlichkeitsverteilung&lt;/em&gt; auf den reellen Zahlen.&lt;/p&gt;
&lt;p&gt;Ist &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; eine reelwertige &lt;em&gt;Zufallsvariable&lt;/em&gt; (kurz &lt;strong&gt;ZV&lt;/strong&gt;) und existiert eine
reelle Funktion &lt;span class=&#34;math inline&#34;&gt;\(f_X(x)\)&lt;/span&gt; der Art, dass für alle &lt;span class=&#34;math inline&#34;&gt;\(a \in \mathbf{R}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[P(X \leq a) = \int_{-\infty}^a f_X(x) \text{d}x\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;gilt, so nennt man &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; die &lt;strong&gt;Wahrscheinlichkeitsdichtefunktion von &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Die Funktion&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[F_X(a) = P(X \leq a)\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;nenen wir &lt;strong&gt;(Wahrscheinlichkeits-)Verteilung(-sfunktion)&lt;/strong&gt;
(engl. &lt;strong&gt;cumulative distribution function&lt;/strong&gt; kurz &lt;strong&gt;cdf&lt;/strong&gt;
aber auch nur &lt;strong&gt;distribution function&lt;/strong&gt;) &lt;strong&gt;von &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Genau dann ist eine Funktion &lt;span class=&#34;math inline&#34;&gt;\(F: \mathbf{R} \to [0, 1]\)&lt;/span&gt;
eine &lt;strong&gt;Verteilungsfunktion&lt;/strong&gt;, wenngilt:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Es ist &lt;span class=&#34;math inline&#34;&gt;\(\lim_{t \to -\infty} F(t)=0\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(\lim_{t \to +\infty} F(t)=1\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Die Funktion &lt;span class=&#34;math inline&#34;&gt;\(\overline{F}(t)\)&lt;/span&gt; ist &lt;strong&gt;monoton wachsend&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Die Funktion &lt;span class=&#34;math inline&#34;&gt;\(\overline{F}(t)\)&lt;/span&gt; ist &lt;strong&gt;rechtsseitig stetig&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Die Funktion&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\overline{F}_X(a) = 1 - F_X(a)\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;nennen wir
&lt;strong&gt;Überlebensfunktion&lt;/strong&gt; (engl. &lt;strong&gt;survival function&lt;/strong&gt;, &lt;strong&gt;complementarey cumulative distribution funktion&lt;/strong&gt; kurz &lt;strong&gt;ccdf&lt;/strong&gt;, &lt;strong&gt;tail distribution&lt;/strong&gt;, &lt;strong&gt;exceedance&lt;/strong&gt; oder &lt;strong&gt;reliability function&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;Es gilt &lt;span class=&#34;math inline&#34;&gt;\(\overline{F}_X(a) + F_X(a) = 1\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Genau dann ist eine Funktion &lt;span class=&#34;math inline&#34;&gt;\(\overline{F}: \mathbf{R} \to [0, 1]\)&lt;/span&gt;
eine &lt;strong&gt;Überlebensfunktion&lt;/strong&gt;, wenn gilt:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Es ist &lt;span class=&#34;math inline&#34;&gt;\(\lim_\limits{t \to -\infty} \overline{F}(t)=1\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(\lim_{t \to + \infty}\overline{F}(t)=0\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Die Funktion &lt;span class=&#34;math inline&#34;&gt;\(\overline{F}(t)\)&lt;/span&gt; ist &lt;strong&gt;monoton fallend&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Die Funktion &lt;span class=&#34;math inline&#34;&gt;\(\overline{F}(t)\)&lt;/span&gt; ist &lt;strong&gt;rechtsseitig stetig&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ein paar weitere Eigenschaften von &lt;em&gt;Überlebensfunktionen&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nicht-negative stetige ZV &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; mit Erwartungswert, also &lt;span class=&#34;math inline&#34;&gt;\(\int_0^\infty x f(x) \text{d} x = \mu &amp;lt; \infty\)&lt;/span&gt;, erfüllen die &lt;a href=&#34;https://de.wikipedia.org/wiki/Markow-Ungleichung_(Stochastik)&#34;&gt;Markov-Ungleichung&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\overline{F}_X(x) \leq \frac{\operatorname{E}(X)}{x}\]&lt;/span&gt;
- Ist &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; eine ZV und &lt;span class=&#34;math inline&#34;&gt;\(\overline{F}_X\)&lt;/span&gt; die zugehörige Überlebensfunktion.
Existiert &lt;span class=&#34;math inline&#34;&gt;\(E(X)\)&lt;/span&gt;, dann gilt &lt;span class=&#34;math inline&#34;&gt;\(\lim_{t \to +\infty}\overline{F}(x)=0 = o\left(\frac{1}{x}\right)\)&lt;/span&gt;.
&lt;strong&gt;Beweisskizze:&lt;/strong&gt;
Sei &lt;span class=&#34;math inline&#34;&gt;\(f_X\)&lt;/span&gt; die Dichtefunktion von &lt;span class=&#34;math inline&#34;&gt;\(F_X\)&lt;/span&gt; zur ZV &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt;. Fü jedes &lt;span class=&#34;math inline&#34;&gt;\(c&amp;gt;0\)&lt;/span&gt; ist dann
$$&lt;span class=&#34;math display&#34;&gt;\[\begin{align*}
      E(X) = \int_0^\infty x \cdot f_X(x) \text{d}x &amp;amp;=  \int_0^cx \cdot f_X(x) \text{d}x +\int_c^\infty x \cdot f_X(x) \text{d}x \\
      &amp;amp;\geq  \int_0^cx \cdot f_X(x) \text{d}x +\int_c^\infty c \cdot f_X(x) \text{d}x \\
      &amp;amp;=  \int_0^cx \cdot f_X(x) \text{d}x + c \cdot \int_c^\infty f_X(x) \text{d}x \\
      &amp;amp;=  \int_0^cx \cdot f_X(x) \text{d}x +c \cdot \overline{F}(c)

  \end{align*}\]&lt;/span&gt;$$&lt;/p&gt;
&lt;p&gt;Damit gilt nun:
&lt;span class=&#34;math display&#34;&gt;\[0 \leq c \cdot \overline{F}(c) \leq E(X) - \int_0^cx \cdot f_X(x) \text{d}x\]&lt;/span&gt;
Wegen &lt;span class=&#34;math inline&#34;&gt;\(\lim\limits_{c \to +\infty} \int_0^cx \cdot f_X(x) \text{d}x = E(X)\)&lt;/span&gt;
folgt:
&lt;span class=&#34;math display&#34;&gt;\[0 \leq c \cdot \overline{F}(c) \leq E(X) - \int_0^cx \cdot f_X(x) \text{d}x\to 0 \text{ wenn } c \to \infty\]&lt;/span&gt;
- Für nicht-negative ZV &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; gilt:
&lt;span class=&#34;math display&#34;&gt;\[E(X) = \int_0^\infty \overline{F}_X(x) \text{d}    x\]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Cook Abstand</title>
      <link>https://sefiroth.net/nab/post/cook-abstand/</link>
      <pubDate>Mon, 29 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/cook-abstand/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/post/cook-abstand/index.de_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Frage: &lt;em&gt;Was macht einen Wert zum Ausreißer?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Eine mögliche Antwort wäre: &lt;em&gt;Er liegt weit weg von den anderen Werten &lt;strong&gt;und&lt;/strong&gt;
hat einen (starken) Einfluss auf unser Modell.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Eine Möglichkeit solche Ausreißer zu finden ist der &lt;em&gt;Cook Abstand&lt;/em&gt;
(eng.: &lt;em&gt;Cook’s distance&lt;/em&gt;).
Die Idee dabei ist es zu messen welchen Einfluss ein Wert auf das Modell hat.
Dazu schauen wir uns das Modell einmal mit und einmal ohne diesen Wert an und
vergleicht diese Ergebnisse.&lt;/p&gt;
&lt;p&gt;Schauen wir uns den Cook Abstand einmal für ein (einfaches) lineares
Regressionmodell konkret an:&lt;/p&gt;
&lt;div id=&#34;vorbereitungen&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Vorbereitungen&lt;/h3&gt;
&lt;p&gt;Wir wollen mit &lt;code&gt;mosaic&lt;/code&gt; arbeiten, also laden wir das Paket als erstes:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mosaic)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Falls die &lt;strong&gt;tipping&lt;/strong&gt;-Daten noch nicht im Verzeichnis liegen,
laden wir diese aus dem Internet nach:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!file.exists(&amp;quot;tips.csv&amp;quot;)) {
  download.file(&amp;quot;https://goo.gl/whKjnl&amp;quot;, destfile = &amp;quot;tips.csv&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nun laden wir die &lt;strong&gt;tipping&lt;/strong&gt;-Daten in den Datenrahmen &lt;code&gt;tips&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tips &amp;lt;- read.csv2(&amp;quot;tips.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wir brauchen für unser Modell nur den Rechnungsbetrag &lt;code&gt;total_bill&lt;/code&gt; und den
Trinkgeldbetrag &lt;code&gt;tip&lt;/code&gt; für unser Modell:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tips %&amp;gt;% select(c(&amp;quot;total_bill&amp;quot;, &amp;quot;tip&amp;quot;)) -&amp;gt; tips&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;unser-modell&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Unser Modell:&lt;/h2&gt;
&lt;p&gt;Werfen wir zunächst einen Blick auf das Streudiagramm unserer Daten:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_point(tip ~ total_bill, data = tips)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/cook-abstand/index.de_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Und erstellen dann ein lineares Modell:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;erg_lm &amp;lt;- lm(tip ~ total_bill, data = tips)
summary(erg_lm)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = tip ~ total_bill, data = tips)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -3.1982 -0.5652 -0.0974  0.4863  3.7434 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept) 0.920270   0.159735   5.761 2.53e-08 ***
## total_bill  0.105025   0.007365  14.260  &amp;lt; 2e-16 ***
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 1.022 on 242 degrees of freedom
## Multiple R-squared:  0.4566, Adjusted R-squared:  0.4544 
## F-statistic: 203.4 on 1 and 242 DF,  p-value: &amp;lt; 2.2e-16&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Betrachten wir nun die Regressionsgerade in unseren Daten:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_point(tip ~ total_bill, data = tips) %&amp;gt;%
  gf_coefline(
    model = erg_lm,
    color = ~ &amp;quot;Regressionsgerade&amp;quot;,
    show.legend = FALSE
  ) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/cook-abstand/index.de_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Für lineare Regressionsmodell können einflussreiche Ausreißer sehr hinderlich
sein.
Was ändert sich, wenn wir einen Wert, z.B. einen potentiellen Ausreißer,
nicht betrachten?&lt;/p&gt;
&lt;p&gt;Als Beispiel wählen wir die folgende Beobachtung aus:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tips %&amp;gt;% slice(173) -&amp;gt; tips_removed
tips_removed&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   total_bill  tip
## 1       7.25 5.15&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tips %&amp;gt;% slice(-173) -&amp;gt; tips_red
erg_lm_red &amp;lt;- lm(tip ~ total_bill, data = tips_red)
summary(erg_lm_red)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = tip ~ total_bill, data = tips_red)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -3.2136 -0.5351 -0.0818  0.4951  3.6869 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept)  0.86065    0.15709   5.479 1.08e-07 ***
## total_bill   0.10731    0.00723  14.843  &amp;lt; 2e-16 ***
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 0.9992 on 241 degrees of freedom
## Multiple R-squared:  0.4776, Adjusted R-squared:  0.4754 
## F-statistic: 220.3 on 1 and 241 DF,  p-value: &amp;lt; 2.2e-16&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_point(tip ~ total_bill, data = tips_red) %&amp;gt;%
  gf_coefline(
    model = erg_lm,
    color = ~ &amp;quot;Regressionsgerade&amp;quot;
    ) %&amp;gt;%
  gf_point(
    tip ~ total_bill, 
    colour = ~ &amp;quot;Entfernter Punkt&amp;quot;,
    data = tips_removed)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/cook-abstand/index.de_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Um zu messen was diese Änderung bewirkt hat, schaut sich der Cook Abstand
zunächst die Summe der quadrierten Differenzen der vorhergesagten Werte in
beiden Modellen an:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;new_data &amp;lt;- tibble(total_bill = tips$total_bill)
prognose_lm &amp;lt;- predict(erg_lm, newdata = new_data)
prognose_lm_red &amp;lt;- predict(erg_lm_red, newdata = new_data)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[d_j = \sum_{i=1}^n \left(\hat{y}_i - \hat{y}_{i(j)}\right)^2\]&lt;/span&gt;
Dabei ist &lt;span class=&#34;math inline&#34;&gt;\(\hat{y}_i\)&lt;/span&gt; die Prognose des Wertes &lt;span class=&#34;math inline&#34;&gt;\(y_i\)&lt;/span&gt; auf Basis von &lt;span class=&#34;math inline&#34;&gt;\(x_i\)&lt;/span&gt; mit
dem Originalmodell und &lt;span class=&#34;math inline&#34;&gt;\(\hat{y}_{i(j)}\)&lt;/span&gt; die Prognose wenn man die &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;-te
Beobachtung aus dem Modell gestrichen hat.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;d_j &amp;lt;- sum((prognose_lm - prognose_lm_red)^2)
d_j&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.1511406&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Der Cook Abstand &lt;span class=&#34;math inline&#34;&gt;\(D_j\)&lt;/span&gt; wird nun noch &lt;em&gt;normiert&lt;/em&gt; durch
&lt;span class=&#34;math display&#34;&gt;\[{\text{var}_{\text{cook}}} = p \cdot s_{\epsilon_i^2}^2\]&lt;/span&gt;
Dabei ist &lt;span class=&#34;math inline&#34;&gt;\(s_{\epsilon_i^2}^2\)&lt;/span&gt; der erwartungstreue Schätzer der Varianz der
Residuen und &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; die Anzahl aller erklärenden Variablen (hier &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt;) &lt;span class=&#34;math inline&#34;&gt;\(+ 1\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Es ist also:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[D_j = \frac{d_j}{\text{var}_{\text{cook}}} = \frac{\sum\limits_{i=1}^n \left(\hat{y}_i - \hat{y}_{i(j)}\right)^2}{p \cdot s_{\epsilon_i^2}^2}\]&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Summary des Modells
selm &amp;lt;- summary(erg_lm)

# Wir finden p als rank im Modell
p &amp;lt;- erg_lm$rank 

# Wir finden den erwatungtreuen Schätzer im Summary des Modells
s_quad_eps_quad &amp;lt;- (selm$sigma)^2 

var_cook = p * s_quad_eps_quad

D_j = d_j / var_cook
D_j&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.07234504&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wir können den Wert aber auch viel einfacher direkt berechnen lassen und dass
für alle &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; mit Hilfe von &lt;code&gt;cooks.distance(..)&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cooks.distance(erg_lm)[173]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        173 
## 0.07234504&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wann aber ist nun ein Wert ein &lt;em&gt;einflussreicher&lt;/em&gt; Ausreißer?&lt;/p&gt;
&lt;p&gt;Cook selber gibt dafür die Bedingung &lt;span class=&#34;math inline&#34;&gt;\(D_j &amp;gt; 1\)&lt;/span&gt; an. Andere Autor*innen schreiben &lt;span class=&#34;math inline&#34;&gt;\(D_j &amp;gt; 4/n\)&lt;/span&gt;, wobei &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; die Anzahl der Beobachtung ist.&lt;/p&gt;
&lt;p&gt;In unserem Beispiel liefert die Variante &lt;span class=&#34;math inline&#34;&gt;\(D_j &amp;gt; 1\)&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cooks &amp;lt;- cooks.distance(erg_lm)
names(cooks) &amp;lt;- NULL
n &amp;lt;- nrow(tips)

any(cooks &amp;gt; 1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;keinen Ausreißer.&lt;/p&gt;
&lt;p&gt;Wenn wir jedoch mit &lt;span class=&#34;math inline&#34;&gt;\(D_j &amp;gt; 4/n\)&lt;/span&gt; suchen
.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;any(cooks &amp;gt; 4/n)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;dann gibt es Ausreißer.&lt;/p&gt;
&lt;p&gt;Die Indices dieser finden wir mit:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;which(cooks &amp;gt; 4/n)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  24  48  57 103 142 157 171 173 179 183 184 185 188 208 211 213 215 238&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bereinigen wir nun unsere Daten um genau diese Werte:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;remove &amp;lt;- which(cooks &amp;gt; 4/n)
tips %&amp;gt;% slice(-remove) -&amp;gt; tips_no_outliers
tips %&amp;gt;% slice(remove) -&amp;gt; tips_removed
erg_lm_no_outliers &amp;lt;- lm(tip ~ total_bill, data = tips_no_outliers)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Und schauen uns das Ergebnis an:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(erg_lm_no_outliers)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = tip ~ total_bill, data = tips_no_outliers)
## 
## Residuals:
##      Min       1Q   Median       3Q      Max 
## -2.22592 -0.48166 -0.06794  0.46992  2.31414 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept) 0.773324   0.139435   5.546  8.2e-08 ***
## total_bill  0.111799   0.006958  16.069  &amp;lt; 2e-16 ***
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 0.7778 on 224 degrees of freedom
## Multiple R-squared:  0.5355, Adjusted R-squared:  0.5334 
## F-statistic: 258.2 on 1 and 224 DF,  p-value: &amp;lt; 2.2e-16&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_point(tip ~ total_bill, data = erg_lm_no_outliers) %&amp;gt;%
  gf_coefline(
    model = erg_lm_no_outliers, 
    color = ~&amp;quot;Regressionsgerade&amp;quot;
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/cook-abstand/index.de_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Im direkten Vergleich:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_point(tip ~ total_bill, data = erg_lm) %&amp;gt;%
  gf_coefline(
    model =  erg_lm,
    color = ~ &amp;quot;Regressionsgerade (Orginal)&amp;quot;
  ) %&amp;gt;%
  gf_coefline(
    model = erg_lm_no_outliers,
    color = ~ &amp;quot;Regressionsgerade (No Outliers)&amp;quot;
  ) %&amp;gt;%
  gf_point(
    tip ~ total_bill,
    color = ~ &amp;quot;Entfernte Punkte&amp;quot;,
    data = tips_removed
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/cook-abstand/index.de_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;unsere-beiden-modelle-als-formeln&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Unsere beiden Modelle als Formeln&lt;/h2&gt;
&lt;p&gt;Das ursprüngliche Modell:
&lt;span class=&#34;math display&#34;&gt;\[\widehat{tips}_{lm} = 0.9202696 + 0.1050245 \cdot total\_bill + \epsilon\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Das um pot. Ausreißer bereinigte Modell:
&lt;span class=&#34;math display&#34;&gt;\[\widehat{tips}_{lm\_no} 0.7733236 + 0.1117985 \cdot total\_bill + \epsilon\]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Ein kleines Beispiel zum Rangkorrelationskoeffizienten</title>
      <link>https://sefiroth.net/nab/post/ein-kleines-beispiel-zum-rangkorrelationskoeffizienten/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/ein-kleines-beispiel-zum-rangkorrelationskoeffizienten/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/lightable/lightable.css&#34; rel=&#34;stylesheet&#34; /&gt;


&lt;p&gt;Bei der Rangkorrelation werden statt der Werte die Ränge der Werte zur Berechnung herangezogen.&lt;/p&gt;
&lt;div id=&#34;beispiel&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Beispiel:&lt;/h3&gt;
&lt;p&gt;Es seien die folgenden Datenpunkte gegeben:&lt;/p&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
x
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.15
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.91
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.63
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.88
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.80
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.70
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.96
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.71
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.06
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
y
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.30
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14.87
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.20
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
36.72
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
49.94
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
63.77
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
82.76
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100.12
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Das Streudiagramm dieser Daten sieht dann so aus:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2020-05-25-ein-kleines-beispiel-zum-rangkorrelationskoeffizienten_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;50%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Der Korrelationskoeffizient ist nun:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[r = r_{BP} = 0.7944953\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Schauen wir uns nun die Werte der Tabelle mit ihrem Rang an:&lt;/p&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
x
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.15
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.91
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.63
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.88
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.80
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.70
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.96
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.71
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.06
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
y
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.30
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14.87
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.20
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
36.72
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
49.94
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
63.77
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
82.76
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100.12
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
rx
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.00
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
ry
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.00
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Das Streudiagramm der Ränge sieht nun wie folgt aus:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2020-05-25-ein-kleines-beispiel-zum-rangkorrelationskoeffizienten_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;50%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Und der Korrelationskoeffizient der Ränge ist nun:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[r_{sp} = r_{ry,rx}=0.8909091\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Dieser Korrelationskoeffizient der Ränge wird &lt;em&gt;Rangkorrelationkoeffizient&lt;/em&gt; genannt.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Aber Vorsicht:&lt;/strong&gt; Die Ränge anstatt der Werte in die Formel für den Korrelationskoeffizienten einzusetzen funktioniert nur, wenn jeder Wert genau &lt;strong&gt;einmal&lt;/strong&gt; vorkommt!&lt;/p&gt;
&lt;p&gt;Um das zu sehen, modifizieren wir unser Beispiel, so dass an zwei Stellen die Werte doppelt vorkommen. Wir erhalten damit die folgende, neue Tabelle:&lt;/p&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
x
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.15
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.91
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.63
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.63
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.88
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.80
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.70
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.96
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.71
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.06
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
y
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.30
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.90
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.20
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.20
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
36.72
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
49.94
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
63.77
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
82.76
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100.12
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
rx
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.00
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
ry
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.00
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Bevor wir nun einfach die &lt;em&gt;Ränge&lt;/em&gt; so in die Formel für den &lt;em&gt;Korrelationskoeffizienten&lt;/em&gt; (nach Pearson) einsetzen können, müssen wir noch etwas beachten, was die Definition von &lt;em&gt;Rängen&lt;/em&gt; angeht.
Denn dort steht im Kleingedruckten folgendes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Den ranggleichen Beobachtungen wird das arithmetische Mittel der auf sie fallenden Ränge zugeordnet!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Darum müssen wir die Ränge noch etwas korrigieren und erhalten:&lt;/p&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
x
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.15
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.91
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.63
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.63
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.88
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.80
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.70
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.96
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.71
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.06
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
y
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.30
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.90
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.20
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.20
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
36.72
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
49.94
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
63.77
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
82.76
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100.12
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
rx
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.50
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.50
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.00
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
ry
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.50
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.50
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.00
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Nun können wir von den Rängen wieder “ganz normal” den Korrelationskoeffizienten berechnen und erhalten:
&lt;span class=&#34;math display&#34;&gt;\[r_{sp} = r_{ry,rx} = 0.8932927\]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Korrigieren von Arbeiten mit Excel und R</title>
      <link>https://sefiroth.net/nab/post/korrigieren-von-arbeiten-mit-excel-und-r/</link>
      <pubDate>Wed, 18 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/korrigieren-von-arbeiten-mit-excel-und-r/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Das korrigieren von Arbeiten ist nicht gerade des Lehrenden liebste Tätigkeit. Vorallem, wenn man eine Mischung auf Multiple-Choice und Freitest Aufgaben zu korrigieren hat und leider keine gute technische Unterstützung vorfindet.&lt;/p&gt;
&lt;p&gt;Klar gibt es wunderschöne Lösungen mit R dazu, wie zum Beispiel &lt;a href=&#34;http://www.r-exams.org&#34; class=&#34;uri&#34;&gt;http://www.r-exams.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aber zum Glück kann man den Ablauf auch “mit Bordmitteln” etwas verbessern.&lt;/p&gt;
&lt;p&gt;Wir bekommen eine Liste der Teilnehmer, in Form eine Excel- oder CSV-Datei, in die wir die Punkte eintragen können, die von der Hochschule digital verarbeitet wird. Diese Liste nehmen wir als Grundlage um den Ablauf etwas zu optimieren.&lt;/p&gt;
&lt;p&gt;In den Klausuren gibt es vier Sorten von Aufgabentypen:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Multiple Choice mit genau einer Antwortmöglichkeit&lt;/li&gt;
&lt;li&gt;Multiple Choice mit mehr als einer Antwortmöglichkeit&lt;/li&gt;
&lt;li&gt;(Ganze) Zahlen als Antwort auf eine Frage&lt;/li&gt;
&lt;li&gt;Begründungen und/oder freie Textantworten&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Die ersten drei Aufgabentypen können sehr schön mit Hilfe einer Exceltabelle erfasst werden. Der vierte Aufgabentyp muss direkt bewertet werden und wird in so ebenfalls in die Exceltabelle eingegeben.&lt;/p&gt;
&lt;p&gt;Die erfassten Daten der Klausuren liegen zu Beginn der Auswertung in einer Exceldatei bereit, die in etwa wie folgt aussieht:&lt;/p&gt;
&lt;p&gt;&amp;lt; &amp;lt; &amp;lt; BILD EXCEL DATEI &amp;gt; &amp;gt; &amp;gt;&lt;/p&gt;
&lt;p&gt;Diese Datei wird unter dem Namen &lt;code&gt;Klausurteilnehmendenliste.xslx&lt;/code&gt; gespeichert.&lt;/p&gt;
&lt;p&gt;Die Auswertung geschieht dann mittels eines kleinen R-Skripts:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mosaic)
library(readxl)

max.show &amp;lt;- 10

Aufgaben.Index &amp;lt;- 1:40
Aufgaben.Typ   &amp;lt;- rep(&amp;quot;MC&amp;quot;, 40)
for (idx in c(1, 9, 14, 36, 37, 38, 39, 40)){
    Aufgaben.Typ[idx] &amp;lt;- &amp;quot;nonMC&amp;quot;
}

Aufgaben.Punkte.max &amp;lt;- c( 8, 1, 1, 1, 2, 1, 2, 2, 3, 1, 
                          2, 1, 1, 3, 2, 1, 4, 2, 2, 2, 
                          2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 
                          1, 2, 1, 1, 1, 6, 4, 4, 6, 8)
Aufgaben.MC.richtig &amp;lt;- c(NA, &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;D&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, NA, &amp;quot;B&amp;quot;,
                         &amp;quot;BD&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;A&amp;quot;, NA, &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;BC&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;A&amp;quot;,
                         &amp;quot;B&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;,  &amp;quot;2&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;,
                         &amp;quot;B&amp;quot;, &amp;quot;F&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;B&amp;quot;, NA, NA, NA, NA, NA
                        )
if (sum(Aufgaben.Punkte.max) != 90) stop(&amp;quot;Gesamtpunktzahl ist nicht 90!&amp;quot;)

for (idx in 1:40) {
    if (Aufgaben.Typ[idx] == &amp;quot;MC&amp;quot;) {
        if (is.na(Aufgaben.MC.richtig[idx])) stop(paste(&amp;quot;MC Aufgabe&amp;quot;, idx, &amp;quot;ohne Musterlösung!&amp;quot;))
    } else {
        if (!is.na(Aufgaben.MC.richtig[idx])) stop(paste(&amp;quot;Nicht-MC Aufgabe&amp;quot;, idx, &amp;quot;mit Musterlösung!&amp;quot;))
    }
}

Aufgaben &amp;lt;- c( 531388,
                NA, &amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;,  NA, &amp;quot;B&amp;quot;,
                &amp;quot;BD&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;A&amp;quot;,  NA, &amp;quot;B&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;,  &amp;quot;&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;B&amp;quot;,
                &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;,
                &amp;quot;A&amp;quot;, &amp;quot;E&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;C&amp;quot;, NA, NA, NA, NA, NA
                )

sumMC &amp;lt;- function(test) {
    summe &amp;lt;- 0
    for(idx in 1:40) {
        if (!is.na(test[idx+1]) &amp;amp;&amp;amp; (!(test[idx+1] == &amp;quot;/&amp;quot; ))) {
            if (Aufgaben.Typ[idx] == &amp;quot;MC&amp;quot;) {
                tmp &amp;lt;- length(Aufgaben.MC.richtig[idx])
                if (tmp &amp;gt; 1) {
                    pp &amp;lt;-  Aufgaben.Punkte.max[idx]/tmp
                    for(x in unlist(strsplit(Aufgaben.MC.richtig[idx], NULL))) {
                        if (toupper(x) %in% toupper(test[idx+1])) {
                            summe &amp;lt;- summe + pp
                        }
                    }
                } else {
                    if (toupper(test[idx+1]) == toupper(Aufgaben.MC.richtig[idx])) {
                        summe &amp;lt;- summe + Aufgaben.Punkte.max[idx]
                    }
                }
            } else {
                if (!is.na(test[idx+1])) {
                    summe &amp;lt;- summe + as.integer(test[idx+1])
                }
            }
        }
    }
    return(summe)
}

Klausurteilnehmendenliste &amp;lt;- read_excel(&amp;quot;Klausurteilnehmendenliste.xlsx&amp;quot;)
Klausurteilnehmendenliste &amp;lt;- Klausurteilnehmendenliste %&amp;gt;% select(c(-1,-2)) %&amp;gt;% mutate_all(toupper)

Punkte &amp;lt;- apply(Klausurteilnehmendenliste, 1, sumMC)
Klausurteilnehmendenliste &amp;lt;- cbind(Klausurteilnehmendenliste, Punkte)

head(select(Klausurteilnehmendenliste, c(1, &amp;quot;Punkte&amp;quot;)), max.show)
tail(select(Klausurteilnehmendenliste, c(1, &amp;quot;Punkte&amp;quot;)), max.show)

Klausurteilnehmendenliste %&amp;gt;%
    filter(Punkte &amp;gt; 10) %&amp;gt;%
    gf_counts(~ Punkte, data=.)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mit den Zeilen&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Aufgaben.Typ   &amp;lt;- rep(&amp;quot;MC&amp;quot;, 40)
for (idx in c(1, 9, 14, 36, 37, 38, 39, 40)){
    Aufgaben.Typ[idx] &amp;lt;- &amp;quot;nonMC&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;werden zunächst 40 MC-Aufgaben angelegt und danach die Aufgaben 1, 9, 14, 36, 37, 38, 39 und 40 als nicht MC Aufgaben gekennzeichnet. Hier muss später die Punktzahl direkt eingegeben werden!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Aufgaben.Punkte.max &amp;lt;- c( 8, 1, 1, 1, 2, 1, 2, 2, 3, 1, 
                          2, 1, 1, 3, 2, 1, 4, 2, 2, 2, 
                          2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 
                          1, 2, 1, 1, 1, 6, 4, 4, 6, 8)
Aufgaben.MC.richtig &amp;lt;- c(NA, &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;D&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, NA, &amp;quot;B&amp;quot;,
                         &amp;quot;BD&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;A&amp;quot;, NA, &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;BC&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;A&amp;quot;,
                         &amp;quot;B&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;,  &amp;quot;2&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;,
                         &amp;quot;B&amp;quot;, &amp;quot;F&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;B&amp;quot;, NA, NA, NA, NA, NA
                        )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;code&gt;Aufgaben.Punkte.max&lt;/code&gt; werden die maximal erreichbaren Punkte pro Aufgabe gespeichert. In &lt;code&gt;Aufgaben.MC.richtig&lt;/code&gt; sind alle &lt;em&gt;nicht MC&lt;/em&gt;-Aufgaben mit &lt;code&gt;NA&lt;/code&gt; gekennzeichnet. Die Lösungen werden als Zeichenkette (in Großbuchstaben) hinterlegt. Sollte eine MC-Aufgabe mehrere richtige Antworten haben, so schreibt man diese einfach hintereinander. So bedeutet “BD”, dass die Lösungen “B” und “D” richtig sind.&lt;/p&gt;
&lt;p&gt;Wird in den Lösungen für eine Aufgabe “/” eingetragen, so gilt diese Aufgabe als nicht bearbeitet und wird mit 0 Punkten bewertet.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Der Satz von Vieta und Dr. Loh&#39;s Methode</title>
      <link>https://sefiroth.net/nab/post/der-satz-von-vieta-und-dr-loh-s-methode/</link>
      <pubDate>Wed, 26 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/der-satz-von-vieta-und-dr-loh-s-methode/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Das schnelle Lösen von quadratischen Gleichungen – mit (nahezu) ganzzahligen Lösungen – ist etwas für den (Wurzel-)Satz von Vieta.&lt;/p&gt;
&lt;p&gt;Ist eine quadratischen Gleichung in Normalform, genügt sie der folgenden
Darstellung:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[x^2 + px + q = 0\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Diese Gleichung hat, wenn überhaupt, zwei (nicht notwendig verschiedene)
Lösungen &lt;span class=&#34;math inline&#34;&gt;\(x_1\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(x_2\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Wegen&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[(x-x_1) \cdot (x-x_2) = x^2 -(x_1+x_2)\cdot x + x_1\cdot x_2 = x^2 + px + q\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;muss &lt;span class=&#34;math inline&#34;&gt;\(p = -\left(x_1+x_2\right)\)&lt;/span&gt; und gleichzeitig &lt;span class=&#34;math inline&#34;&gt;\(q = x_1 \cdot x_2\)&lt;/span&gt; gelten.&lt;/p&gt;
&lt;p&gt;Sucht man nach (ganzzahligen) &lt;span class=&#34;math inline&#34;&gt;\(x_1\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(x_2\)&lt;/span&gt;, so nimmt man die Teilermenge
&lt;span class=&#34;math inline&#34;&gt;\(T_q\)&lt;/span&gt; von &lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt; und prüft für jedes &lt;span class=&#34;math inline&#34;&gt;\(x \in T_q\)&lt;/span&gt; ob es ein &lt;span class=&#34;math inline&#34;&gt;\(y \in T_q\)&lt;/span&gt; gibt,
so dass &lt;span class=&#34;math inline&#34;&gt;\(\pm x\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(\pm y\)&lt;/span&gt; sowohl die Gleichungen für &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt; erfüllen.
Ein für &lt;span class=&#34;math inline&#34;&gt;\(q\)&lt;/span&gt; passendes Paar zu finden ist dabei nicht das Problem.
Aber die Gleichung für &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; muss auch erfüllt sein.&lt;/p&gt;
&lt;div id=&#34;ein-beispiel&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Ein Beispiel&lt;/h3&gt;
&lt;p&gt;Hat die Gleichung &lt;span class=&#34;math inline&#34;&gt;\(x^2 - 8 \cdot x + 12 = 0\)&lt;/span&gt; also nur ganzzahlige Lösungen,
so reicht es die Teiler von &lt;span class=&#34;math inline&#34;&gt;\(12\)&lt;/span&gt; zu untersuchen.&lt;/p&gt;
&lt;p&gt;Nun ist &lt;span class=&#34;math inline&#34;&gt;\(12 = 2 \cdot 2 \cdot 3\)&lt;/span&gt; und somit die Teilermenge von &lt;span class=&#34;math inline&#34;&gt;\(12\)&lt;/span&gt; die Menge
&lt;span class=&#34;math inline&#34;&gt;\(T_{12} = \{1, 2, 3, 4, 6, 12\}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Wegen der &lt;span class=&#34;math inline&#34;&gt;\(p=-8\)&lt;/span&gt; muss &lt;span class=&#34;math inline&#34;&gt;\(x_1 + x_2\)&lt;/span&gt; eine positive Zahl sein.
Wegen &lt;span class=&#34;math inline&#34;&gt;\(q=+12\)&lt;/span&gt; müssen &lt;span class=&#34;math inline&#34;&gt;\(x_1\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(x_2\)&lt;/span&gt; beide positiv sein.&lt;/p&gt;
&lt;p&gt;Gesucht ist also die Lösung von &lt;span class=&#34;math inline&#34;&gt;\(x_1+x_2 = 8\)&lt;/span&gt; für &lt;span class=&#34;math inline&#34;&gt;\(x_1, x_2 \in T_{12}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Für &lt;span class=&#34;math inline&#34;&gt;\(1\)&lt;/span&gt; findet sich &lt;span class=&#34;math inline&#34;&gt;\(12\)&lt;/span&gt;, für &lt;span class=&#34;math inline&#34;&gt;\(2\)&lt;/span&gt; findet sich &lt;span class=&#34;math inline&#34;&gt;\(6\)&lt;/span&gt; und für &lt;span class=&#34;math inline&#34;&gt;\(3\)&lt;/span&gt; findet sich &lt;span class=&#34;math inline&#34;&gt;\(4\)&lt;/span&gt;.
Danach drehen sich die Positionen nur noch um, es gibt aber keinen neuen Paarungen.&lt;/p&gt;
&lt;p&gt;Weil &lt;span class=&#34;math inline&#34;&gt;\(1 + 12 = 13 \neq 8\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(3+4=7 \neq 8\)&lt;/span&gt; ist fallen diese Paare als Lösungen aus.&lt;/p&gt;
&lt;p&gt;Da &lt;span class=&#34;math inline&#34;&gt;\(2+6=8\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(2 \cdot 6 = 12\)&lt;/span&gt; ist, haben wir mit &lt;span class=&#34;math inline&#34;&gt;\(x_1=2\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(x_2=6\)&lt;/span&gt; die Lösung gefunden.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;dr.-lohs-methode&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Dr. Loh’s Methode&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Dr. Loh’s Methode&lt;/strong&gt; zielt darauf ab, das Raten des Lösungspaars &lt;span class=&#34;math inline&#34;&gt;\(x_1\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(x_2\)&lt;/span&gt; etwas stärker in eine Berechnung zu überführen.&lt;/p&gt;
&lt;p&gt;Wir starten mit &lt;span class=&#34;math inline&#34;&gt;\(p=8\)&lt;/span&gt; und wissen, dass &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; in die Summe von zwei Zahlen zerlegt werden muss.
&lt;span class=&#34;math inline&#34;&gt;\(p/2\)&lt;/span&gt; ist der Scheitelpunktstelle der quadratischen Funktion &lt;span class=&#34;math inline&#34;&gt;\(f(x) = x^2+px+q\)&lt;/span&gt;
und die zwei Nullstellen, sofern existent, haben von der Scheitelpunktstelle &lt;span class=&#34;math inline&#34;&gt;\(p/\)&lt;/span&gt;
den selben Abstand, den wir &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; nennen wollen.&lt;/p&gt;
&lt;p&gt;Damit ist&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[x_1 = \frac{p}{2} +u \quad\text{ und }\quad x_2 = \frac{p}{2} - u\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In unserem Beispiel gilt:
&lt;span class=&#34;math display&#34;&gt;\[x_1 = 4+u \quad\text{ und }\quad x_2 = 4 - u\]&lt;/span&gt;
Da nachdem Wurzelsatz von Vieta &lt;span class=&#34;math inline&#34;&gt;\(q=x_1 \cdot x_2\)&lt;/span&gt; ist, gilt (mit der 3. Binomischen Formel) für unser Beispiel:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[x_1 \cdot x_2 = (4+u)(4-u)=4^2-u^2 = 16-u^2 = 12\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir stellen die Gleichung um und erhalten:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[u^2 = 16-12 = 4\]&lt;/span&gt;
Diese Wurzelgleichung hat nun zwei Lösungen:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[u = \pm\sqrt{4} = \pm 2, \text{ somit: }u_1=-2, u_2 = 2\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Und – entweder durch ausprobieren oder nachdenken – erhalten wir die Lösung
&lt;span class=&#34;math inline&#34;&gt;\(x_1=4+u_1=2\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(x_2=4-u_1=6\)&lt;/span&gt; ergibt.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ein-weiteres-beispiel&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Ein weiteres Beispiel&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[x^2 -10 \cdot x + 24 = 0\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Dann ist &lt;span class=&#34;math inline&#34;&gt;\(x_1=5-u\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(x_2=5+u\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(x_1\cdot x_2=25-u^2 = 24\)&lt;/span&gt; und somit &lt;span class=&#34;math inline&#34;&gt;\(u^2=\pm 1\)&lt;/span&gt; und die Lösung &lt;span class=&#34;math inline&#34;&gt;\(x_1=4\)&lt;/span&gt; sowie &lt;span class=&#34;math inline&#34;&gt;\(x_2=6\)&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;und-noch-ein-beispiel&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Und noch ein Beispiel&lt;/h3&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[x^2 - 7 \cdot x + 12 = 0\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Nun ist &lt;span class=&#34;math inline&#34;&gt;\(x_1=3{,}5-u\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(x_2=3{,}5+u\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(x_1 \cdot x_2 = 12{,}25-u^2=12\)&lt;/span&gt; und somit &lt;span class=&#34;math inline&#34;&gt;\(u^2=\pm 0{,}25\)&lt;/span&gt; und die Lösung &lt;span class=&#34;math inline&#34;&gt;\(x_1=3\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(x_2=4\)&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Erste Schritte mit `vroom`</title>
      <link>https://sefiroth.net/nab/post/erste-schritte-mit-vroom/</link>
      <pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/erste-schritte-mit-vroom/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Nach &lt;a href=&#34;https://readr.tidyverse.org&#34;&gt;&lt;code&gt;readr&lt;/code&gt;&lt;/a&gt; kommt &lt;a href=&#34;https://vroom.r-lib.org&#34;&gt;&lt;code&gt;vroom&lt;/code&gt;&lt;/a&gt;. In der Zwischenzeit liegt vroom in der Version 1.2.0 vor und daher habe ich mir ein paar Stunden Zeit gekommen um ein paar erste Experimente damit zu machen.&lt;/p&gt;
&lt;div id=&#34;erste-schritte-mit-vroom&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Erste Schritte mit vroom&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(vroom)

# URL für die Quelle von tips.csv:
url &amp;lt;- &amp;quot;https://goo.gl/whKjnl&amp;quot;

# Locale auf Deutsche Sprache, Dezimalkomma und Gruppierungspunkte setzen
mylocale &amp;lt;- locale(&amp;quot;de&amp;quot;, decimal_mark = &amp;quot;,&amp;quot;, grouping_mark = &amp;quot;.&amp;quot;)

# Spaltentypen ggf. vorgeben:
mycols &amp;lt;- cols(
            col_number(),  # total_bill
            col_number(),  # tip
            col_factor(),  # sex
            col_factor(),  # smoker
            col_factor(),  # day
            col_factor(),  # time
            col_integer()  # size
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Laden mit vroom, Spaltentypen erraten, Locale auf mylocale
tips.vroom &amp;lt;- vroom(url, locale = mylocale)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Rows: 244 Columns: 7&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Column specification ────────────────────────────────────────────────────────
## Delimiter: &amp;quot;;&amp;quot;
## chr (4): sex, smoker, day, time
## dbl (3): total_bill, tip, size&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## ℹ Use `spec()` to retrieve the full column specification for this data.
## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(tips.vroom)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 7
##   total_bill   tip sex    smoker day   time    size
##        &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt;
## 1       17.0  1.01 Female No     Sun   Dinner     2
## 2       10.3  1.66 Male   No     Sun   Dinner     3
## 3       21.0  3.5  Male   No     Sun   Dinner     3
## 4       23.7  3.31 Male   No     Sun   Dinner     2
## 5       24.6  3.61 Female No     Sun   Dinner     4
## 6       25.3  4.71 Male   No     Sun   Dinner     4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(tips.vroom)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## spec_tbl_df [244 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)
##  $ total_bill: num [1:244] 17 10.3 21 23.7 24.6 ...
##  $ tip       : num [1:244] 1.01 1.66 3.5 3.31 3.61 4.71 2 3.12 1.96 3.23 ...
##  $ sex       : chr [1:244] &amp;quot;Female&amp;quot; &amp;quot;Male&amp;quot; &amp;quot;Male&amp;quot; &amp;quot;Male&amp;quot; ...
##  $ smoker    : chr [1:244] &amp;quot;No&amp;quot; &amp;quot;No&amp;quot; &amp;quot;No&amp;quot; &amp;quot;No&amp;quot; ...
##  $ day       : chr [1:244] &amp;quot;Sun&amp;quot; &amp;quot;Sun&amp;quot; &amp;quot;Sun&amp;quot; &amp;quot;Sun&amp;quot; ...
##  $ time      : chr [1:244] &amp;quot;Dinner&amp;quot; &amp;quot;Dinner&amp;quot; &amp;quot;Dinner&amp;quot; &amp;quot;Dinner&amp;quot; ...
##  $ size      : num [1:244] 2 3 3 2 4 4 2 4 2 2 ...
##  - attr(*, &amp;quot;spec&amp;quot;)=
##   .. cols(
##   ..   total_bill = col_double(),
##   ..   tip = col_double(),
##   ..   sex = col_character(),
##   ..   smoker = col_character(),
##   ..   day = col_character(),
##   ..   time = col_character(),
##   ..   size = col_double(),
##   ..   .delim = &amp;quot;;&amp;quot;
##   .. )
##  - attr(*, &amp;quot;problems&amp;quot;)=&amp;lt;externalptr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;object.size(tips.vroom)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 20632 bytes&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Laden mit vroom, Spaltentypen mycols, Locale auf mylocale
tips.vroom2 &amp;lt;- vroom(url, col_types = mycols, locale = mylocale)

head(tips.vroom2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 7
##   total_bill   tip sex    smoker day   time    size
##        &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;  &amp;lt;fct&amp;gt;  &amp;lt;fct&amp;gt; &amp;lt;fct&amp;gt;  &amp;lt;int&amp;gt;
## 1       17.0  1.01 Female No     Sun   Dinner     2
## 2       10.3  1.66 Male   No     Sun   Dinner     3
## 3       21.0  3.5  Male   No     Sun   Dinner     3
## 4       23.7  3.31 Male   No     Sun   Dinner     2
## 5       24.6  3.61 Female No     Sun   Dinner     4
## 6       25.3  4.71 Male   No     Sun   Dinner     4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(tips.vroom2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## spec_tbl_df [244 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)
##  $ total_bill: num [1:244] 17 10.3 21 23.7 24.6 ...
##  $ tip       : num [1:244] 1.01 1.66 3.5 3.31 3.61 4.71 2 3.12 1.96 3.23 ...
##  $ sex       : Factor w/ 2 levels &amp;quot;Female&amp;quot;,&amp;quot;Male&amp;quot;: 1 2 2 2 1 2 2 2 2 2 ...
##  $ smoker    : Factor w/ 2 levels &amp;quot;No&amp;quot;,&amp;quot;Yes&amp;quot;: 1 1 1 1 1 1 1 1 1 1 ...
##  $ day       : Factor w/ 4 levels &amp;quot;Sun&amp;quot;,&amp;quot;Sat&amp;quot;,&amp;quot;Thur&amp;quot;,..: 1 1 1 1 1 1 1 1 1 1 ...
##  $ time      : Factor w/ 2 levels &amp;quot;Dinner&amp;quot;,&amp;quot;Lunch&amp;quot;: 1 1 1 1 1 1 1 1 1 1 ...
##  $ size      : int [1:244] 2 3 3 2 4 4 2 4 2 2 ...
##  - attr(*, &amp;quot;spec&amp;quot;)=
##   .. cols(
##   ..   total_bill = col_number(),
##   ..   tip = col_number(),
##   ..   sex = col_factor(levels = NULL, ordered = FALSE, include_na = FALSE),
##   ..   smoker = col_factor(levels = NULL, ordered = FALSE, include_na = FALSE),
##   ..   day = col_factor(levels = NULL, ordered = FALSE, include_na = FALSE),
##   ..   time = col_factor(levels = NULL, ordered = FALSE, include_na = FALSE),
##   ..   size = col_integer(),
##   ..   .delim = &amp;quot;;&amp;quot;
##   .. )
##  - attr(*, &amp;quot;problems&amp;quot;)=&amp;lt;externalptr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;object.size(tips.vroom2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 19416 bytes&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Readr
library(readr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Registered S3 methods overwritten by &amp;#39;readr&amp;#39;:
##   method           from 
##   format.col_spec  vroom
##   print.col_spec   vroom
##   print.collector  vroom
##   print.date_names vroom
##   print.locale     vroom
##   str.col_spec     vroom&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attache Paket: &amp;#39;readr&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Die folgenden Objekte sind maskiert von &amp;#39;package:vroom&amp;#39;:
## 
##     as.col_spec, col_character, col_date, col_datetime, col_double,
##     col_factor, col_guess, col_integer, col_logical, col_number,
##     col_skip, col_time, cols, cols_condense, cols_only, date_names,
##     date_names_lang, date_names_langs, default_locale, fwf_cols,
##     fwf_empty, fwf_positions, fwf_widths, locale, output_column,
##     problems, spec&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tips.readr &amp;lt;- readr::read_csv2(url)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ℹ Using &amp;#39;\&amp;#39;,\&amp;#39;&amp;#39; as decimal and &amp;#39;\&amp;#39;.\&amp;#39;&amp;#39; as grouping mark. Use `read_delim()` for more control.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## ── Column specification ────────────────────────────────────────────────────────
## cols(
##   total_bill = col_double(),
##   tip = col_double(),
##   sex = col_character(),
##   smoker = col_character(),
##   day = col_character(),
##   time = col_character(),
##   size = col_double()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(tips.readr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 7
##   total_bill   tip sex    smoker day   time    size
##        &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt;
## 1       17.0  1.01 Female No     Sun   Dinner     2
## 2       10.3  1.66 Male   No     Sun   Dinner     3
## 3       21.0  3.5  Male   No     Sun   Dinner     3
## 4       23.7  3.31 Male   No     Sun   Dinner     2
## 5       24.6  3.61 Female No     Sun   Dinner     4
## 6       25.3  4.71 Male   No     Sun   Dinner     4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(tips.readr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## spec_tbl_df [244 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)
##  $ total_bill: num [1:244] 17 10.3 21 23.7 24.6 ...
##  $ tip       : num [1:244] 1.01 1.66 3.5 3.31 3.61 4.71 2 3.12 1.96 3.23 ...
##  $ sex       : chr [1:244] &amp;quot;Female&amp;quot; &amp;quot;Male&amp;quot; &amp;quot;Male&amp;quot; &amp;quot;Male&amp;quot; ...
##  $ smoker    : chr [1:244] &amp;quot;No&amp;quot; &amp;quot;No&amp;quot; &amp;quot;No&amp;quot; &amp;quot;No&amp;quot; ...
##  $ day       : chr [1:244] &amp;quot;Sun&amp;quot; &amp;quot;Sun&amp;quot; &amp;quot;Sun&amp;quot; &amp;quot;Sun&amp;quot; ...
##  $ time      : chr [1:244] &amp;quot;Dinner&amp;quot; &amp;quot;Dinner&amp;quot; &amp;quot;Dinner&amp;quot; &amp;quot;Dinner&amp;quot; ...
##  $ size      : num [1:244] 2 3 3 2 4 4 2 4 2 2 ...
##  - attr(*, &amp;quot;spec&amp;quot;)=
##   .. cols(
##   ..   total_bill = col_double(),
##   ..   tip = col_double(),
##   ..   sex = col_character(),
##   ..   smoker = col_character(),
##   ..   day = col_character(),
##   ..   time = col_character(),
##   ..   size = col_double()
##   .. )&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;object.size(tips.readr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 20400 bytes&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Readr
tips.readr2 &amp;lt;- readr::read_csv2(url,
                                col_types = list(
                                col_double(),  # total_bill
                                col_double(),  # tip
                                col_factor(),  # sex
                                col_factor(),  # smoker
                                col_factor(),  # day
                                col_factor(),  # time
                                col_integer()  # size
                     )
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ℹ Using &amp;#39;\&amp;#39;,\&amp;#39;&amp;#39; as decimal and &amp;#39;\&amp;#39;.\&amp;#39;&amp;#39; as grouping mark. Use `read_delim()` for more control.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(tips.readr2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 7
##   total_bill   tip sex    smoker day   time    size
##        &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;  &amp;lt;fct&amp;gt;  &amp;lt;fct&amp;gt; &amp;lt;fct&amp;gt;  &amp;lt;int&amp;gt;
## 1       17.0  1.01 Female No     Sun   Dinner     2
## 2       10.3  1.66 Male   No     Sun   Dinner     3
## 3       21.0  3.5  Male   No     Sun   Dinner     3
## 4       23.7  3.31 Male   No     Sun   Dinner     2
## 5       24.6  3.61 Female No     Sun   Dinner     4
## 6       25.3  4.71 Male   No     Sun   Dinner     4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(tips.readr2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## spec_tbl_df [244 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)
##  $ total_bill: num [1:244] 17 10.3 21 23.7 24.6 ...
##  $ tip       : num [1:244] 1.01 1.66 3.5 3.31 3.61 4.71 2 3.12 1.96 3.23 ...
##  $ sex       : Factor w/ 2 levels &amp;quot;Female&amp;quot;,&amp;quot;Male&amp;quot;: 1 2 2 2 1 2 2 2 2 2 ...
##  $ smoker    : Factor w/ 2 levels &amp;quot;No&amp;quot;,&amp;quot;Yes&amp;quot;: 1 1 1 1 1 1 1 1 1 1 ...
##  $ day       : Factor w/ 4 levels &amp;quot;Sun&amp;quot;,&amp;quot;Sat&amp;quot;,&amp;quot;Thur&amp;quot;,..: 1 1 1 1 1 1 1 1 1 1 ...
##  $ time      : Factor w/ 2 levels &amp;quot;Dinner&amp;quot;,&amp;quot;Lunch&amp;quot;: 1 1 1 1 1 1 1 1 1 1 ...
##  $ size      : int [1:244] 2 3 3 2 4 4 2 4 2 2 ...
##  - attr(*, &amp;quot;spec&amp;quot;)=
##   .. cols(
##   ..   total_bill = col_double(),
##   ..   tip = col_double(),
##   ..   sex = col_factor(levels = NULL, ordered = FALSE, include_na = FALSE),
##   ..   smoker = col_factor(levels = NULL, ordered = FALSE, include_na = FALSE),
##   ..   day = col_factor(levels = NULL, ordered = FALSE, include_na = FALSE),
##   ..   time = col_factor(levels = NULL, ordered = FALSE, include_na = FALSE),
##   ..   size = col_integer()
##   .. )&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;object.size(tips.readr2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 19184 bytes&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Mit Bordmitteln von R
download.file(&amp;quot;https://goo.gl/whKjnl&amp;quot;, destfile = &amp;quot;tips.csv&amp;quot;)
tips.csv2 &amp;lt;- read.csv2(&amp;quot;tips.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(tips.csv2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   total_bill  tip    sex smoker day   time size
## 1      16.99 1.01 Female     No Sun Dinner    2
## 2      10.34 1.66   Male     No Sun Dinner    3
## 3      21.01 3.50   Male     No Sun Dinner    3
## 4      23.68 3.31   Male     No Sun Dinner    2
## 5      24.59 3.61 Female     No Sun Dinner    4
## 6      25.29 4.71   Male     No Sun Dinner    4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(tips.csv2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    244 obs. of  7 variables:
##  $ total_bill: num  17 10.3 21 23.7 24.6 ...
##  $ tip       : num  1.01 1.66 3.5 3.31 3.61 4.71 2 3.12 1.96 3.23 ...
##  $ sex       : chr  &amp;quot;Female&amp;quot; &amp;quot;Male&amp;quot; &amp;quot;Male&amp;quot; &amp;quot;Male&amp;quot; ...
##  $ smoker    : chr  &amp;quot;No&amp;quot; &amp;quot;No&amp;quot; &amp;quot;No&amp;quot; &amp;quot;No&amp;quot; ...
##  $ day       : chr  &amp;quot;Sun&amp;quot; &amp;quot;Sun&amp;quot; &amp;quot;Sun&amp;quot; &amp;quot;Sun&amp;quot; ...
##  $ time      : chr  &amp;quot;Dinner&amp;quot; &amp;quot;Dinner&amp;quot; &amp;quot;Dinner&amp;quot; &amp;quot;Dinner&amp;quot; ...
##  $ size      : int  2 3 3 2 4 4 2 4 2 2 ...&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;object.size(tips.csv2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 14720 bytes&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Eine typische Frage von Studierenden</title>
      <link>https://sefiroth.net/nab/post/eine-typische-frage-von-studierenden/</link>
      <pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/eine-typische-frage-von-studierenden/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Vor kurzem fand ich mal wieder eine Anfrage einer Studierenden in meinem Email Postfach. Die Frage lautete in etwa wie folgt:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Guten Tag Herr Markgraf,&lt;/p&gt;
&lt;p&gt;ich würde gerne die Hypothese untersuchen: Die reduzierte Abhängigkeit des Iphones tagsüber liegt am schönen Wetter.
Dazu habe ich eine Variable “iphones.tagsüber.unbeachtet” mit 1x, 2x und 3x täglich als Ausprägungen und eine andere Variable “wetter.ist.gut”, die als Ausprägung “Ja” und “Nein” hat.
Welchen Test kann ich dazu zur Überprüfung einer Abhängigkeit nehmen?&lt;/p&gt;
&lt;p&gt;Vielen Dank im Voraus.&lt;/p&gt;
&lt;p&gt;MfG Monika Mustermann&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Natürlich ist diese Frage im Prinzip einfach zu beantworten, sogar von Leuten, die Statistik an einer Hochschule gehört haben. – Aber da ich ja auch sonst nichts zu tun habe, gebe ich gerne statistische Hilfestellung für Studierende.
Sicher, ich verdiene damit eigentlich mein Geld.
Also ist es nur natürlich, dass ich so etwas vollkommen unentgeldlich mache.
Und wieso sollten Studierende einfach mal ein Buch in die Hand nehmen und
selber nachdenken?
Es gibt vermutlich keine Bücher zu diesem Thema, denn es ist ganz sicher eine Geheimwissenschaft.
Und wieso sollte man dann also seine Betreuungsperson zu diesem Probem fragen?
Die hat ja auch so viel zu tun… – Egal.&lt;/p&gt;
&lt;p&gt;Was haben wir hier vorliegen? – Im einfachsten Fall sind es zwei kategoriale Variablen, und wir wollen sehen ob diese von einander (un-)abhängig sind.&lt;/p&gt;
&lt;p&gt;Mangels tatsächlicher Daten basteln wir uns einfach mal ein Beispiel:&lt;/p&gt;
&lt;div id=&#34;wir-bastlen-uns-ein-beispiel&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Wir bastlen uns ein Beispiel&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Wie immer zuerst das Paket &amp;#39;mosaic&amp;#39; laden
library(mosaic)

# Einen beliebigen Startwert für den Zufallszahlengenerator
# für die Reproduzierbarkeit
set.seed(123)

# Anzahl der Vorfälle insgesamt
n &amp;lt;- 176

# Anzahl der Wiederholungen für die SBI-Methoden
loops &amp;lt;- 10000

# Erfinden eines Beispieldatensatzes
daten &amp;lt;- data.frame(
  iphones.tagsüber.unbeachtet = sample(rep(c(&amp;quot;1xtäglich&amp;quot;,&amp;quot;2xtäglich&amp;quot;,&amp;quot;3xtäglich&amp;quot;),n),n),
  wetter.ist.gut = sample(rep(c(&amp;quot;Ja&amp;quot;,&amp;quot;Nein&amp;quot;),n),n)
)

# Ausgabe der ersten Zeilen des Datensatzes
head(daten)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   iphones.tagsüber.unbeachtet wetter.ist.gut
## 1                   1xtäglich             Ja
## 2                   1xtäglich           Nein
## 3                   2xtäglich             Ja
## 4                   3xtäglich           Nein
## 5                   1xtäglich             Ja
## 6                   2xtäglich             Ja&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;ein-blick-auf-kennzahlen-und-visualisierungsmöglichkeiten&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Ein Blick auf Kennzahlen und Visualisierungsmöglichkeiten&lt;/h3&gt;
&lt;p&gt;Man kann diese Daten als Kreuztabelle zusammenfassen und diese dann mit Hilfe eines Mosaikplots darstellen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tally(iphones.tagsüber.unbeachtet ~ wetter.ist.gut, data = daten)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                            wetter.ist.gut
## iphones.tagsüber.unbeachtet Ja Nein
##                   1xtäglich 29   33
##                   2xtäglich 34   26
##                   3xtäglich 27   27&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mosaicplot(wetter.ist.gut ~ iphones.tagsüber.unbeachtet, data = daten)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2020-02-12-eine-typische-frage-von-studierenden_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Für später speichern wir die Kreuztabelle in obs.tab
obs.tab &amp;lt;- tally(iphones.tagsüber.unbeachtet ~ wetter.ist.gut, data = daten)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;von-der-forschungsthese-zur-hypothese&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Von der Forschungsthese zur Hypothese&lt;/h3&gt;
&lt;p&gt;Um nun zwischen abhängig und unabhängig statistisch zu unterscheiden, sollte man sich die Null- und Alternativhypothese genau überlegen und &lt;em&gt;operationalisieren&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Ein Blick auf die (orginale) Forschungsthese: “Die reduzierte Abhängigkeit des Iphones tagsüber liegt am schönen Wetter.”&lt;/p&gt;
&lt;p&gt;Oh je, eine kausale Forschungsthese. Ein dezenter Hinweis auf das Werk von Judea Pearl und Dana Mackenzie &lt;a href=&#34;https://www.amazon.de/Book-Why-Science-Cause-Effect/dp/046509760X/ref=sr_1_1?adgrpid=70747374853&amp;amp;dchild=1&amp;amp;gclid=EAIaIQobChMIio7A5a-57gIVBKOyCh1zPAemEAAYAyAAEgKbXPD_BwE&amp;amp;hvadid=352621590167&amp;amp;hvdev=c&amp;amp;hvlocphy=9043910&amp;amp;hvnetw=g&amp;amp;hvqmt=b&amp;amp;hvrand=4305248996988708271&amp;amp;hvtargid=kwd-422343395170&amp;amp;hydadcr=16871_1724817&amp;amp;keywords=the+book+of+why+judea+pearl&amp;amp;qid=1611656438&amp;amp;sr=8-1&amp;amp;tag=googhydr08-21&#34;&gt;“The Book of Why!”&lt;/a&gt; muss an dieser Stelle sein. – Aber da wir keine kausale Modellierung machen wollen, müssen wir das Problem sinngetreu umformulieren:&lt;/p&gt;
&lt;p&gt;“Es besteht ein Zusammenhang zwischen ‘schönem Wetter’ und dem ‘Iphone tagsüber unbeachtet’ lassen.”&lt;/p&gt;
&lt;p&gt;Warum diese neue Formulierung? – Nun, in der orginal Forschungsthese wird ein &lt;strong&gt;kausal&lt;/strong&gt; Zusammenhang geprüft. Da es sich vermutlich um eine Beobachtungstudie handelt können wir einen solchen Ursache-Wirkungs-Zusammenhang aber hier nicht so einfach prüfen. Wie das gehen könnte, dazu schaut man mal bei J.Pearl und D.Mackenzie (s.o.) nach.
Zwar kann man von außen sagen: “Wenn es einen Zusammenhang gibt, dann führt das schöne Wetter zur Nichtbeachtung.” mit klassischer Statistik können wir hier aber nur den Zusammenhang (und zwar ungerichtet!) testen.
Liegt dieser &lt;strong&gt;nicht&lt;/strong&gt; vor, so spricht erstmal auch nichts für einen kausalen Zusammenhang, aber ein Zusammenhang an sich spricht noch nicht für einen kausalen Zusammenhang!
(Korrelation ist ebeb &lt;strong&gt;nicht&lt;/strong&gt; Kausalität!)&lt;/p&gt;
&lt;p&gt;Aus der umformulierten Forschungsfrage können wir die Alternativ- und auch die Nullhypothese ableiten:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Alternativhypothese:&lt;/strong&gt; Es besteht ein Zusammenhang zwischen ‘schönem Wetter’ und dem ‘Iphone tagsüber unbeachtet’ lassen.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nullhypothese:&lt;/strong&gt; Es besteht &lt;strong&gt;kein&lt;/strong&gt; Zusammenhang zwischen ‘schönem Wetter’ und dem ‘Iphone tagsüber unbeachtet’ lassen.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;wie-kann-man-nun-den-zusammenhang-messen-und-wie-sieht-kein-zusammenhang-dabei-aus&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Wie kann man nun den Zusammenhang &lt;em&gt;messen&lt;/em&gt; und wie sieht &lt;em&gt;kein Zusammenhang&lt;/em&gt; dabei aus?&lt;/h2&gt;
&lt;p&gt;Um zu sehen ob unsere Werte keinen Zusammenhang haben, also rein zufällig sind, oder es einen inneren Zusammenhang gibt müssen wir die äußeren von den inneren Häufigkeiten trennen.&lt;/p&gt;
&lt;p&gt;Konkret heißt das, wir schauen uns an wie die Häufigkeiten oder auch Verteilung der einzelnen Variabeln ausssehen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tally(~ wetter.ist.gut, data = daten)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## wetter.ist.gut
##   Ja Nein 
##   90   86&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tally(~ iphones.tagsüber.unbeachtet, data = daten)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## iphones.tagsüber.unbeachtet
## 1xtäglich 2xtäglich 3xtäglich 
##        62        60        54&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;freiheitsgrade&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Freiheitsgrade&lt;/h4&gt;
&lt;p&gt;Die Werte innerhalb der Kreuztabelle oben werden im wesendlichen durch diese Werte bestimmt. Die außeren Werte sind also unsere Rahmenbedingungen. Dabei ist der Einfluss der sogenannten &lt;em&gt;Randhäufigkeiten&lt;/em&gt; (&lt;em&gt;Marginale Häufigkeit&lt;/em&gt;) nicht zu unterschätzen. Denn wenn wir diese als &lt;em&gt;fix&lt;/em&gt;/&lt;em&gt;gegeben&lt;/em&gt; ansehen, können wir nur mit den sechs Werten in der Mitte unserer Kreuztabelle &lt;em&gt;spielen&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Doch sind nicht alle sechs Werte wirklich frei wählbar. Denn um zum Beispiel die Summe 62 in der ersten Zeile zu erhalten haben wir ja die Summe von 29 und 33 gebildet.&lt;/p&gt;
&lt;p&gt;Ist nun der Rand, also 62, fest, so kann ich nicht &lt;em&gt;beide&lt;/em&gt; Summanden frei wählen, denn&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[62 = 29 + 33\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;impliziert ja, dass allgemein&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[62 = x + y\]&lt;/span&gt;
gelten muss und somit durch&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[x = 62 - y \qquad\text{ bzw. }\qquad y = 62 - x\]&lt;/span&gt;
immer maximal eine der Variabeln – &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; oder &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; – wirklich frei wählen kann.&lt;/p&gt;
&lt;p&gt;Da dies für jede Zeile, aber auch für jede Spalte gilt, denn z.B. ist die Summe der ersten Spalte gegeben durch&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[90 = 29 + 34 + 27,\]&lt;/span&gt;
sind von den sechs Werten in der Kreuztabelle in der Tat nur 2 Werte wirklich frei zu wählen.
Wir haben also ein Problem mit &lt;em&gt;2 Freiheitsgraden&lt;/em&gt;, man schreibt das kurz mit &lt;span class=&#34;math inline&#34;&gt;\(df=2\)&lt;/span&gt; (&lt;em&gt;df&lt;/em&gt; steht dabei für &lt;em&gt;degree of freedom&lt;/em&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;unabhängigkeit-in-der-statistik&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Unabhängigkeit in der Statistik&lt;/h3&gt;
&lt;p&gt;Wir sagen, in der Statistik, dass ein gemeinsames Ereignis unabhängig ist wenn sich das Ereignis als Produkt der beiden Einzelereignisse berechnen lässt.
Seien &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; also zwei Ereignisse, dann gilt im Falle der Unabhängigkeit:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[P(A \cap B) = P(A) \cdot P(B)\]&lt;/span&gt;
Oder etwas informeller: &lt;em&gt;Die Wahrscheinlichkeit das beide Ereignisse eintreffen ist das Produkt der Wahrscheinlichkeiten, dass jeweils eines der beiden Ereignisse eintrifft.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Wir können diese Definition aus der Wahrscheinlichkeitstheorie an unser Problem adaptieren, in dem wir die Wahrscheinlichkeiten durch die relativen Häufigkeiten ersetzen.&lt;/p&gt;
&lt;p&gt;Der Wert für das gemeinsame Ereignis &lt;code&gt;iphone.tagsüber.unbeachtet = 1xtäglich&lt;/code&gt; und das &lt;code&gt;wetter.ist.gut=ja&lt;/code&gt; wird im Falle der Unabhägigkeit durch die beiden Randhäufigkeiten bestimmt:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[62 \cdot 90 = 31.7045455\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir können nun mit eine Kreuztabelle erstellen, wie sie seien müsste, falls wir tatsächlich &lt;em&gt;statitische Unabhängigkeit&lt;/em&gt; hätten. Wir nutzen dafür eine sehr allgemein gehaltene, aber selbst programmierte, Funktion &lt;code&gt;expectation.tab()&lt;/code&gt;, der wir eine Tabelle mit den Häufigkeiten der Beobachtungen geben und die uns dann die Tabelle liefert, wie sie aussehen würde, falls tatsächlich &lt;em&gt;statitische Unabhängigkeit&lt;/em&gt; herrschen würde.&lt;/p&gt;
&lt;p&gt;Die Tabelle mit den beobchteten Werten speichern wir in &lt;code&gt;obs.tab&lt;/code&gt;, die der erwarteten Werte in &lt;code&gt;exp.tab&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;expectation.tab &amp;lt;- function(tab.obs) {
  ret &amp;lt;- tab.obs
  max.i &amp;lt;- dim(tab.obs)[1]
  max.j &amp;lt;- dim(tab.obs)[2]
  
  # Randhäufigkeiten 
  x &amp;lt;- rep(0, max.i)
  for (i in 0:max.i) x[i] = sum(tab.obs[i,])

  y &amp;lt;- rep(0, max.j)
  for (j in 0:max.j) y[j] = sum(tab.obs[,j])

  # Anzahl aller Beobachtungen
  n = sum(tab.obs)
  
  for (i in 0:max.i) {
    for (j in 0:max.j) {
       ret[i,j] &amp;lt;- (x[i] * y[j] / n)
    }
  }

  ret
}

# Kreuztabelle der beobachtete Werte
obs.tab &amp;lt;- tally(iphones.tagsüber.unbeachtet ~ wetter.ist.gut, data = daten)

# Kreuztabelle der erwarteten Werte auf Grundlage der beobachteten Werte
exp.tab &amp;lt;- expectation.tab(obs.tab)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Schauen wir uns die beiden Tabellen kurz an. Zuerst die der beobachteten Werte:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;obs.tab&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                            wetter.ist.gut
## iphones.tagsüber.unbeachtet Ja Nein
##                   1xtäglich 29   33
##                   2xtäglich 34   26
##                   3xtäglich 27   27&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dann die der erwarteten Werte:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;exp.tab&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                            wetter.ist.gut
## iphones.tagsüber.unbeachtet       Ja     Nein
##                   1xtäglich 31.70455 30.29545
##                   2xtäglich 30.68182 29.31818
##                   3xtäglich 27.61364 26.38636&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;was-können-wir-nun-messen&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Was können wir nun messen?&lt;/h3&gt;
&lt;p&gt;Unsicherheit und Zufall spielen eine große Rolle. Wir können also nicht erwarten, dass die Werte für die Kreuztabelle in der Realität genau getroffen werden. (Vorallem, weil wir hier ja mit Nachkommastellen arbeiten!) Aber wir können versuchen den Abstand zu diesen Werten zu messen. Je weiter weg die Werte in der Kreuztabelle von den theoretischen Werten liegen, um so unwarscheinlicher ist es, dass die Werte zufällig aus einer unabhängigen Population gezogen wurden. D.h. wir könnten uns für eine Abhägigkeit aussprechen.&lt;/p&gt;
&lt;div id=&#34;messen-mit-dem-absolutabstand&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Messen mit dem Absolutabstand?&lt;/h4&gt;
&lt;p&gt;Man könnte nun auf die Idee kommen die Abstände an jeder Stelle zu messen und den absoluten Abstand zu summieren:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum(abs(obs.tab - exp.tab))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 13.27273&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nur was sagt dieser Wert aus? – Ist das ein kleiner Abstand oder ein großer?&lt;/p&gt;
&lt;p&gt;Wir brauchen Referenzwerte zur Orientierung. Eine Idee lautet: &lt;strong&gt;Permutationstest&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sind die Werte unabhängig von einander, dann spielt die konkrete Zuordnung keine Rolle, sondern nur die Anzahl der Ereignisse an sich. Ordnen wir nun zufällig einem &lt;code&gt;iphones.tagsüber.unbeachtet&lt;/code&gt;-Wert einen beliebigen &lt;code&gt;wetter.ist.gut&lt;/code&gt;-Wert zu, dann besteht kein Zusammenhang mehr zwischen den Werten. Dies machen wir mittels &lt;code&gt;iphones.tagsüber.unbeachtet ~ shuffle(wetter.ist.gut)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Wir simulieren so den Zustand, dass es keine Abhängigkeit zwischen den Werten gibt.&lt;/p&gt;
&lt;p&gt;Dabei messen wir den Abstand zwischen den Abstand zwischen den beobachteten Werten und den Werten, die wir erwarten würden, falls Unabhägigkeit vorliegen würde. Dafür nutzen wir die selbsterstellte Funktioen &lt;code&gt;diffabsobsexp&lt;/code&gt;, welche die Summe der absoluten Abweichungen berechnet:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\text{diffabsobsexp}(obs, exp) = \sum\limits_i \left|obs_i - exp_i\right|\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir Wiederholen das ganze mit Hilfe von &lt;code&gt;do(loops)&lt;/code&gt; genau &lt;code&gt;loops&lt;/code&gt;&lt;span class=&#34;math inline&#34;&gt;\(=10^{4}\)&lt;/span&gt; mal, geben dann das Histogramm aus und tragen als rote Linie den Wert ein, die wir bei unseren beobachteten Daten tatsächliche gemessen haben:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Funktion zur Berechnung der absoluten Differenz zwischen
# beobachteten und erwarteten Werte
diffabsobsexp &amp;lt;- function(obs, exp) {
  sum(abs(obs - exp))
}

# Absolute Abweichung der gemessenen Werte
obs.abs &amp;lt;- diffabsobsexp(obs.tab, exp.tab)

# Erzeugen der Nullverteilung
NullVert  &amp;lt;- do(loops) * diffabsobsexp(tally(iphones.tagsüber.unbeachtet ~ shuffle(wetter.ist.gut), data = daten), exp.tab)
gf_histogram(~ diffabsobsexp, data = NullVert) %&amp;gt;%
  gf_vline(xintercept = ~ obs.abs, color = &amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2020-02-12-eine-typische-frage-von-studierenden_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Wir können nun den p-Wert, also die relative Fläche rechts von der roten Linie in unseren Histogramm, abschätzen mit:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;prop( ~ diffabsobsexp &amp;gt;= obs.abs, data = NullVert)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## prop_TRUE 
##    0.5714&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Absolute Abweichungen (oder auch &lt;em&gt;absolute Fehler&lt;/em&gt;) haben die Tendenz bei großen Zahlen auch große Abweichungswerte zu liefern und bei kleinen Werten eher kleine Abweichungswerte.
Das kann man als Markel ansehen.
Daher arbeitet man vielleicht lieber mit relativen Abweichungen (oder auch &lt;em&gt;relativen Fehlern&lt;/em&gt;).
Dabei setzt man die absolute Abweichung jedesmal in Bezug auf den erwarteten Wert.
Die dazu passenden Funktion haben wir unten mit &lt;code&gt;diffabsobsexprel&lt;/code&gt; implementiert.
Dabei ist:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\text{diffabsobsexprel}(obs, exp) = \sum\limits_i \frac{\left|obs_i - exp_i\right|}{exp_i}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir Wiederholen das ganze mit Hilfe von &lt;code&gt;do(loops)&lt;/code&gt; genau &lt;code&gt;loops&lt;/code&gt;&lt;span class=&#34;math inline&#34;&gt;\(=10^{4}\)&lt;/span&gt; mal, geben dann das Histogramm aus und tragen als rote Linie den Wert ein, den wir bei unseren beobachteten Daten tatsächliche gemessen haben:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Funktion zur Berechnung der korrigierten absoluten 
# Differenz zwischen beobachteten und erwarteten Werten
diffabsobsexprel &amp;lt;- function(obs, exp) {
  sum((abs(obs - exp))/exp)
}

# Absolute Abweichung der gemessenen Werte -- korrigiert
obs.abs &amp;lt;- diffabsobsexprel(obs.tab, exp.tab)

# Erzeugen der Nullverteilung
NullVert  &amp;lt;- do(loops) * diffabsobsexprel(tally(iphones.tagsüber.unbeachtet ~ shuffle(wetter.ist.gut), data = daten), exp.tab)
gf_dhistogram(~ diffabsobsexprel, data = NullVert) %&amp;gt;%
  gf_vline(xintercept = ~ obs.abs, color = &amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2020-02-12-eine-typische-frage-von-studierenden_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Auch hier können wir den p-Wert abschätzen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;prop( ~ diffabsobsexprel &amp;gt;= obs.abs, data = NullVert)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## prop_TRUE 
##    0.5983&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Ist der absolute Abstand überhaupt gut gewählt? – Wäre nicht eher der quadratische Abstand angebracht?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ein Vorteil des quadratischen Abstand ist es, dass er kleine Abstände kleiner und große Abstände größer bewertet, als der absolute Abstand. Außerdem hat er mathematisch einige Vorteile. Wir messen nun den quadratischen Abstande mit der Funktion
&lt;code&gt;diffquad&lt;/code&gt;, die wie folgt arbeitet:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\text{diffquad}(obs, exp) = \sum\limits_i \left(obs_i - exp_i\right)^2\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir Wiederholen dies nun mit Hilfe von &lt;code&gt;do(loops)&lt;/code&gt; genau &lt;code&gt;loops&lt;/code&gt;&lt;span class=&#34;math inline&#34;&gt;\(=10^{4}\)&lt;/span&gt; mal, geben dann das Histogramm aus und tragen als rote Linie den Wert ein, den wir bei unseren beobachteten Daten tatsächliche gemessen haben:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Funktion zur Berechnung der quadratischen 
# Differenz zwischen beobachteten und erwarteten Werten
diffquad &amp;lt;- function(obs, exp) {
  sum((obs - exp)^2)
}

# Quadratische Abweichung der gemessenen Werte
obs.abs &amp;lt;- diffquad(obs.tab, exp.tab)

# Erzeugen der Nullverteilung
NullVert  &amp;lt;- do(loops) * diffquad(tally(iphones.tagsüber.unbeachtet ~ shuffle(wetter.ist.gut), data = daten), exp.tab)
gf_dhistogram(~ diffquad, data = NullVert) %&amp;gt;%
  gf_vline(xintercept = ~ obs.abs, color = &amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2020-02-12-eine-typische-frage-von-studierenden_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Wir können nun den p-Wert abschätzen mit:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;prop( ~ diffquad &amp;gt;= obs.abs, data = NullVert)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## prop_TRUE 
##    0.5389&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wie beim absoluten Abstand werden hier die Größe der Werte ausser acht gelassen und vielleicht fühlen wir uns etwas wohler, wenn wir statt des quadratischen Abstands den relativen quadratischen Abstand benutzen:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\text{diffquadrel}(obs, exp) = \sum\limits_i \frac{\left(obs_i - exp_i\right)^2}{exp_i}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Dies wiederholen wir nun mit Hilfe von &lt;code&gt;do(loops)&lt;/code&gt; genau &lt;code&gt;loops&lt;/code&gt;&lt;span class=&#34;math inline&#34;&gt;\(=10^{4}\)&lt;/span&gt; mal, geben dann das Histogramm aus und tragen als rote Linie den Wert ein, den wir bei unseren beobachteten Daten tatsächliche gemessen haben:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Funktion zur Berechnung der korrigierten quadratischen 
# Differenz zwischen beobachteten und erwarteten Werten
diffquadrel &amp;lt;- function(obs, exp) {
  sum(((obs - exp)^2)/exp)
}

# Quadratische Abweichung der gemessenen Werte -- korrigiert
obs.abs &amp;lt;- diffquadrel(obs.tab, exp.tab)

# Erzeugen der Nullverteilung
NullVert  &amp;lt;- do(loops) * diffquadrel(tally(iphones.tagsüber.unbeachtet ~ shuffle(wetter.ist.gut), data = daten), exp.tab)
gf_histogram(~ diffquadrel, binwidth = 0.5, center = 0.25, data = NullVert) %&amp;gt;%
  gf_vline(xintercept = ~ obs.abs, color = &amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2020-02-12-eine-typische-frage-von-studierenden_files/figure-html/unnamed-chunk-20-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Den Wert 1.2344597, den wir mit Hilfe der relativen quadratischen Abweichung berechnet haben, nennen wir auch &lt;span class=&#34;math inline&#34;&gt;\(\chi^2\)&lt;/span&gt; Wert.&lt;/p&gt;
&lt;p&gt;Wir können nun den p-Wert abschätzen mit:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;prop( ~ diffquadrel &amp;gt;= obs.abs, data = NullVert)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## prop_TRUE 
##    0.5599&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An Hand der p-Werte können wir nun über die Nullhypothese entscheiden:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;was-sagt-die-klassische-statistik&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Was sagt die klassische Statistik?&lt;/h3&gt;
&lt;p&gt;In der klassischen Statistik könnte man hier den &lt;span class=&#34;math inline&#34;&gt;\(\chi^2\)&lt;/span&gt;-Unabhängigkeitstest anwenden:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;xchisq.test(iphones.tagsüber.unbeachtet ~ wetter.ist.gut, data = daten)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Pearson&amp;#39;s Chi-squared test
## 
## data:  x
## X-squared = 1.2345, df = 2, p-value = 0.5394
## 
##    29       33   
## (31.70)  (30.30) 
## [0.231]  [0.241] 
## &amp;lt;-0.48&amp;gt;  &amp;lt; 0.49&amp;gt; 
##    
##    34       26   
## (30.68)  (29.32) 
## [0.359]  [0.376] 
## &amp;lt; 0.60&amp;gt;  &amp;lt;-0.61&amp;gt; 
##    
##    27       27   
## (27.61)  (26.39) 
## [0.014]  [0.014] 
## &amp;lt;-0.12&amp;gt;  &amp;lt; 0.12&amp;gt; 
##    
## key:
##  observed
##  (expected)
##  [contribution to X-squared]
##  &amp;lt;Pearson residual&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vergleichen wir nun die beiden Ansätze, SBI auf der einen und der klassische Ansatz auf der anderern Seite, einmal in einem Diagramm. Das (Dichte-)Histogramm sind die Daten aus der Nullverteilung für die quadratische, korrigierte Differenz. Die rote Linie ist der gemessene Abweichungswert. Die schwarze Linie ist der Graph der &lt;span class=&#34;math inline&#34;&gt;\(\chi^2\)&lt;/span&gt;-Verteilung mit zwei Freiheitsgraden:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_dhistogram(~ diffquadrel, binwidth = 0.5, center = 0.25, data = NullVert) %&amp;gt;%
  gf_fun(dchisq(x, df=2) ~ x, xlim = c(0:20), color = &amp;quot;blue&amp;quot;) %&amp;gt;% 
  gf_vline(xintercept = ~ obs.abs, color = &amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2020-02-12-eine-typische-frage-von-studierenden_files/figure-html/unnamed-chunk-26-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Aber es gibt auch den (exakten) Fisher-Test:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fisher.test(obs.tab, alternative = &amp;quot;greater&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Fisher&amp;#39;s Exact Test for Count Data
## 
## data:  obs.tab
## p-value = 0.5609
## alternative hypothesis: greater&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;fazit&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Fazit&lt;/h3&gt;
&lt;p&gt;Wir können die p-Werte der einzelnen Tests nun gegenüber stellen:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Scale for &amp;#39;y&amp;#39; is already present. Adding another scale for &amp;#39;y&amp;#39;, which will
## replace the existing scale.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2020-02-12-eine-typische-frage-von-studierenden_files/figure-html/unnamed-chunk-29-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Gewöhnlich haben wir ein Signifikanznivau von &lt;span class=&#34;math inline&#34;&gt;\(5\% = 0{,}05\)&lt;/span&gt; angenommen.
Die rote Linie zeigt diese Grenze.
Liegt der Balken links vor dieser Linie, so sprechen wir davon, dass der
gemessene Wert selten bei unabhänigen Daten vorliegt und würden uns gegen die
Nullhypothese und damit quasi für die Alternativhypothese entscheiden.
Liegt der Balken recht der roten Linie, so haben wir übliche Werte für
unabhängige Daten und keinen Grund gefunden, der gegen die Nullhypothese
spricht.
Warum wir sie dann, auf Grundlage unserer Daten, auch nicht ablehnen können.&lt;/p&gt;
&lt;p&gt;Bleibt Sie Frage, gibt es Situationen in denen die Entscheidung über die
Nullhypothese bei den einzelen betrachteten Verfahren unterschiedlichen ist?
Und wenn ja, wann und wieoft?&lt;/p&gt;
&lt;p&gt;Diese Fragen sind nicht Thema dieses Beitrags, aber vielleicht habe ich Zeit
und betrachte das später einmal.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Warum das Nachrechnen von Veröffentlichungen so wichtig ist</title>
      <link>https://sefiroth.net/nab/post/warum-das-nachrechnen-von-veroeffentlichungen-so-wichtig-ist/</link>
      <pubDate>Mon, 27 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/warum-das-nachrechnen-von-veroeffentlichungen-so-wichtig-ist/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Im Internet fand ich vor kurzem einen sehr interessanten &lt;a href=&#34;http://www.stefanbartz.de/dateien/Vorsicht-bei-der-sigma-Regel.pdf&#34;&gt;Text&lt;/a&gt; von &lt;a href=&#34;http://www.stefanbartz.de&#34;&gt;Stefan Bart&lt;/a&gt;. Eine Aufgabe daraus fand meine besondere Aufmerksamkeit.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;HSB gesucht (Grundgesamtheit mit &lt;span class=&#34;math inline&#34;&gt;\(H_0 \rightarrow\)&lt;/span&gt; Stichprobe)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Es soll die Nullhypothese, dass die 500 Mädchen und 500 Jungen der Schule gleich intelligent sind, getestet werden.
Dazu werden 200 zufällige Junge-Mädchen-Paare gebildet.
Bei 112 davon hatte der Junge einen höheren IQ. Ist die Abweichung vom Mittelwert signifikant?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Als Lösungen wurden vorgeschlagen:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: lower-alpha&#34;&gt;
&lt;li&gt;&lt;em&gt;grobe Näherung&lt;/em&gt;:
&lt;span class=&#34;math display&#34;&gt;\[x \in [n \cdot p_0 \pm \sqrt{n}\,] = [200 \cdot 0{,}5 \pm \sqrt{200}\,] \approx [85{,}85786; 114{,}1421] \approx [85; 115]\]&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;bessere Näherung&lt;/em&gt;:
&lt;span class=&#34;math display&#34;&gt;\[\begin{aligned}x \in \left[n \cdot p_0 \pm \Phi(0{,}975) \sqrt{n \cdot p_0 (1-p_0)}\,\right] &amp;amp;\approx \left[n \cdot p_0 \pm 1{,}96 \cdot \sqrt{n \cdot p_0 \cdot(1-p_0)} \,\right] \\ &amp;amp;\approx \left[200 \cdot 0{,}5 \pm 1.959964 \cdot \sqrt{200 \cdot 0{,}5 \cdot (1-0{,}5)}\,\right] \\ &amp;amp;\approx \left[86{,}14096; 113{,}859\right] \\&amp;amp;\approx \left[86; 114\right]\end{aligned}\]&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;exakte Lösung&lt;/em&gt;:
&lt;span class=&#34;math display&#34;&gt;\[x \in [89; 111]\]&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Auf Grundlage dieser drei Lösungen wurde dann entschieden, ob die Abweichung signifikant ist, also 112 im oder eben nicht im berechneten Intervall liegt. &lt;em&gt;Ergebnis:&lt;/em&gt; a), b) liefern nicht signifikante und c) ein signifikantes Ergebnis.&lt;/p&gt;
&lt;p&gt;Die Frage bleibt, was in der Aufgabenstellung mit “200 zufällige Junge-Mädchen-Paaren” gemeint ist.&lt;/p&gt;
&lt;p&gt;Bekannterweise kann man diesen Satz interpretieren:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Eine &lt;em&gt;uneingeschränkte Zufallsstichprobe&lt;/em&gt; erhält man z. B. bei einem &lt;em&gt;Ziehen ohne Zurücklegen&lt;/em&gt; (&lt;span class=&#34;math inline&#34;&gt;\(\rightarrow\)&lt;/span&gt; Hypergeometrische Verteilung).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Eine &lt;em&gt;einfache Zufallsstichprobe&lt;/em&gt; z. B. bei einem &lt;em&gt;Ziehen mit Zurücklegen&lt;/em&gt; (&lt;span class=&#34;math inline&#34;&gt;\(\rightarrow\)&lt;/span&gt; Binomialverteilung).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rechnet man mit Hilfe von &lt;em&gt;R&lt;/em&gt; die exakte Lösung nach, so erhält man:&lt;/p&gt;
&lt;p&gt;Für die Binomialverteilung (die “bessere Näherung”):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pl &amp;lt;- 0.025 # 2,5% als untere Grenze
pr &amp;lt;- 0.975 # 97,5% als obere Grenze

iu &amp;lt;- qbinom(pl, 200, prob=0.5)
io &amp;lt;- qbinom(pr, 200, prob=0.5)
c(iu, io) # Ausgabe des (HSB-)Intervalls&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  86 114&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Für die Hypergeometischeverteilung (hier “exakte Lösung” genannt) müssen wir die zwei Gruppen (500 Jungen und 500 Mädchen) jeweils als ein mögliches Paar ansehen. Es gibt somit insgesamt 500 solcher Paare, da jeder Junge und jedes Mädchen in nur einem Paar vorkommen können. – Sehr wohl aber 500! solcher Möglichen Paar-Reihen.&lt;/p&gt;
&lt;p&gt;Betrachten wir nun jedes Paar nur einmal, dann ziehen wir aus der Menge der Paare also eine &lt;em&gt;Stichprobe ohne Zurücklegen&lt;/em&gt;, also eine &lt;em&gt;uneingeschränkte Zufallsstichprobe&lt;/em&gt;.
Zum bestimmen der Quantiele und damit des HSB benötigen wir dann die &lt;em&gt;hypergeometrische Verteilung&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Oh ja, diese Annahme ist sehr verwirrend, logisch nicht ganz einzusehen und einfach von Mathematik-Lehrenden gemacht worden, damit man die Hypergeometrischeverteilung hier anwenden kann. Alleine schon die Annahme, dass zwei Personen immer einen unterschiedlichen IQ haben müssen … – Egal!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;m &amp;lt;- 250 # Anzahl der Paare mit besseren Mädchen
n &amp;lt;- 250 # Anzahl der Paare mit besseren Jungen
k &amp;lt;- 200 # Umfang des Stichprobe
pl &amp;lt;- 0.025 # 2,5% als untere Grenze
pr &amp;lt;- 0.975 # 97,5% als obere Grenze

iu &amp;lt;- qhyper(pl, m, n, k) # Linke/untere Intervallgrenze
io &amp;lt;- qhyper(pr, m, n, k) # Rechte/obere Intervallgrenze
c(iu, io) # Ausgabe des (HSB-)Intervalls&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  89 111&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;R&lt;/strong&gt; liefert aus &lt;em&gt;exakte Lösung&lt;/em&gt; das Intervall &lt;span class=&#34;math inline&#34;&gt;\([89; 111]\)&lt;/span&gt;. Schauen wir einmal genauer hin:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;m &amp;lt;- 250 # Anzahl der Paare mit besseren Mädchen
n &amp;lt;- 250 # Anzahl der Paare mit besseren Jungen
k &amp;lt;- 200 # Umfang des Stichprobe

p &amp;lt;- dhyper(0:k, m, n, k)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Werte für die linke/untere Intervallgrenzen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Werte für die linke/untere Intervallgrenzen:
sum(p[0:89])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.01782071&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum(p[0:90])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.02755396&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Werte für die rechte/untere Intervallgrenzen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Werte für die rechte/untere Intervallgrenzen:
sum(p[0:111])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.972446&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum(p[0:112])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.9821793&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wie wird nun gerundet? – Im Text heißt es:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Werden 2,5% und 97,5% nicht genau getroffen, wird hier nicht […] nach außen / .  , sondern in beiden Fällen nach rechts . gerundet;
d.h. man nimmt diejenigen Werte in das zu bestimmende Intervall auf, bei denen 2,5% bzw. 97,5% zum ersten Mal
übertroffen werden. Somit verbleiben weniger als 2,5% der Histogrammfläche am linken bzw. rechten Rand.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id=&#34;ein-paar-überlegungen-zum-lösen-der-aufgabe-mit-sbi&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Ein paar Überlegungen zum Lösen der Aufgabe mit SBI&lt;/h3&gt;
&lt;p&gt;Eigentlich haben wir es mit drei Fällen je Paar zu tun:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(IQ_{Junge} &amp;gt; IQ_{Mädchen}\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(IQ_{Junge} &amp;lt; IQ_{Mädchen}\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(IQ_{Junge} = IQ_{Mädchen}\)&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Tatsächlich spielt hier welches Mädchen und welcher Junge im Paar sind eine entscheidende Rolle.&lt;/p&gt;
&lt;p&gt;Simulieren wir nun einmal, dass unsere beiden Gruppe im wesendlichen (und im Mittel) gleich intelligent sind, was wir durch einen gleich mittlenem IQ von 100 und einer Standardabweichung von 15 modellieren wollen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Wir laden zuerst das Paket `mosaic`
library(mosaic)

# Zur Reproduzierbarkeit
set.seed(2009)

# IQs für Jungen und Mädchen normalverteilt mit den Parametern mu=100 und sigma=15

# 1. Fassung, aber hier ist F_iq_junger = F_iq_maedchen
#iq_jungen &amp;lt;- rnorm(500, mean=100, sd=15)
#iq_maedchen &amp;lt;- rnorm(500, mean=100, sd=15)

# 2. Fassung
#iq &amp;lt;- rnorm(500, mean=100, sd=15)
#iq_jungen &amp;lt;- iq
#iq_maedchen &amp;lt;- iq

# 3. Fassung
iq_jungen &amp;lt;- rnorm(500, mean=100, sd=15)
iq_maedchen &amp;lt;- rnorm(499, mean=100, sd=15)
iq_maedchen &amp;lt;- c(iq_maedchen, mean(iq_jungen)+499*(mean(iq_jungen)-mean(iq_maedchen)))

# Ein Blick auf die beinden Datenreihen
length(iq_maedchen)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 500&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;length(iq_jungen)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 500&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mean(iq_maedchen)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 99.22318&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mean(iq_jungen)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 99.22318&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bilden wir nun die Paare:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;paare &amp;lt;- data.frame(jungen = iq_jungen, maedchen = iq_maedchen)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Und schauen uns nun einmal an, wie oft – bei zufälliger Auswahl von 200 Paarungen – es vorkommen kann, dass Jungen in den Paarungen einen höheren IQ haben als Mädchen. Das wäre dann dem Zufall geschuldet und nicht der übermässigen Intelligenz der Jungen. (Da nach Vereinbarung beide Gruppen gleich intelligent waren!)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NullVerteilung &amp;lt;- do(5000) * count( ~ sample(jungen, 200) - sample(maedchen, 200) &amp;gt; 0, data=paare)
gf_bar( ~ n_TRUE, data=NullVerteilung)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2020-01-27-warum-das-nachrechnen-von-veroeffentlichungen-so-wichtig-ist_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Das HSB für diesen Fall wäre dann:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(hsb &amp;lt;- quantile( ~ n_TRUE, prob=c(0.025, 0.975), data=NullVerteilung))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  2.5% 97.5% 
##    83   107&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Anders formuliert, der zu erwartende Hauptstreubereich ist das Intervall &lt;span class=&#34;math inline&#34;&gt;\([83, 107]\)&lt;/span&gt;!&lt;/p&gt;
&lt;p&gt;Die 112 Paare in denen die Jungen einen höheren IQ haben, sind also nicht zu erwarten. (Also &lt;em&gt;signifikant!&lt;/em&gt;)&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Der Standardfehler aus klassischer Sicht - Ein kleiner Überblick</title>
      <link>https://sefiroth.net/nab/post/der-standardfehler-aus-klassischer-sicht-ein-kleiner-uberblick/</link>
      <pubDate>Wed, 22 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/der-standardfehler-aus-klassischer-sicht-ein-kleiner-uberblick/</guid>
      <description>
&lt;script src=&#34;2020-01-22-der-standardfehler-aus-klassischer-sicht-ein-kleiner-überblick_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Der &lt;strong&gt;Standardfehler&lt;/strong&gt; ist ein &lt;em&gt;Streuungsmaß&lt;/em&gt; für eine Schätzfunktion &lt;span class=&#34;math inline&#34;&gt;\(\hat{\vartheta}\)&lt;/span&gt; für einen unbekannten Parameter &lt;span class=&#34;math inline&#34;&gt;\(\vartheta\)&lt;/span&gt; der Grundgesamtheit. Er ist definiert als
&lt;span class=&#34;math display&#34;&gt;\[\sigma(\hat{\vartheta}) = + \sqrt{\operatorname{Var}(\hat{\vartheta})}.\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Bei einem erwartungstreuen Schätzer ist daher der Standardfehler ein Maß für die durchschnittliche Abweichung des geschätzten Parameterwertes vom wahren Parameterwert. Je kleiner der Standardfehler ist, desto genauer kann der unbekannte Parameter mit Hilfe der Schätzfunktion geschätzt werden.&lt;/p&gt;
&lt;p&gt;Für eine Stichprobe vom Umfang &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; mit Standardabweichung &lt;span class=&#34;math inline&#34;&gt;\(\sigma\)&lt;/span&gt; gilt für den Standardfehler:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;des &lt;strong&gt;Stichprobenmittel&lt;/strong&gt;: &lt;span class=&#34;math inline&#34;&gt;\(\sigma(\overline{X}) = \frac{\sigma}{\sqrt{n}}\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unterstellt man eine Stichprobenverteilung, so kann der Standardfehler anhand der Varianz der Stichprobenverteilung berechnet werden:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Binomialverteilung&lt;/strong&gt; mit Parametern &lt;span class=&#34;math inline&#34;&gt;\(N,\, p\)&lt;/span&gt;: &lt;span class=&#34;math inline&#34;&gt;\(\sigma_{\bar x,\mathrm{binom}} = \frac{\sqrt{ N \cdot p \cdot (1-p)}}{\sqrt n}\)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Exponentialverteilung&lt;/strong&gt; mit Parameter &lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt; (Erwartungswert = Standardabweichung = &lt;span class=&#34;math inline&#34;&gt;\(1/\lambda\)&lt;/span&gt;): &lt;span class=&#34;math inline&#34;&gt;\(\sigma_{\bar x,\mathrm{exp}} = \frac{1}{\lambda\sqrt n}\)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Poisson-Verteilung&lt;/strong&gt; mit Parameter &lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt; (Erwartungswert = Varianz = &lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt;): &lt;span class=&#34;math inline&#34;&gt;\(\sigma_{\bar x,\mathrm{poisson}} = \sqrt{\frac{\lambda}{n}}\)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;beispiel-binomialverteile-stichprobe&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Beispiel: Binomialverteile Stichprobe&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;printAllSE.binom &amp;lt;- function(n, N, prob, bootstrapN=1000, theta=mean) {
  stipro &amp;lt;- rbinom(n, N, prob)
  bootvert &amp;lt;- do(bootstrapN) * theta(resample(stipro))
  se.boot &amp;lt;- sd(bootvert$theta)
  se.exakt &amp;lt;- sqrt(N*prop*(1-prop))/sqrt(n)
  se &amp;lt;- list(se.exakt, se.boot)
  names(se) &amp;lt;- c(&amp;quot;exakt&amp;quot;, &amp;quot;boot&amp;quot;)
  return(se)
}

printAllSE.poision &amp;lt;- function(n, lambda, bootstrapN=1000, theta=mean) {
  stipro &amp;lt;- rpois(n, lambda)
  bootvert &amp;lt;- do(bootstrapN) * theta(resample(stipro))
  se.boot &amp;lt;- sd(bootvert$theta)
  se.exakt &amp;lt;- sqrt(lambda/n)
  se &amp;lt;- list(se.exakt, se.boot)
  names(se) &amp;lt;- c(&amp;quot;exakt&amp;quot;, &amp;quot;boot&amp;quot;)
  return(se)
}

printAllSE.normal &amp;lt;- function(n, mu=0, sigma=1, bootstrapN=1000, theta=mean) {
  stipro &amp;lt;- rnorm(n, mu, sigma)
  bootvert &amp;lt;- do(bootstrapN) * theta(resample(stipro))
  se.boot &amp;lt;- sd(bootvert$theta)
  se.exakt &amp;lt;- sqrt(sigma^2/n)
  se.geschaetzt &amp;lt;- sqrt(var(stipro)/n)
  se &amp;lt;- list(se.exakt, se.boot, se.geschaetzt)
  names(se) &amp;lt;- c(&amp;quot;exakt&amp;quot;, &amp;quot;boot&amp;quot;, &amp;quot;geschaetzt&amp;quot;)
  return(se)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n &amp;lt;- 100
N &amp;lt;- 70
prop &amp;lt;- 0.9

# Binomialverteilte:
for(n in c(30, 50, 100, 200, 500, 1000, 3000)) {
  cat(&amp;quot;\nn=&amp;quot;, n, &amp;quot;\n&amp;quot;)
  for(prob in c(1/2, 1/3, 1/4, 1/5, 1/6)) {
    N &amp;lt;- floor(prob*n)
    cat(&amp;quot;N=&amp;quot;,N, &amp;quot;\n&amp;quot;)    
    tmp &amp;lt;- printAllSE.binom(n , N, prob)
    cat(prob,&amp;quot;: &amp;quot;, tmp$exakt, &amp;quot; (exakt), &amp;quot;, tmp$boot, &amp;quot; (boot), &amp;quot;, abs(tmp$exakt-tmp$boot), &amp;quot; (abs. Fehler) \n&amp;quot;)
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## n= 30 
## N= 15 
## 0.5 :  0.212132  (exakt),  0.2996921  (boot),  0.08756008  (abs. Fehler) 
## N= 10 
## 0.3333333 :  0.1732051  (exakt),  0.2309855  (boot),  0.0577804  (abs. Fehler) 
## N= 7 
## 0.25 :  0.1449138  (exakt),  0.230028  (boot),  0.08511424  (abs. Fehler) 
## N= 6 
## 0.2 :  0.1341641  (exakt),  0.1914001  (boot),  0.05723599  (abs. Fehler) 
## N= 5 
## 0.1666667 :  0.1224745  (exakt),  0.1436041  (boot),  0.02112966  (abs. Fehler) 
## 
## n= 50 
## N= 25 
## 0.5 :  0.212132  (exakt),  0.3525394  (boot),  0.1404073  (abs. Fehler) 
## N= 16 
## 0.3333333 :  0.1697056  (exakt),  0.273315  (boot),  0.1036094  (abs. Fehler) 
## N= 12 
## 0.25 :  0.1469694  (exakt),  0.2005751  (boot),  0.05360569  (abs. Fehler) 
## N= 10 
## 0.2 :  0.1341641  (exakt),  0.1867858  (boot),  0.0526217  (abs. Fehler) 
## N= 8 
## 0.1666667 :  0.12  (exakt),  0.1343281  (boot),  0.01432808  (abs. Fehler) 
## 
## n= 100 
## N= 50 
## 0.5 :  0.212132  (exakt),  0.349122  (boot),  0.13699  (abs. Fehler) 
## N= 33 
## 0.3333333 :  0.1723369  (exakt),  0.2724159  (boot),  0.100079  (abs. Fehler) 
## N= 25 
## 0.25 :  0.15  (exakt),  0.2371899  (boot),  0.0871899  (abs. Fehler) 
## N= 20 
## 0.2 :  0.1341641  (exakt),  0.1927453  (boot),  0.05858118  (abs. Fehler) 
## N= 16 
## 0.1666667 :  0.12  (exakt),  0.1463126  (boot),  0.02631257  (abs. Fehler) 
## 
## n= 200 
## N= 100 
## 0.5 :  0.212132  (exakt),  0.3311697  (boot),  0.1190377  (abs. Fehler) 
## N= 66 
## 0.3333333 :  0.1723369  (exakt),  0.2952654  (boot),  0.1229285  (abs. Fehler) 
## N= 50 
## 0.25 :  0.15  (exakt),  0.2033503  (boot),  0.05335033  (abs. Fehler) 
## N= 40 
## 0.2 :  0.1341641  (exakt),  0.1563642  (boot),  0.02220012  (abs. Fehler) 
## N= 33 
## 0.1666667 :  0.1218606  (exakt),  0.1407523  (boot),  0.01889169  (abs. Fehler) 
## 
## n= 500 
## N= 250 
## 0.5 :  0.212132  (exakt),  0.3497107  (boot),  0.1375787  (abs. Fehler) 
## N= 166 
## 0.3333333 :  0.1728583  (exakt),  0.2574557  (boot),  0.08459734  (abs. Fehler) 
## N= 125 
## 0.25 :  0.15  (exakt),  0.2186492  (boot),  0.06864923  (abs. Fehler) 
## N= 100 
## 0.2 :  0.1341641  (exakt),  0.185649  (boot),  0.05148495  (abs. Fehler) 
## N= 83 
## 0.1666667 :  0.1222293  (exakt),  0.146211  (boot),  0.02398172  (abs. Fehler) 
## 
## n= 1000 
## N= 500 
## 0.5 :  0.212132  (exakt),  0.345063  (boot),  0.132931  (abs. Fehler) 
## N= 333 
## 0.3333333 :  0.1731185  (exakt),  0.2646252  (boot),  0.09150675  (abs. Fehler) 
## N= 250 
## 0.25 :  0.15  (exakt),  0.2231931  (boot),  0.07319309  (abs. Fehler) 
## N= 200 
## 0.2 :  0.1341641  (exakt),  0.1833904  (boot),  0.04922629  (abs. Fehler) 
## N= 166 
## 0.1666667 :  0.1222293  (exakt),  0.1528499  (boot),  0.03062058  (abs. Fehler) 
## 
## n= 3000 
## N= 1500 
## 0.5 :  0.212132  (exakt),  0.3525232  (boot),  0.1403911  (abs. Fehler) 
## N= 1000 
## 0.3333333 :  0.1732051  (exakt),  0.2702559  (boot),  0.09705078  (abs. Fehler) 
## N= 750 
## 0.25 :  0.15  (exakt),  0.2196364  (boot),  0.0696364  (abs. Fehler) 
## N= 600 
## 0.2 :  0.1341641  (exakt),  0.1791849  (boot),  0.04502081  (abs. Fehler) 
## N= 500 
## 0.1666667 :  0.1224745  (exakt),  0.1466177  (boot),  0.02414318  (abs. Fehler)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# 
# Poisionverteilte:
for(n in c(30, 50, 100, 200, 500, 1000, 3000)) {
  cat(&amp;quot;\nn=&amp;quot;, n, &amp;quot;\n&amp;quot;)
  for(lambda in c(1/2,1/3, 1/4, 1/5, 1/6)) {
    tmp &amp;lt;- printAllSE.poision(n, lambda)
    cat(lambda,&amp;quot;: &amp;quot;, tmp$exakt, &amp;quot; (exakt), &amp;quot;, tmp$boot, &amp;quot; (boot), &amp;quot;, abs(tmp$exakt-tmp$boot), &amp;quot; (abs. Fehler) \n&amp;quot;)
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## n= 30 
## 0.5 :  0.1290994  (exakt),  0.1243969  (boot),  0.004702575  (abs. Fehler) 
## 0.3333333 :  0.1054093  (exakt),  0.1002588  (boot),  0.005150442  (abs. Fehler) 
## 0.25 :  0.09128709  (exakt),  0.08302049  (boot),  0.008266599  (abs. Fehler) 
## 0.2 :  0.08164966  (exakt),  0.07318089  (boot),  0.008468764  (abs. Fehler) 
## 0.1666667 :  0.0745356  (exakt),  0.04481507  (boot),  0.02972053  (abs. Fehler) 
## 
## n= 50 
## 0.5 :  0.1  (exakt),  0.09339713  (boot),  0.006602873  (abs. Fehler) 
## 0.3333333 :  0.08164966  (exakt),  0.06811893  (boot),  0.01353073  (abs. Fehler) 
## 0.25 :  0.07071068  (exakt),  0.06970471  (boot),  0.00100597  (abs. Fehler) 
## 0.2 :  0.06324555  (exakt),  0.05739908  (boot),  0.005846471  (abs. Fehler) 
## 0.1666667 :  0.05773503  (exakt),  0.06721628  (boot),  0.009481251  (abs. Fehler) 
## 
## n= 100 
## 0.5 :  0.07071068  (exakt),  0.07809672  (boot),  0.007386041  (abs. Fehler) 
## 0.3333333 :  0.05773503  (exakt),  0.05174337  (boot),  0.005991656  (abs. Fehler) 
## 0.25 :  0.05  (exakt),  0.04781868  (boot),  0.002181325  (abs. Fehler) 
## 0.2 :  0.04472136  (exakt),  0.04141606  (boot),  0.003305295  (abs. Fehler) 
## 0.1666667 :  0.04082483  (exakt),  0.04997504  (boot),  0.009150211  (abs. Fehler) 
## 
## n= 200 
## 0.5 :  0.05  (exakt),  0.04892444  (boot),  0.001075565  (abs. Fehler) 
## 0.3333333 :  0.04082483  (exakt),  0.03717077  (boot),  0.00365406  (abs. Fehler) 
## 0.25 :  0.03535534  (exakt),  0.03747469  (boot),  0.002119349  (abs. Fehler) 
## 0.2 :  0.03162278  (exakt),  0.02947104  (boot),  0.002151735  (abs. Fehler) 
## 0.1666667 :  0.02886751  (exakt),  0.0281555  (boot),  0.0007120108  (abs. Fehler) 
## 
## n= 500 
## 0.5 :  0.03162278  (exakt),  0.03392637  (boot),  0.002303597  (abs. Fehler) 
## 0.3333333 :  0.02581989  (exakt),  0.02539741  (boot),  0.0004224743  (abs. Fehler) 
## 0.25 :  0.02236068  (exakt),  0.0223629  (boot),  2.223781e-06  (abs. Fehler) 
## 0.2 :  0.02  (exakt),  0.01972995  (boot),  0.0002700514  (abs. Fehler) 
## 0.1666667 :  0.01825742  (exakt),  0.0197222  (boot),  0.001464778  (abs. Fehler) 
## 
## n= 1000 
## 0.5 :  0.02236068  (exakt),  0.02245352  (boot),  9.283735e-05  (abs. Fehler) 
## 0.3333333 :  0.01825742  (exakt),  0.0185596  (boot),  0.0003021789  (abs. Fehler) 
## 0.25 :  0.01581139  (exakt),  0.01669539  (boot),  0.0008840021  (abs. Fehler) 
## 0.2 :  0.01414214  (exakt),  0.0150454  (boot),  0.0009032662  (abs. Fehler) 
## 0.1666667 :  0.01290994  (exakt),  0.01366569  (boot),  0.0007557503  (abs. Fehler) 
## 
## n= 3000 
## 0.5 :  0.01290994  (exakt),  0.01333761  (boot),  0.0004276694  (abs. Fehler) 
## 0.3333333 :  0.01054093  (exakt),  0.01085993  (boot),  0.000319002  (abs. Fehler) 
## 0.25 :  0.009128709  (exakt),  0.008925436  (boot),  0.0002032728  (abs. Fehler) 
## 0.2 :  0.008164966  (exakt),  0.008679877  (boot),  0.0005149115  (abs. Fehler) 
## 0.1666667 :  0.00745356  (exakt),  0.007160364  (boot),  0.0002931957  (abs. Fehler)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;for(n in c(30, 50, 100, 200, 500, 1000, 3000)) {
  tmp &amp;lt;- printAllSE.normal(n)
  cat(&amp;quot;\nn=&amp;quot;, n, &amp;quot;: &amp;quot;, tmp$exakt, &amp;quot; (exakt), &amp;quot;, tmp$boot, &amp;quot; (boot), &amp;quot;, tmp$geschaetzt, &amp;quot;(geschätzt), &amp;quot;, abs(tmp$exakt-tmp$boot), &amp;quot; (abs. Fehler (boot))&amp;quot;, abs(tmp$exakt-tmp$geschaetzt),&amp;quot;(abs. Fehler (geschätzt)) \n&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## n= 30 :  0.1825742  (exakt),  0.1835327  (boot),  0.1860335 (geschätzt),  0.0009585326  (abs. Fehler (boot)) 0.003459307 (abs. Fehler (geschätzt)) 
## 
## n= 50 :  0.1414214  (exakt),  0.1371073  (boot),  0.1374232 (geschätzt),  0.004314035  (abs. Fehler (boot)) 0.003998187 (abs. Fehler (geschätzt)) 
## 
## n= 100 :  0.1  (exakt),  0.1026103  (boot),  0.1027873 (geschätzt),  0.002610263  (abs. Fehler (boot)) 0.002787325 (abs. Fehler (geschätzt)) 
## 
## n= 200 :  0.07071068  (exakt),  0.06443724  (boot),  0.06457342 (geschätzt),  0.006273439  (abs. Fehler (boot)) 0.006137256 (abs. Fehler (geschätzt)) 
## 
## n= 500 :  0.04472136  (exakt),  0.04366336  (boot),  0.04297065 (geschätzt),  0.001057998  (abs. Fehler (boot)) 0.00175071 (abs. Fehler (geschätzt)) 
## 
## n= 1000 :  0.03162278  (exakt),  0.03126506  (boot),  0.03133075 (geschätzt),  0.000357721  (abs. Fehler (boot)) 0.0002920245 (abs. Fehler (geschätzt)) 
## 
## n= 3000 :  0.01825742  (exakt),  0.01858404  (boot),  0.01852834 (geschätzt),  0.0003266222  (abs. Fehler (boot)) 0.0002709226 (abs. Fehler (geschätzt))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Moderator und Mediation - Formen der Interaktion bei Analyse von Zusammenhängen</title>
      <link>https://sefiroth.net/nab/post/moderator-und-mediation-formen-der-interaktion-bei-analyse-von-zusammenhaengen/</link>
      <pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/moderator-und-mediation-formen-der-interaktion-bei-analyse-von-zusammenhaengen/</guid>
      <description>
&lt;script src=&#34;2019-12-31-moderator-und-mediation-formen-der-interaktion-bei-analyse-von-zusammenhängen_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Bei der Analyse von Zusammenhängen tauchen sowohl &lt;em&gt;Moderation&lt;/em&gt; als auch &lt;em&gt;Mediation&lt;/em&gt; auf. Es geht um Zusammenhänge zwischen drei Variablen &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt;.
Untersucht wird der Effekt einer unabhägigen Variable &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; (&lt;em&gt;Prädiktor&lt;/em&gt;, &lt;em&gt;UV&lt;/em&gt;) auf ein abhängige Variable &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; (&lt;em&gt;AV&lt;/em&gt;).
Wir untersuchen dies mit einem Regressionsmodell &lt;span class=&#34;math inline&#34;&gt;\(Y \sim X\)&lt;/span&gt;.
Dabei wird zusätzlich eine dritte Variable &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; berücksichtigt, die man entweder der &lt;em&gt;Moderator&lt;/em&gt; oder &lt;em&gt;Mediator&lt;/em&gt; nennt.&lt;/p&gt;
&lt;p&gt;Ist die abhängige Variable metrisch, so können wir mittels eine linearer Regression vorgehen, ist die AB dagegen dichotom, so nutzen wir eine logistische Regression.&lt;/p&gt;
&lt;div id=&#34;moderation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Moderation&lt;/h2&gt;
&lt;p&gt;Bei einer &lt;em&gt;Moderation&lt;/em&gt; wirkt die dritte Variable &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; (&lt;em&gt;Moderator&lt;/em&gt;) auf die Beziehung zwischen &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2019-12-31-moderator-und-mediation-formen-der-interaktion-bei-analyse-von-zusammenha%CC%88ngen_files/figure-html/Moderation-1.png&#34; width=&#34;30%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Der Einfluss von &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; ändert also den Effekt von &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; auf &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt;. Der Zusammenhang zwischen &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; ist also je nach &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; unterschiedlich.&lt;/p&gt;
&lt;p&gt;Statistisch gesehen liegt eine &lt;em&gt;Interaktion&lt;/em&gt; zwischen &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; vor.&lt;/p&gt;
&lt;div id=&#34;wie-untersucht-man-einen-zusammenhang-auf-eine-moderation&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Wie untersucht man einen Zusammenhang auf eine Moderation?&lt;/h3&gt;
&lt;p&gt;Dazu stellen wir ein Regressionsmodell mit den drei Faktoren &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; und der Interaktion zwischen &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; auf.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lm(Y ~ X * M, data=daten)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oder alternativ:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lm(Y ~ X + M + M:X, data=daten)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Diese drei Faktoren wirken auf &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt;. Ist in diesem Modell die Interaktion &lt;span class=&#34;math inline&#34;&gt;\(M:X\)&lt;/span&gt; &lt;em&gt;signifikant&lt;/em&gt;, so liegt eine (signifikante) &lt;em&gt;Moderation&lt;/em&gt; vor.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;mediation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Mediation&lt;/h2&gt;
&lt;p&gt;Bei der &lt;em&gt;Mediation&lt;/em&gt; steht die Variable &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; (der &lt;em&gt;Mediator&lt;/em&gt;) sowohl zu &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; als auch zu &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; in Beziehung.
Der direkte Effekt zwischen &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; wird durch den indirekten Effekt über &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; erklärt, also durch
&lt;span class=&#34;math inline&#34;&gt;\(X \to M \to Y\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2019-12-31-moderator-und-mediation-formen-der-interaktion-bei-analyse-von-zusammenha%CC%88ngen_files/figure-html/Mediator-1.png&#34; width=&#34;30%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;wie-untersucht-man-auf-eine-mediation&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Wie untersucht man auf eine Mediation?&lt;/h3&gt;
&lt;p&gt;In diesem Fall stellen wir mehrere Regressionsmodelle auf. Eine (signifikante) Mediation liegt dann vor, wenn die folgenden Bedinungen erfüllt sind:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;erstesModell &amp;lt;- lm(Y ~ X, data=daten)
zweitesModell &amp;lt;- lm(M ~ X, data=daten)
drittesModell &amp;lt;- lm(Y ~ X + M, data=daten)&lt;/code&gt;&lt;/pre&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Im ersten Modell (&lt;span class=&#34;math inline&#34;&gt;\(X \to Y\)&lt;/span&gt;) ist der Regressionskoeffizient von &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; signifikant.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Im zweiten Modell (&lt;span class=&#34;math inline&#34;&gt;\(X \to M\)&lt;/span&gt;) ist der Regressionskoeffizient von &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; signifikant.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Im dritten Modell (&lt;span class=&#34;math inline&#34;&gt;\(X,M \to Y\)&lt;/span&gt;) ist der Regressionskoeffizient von &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; signifikant und&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;der Regressionskoeffizient von &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; im dritten Modell kleiner als im ersten Modell.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Die ersten Schritte zur Prognose mitteles linearer Regression</title>
      <link>https://sefiroth.net/nab/post/die-ersten-schritte-zur-prognose-mitteles-linearer-regression/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/die-ersten-schritte-zur-prognose-mitteles-linearer-regression/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Prognosen sind ein wichtiger Bestandteil von Data Science und ist durchaus nicht nur auf moderne Ansätze, wie Neuronale Netze, deep lerning etc. begrenzt. Auch die gute, alte Regression kann ein sehr sinnvolles Mittel sein solche Prognosen zu erstellen.&lt;/p&gt;
&lt;p&gt;Um ein wenig die Ideen hinter Prognosen zu beleuchten wollen wir uns an Prognosen mit dem &lt;strong&gt;tipping&lt;/strong&gt;-Daten heranwagen.&lt;/p&gt;
&lt;div id=&#34;einlesen-der-tipping-daten&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Einlesen der tipping-Daten&lt;/h2&gt;
&lt;p&gt;Zuerst laden wir die notwenidgen Pakete:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mosaic)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Falls die &lt;strong&gt;tipping&lt;/strong&gt;-Daten noch nicht im Verzeichnis liegen, laden wir sie aus dem Internet nach:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!file.exists(&amp;quot;tips.csv&amp;quot;)) {
  download.file(&amp;quot;https://goo.gl/whKjnl&amp;quot;, destfile = &amp;quot;tips.csv&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nun laden wir die &lt;strong&gt;tipping&lt;/strong&gt;-Daten in den Speicher in den Datenrahmen &lt;code&gt;tips&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tips &amp;lt;- read.csv2(&amp;quot;tips.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wir werfen einen ersten Blick auf die &lt;strong&gt;tipping&lt;/strong&gt;-Daten:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;inspect(tips)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## categorical variables:  
##     name     class levels   n missing
## 1    sex character      2 244       0
## 2 smoker character      2 244       0
## 3    day character      4 244       0
## 4   time character      2 244       0
##                                    distribution
## 1 Male (64.3%), Female (35.7%)                 
## 2 No (61.9%), Yes (38.1%)                      
## 3 Sat (35.7%), Sun (31.1%), Thur (25.4%) ...   
## 4 Dinner (72.1%), Lunch (27.9%)                
## 
## quantitative variables:  
##            name   class  min      Q1 median      Q3   max      mean        sd
## ...1 total_bill numeric 3.07 13.3475 17.795 24.1275 50.81 19.785943 8.9024120
## ...2        tip numeric 1.00  2.0000  2.900  3.5625 10.00  2.998279 1.3836382
## ...3       size integer 1.00  2.0000  2.000  3.0000  6.00  2.569672 0.9510998
##        n missing
## ...1 244       0
## ...2 244       0
## ...3 244       0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;vorbereiten-der-test-trainings--und-auswertungesdaten&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Vorbereiten der Test-/Trainings- und Auswertungesdaten&lt;/h2&gt;
&lt;p&gt;Zunächst schränken wir die &lt;strong&gt;tipping&lt;/strong&gt;-Daten auf die Variabeln “total_bill”, “sex”, “smoker”, “day”, “time”, “size” ein und speichern das Ergebnis wieder in &lt;code&gt;tips&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tips %&amp;gt;%
    select(c(&amp;quot;total_bill&amp;quot;, &amp;quot;sex&amp;quot;, &amp;quot;smoker&amp;quot;, &amp;quot;day&amp;quot;, &amp;quot;time&amp;quot;, &amp;quot;size&amp;quot;)) -&amp;gt; tips&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ziel ist es, den Rechnungsbetrag (“total_bill”) auf Grundlage der Variabeln “sex”, “smoker”, “day”, “time” und/oder “size” vorherzusagen.&lt;/p&gt;
&lt;p&gt;Wir teilen den tipping-Datensatz auf in eine Trainingsdatensatz (“tipstrain”), einem Testdatensatz (“tipstest”) und einem Prüfdatensatz (“tipspruef”).
Der Trainingsdatensatz sollte rund zweidrittel der Daten die wir haben umfassen.
Der Testdatensatz die restlich ca. eindrittel.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;trainings_anteil = 2/3

# n.train ist ein Index für alle Werte, 
# die wir im Trainingsdatensatz haben wollen:
x.train &amp;lt;- sample(1:nrow(tips), floor(trainings_anteil*nrow(tips)))

# Trainingsdatensatz erstellen:
tipstrain &amp;lt;- slice(tips, x.train)

# Prüfdatensatz erstellen, also alles was 
# nicht in den Trainingsdatensatz gekommen ist:
tipspruef &amp;lt;- slice(tips, -(x.train))

# Der Testdatensatz ist der Prüfdatensatz 
# ohne die Variable total_bill:
tipspruef %&amp;gt;% 
    select(-total_bill) -&amp;gt; tipstest&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mit dem Tainingsdatensatz versuchen wir nun ein Prognosemodell zu erstellen, um aus den Testdatensatz eine Prognose für “total_bill” zu erstellen.&lt;/p&gt;
&lt;p&gt;Das Prognose-Modell wird ausschließlich auf Grundlage des Trainingsdatensatzes erstellt. Am Ende wollen wir unser Modell dann aber mit Hilfe des Prüfdatensatzes bewertet.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;die-datenlage&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Die Datenlage&lt;/h2&gt;
&lt;p&gt;Ein (paar) Blick(e) auf unsere Trainingsdaten:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_point(total_bill ~ jitter(size), color=~time, data=tipstrain)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2019-12-18-die-ersten-schritte-zur-prognose-mitteles-linearer-regression_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_point(total_bill ~ day | time, color = ~ sex, data=tipstrain)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2019-12-18-die-ersten-schritte-zur-prognose-mitteles-linearer-regression_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;prognosemodel-nullmodell&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Prognosemodel: Nullmodell&lt;/h2&gt;
&lt;div id=&#34;aufstellen-des-nullmodel-aka-regression-mit-der-achse&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Aufstellen des Nullmodel aka Regression mit der Achse&lt;/h3&gt;
&lt;p&gt;Wir erstellen das Nullmodell wie folgt:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lm.null &amp;lt;- lm( total_bill ~ 1, data=tipstrain)
summary(lm.null)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = total_bill ~ 1, data = tipstrain)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -13.159  -6.989  -2.429   4.171  30.401 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept)  20.4086     0.7311   27.91   &amp;lt;2e-16 ***
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 9.306 on 161 degrees of freedom&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Das Nullmodell sagt in jedem Fall den Rechnungsbetrag vorher als den Mittelwert der Trainingsdaten!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mean(~ total_bill, data=tipstrain)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 20.40864&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nun bestimmten wir mit Hilfe des Nullmodells “lm.null” eine Vorhersage für die Testdaten:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;predict.null &amp;lt;- predict(lm.null, newdata=tipstest)
head(predict.null)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        1        2        3        4        5        6 
## 20.40864 20.40864 20.40864 20.40864 20.40864 20.40864&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wie gesagt, das Nullmodell liefert als Prognose immer den Mittelwert der Trainingsdaten zurück,
das mathematische Nullmodell lautet also:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\widehat{total\_bill_i} = 20.408642  \]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;auswertung-des-nullmodells&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Auswertung des Nullmodells&lt;/h3&gt;
&lt;p&gt;Zur Auswertung Nutzen wir den &lt;em&gt;mittleren Absolutabstand&lt;/em&gt; zwischen der Vorhersage und den Prüfdaten:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;maa.null &amp;lt;-sum( abs( tipspruef$total_bill - predict.null))
maa.null&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 544.772&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;prognosemodell-lineare-regression-gegen-size-als-metrischer-wert&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Prognosemodell: Lineare Regression gegen “size” als metrischer Wert&lt;/h2&gt;
&lt;div id=&#34;aufstellen-des-modells&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Aufstellen des Modells&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;auswertung-des-regressionsmodell&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Auswertung des Regressionsmodell&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Wie man es nicht machen sollte in Python!</title>
      <link>https://sefiroth.net/nab/post/wie-man-es-nicht-machen-sollte-in-python/</link>
      <pubDate>Sat, 05 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/wie-man-es-nicht-machen-sollte-in-python/</guid>
      <description>&lt;p&gt;Es sind oft die Dinge die man nicht sucht die einem weiterhelfen. So habe ich auch nach etwas ganz anderes gesucht und bin dabei über ein nettes kleines Werk gestoplert, dass einem sagt, wie man in Python Dinge besser nicht macht.&lt;/p&gt;
&lt;p&gt;Unter &lt;a href=&#34;https://docs.quantifiedcode.com/python-anti-patterns/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://docs.quantifiedcode.com/python-anti-patterns/index.html&lt;/a&gt; gibt es das &lt;em&gt;The Little Book of Python Anti-Patterns&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Mit manchen Dingen kann ich mich spontan nicht unbedingt anfreunden. Aber im Prinzip eine sehr sinnvolle und gute Sammlung von Dingen, die man oft falsch macht und die man durch aus besser machen könnte.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Raspbian auf dem Raspberry Pi installieren</title>
      <link>https://sefiroth.net/nab/post/raspbian-auf-dem-raspberry-pi-installieren/</link>
      <pubDate>Wed, 02 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/raspbian-auf-dem-raspberry-pi-installieren/</guid>
      <description>&lt;p&gt;Wenn man zu Weihnachten einen kleinen neuen Freund bekommt, so wie ich einen Raspberry Pi Zero WH, dann möchte man ihn auch mit der aktuellen Version eines Betriebssystems austatten. Als macOS Nutzer gibt es dafür viele Möglichkeiten. Hier meine Schritte bei der Installation, damit ich mich daran später erinnere&lt;/p&gt;
&lt;h2 id=&#34;vorbereiten-der-sd-karte&#34;&gt;Vorbereiten der SD Karte&lt;/h2&gt;
&lt;p&gt;Die SD(HC) Karte sollte auf FAT32 formatiert werden. Das geht unter macOS sehr schön mit dem Festplattenmanager!&lt;/p&gt;
&lt;h2 id=&#34;laden-der-aktuellen-version-von-rasbian&#34;&gt;Laden der aktuellen Version von Rasbian&lt;/h2&gt;
&lt;p&gt;Die aktuellen Versionen findet man unter &lt;a href=&#34;https://www.raspberrypi.org/downloads/raspbian/&#34;&gt;https://www.raspberrypi.org/downloads/raspbian/&lt;/a&gt;. Es ginge auch alternativ NOOBS, aber da ich &amp;ldquo;headless&amp;rdquo; installieren möchte, wähle ich Raspbian direkt aus.&lt;/p&gt;
&lt;p&gt;Die ZIP-Datei wird entpackt (Archiveprogramm) und wir befinden uns mit der Konsole in dem Verzeichnis in dem das aktuelle Image liegt.&lt;/p&gt;
&lt;p&gt;Zur Zeit dieses Eintrages war das die Datei &amp;ldquo;2018-11-13-raspbian-stretch-full.img&amp;rdquo;&lt;/p&gt;
&lt;h3 id=&#34;speichern-des-images-auf-die-sd-karte&#34;&gt;Speichern des Images auf die SD Karte&lt;/h3&gt;
&lt;p&gt;Mit Hilfe von&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;diskutil list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ermittelt man die SD Karte (hier &amp;ldquo;/dev/disk5&amp;rdquo;) und mit Hilfe von&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;diskutil unmountdisk /dev/disk5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;wird die SD Karte komplett &amp;ldquo;unmounted&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Nun kann man mit&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo dd bs=1m if=2018-11-13-raspbian-stretch-full.img of=/dev/disk5 conv=sync
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;das Image auf die SD Karte gespeichert. Das kann etwas dauern! (Bis zu 30 Minuten!)
Mit &amp;ldquo;ctrl-t&amp;rdquo; kann  man sich regelmässig über der aktuellen Stand informieren! ;-)&lt;/p&gt;
&lt;h3 id=&#34;netzwerk-einrichten&#34;&gt;Netzwerk einrichten&lt;/h3&gt;
&lt;p&gt;Nach dem man das Image auf die SD Karte gespeichert hat wirft man die SD Karte aus und steckt sie danach wieder ein. Damit hat man die SD Karte wieder &amp;ldquo;gemounted&amp;rdquo; und wir finden unter &amp;ldquo;/Volues/boot&amp;rdquo; und Boot-Verzeichnis der SD-Karte.&lt;/p&gt;
&lt;p&gt;In diesem Verzeichnis erzeigen wir (z.B. mit &lt;em&gt;vi&lt;/em&gt;) eine Datei mit dem Namen &amp;ldquo;wpa_supplicant.conf&amp;rdquo; mit dem Inhalt:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;country=DE
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1

network={
    ssid=&amp;quot;YOUR_NETWORK_NAME&amp;quot;
    psk=&amp;quot;YOUR_PASSWORD&amp;quot;
    key_mgmt=WPA-PSK
    scan_ssid=1
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Diese Datei wird beim Booten von Rasbpian in das Verzeichnis &amp;ldquo;/etc/wpa_supplicant/&amp;rdquo; verschoben.&lt;/p&gt;
&lt;h3 id=&#34;ssh-aktivieren&#34;&gt;SSH aktivieren!&lt;/h3&gt;
&lt;p&gt;SSH ist in der Regel deaktiviert. Wir können es aber schnell einschalten. Dafür gehen wir wieder in das Verzeichnis &amp;ldquo;/Volumes/boot&amp;rdquo; und führen dort den Befehl&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch ssh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;aus. Damit wird eine (leere) Datei &amp;ldquo;ssh&amp;rdquo; erzeugt. Findet Raspbain diese Datei, so aktiviert es beim Booten automatisch den SSH-Dämon.&lt;/p&gt;
&lt;h3 id=&#34;starten-von-der-neuen-sd-karte&#34;&gt;Starten von der neuen SD Karte&lt;/h3&gt;
&lt;p&gt;Jetzt kann die Karte ausgeworfen werden und in den Raspberry eingelegt werden. Danach kann von der SD Karte gestartet werden.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Weitere Software auf den Raspberry PI installieren.</title>
      <link>https://sefiroth.net/nab/post/weitere-software-auf-den-raspberry-pi-installieren/</link>
      <pubDate>Wed, 02 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/weitere-software-auf-den-raspberry-pi-installieren/</guid>
      <description>&lt;p&gt;Hier eine Liste von Software für den Raspberry Pi, die man noch installieren sollte/ kann und wie man es macht:&lt;/p&gt;
&lt;h2 id=&#34;mathematica&#34;&gt;Mathematica&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install wolfram-engine
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;python3-auf-den-aktuellen-stand-bringen&#34;&gt;Python3 auf den aktuellen Stand bringen&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;pip3 install --upgrade pip
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;python3-und-das-paket-matplotlib&#34;&gt;Python3 und das Paket &amp;ldquo;matplotlib&amp;rdquo;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install python3-matplotlib
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Der Angriff der Riesenschlangen.</title>
      <link>https://sefiroth.net/nab/post/der-angriff-der-riesenschlangen/</link>
      <pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/der-angriff-der-riesenschlangen/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Klingt ja bedrohlich, aber es ist wirklich Möglich &lt;a href=&#34;https://www.r-project.org&#34;&gt;R&lt;/a&gt; und &lt;a href=&#34;https://www.python.org&#34;&gt;Python&lt;/a&gt; sinnvoll zu kombinieren. Nicht nur in den Anwendungen, sondern auch beim Erstellen von Skripten mit &lt;a href=&#34;https://rmarkdown.rstudio.com&#34;&gt;R markdown&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Zu Beginn des letzten Semesters hatte ich die Idee in der Vorlesung “&lt;em&gt;Mathematischen Grundlagen der Wirtschaftsinformatik&lt;/em&gt;” ein paar der Begriffe der Mengenlehre denen daraus abgeleiteten Begriffen der abstrakten Datentypen gegenüberzustellen. So gibt es die Idee der &lt;em&gt;Menge&lt;/em&gt; u.a. in &lt;em&gt;Python&lt;/em&gt; als &lt;em&gt;set&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Wie aber kann man solche Python-Fragmente in ein R markdown Sktipr einbauen? - Kann man &lt;em&gt;R markdown&lt;/em&gt; überhaupt mit &lt;em&gt;Python&lt;/em&gt; zusammen bringen? - Ein wenig suchen im Internet und ein paar Stunden später hatte ich es geschaft. Dank einer Netzpython…&lt;/p&gt;
&lt;div id=&#34;die-netzpython-als-bindeglied-zwischen-r-und-python&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Die Netzpython als Bindeglied zwischen R und Python&lt;/h2&gt;
&lt;p&gt;Eine Netzpython (engl. &lt;a href=&#34;https://en.wikipedia.org/wiki/Reticulated_python&#34;&gt;reticulated python&lt;/a&gt;) stand Pate für den Namen des &lt;em&gt;R&lt;/em&gt; Paketes &lt;a href=&#34;https://rstudio.github.io/reticulate/index.html&#34;&gt;&lt;code&gt;reticulate&lt;/code&gt;&lt;/a&gt;, welches &lt;em&gt;R&lt;/em&gt; und &lt;em&gt;Python&lt;/em&gt; miteinander verbindet. So ist es möglich &lt;em&gt;Python&lt;/em&gt;-Befehle direkt in ein &lt;em&gt;R markdown&lt;/em&gt; Skript ausführen zulassen, diese Fragmente adequat durchzustellen – ganz wie &lt;em&gt;R Skripte&lt;/em&gt; – und sogar Daten zwoschen &lt;em&gt;R&lt;/em&gt; und &lt;em&gt;Python&lt;/em&gt; hin und her (aus) zu tauschen.&lt;/p&gt;
&lt;p&gt;Nach der Installation mittels&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;reticulate&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;bedarf es aber durch aus noch einiger Anpassungen, bis alles zur Zufriedenheit funktioniert.&lt;/p&gt;
&lt;p&gt;Standardmässig sucht die Netzpython nach ihrem Gefährten mit der Hilfe des Befehls &lt;code&gt;Sys.which(&#34;python&#34;)&lt;/code&gt;, welcher bei mir leider zu einer vollkommen alten, aber noch benutzen, &lt;em&gt;Python&lt;/em&gt; Version führte. Möchte man eine ganz bestimmte &lt;em&gt;Python&lt;/em&gt; Version haben, so hilft einem der Befehl &lt;code&gt;use_python()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(reticulate)
use_python(&amp;quot;/usr/local/bin/python&amp;quot;)  # Pfad zum Python-Befehl der benutz werden soll.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Es werden auch &lt;a href=&#34;https://realpython.com/python-virtual-environments-a-primer/&#34;&gt;virtuelle Umgebungen&lt;/a&gt; unterstützt:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(reticulate)
use_virtualenv(&amp;quot;myenv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Und auch eine ganz andere Schlangenart kann benutzt werden, &lt;a href=&#34;https://www.anaconda.com/what-is-anaconda/&#34;&gt;Anacondas&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(reticulate)
use_condaenv(&amp;quot;mycondaenv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;der-einbau-in-ein-r-markdown-dokument&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Der Einbau in ein R markdown Dokument&lt;/h2&gt;
&lt;p&gt;Einen &lt;em&gt;Python&lt;/em&gt; Quellcode in ein &lt;em&gt;R markdown&lt;/em&gt; einzubauen ist dann wieder sehr einfach. Man ändert einfach ein &lt;em&gt;r&lt;/em&gt; in &lt;em&gt;python&lt;/em&gt; im Codeblock und schon steht einem der &lt;em&gt;knitr-Chunk&lt;/em&gt; als &lt;em&gt;Python&lt;/em&gt; Quelle zur Verfügung.&lt;/p&gt;
Sp liefert der &lt;em&gt;knitr-Chunk&lt;/em&gt;
&lt;pre&gt;&lt;code&gt;```{python}
# Etwas Python gefällig?
def quadrat(x):
    return x**2
    
print(quadrat(2))
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in einem &lt;em&gt;R markdown&lt;/em&gt;, dann die Ausgabe:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Etwas Python geföllig?
def quadrat(x):
    return x**2
    
print(quadrat(2))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Das war es aber noch lange nicht. &lt;em&gt;R&lt;/em&gt; und &lt;em&gt;Python&lt;/em&gt; können nämlich nicht nur nebeneinander, sondern auch miteinander!&lt;/p&gt;
&lt;p&gt;Dazu dann aber mehr in einem späteren Blog-Eintrag.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>SBI - Simulation Based Inference</title>
      <link>https://sefiroth.net/nab/post/sbi-simulation-based-inference/</link>
      <pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/sbi-simulation-based-inference/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Wenn meine Tochter &lt;em&gt;SBI&lt;/em&gt; hört, denkt sie an &lt;em&gt;Sally Bollywood Investigation&lt;/em&gt;. – Und ich oft auch. – Mit &lt;em&gt;SBI&lt;/em&gt; ist hier aber nicht der Trickfilm für Kinder, sondern &lt;em&gt;&lt;strong&gt;S&lt;/strong&gt;imulation &lt;strong&gt;B&lt;/strong&gt;ased &lt;strong&gt;I&lt;/strong&gt;nference&lt;/em&gt;, gemeint.&lt;/p&gt;
&lt;p&gt;Angestachelt von Prof. Dr. Karsten Lübke und im Schlepptau von Prof. Dr. Oliver Gansser, Prof. Dr. Matthias Gehrke und Prof. Dr. Bianca Krol haben ein paar kluge Köpfe bei der &lt;a href=&#34;http://www.fom.de&#34;&gt;FOM&lt;/a&gt; den Unterricht für Statistik auf eine neue Grundlage gestellt.
Und ich habe das Glück gehabt,dabei mitwirken zu dürfen.&lt;/p&gt;
&lt;p&gt;Unser Mastermind, Karsten Lübke, hat dazu einen sehr schönen und lesenswerten Blog-Eintrag geschrieben: &lt;a href=&#34;https://www.causeweb.org/sbi/?p=1559&#34; class=&#34;uri&#34;&gt;https://www.causeweb.org/sbi/?p=1559&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Auch R markdown Dateien sollten sich an Regeln halten</title>
      <link>https://sefiroth.net/nab/post/auch-r-markdown-dateien-sollten-sich-an-regeln-halten/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/auch-r-markdown-dateien-sollten-sich-an-regeln-halten/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Jede Programmiersprache hat Regeln.
Neben dem Regelwerk welches durch den Syntax einer Sprache festgelegt wird, gib es aber noch Regeln über die Form in der man den Quelltext schreibt.
Diese sogenannte &lt;em&gt;Stilregeln&lt;/em&gt; (engl. &lt;em&gt;style guides&lt;/em&gt;) sind von Programmieren aufgestellte Regeln um ein einheitliches “Schriftbild” des Quelltextes zu erhalten.
Das Ziel der &lt;em&gt;Stilregeln&lt;/em&gt; ist es, den Quelltext lesbarer zu gestallten, um leichter Änderungen einzupflegen oder um unnötiges zu vermeiden.&lt;/p&gt;
&lt;p&gt;Eine Programmiersprache wie &lt;em&gt;Python&lt;/em&gt; zum Beispiel hat mit &lt;a href=&#34;https://www.python.org/dev/peps/pep-0008/&#34;&gt;PEP8&lt;/a&gt; einen eigenen Standard wie ein &lt;em&gt;Python&lt;/em&gt; Programm geschrieben seien sollte.
Dazu gibt es auch gleich das passenden Prüfprogramm (früher &lt;code&gt;pep8&lt;/code&gt;, neuerdings &lt;a href=&#34;https://github.com/PyCQA/pycodestyle&#34;&gt;&lt;code&gt;pycodestyle&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Schreibt man ein &lt;em&gt;R markdown&lt;/em&gt; Text mag man vielleicht nicht daran denken, dass so eine Idee auch hier sehr sinnvoll ist.
Neben den gängigen Style-Guides für den &lt;em&gt;R&lt;/em&gt; Quellcode (z. B.: &lt;a href=&#34;https://google.github.io/styleguide/Rguide.xml&#34;&gt;Google’s R Style Guide&lt;/a&gt;, &lt;a href=&#34;http://adv-r.had.co.nz/Style.html&#34;&gt;Hadley Wickham’s Advanced R - Style guide&lt;/a&gt;, &lt;a href=&#34;http://jef.works/R-style-guide/&#34;&gt;jef.works R Style Guide&lt;/a&gt;, &lt;a href=&#34;https://csgillespie.wordpress.com/2010/11/23/r-style-guide/&#34;&gt;R Style Guide&lt;/a&gt; oder &lt;a href=&#34;https://github.com/rdatsci/PackagesInfo/wiki/R-Style-Guide&#34;&gt;R-Style-Guide&lt;/a&gt;) gibt es aber kaum Regeln (z. B.: &lt;a href=&#34;https://holtzy.github.io/Pimp-my-rmd/&#34;&gt;Pimp my Rmd&lt;/a&gt;) für die Gestaltung von &lt;em&gt;R markdown&lt;/em&gt;.&lt;/p&gt;
&lt;div id=&#34;stil-regeln-für-gutes-r-markdown-ein-erster-vorschlag&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Stil-Regeln für gutes &lt;em&gt;R markdown&lt;/em&gt;, ein erster Vorschlag&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Keine unnützen Zeichen am Ende von Textzeilen. / &lt;em&gt;No whitespaces at the end of a line&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Eine Textzeile sollte mit einem ‘echtem’ Zeichen enden und nicht mit einem ‘unsichtbarem’ Zeichen.
Das heisst: Leerzeichen, Tabs, harte Leerzeichen etc. gehören nicht ans Ende einer Zeile.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Zwei Leerzeilen vor einer jeden Kopfzeile. / &lt;em&gt;Two blank lines before every header&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Um die Inhalte auch klar voneinander trennen zu können sollte man vor der Kopfzeile zwei Leerzeilen eingefügt werden.
Statt&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Das ist eine Kopfzeile auf der 1. Ebene
## Das is eine Kopfzeile auf der 2. Ebene
Das hier ist einfacher Text&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sollte es so gegliedert sein:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;

# Das ist eine Kopfzeile auf der 1. Ebene


## Das is eine Kopfzeile auf der 2. Ebene

Das hier ist einfacher Text&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vor und nach Aufzählungen sollte immer eine Leerzeile stehen. / &lt;em&gt;One blank line before and after itemizations or enumerations&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Statt&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Das ist eine Liste:
- Ein Punkt
- Ein anderer Punkt
Und hier geht der Text weiter.
1. Der erste Punkt.
2. Der zweite Punkt.
Und wieder mal ein Text.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sollte es so gegliedert sein:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Das ist eine Liste:

- Ein Punkt
- Ein anderer Punkt

Und hier geht der Text weiter.

1. Der erste Punkt.
2. Der zweite Punkt.

Und wieder mal ein Text.&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vor und nach Codeblöcken sollte immer eine Leerzeile stehen. / &lt;em&gt;One blank line before and after a codeblock&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Statt&lt;/p&gt;
&lt;pre&gt;
Etwas Text vorher
```{r}&lt;code&gt;1+1
```&lt;/code&gt;und danach.
&lt;/pre&gt;
&lt;p&gt;sollte man es besser wie folgt gliedern:&lt;/p&gt;
&lt;pre&gt;
Etwas Text vorher

```{r}&lt;code&gt;1+1
```&lt;/code&gt; und danach.
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Keine anderen Sprachen als &lt;em&gt;R markdown&lt;/em&gt; für Inhalte oder Design nutzen. / &lt;em&gt;Use no other languages to create content or design, other than (R) markdown.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Keine anderen Sprachen, insbesondere LaTeX, um besondere Effekte zu erzielen. Dafür sollten (native) DIV oder SPAN Abschnitte benutzt werden und entsprechend durch spätere (Filter-)Programme umgesetzt werden. So ist es immer möglich Design-Ideen für alle möglichen Zielsprachen zu erhalten.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;rmdstylechecker-ein-erster-style-checker-für-r-markdown&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;RmdStyleChecker, ein erster Style Checker für &lt;em&gt;R markdown&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Die ersten drei Punkte der Liste habe ich zu Testzwecken in einem kleinen Projekt mit Hilfe von &lt;em&gt;Python&lt;/em&gt; implementiert.
Den &lt;em&gt;Python&lt;/em&gt;-Quelltext findet man unter &lt;a href=&#34;https://github.com/NMarkgraf/RmdStyleChecker&#34;&gt;RmdStyleChecker&lt;/a&gt;. Er läuft unter &lt;em&gt;Python&lt;/em&gt; 3.5+.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Ein wenig schneller zur simulierten Nullverteilung</title>
      <link>https://sefiroth.net/nab/post/ein-wenig-schneller-zur-simulierten-nullverteilung/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/ein-wenig-schneller-zur-simulierten-nullverteilung/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/d3/d3.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/profvis/profvis.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/profvis/profvis.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/profvis/scroll.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/highlight/textmate.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/highlight/highlight.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/profvis-binding/profvis.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Ein Nullhypothesentest ist schnell geschrieben.
Will man den approximativen Weg gehen, so hilft &lt;strong&gt;R&lt;/strong&gt; einem mit entsprechenden Tests mit einfachen Befehlen.
Nimmt man &lt;strong&gt;MOSAIC&lt;/strong&gt; dazu, so bekommt man u.a. für den Test auf Anteils- oder Mittelwerte sogar einen sehr einfachen, weil einheitlichen, Syntax.&lt;/p&gt;
&lt;div id=&#34;zwei-beispiele-für-approximative-hypothesentests-mit-mosaic&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Zwei Beispiele für approximative Hypothesentests mit MOSAIC&lt;/h3&gt;
&lt;p&gt;Laden wir unsere Testdaten, die &lt;strong&gt;tipping&lt;/strong&gt; Daten wie folgt:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mosaic)
download.file(&amp;quot;https://goo.gl/whKjnl&amp;quot;, destfile = &amp;quot;tips.csv&amp;quot;)
tips &amp;lt;- read.csv2(&amp;quot;tips.csv&amp;quot;)
set.seed(2009)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dann erstellen wir zwei Forschungsfragen:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Ist der mittlere Frauenanteil unter der Bezahler*innen zu den Zeitpunkten Lunch und Dinner gleich?&lt;/li&gt;
&lt;li&gt;Ist der mittlere Rechnungsbetrag zu den Zeitpunkten Lunch und Dinner gleich?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Im ersten Fall ist die Hypothese schnell geschrieben:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
H_0 : \pi_{\text{Lunch}} = \pi_{\text{Dinner}} \quad\text{vs.}\quad H_1 : \pi_{\text{Lunch}} \neq \pi_{\text{Dinner}}
\]&lt;/span&gt;
Der approximative Test mit R und MOSAIC lautet nun:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;prop.test(sex ~ time, success = &amp;quot;Female&amp;quot;, data = tips)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  2-sample test for equality of proportions with continuity correction
## 
## data:  tally(sex ~ time)
## X-squared = 9.3438, df = 1, p-value = 0.002237
## alternative hypothesis: two.sided
## 95 percent confidence interval:
##  -0.36602563 -0.07247705
## sample estimates:
##    prop 1    prop 2 
## 0.2954545 0.5147059&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ähnlich sieht es für den zweiten Fall aus. Die Hypothese lautet hier:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
H_0 : \mu_{Lunch} = \mu_{Dinner} \quad\text{vs.}\quad H_1 : \mu_{Lunch} \neq \mu_{Dinner}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Der dazugehörige Test lautet dann:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;t.test(total_bill ~ time, data = tips)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Welch Two Sample t-test
## 
## data:  total_bill by time
## t = 3.123, df = 143.29, p-value = 0.002167
## alternative hypothesis: true difference in means between group Dinner and group Lunch is not equal to 0
## 95 percent confidence interval:
##  1.331877 5.925088
## sample estimates:
## mean in group Dinner  mean in group Lunch 
##             20.79716             17.16868&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;simulation-der-nullverteilung-mit-mosaic&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Simulation der Nullverteilung mit MOSAIC&lt;/h2&gt;
&lt;p&gt;Ein anderer Weg ist es die Stichprobe selber zu nutzen um daraus eine Verteilung der Nullhypothese (die Nullverteilung) ableiten zu können.
Im ersten Fall schaut man sich die Anteilsunterschiede an, wenn man die (potentielle) Abhängigkeit von der Tageszeit (Lunch und Dinner) künstlich “abschaltet”:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(2009)
NullVtlgAntwert &amp;lt;- do(10000) * diffprop(sex ~ shuffle(time),
    success = &amp;quot;Female&amp;quot;, data = tips)
gf_histogram(~diffprop, nint = 25, data = NullVtlgAntwert)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-05-02-ein-wenig-schneller-zur-simulierten-nullverteilung_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Schaut man sich nun die Lage der Anteilsdifferenz der Stichprobe &lt;span class=&#34;math inline&#34;&gt;\(\hat\pi=0.2192513\)&lt;/span&gt; in Bezug auf diese Nullverteilung geometrisch an, so kann man schon einen ersten Eindruck erlangen, ob die Nullhypothese abzulehnen ist oder nicht:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;diffpropdach &amp;lt;- diffprop(sex ~ time, success = &amp;quot;Female&amp;quot;, data = tips)
gf_histogram(~diffprop, nint = 25, data = NullVtlgAntwert) +
    geom_vline(xintercept = diffpropdach, color = &amp;quot;blue&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-05-02-ein-wenig-schneller-zur-simulierten-nullverteilung_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Offenbar ist &lt;span class=&#34;math inline&#34;&gt;\(\hat\pi\)&lt;/span&gt; kein sehr häufiges Ereignis.&lt;/p&gt;
&lt;p&gt;Der &lt;em&gt;p-Wert&lt;/em&gt; ist ebenfalls leicht zu ermitteln:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pvalue_aw &amp;lt;- prop(~abs(diffprop) &amp;gt;= abs(diffpropdach), data = NullVtlgAntwert)
pvalue_aw&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## prop_TRUE 
##    0.0018&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mit einem Anteilswert (p-Wert) von 0.0018 zweigen wir wie selten das Ereignis unter der &lt;span class=&#34;math inline&#34;&gt;\(H_0\)&lt;/span&gt; ist.&lt;/p&gt;
&lt;p&gt;Ähnlich sieht die Situation im zweien Fall aus. Mit Hilfe weniger Befehle erzeugen wir die Nullverteilung:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(2009)
NullVtlgMittelwert &amp;lt;- do(10000) * diffmean(total_bill ~ shuffle(time),
    data = tips)
gf_histogram(~diffmean, nint = 25, data = NullVtlgMittelwert)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-05-02-ein-wenig-schneller-zur-simulierten-nullverteilung_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Und können im Anschluss die Mittelwertsdifferenz der Stichprobe geometrisch einordnen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;diffmeandach &amp;lt;- diffmean(total_bill ~ time, data = tips)
gf_histogram(~diffmean, nint = 25, data = NullVtlgMittelwert) +
    geom_vline(xintercept = diffmeandach, color = &amp;quot;blue&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-05-02-ein-wenig-schneller-zur-simulierten-nullverteilung_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Auch den &lt;em&gt;p-Wert&lt;/em&gt; können wir wieder leicht bestimmen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pvalue_mw &amp;lt;- prop(~abs(diffmean) &amp;gt;= abs(diffmeandach), data = NullVtlgMittelwert)
pvalue_mw&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## prop_TRUE 
##    0.0047&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;das-problem-zeit&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Das Problem – Zeit&lt;/h2&gt;
&lt;p&gt;Das Problem bei der Simulation ist die Zeit, die &lt;strong&gt;R&lt;/strong&gt; braucht um die Nullverteilungen zu generieren.
Das liegt im wesentlichen an Mosaic.
Mit den Routinen aus &lt;a href=&#34;https://github.com/NMarkgraf/FastSimNullDistR&#34;&gt;FastSimNullDistR&lt;/a&gt; lassen sich die Nullverteilungen deutlich schneller berechnen.
Ein Vergleich:&lt;/p&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:600px;&#34; class=&#34;profvis html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;message&#34;:{&#34;prof&#34;:{&#34;time&#34;:[1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,18,18,18,19,19,19,19,19,19,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,25,25,25,25,25,25,26,26,27,27,28,28,28,28,28,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,32,32,32,32,32,32,33,33,34,34,34,34,34,34,34,35,35,35,35,35,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,43,43,43,43,43,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,46,46,46,46,46,47,47,47,47,47,48,48,48,48,48,48,49,49,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,51,51,51,52,52,52,52,52,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,54,54,54,55,55,55,55,55,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,60,60,60,61,61,61,61,61,61,62,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,64,64,64,64,64,65,65,65,65,65,65,65,65,66,66,66,66,66,66,66,67,67,67,67,67,67,67,67,67,67,67,67,68,68,68,68,68,68,69,69,69,69,69,69,69,69,69,69,69,70,70,70,70,70,70,70,70,71,71,71,71,71,71,72,72,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,74,74,74,74,74,74,74,74,74,74,75,75,75,75,75,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,77,77,78,78,78,78,78,78,79,79,79,79,79,79,79,79,80,80,80,80,80,80,80,80,80,80,80,81,81,81,81,81,81,81,81,82,82,82,82,82,82,82,82,83,83,83,84,84,84,84,84,84,85,85,85,85,85,85,85,86,86,86,86,86,86,86,86,86,86,86,87,87,87,87,87,87,87,87,87,88,88,88,88,88,88,88,88,89,89,89,89,90,90,90,90,90,90,91,91,91,91,91,91,91,91,91,92,92,92,92,92,92,92,92,92,92,93,93,93,93,93,94,94,94,94,94,94,95,95,95,95,95,95,95,95,96,96,96,96,96,96,96,96,96,96,97,97,98,98,98,98,98,98,98,98,98,98,99,99,100,100,100,100,100,100,100,100,100,101,101,101,101,101,101,102,102,102,102,102,103,103,103,103,103,103,104,104,104,104,104,105,105,105,105,105,105,105,105,106,106,106,107,107,107,107,107,107,107,108,108,108,109,109,109,109,109,109,110,110,110,110,110,110,110,110,111,111,111,111,111,111,111,112,112,112,112,112,112,112,113,113,113,113,113,113,113,113,113,114,114,114,114,114,114,114,114,114,114,115,115,115,115,115,115,115,116,116,117,117,117,117,117,117,117,117,118,118,118,118,118,119,119,119,119,119,119,119,119,119,120,120,121,121,121,122,122,122,122,122,122,122,122,123,123,123,123,123,124,124,124,124,124,125,125,125,125,125,126,126,126,126,126,126,126,126,126,127,127,127,127,128,128,128,128,128,128,128,129,129,130,130,130,130,130,130,130,130,130,130,131,131,131,131,131,131,131,131,131,131,131,131,132,132,133,133,133,133,133,133,133,133,134,134,134,135,135,135,135,135,135,135,136,136,136,136,136,136,136,136,137,137,137,137,137,137,138,138,138,138,138,138,139,139,139,139,139,139,139,139,139,140,140,140,140,140,141,141,141,141,141,141,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,143,144,144,144,144,144,144,144,145,145,145,145,145,145,145,145,145,146,146,146,146,146,146,146,147,147,147,147,147,147,148,148,148,148,148,148,148,148,149,149,149,149,149,149,149,149,150,150,150,150,150,150,150,150,151,151,152,152,152,152,152,152,152,152,153,153,153,153,153,153,153,153,154,154,154,154,154,154,154,154,154,154,155,155,155,155,155,155,155,155,155,155,156,156,156,156,156,156,156,156,157,157,157,157,157,158,158,158,158,158,158,158,158,159,159,159,159,160,160,160,160,160,161,161,161,161,161,161,161,162,162,162,163,163,163,163,163,163,163,164,164,164,164,164,164,164,164,164,164,164,164,165,165,165,165,165,165,165,165,166,166,166,166,166,166,166,166,166,166,167,167,167,167,167,167,167,168,168,168,168,168,168,168,168,168,168,169,169,169,169,169,169,170,170,170,170,170,170,170,170,171,171,171,171,171,172,172,172,172,172,172,172,173,173,173,173,173,173,173,173,174,174,174,174,174,174,174,174,174,174,175,175,175,175,175,175,175,175,176,176,176,176,176,176,176,177,177,177,177,177,178,178,178,178,178,178,178,178,178,178,179,179,179,179,179,179,179,180,180,180,180,180,180,180,180,180,181,181,181,181,181,181,181,181,182,182,182,182,182,182,182,182,183,183,183,183,183,184,184,184,184,184,184,184,184,185,185,185,185,185,185,185,186,186,186,186,186,186,186,187,187,187,187,187,187,187,187,187,187,187,188,188,188,189,189,189,189,189,189,189,189,189,190,190,190,190,190,190,190,191,191,191,191,191,191,191,191,191,191,191,192,192,192,192,192,192,192,192,192,192,192,192,193,193,193,193,193,193,194,194,194,194,194,194,194,194,194,195,195,195,195,195,195,195,195,195,195,195,196,196,196,196,196,196,196,196,196,196,196,197,197,198,198,198,198,198,199,199,199,199,199,199,199,200,200,200,200,200,200,200,201,201,201,201,201,201,201,202,202,202,202,202,202,203,203,203,204,204,204,204,204,204,204,204,204,204,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,207,207,207,207,207,207,207,208,208,208,208,208,209,209,209,209,209,209,209,209,210,210,210,210,210,211,211,211,211,211,211,212,212,212,212,212,212,212,212,213,213,213,214,214,215,215,215,215,215,215,216,216,216,216,216,216,216,217,217,218,218,218,218,218,218,219,219,219,220,220,221,221,222,222,222,222,222,222,222,222,223,223,223,223,223,224,224,224,224,225,225,225,225,225,225,226,226,226,226,226,226,226,226,227,227,227,227,227,227,227,227,227,227,227,228,228,228,228,228,228,228,229,229,229,229,229,229,229,229,229,229,230,230,230,230,231,231,232,232,232,232,232,232,232,233,233,233,233,233,233,234,234,234,234,234,235,235,236,236,236,236,236,236,237,237,237,237,237,237,238,238,238,238,238,238,238,239,239,239,239,239,239,239,239,240,240,240,240,240,240,240,240,241,241,241,241,241,241,241,241,241,242,242,242,242,243,243,243,243,243,243,243,243,243,243,243,243,243,243,244,244,244,244,244,244,244,244,244,244,244,245,245,245,245,245,245,245,245,245,246,246,246,246,246,246,246,246,247,247,247,247,247,248,248,248,248,248,248,248,248,248,248,248,248,249,249,249,249,250,250,251,251,251,251,251,251,251,251,252,252,253,253,253,253,253,253,253,253,254,254,254,254,254,254,254,255,255,255,255,255,256,256,256,256,256,256,256,256,256,257,257,257,257,258,258,258,259,259,260,260,260,260,260,260,260,260,260,260,261,261,261,261,261,261,262,262,262,262,262,262,263,263,264,264,264,264,264,264,265,265,265,265,265,265,265,265,265,265,265,266,266,267,267,267,267,268,268,268,268,268,268,268,269,269,269,270,270,270,270,270,270,270,271,271,271,271,271,271,272,272,272,272,272,272,272,273,273,273,273,273,273,273,274,274,274,274,274,274,275,275,275,275,275,276,276,277,277,277,277,277,277,277,277,277,277,278,278,278,278,278,278,278,279,279,279,280,280,280,280,280,280,280,281,281,281,281,281,281,281,281,282,282,282,282,282,282,282,282,282,282,283,283,283,283,283,283,284,284,284,284,284,285,285,285,285,285,285,285,285,286,286,286,286,286,286,286,286,286,287,287,287,287,287,287,287,288,288,288,288,288,288,288,288,288,289,289,289,289,289,289,289,290,290,291,291,291,291,291,291,291,291,291,291,292,292,292,292,292,292,292,292,293,293,293,293,293,294,294,294,294,294,294,295,295,296,296,296,296,296,297,297,297,297,297,297,297,297,298,298,298,298,298,298,298,298,298,298,299,299,299,299,299,299,299,299,300,300,300,300,300,301,301,301,301,301,302,302,302,302,302,302,302,302,303,303,303,303,303,303,303,303,304,304,304,304,304,304,304,304,305,305,305,305,305,305,305,305,305,305,306,306,306,306,306,306,307,307,307,307,307,307,307,307,307,307,308,308,308,308,308,308,308,308,309,309,309,310,310,310,310,310,310,310,310,310,310,310,310,310,311,311,311,311,311,311,312,312,312,312,312,312,312,312,313,313,313,313,313,313,313,313,313,313,313,314,314,314,314,314,314,314,315,315,315,315,316,316,316,316,316,316,316,316,317,317,317,317,317,317,317,317,317,317,318,318,319,319,319,319,320,320,320,320,320,320,320,320,320,320,320,320,320,320,321,321,321,321,321,322,322,322,322,322,322,322,323,323,323,323,323,323,323,323,324,324,324,324,324,324,325,325,325,325,325,325,326,326,326,326,326,326,326,326,326,326,326,327,327,327,327,327,327,328,328,328,328,328,328,328,328,329,329,329,329,329,329,330,330,330,330,330,330,330,330,331,331,331,331,331,331,331,331,332,332,332,332,332,332,332,332,332,332,332,332,332,333,333,333,333,333,333,333,333,333,333,334,334,334,334,334,334,335,335,335,335,335,335,335,336,336,336,336,336,336,336,337,337,337,337,337,337,337,337,338,338,338,338,339,339,339,339,339,340,340,340,340,340,340,340,340,340,340,340,341,341,341,341,341,341,341,342,342,342,342,342,342,342,342,342,342,343,343,343,343,343,343,343,343,344,344,344,344,344,344,345,345,345,345,345,345,345,345,345,345,345,346,346,346,346,346,346,346,346,347,347,348,348,348,348,348,348,349,349,350,350,351,351,352,352,352,352,352,352,352,353,353,353,353,353,353,353,354,354,354,354,354,355,355,355,356,356,356,356,356,356,356,357,357,357,357,357,357,357,358,358,358,358,358,358,358,358,358,358,359,359,359,359,359,359,359,359,359,360,360,360,360,360,361,361,361,361,361,362,362,362,362,362,362,362,363,363,363,364,364,364,364,364,364,364,364,364,364,364,365,365,365,365,366,366,366,366,366,366,366,366,366,366,366,366,367,367,367,367,367,367,368,368,368,368,368,368,368,369,369,369,369,369,369,369,370,370,370,370,370,370,370,370,371,371,372,372,372,372,372,372,372,373,373,374,374,374,374,374,374,374,375,375,376,376,376,376,376,376,376,376,377,377,377,377,377,377,377,378,378,378,378,378,378,378,378,379,379,379,379,379,379,379,379,380,380,380,380,380,380,381,381,381,381,381,381,381,381,382,382,382,382,382,382,382,382,382,383,383,384,384,384,384,384,384,385,385,385,385,385,385,385,385,385,386,386,386,386,386,386,387,387,387,387,387,387,387,387,387,387,388,388,388,388,388,388,389,389,389,389,389,389,389,390,390,390,390,390,390,390,390,391,391,391,391,391,391,391,391,392,392,392,392,392,392,392,392,393,393,393,393,393,394,394,394,394,394,394,394,394,394,395,395,396,396,396,396,397,397,398,398,398,398,399,399,399,399,399,399,399,399,399,399,400,400,400,400,400,400,400,400,401,401,401,401,401,401,401,402,402,402,402,402,402,403,403,403,403,403,403,403,403,404,404,404,404,404,405,405,405,405,405,405,405,405,405,405,405,405,406,406,406,406,406,406,406,406,406,406,407,407,407,407,407,407,408,408,408,408,408,408,408,408,408,409,409,409,409,409,409,409,409,409,410,410,411,411,411,411,411,411,411,411,411,411,411,411,412,412,412,412,412,412,412,412,413,413,413,413,413,413,414,414,414,414,415,415,415,415,415,415,415,415,415,415,416,416,416,416,416,416,416,416,416,417,417,417,417,417,417,417,417,417,418,418,419,419,420,420,420,420,420,420,421,421,421,421,421,421,421,421,421,421,421,421,421,422,422,422,422,422,422,422,422,422,422,422,422,422,423,423,423,423,423,423,423,423,424,424,424,424,424,424,424,424,425,425,425,425,425,425,425,426,426,426,426,426,426,426,426,426,426,426,426,426,427,427,427,427,427,427,427,427,427,428,428,428,428,428,428,428,429,429,429,429,429,430,430,430,430,430,430,430,430,430,430,431,431,431,431,431,431,431,432,432,432,432,433,433,433,433,433,434,434,434,434,434,434,434,434,434,434,434,435,435,435,435,435,435,435,435,435,436,436,436,436,436,436,436,437,437,437,437,437,437,437,437,437,437,438,438,438,438,438,438,438,438,438,438,439,439,439,440,440,440,440,440,441,441,441,441,441,441,441,442,442,442,442,443,443,443,443,443,443,443,444,444,444,444,444,444,444,444,445,445,445,445,445,445,445,445,445,445,445,445,446,446,446,446,446,446,446,447,447,447,447,447,447,448,448,448,448,449,449,450,450,451,451,451,451,451,451,452,452,452,452,452,453,453,454,454,454,454,454,454,454,455,455,455,455,455,455,455,455,456,456,456,456,456,456,456,456,457,457,457,457,457,457,457,457,458,458,458,458,458,458,458,458,458,458,459,459,459,459,459,459,459,459,459,459,459,460,460,460,460,460,460,460,461,461,461,461,461,461,461,461,461,462,462,462,462,462,462,462,463,463,464,464,464,464,464,465,465,465,465,465,465,465,466,466,466,466,466,466,467,467,467,467,467,467,467,467,467,468,468,468,468,468,468,469,469,469,469,470,470,470,470,470,470,470,471,471,471,471,471,471,471,472,472,472,473,473,473,473,473,473,473,473,473,474,474,474,474,474,474,475,475,475,475,475,475,475,475,475,475,476,476,476,476,476,476,477,477,477,477,477,477,477,477,477,477,478,478,478,478,478,478,478,478,479,479,479,479,479,479,479,479,480,480,480,480,481,481,481,481,481,482,482,482,482,482,482,482,482,483,483,483,483,483,484,484,484,484,484,484,484,484,485,485,485,485,485,485,485,485,486,486,486,486,486,486,486,486,487,487,487,487,487,488,488,488,488,488,488,488,488,488,488,489,489,489,489,489,489,489,489,489,489,490,490,491,491,491,491,491,491,492,492,492,492,492,492,492,492,492,492,492,492,492,492,493,493,493,493,493,493,493,494,494,494,494,494,494,494,494,494,495,495,495,495,495,496,496,496,496,497,497,497,497,497,497,497,497,497,497,497,498,498,498,498,498,498,498,499,499,499,499,499,499,499,500,500,500,500,500,500,500,501,501,501,501,501,501,501,501,501,502,502,502,502,502,502,502,502,503,503,503,503,503,504,504,504,504,504,504,504,504,505,505,505,505,505,506,506,506,506,506,506,506,507,507,508,508,508,508,508,508,508,509,509,509,509,509,509,509,510,510,510,510,510,510,510,510,510,510,510,510,511,511,511,511,511,511,511,511,511,511,511,511,512,512,512,512,512,512,512,512,512,513,513,514,514,514,514,514,514,514,515,515,515,515,515,515,515,515,516,516,516,516,516,516,516,516,517,517,517,517,517,517,517,517,517,517,518,518,518,519,519,520,520,520,520,520,520,520,521,521,521,521,521,521,521,521,521,521,521,521,521,522,522,523,523,523,523,523,523,523,523,524,524,524,524,524,524,524,524,525,525,525,525,525,525,525,526,526,526,526,526,526,526,526,527,527,527,527,527,527,527,527,527,527,528,528,528,528,528,528,528,528,529,529,529,529,529,529,530,530,530,530,530,530,530,531,531,531,531,531,531,531,532,532,532,532,532,533,533,533,533,533,533,533,533,534,534,534,534,534,534,534,535,535,535,535,535,535,535,535,536,536,536,536,536,536,536,536,537,537,537,537,537,537,537,537,538,538,538,538,538,538,538,539,539,539,539,539,539,539,540,540,540,540,540,540,540,540,540,540,541,541,541,541,541,541,541,541,542,542,542,542,542,542,543,543,543,543,543,543,543,544,544,544,544,544,544,544,545,545,545,545,545,545,545,545,546,546,546,546,546,546,546,546,547,547,547,547,547,547,548,548,548,548,549,549,549,549,550,550,550,550,550,550,550,551,551,551,551,551,551,551,552,552,552,552,553,553,553,553,553,553,553,553,554,554,555,555,555,555,555,555,555,555,555,556,556,556,556,556,556,556,556,557,557,557,557,557,558,558,558,558,558,558,558,558,559,559,559,559,559,559,559,560,560,561,561,561,561,561,561,562,562,562,562,562,562,562,562,563,563,563,563,563,563,563,564,564,564,564,564,564,564,564,565,565,565,565,565,565,565,565,566,566,566,566,567,567,568,568,568,568,568,568,569,569,569,569,569,569,569,570,570,570,570,570,570,570,571,571,571,571,571,571,571,571,572,572,572,572,572,572,573,573,574,574,574,574,574,574,574,574,574,574,575,575,575,575,575,575,575,576,576,576,576,576,576,577,577,577,577,577,577,577,577,578,578,578,578,578,578,578,579,579,579,579,579,579,580,580,580,580,580,580,580,580,581,581,581,581,581,581,582,582,582,582,582,583,583,583,583,583,584,584,584,584,585,585,585,585,585,585,586,586,586,586,586,586,586,587,587,587,587,587,587,587,587,587,588,588,588,588,588,588,588,588,588,588,588,588,589,589,589,589,589,590,590,590,590,590,590,591,591,591,591,591,591,591,592,592,592,592,592,592,592,593,593,593,593,593,593,593,593,594,594,594,594,594,594,594,594,595,595,595,595,596,596,596,596,596,596,596,596,597,597,597,598,598,598,598,598,598,598,598,598,599,599,599,599,599,599,599,599,600,600,601,601,601,601,601,602,602,602,602,602,602,602,602,602,602,602,603,603,603,603,603,603,603,603,604,604,604,604,604,604,605,605,605,605,605,605,605,605,606,606,606,606,606,606,607,607,607,607,607,607,607,607,608,608,608,608,608,609,609,609,609,609,609,609,609,610,610,611,611,611,611,611,611,612,612,612,612,613,613,613,613,613,614,614,614,615,615,615,615,615,615,615,616,616,616,616,616,616,616,616,616,616,617,617,617,617,617,617,617,617,617,618,618,618,618,618,619,619,620,620,620,620,620,620,620,620,620,620,621,621,621,621,621,621,621,622,622,622,622,622,622,622,622,622,622,623,623,623,623,623,623,623,624,624,624,624,624,624,624,624,625,625,625,625,625,625,626,626,626,626,626,626,627,627,627,628,628,628,628,628,628,628,628,628,628,628,628,628,629,629,629,629,629,630,630,630,630,630],&#34;depth&#34;:[7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,2,1,2,1,5,4,3,2,1,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,2,1,10,9,8,7,6,5,4,3,2,1,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,2,1,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,2,1,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,2,1,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,3,2,1,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,6,5,4,3,2,1,3,2,1,2,1,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,4,3,2,1,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,2,1,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,4,3,2,1,2,1,8,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,4,3,2,1,3,2,1,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,2,1,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,2,1,4,3,2,1,7,6,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,2,1,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,4,3,2,1,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,6,5,4,3,2,1,2,1,2,1,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,3,2,1,11,10,9,8,7,6,5,4,3,2,1,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,2,1,4,3,2,1,2,1,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,2,1,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,2,1,2,1,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,2,1,2,1,6,5,4,3,2,1,5,4,3,2,1,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,2,1,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,3,2,1,2,1,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,8,7,6,5,4,3,2,1,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,4,3,2,1,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,4,3,2,1,8,7,6,5,4,3,2,1,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,6,5,4,3,2,1,4,3,2,1,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1],&#34;label&#34;:[&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;levels&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diff.default&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;names&lt;-&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;rhs&#34;,&#34;rhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;condition.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;list.names&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.frame&#34;,&#34;match.arg&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diff&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[.data.frame&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;names&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;tail.default&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[.data.frame&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;dim&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[.data.frame&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;rlang::enexpr&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;do.call&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;logical&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;rhs&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;as.data.frame&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;is.factor&#34;,&#34;FUN&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;is.factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;dimnames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;condition.parsedFormula&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;array&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.frame&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;is.factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.parent&#34;,&#34;match.arg&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.unique&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;list.names&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;logical2factor&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;~&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;match.arg&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;rhs&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unlist&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;list.names&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;list&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;diff&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaicCore::tally&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parent.frame&#34;,&#34;do.call&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;max&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;list&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diff&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.function&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;formals&#34;,&#34;match.arg&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.unique&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;names&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list.default&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;unlist&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;is.factor&#34;,&#34;FUN&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[.data.frame&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.function&#34;,&#34;match.arg&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;list.names&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unlist&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unlist&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.frame&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diff.default&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.fun&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.unique&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;tail.default&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.External2&#34;,&#34;local&#34;,&#34;lhs&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;checkHT&#34;,&#34;tail.default&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;nzchar&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;colSums&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;levels.default&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;cull&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;is.array&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;list.names&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;as.integer&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;lhs&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame.data.frame&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;dim&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;utils::tail&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaicCore::tally&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;any&#34;,&#34;local&#34;,&#34;logical&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;lhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;names&#34;,&#34;local&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;match.fun&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;[.table&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diff.default&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;names&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;Anonymous&gt;&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diff&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.function&#34;,&#34;match.arg&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;cull&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;names&#34;,&#34;[.data.frame&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.character&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;utils::tail&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;as.list.default&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diff&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.fun&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;condition.parsedFormula&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;dim&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;max&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.parent&#34;,&#34;match.arg&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;list.names&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;levels&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;tabulate&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;cull&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;&lt;Anonymous&gt;&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;$&#34;,&#34;condition.parsedFormula&#34;,&#34;condition.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;colSums&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;logical2factor&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.frame&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.subset&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;.External&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;unique&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;names&lt;-&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diff.default&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;list.names&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;attr&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;length&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;Anonymous&gt;&#34;,&#34;local&#34;,&#34;rhs&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.unique&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;array&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;levels&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;cull&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;as.data.frame.data.frame&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;is.list&#34;,&#34;local&#34;,&#34;dimnames&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;any&#34;,&#34;local&#34;,&#34;[&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame.data.frame&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[.data.frame&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame.data.frame&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;names&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.function&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;names&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;lhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;NextMethod&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;colSums&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;dimnames&#34;,&#34;colSums&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;integer&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;local&#34;,&#34;sum&#34;,&#34;local&#34;,&#34;list.names&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;dim&#34;,&#34;[.table&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;is.na&#34;,&#34;local&#34;,&#34;names&#34;,&#34;[.data.frame&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;[.data.frame&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.function&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;dim&#34;,&#34;[.table&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;rhs&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[.data.frame&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;NextMethod&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diff.default&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;levels.default&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parent.frame&#34;,&#34;caller_env&#34;,&#34;rlang::eval_tidy&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;as.data.frame&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame.data.frame&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;attributes&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;utils::tail&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaicCore::tally&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;nzchar&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;any&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;integer&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;logical&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;integer&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;enexpr&#34;,&#34;rhs_or_expr&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list.default&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;Anonymous&gt;&#34;,&#34;rhs_or_expr&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list.default&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;lhs.parsedFormula&#34;,&#34;lhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[.table&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;dimnames&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;logical2factor&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;condition.parsedFormula&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;is.na&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;tail.default&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;min&#34;,&#34;local&#34;,&#34;[.data.frame&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;alist&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;cull&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;checkHT&#34;,&#34;tail.default&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;names&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;enexpr&#34;,&#34;rhs_or_expr&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list.default&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;enexpr&#34;,&#34;rhs_or_expr&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.unique&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;is.factor&#34;,&#34;FUN&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;checkHT&#34;,&#34;tail.default&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list.default&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sum&#34;,&#34;local&#34;,&#34;dimnames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.frame&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.set_row_names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;levels&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.function&#34;,&#34;match.arg&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;is.list&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diff&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;formals&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;rhs&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;],&#34;filenum&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],&#34;linenum&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],&#34;memalloc&#34;:[27.8193969726562,27.8193969726562,27.8193969726562,27.8193969726562,27.8193969726562,27.8193969726562,27.8193969726562,28.5539855957031,28.5539855957031,28.5539855957031,28.5539855957031,28.5539855957031,29.2021636962891,29.2021636962891,29.2021636962891,29.2021636962891,29.2021636962891,29.2021636962891,30.4014358520508,30.4014358520508,30.4014358520508,30.4014358520508,30.4014358520508,30.4014358520508,30.4014358520508,30.4014358520508,31.0131378173828,31.0131378173828,31.0131378173828,31.8040008544922,31.8040008544922,31.8040008544922,31.8040008544922,31.8040008544922,31.8040008544922,31.8040008544922,31.8040008544922,31.8040008544922,31.8040008544922,31.8040008544922,31.8040008544922,32.6913375854492,32.6913375854492,32.6913375854492,32.6913375854492,32.6913375854492,32.6913375854492,32.6913375854492,32.6913375854492,32.6913375854492,32.6913375854492,33.5256500244141,33.5256500244141,33.5256500244141,33.5256500244141,33.5256500244141,33.5256500244141,33.5256500244141,34.2089767456055,34.2089767456055,34.2089767456055,34.2089767456055,34.2089767456055,34.2089767456055,34.2089767456055,34.8231964111328,34.8231964111328,34.8231964111328,34.8231964111328,34.8231964111328,34.8231964111328,34.8231964111328,34.8231964111328,35.5223159790039,35.5223159790039,35.5223159790039,35.5223159790039,35.5223159790039,35.5223159790039,35.5223159790039,36.1538619995117,36.1538619995117,36.1538619995117,36.1538619995117,36.1538619995117,36.1538619995117,36.7609100341797,36.7609100341797,36.7609100341797,36.7609100341797,36.7609100341797,36.7609100341797,36.7609100341797,36.7609100341797,36.7609100341797,37.3469772338867,37.3469772338867,37.3469772338867,37.3469772338867,37.3469772338867,37.3469772338867,37.3469772338867,37.3469772338867,27.2614822387695,27.2614822387695,27.2614822387695,27.2614822387695,27.2614822387695,27.2614822387695,27.2614822387695,27.2614822387695,27.2614822387695,27.8984222412109,27.8984222412109,27.8984222412109,27.8984222412109,27.8984222412109,28.8761978149414,28.8761978149414,28.8761978149414,28.8761978149414,28.8761978149414,28.8761978149414,28.8761978149414,28.8761978149414,28.8761978149414,28.8761978149414,29.6484451293945,29.6484451293945,29.6484451293945,30.24169921875,30.24169921875,30.24169921875,30.24169921875,30.24169921875,30.24169921875,30.8942413330078,30.8942413330078,30.8942413330078,30.8942413330078,30.8942413330078,30.8942413330078,31.8068389892578,31.8068389892578,31.8068389892578,31.8068389892578,31.8068389892578,31.8068389892578,31.8068389892578,31.8068389892578,31.8068389892578,31.8068389892578,31.8068389892578,31.8068389892578,32.8501434326172,32.8501434326172,32.8501434326172,32.8501434326172,32.8501434326172,32.8501434326172,32.8501434326172,33.5495071411133,33.5495071411133,33.5495071411133,33.5495071411133,33.5495071411133,33.5495071411133,33.5495071411133,33.5495071411133,33.5495071411133,33.5495071411133,34.1467056274414,34.1467056274414,34.1467056274414,34.1467056274414,34.1467056274414,34.1467056274414,34.8386611938477,34.8386611938477,34.8386611938477,34.8386611938477,34.8386611938477,34.8386611938477,36.0550308227539,36.0550308227539,36.8494033813477,36.8494033813477,37.4467697143555,37.4467697143555,37.4467697143555,37.4467697143555,37.4467697143555,27.3904113769531,27.3904113769531,27.3904113769531,27.3904113769531,27.3904113769531,27.3904113769531,27.3904113769531,27.9865341186523,27.9865341186523,27.9865341186523,27.9865341186523,27.9865341186523,27.9865341186523,27.9865341186523,27.9865341186523,27.9865341186523,27.9865341186523,27.9865341186523,27.9865341186523,27.9865341186523,28.8574981689453,28.8574981689453,28.8574981689453,28.8574981689453,28.8574981689453,29.4473495483398,29.4473495483398,29.4473495483398,29.4473495483398,29.4473495483398,29.4473495483398,30.0599060058594,30.0599060058594,30.6731948852539,30.6731948852539,30.6731948852539,30.6731948852539,30.6731948852539,30.6731948852539,30.6731948852539,31.2726211547852,31.2726211547852,31.2726211547852,31.2726211547852,31.2726211547852,31.9568328857422,31.9568328857422,31.9568328857422,31.9568328857422,31.9568328857422,31.9568328857422,32.6278839111328,32.6278839111328,32.6278839111328,32.6278839111328,32.6278839111328,32.6278839111328,32.6278839111328,32.6278839111328,32.6278839111328,33.2142868041992,33.2142868041992,33.2142868041992,33.2142868041992,33.2142868041992,33.2142868041992,33.2142868041992,33.9103927612305,33.9103927612305,33.9103927612305,33.9103927612305,33.9103927612305,33.9103927612305,33.9103927612305,34.6078109741211,34.6078109741211,34.6078109741211,34.6078109741211,34.6078109741211,34.6078109741211,34.6078109741211,34.6078109741211,34.6078109741211,34.6078109741211,35.2060623168945,35.2060623168945,35.2060623168945,35.2060623168945,35.2060623168945,35.2060623168945,35.2060623168945,35.2060623168945,35.796257019043,35.796257019043,35.796257019043,35.796257019043,35.796257019043,35.796257019043,35.796257019043,36.4663009643555,36.4663009643555,36.4663009643555,36.4663009643555,36.4663009643555,37.2621536254883,37.2621536254883,37.2621536254883,37.2621536254883,37.2621536254883,37.2621536254883,37.2621536254883,37.2621536254883,27.4113006591797,27.4113006591797,27.4113006591797,27.4113006591797,27.4113006591797,27.4113006591797,27.4113006591797,27.4113006591797,28.0166778564453,28.0166778564453,28.0166778564453,28.0166778564453,28.0166778564453,29.0289077758789,29.0289077758789,29.0289077758789,29.0289077758789,29.0289077758789,30.0129013061523,30.0129013061523,30.0129013061523,30.0129013061523,30.0129013061523,30.0129013061523,30.7093963623047,30.7093963623047,31.3986968994141,31.3986968994141,31.3986968994141,31.3986968994141,31.3986968994141,31.3986968994141,31.3986968994141,31.3986968994141,32.0552139282227,32.0552139282227,32.0552139282227,32.0552139282227,32.0552139282227,32.0552139282227,32.0552139282227,32.0552139282227,32.0552139282227,32.0552139282227,32.0552139282227,32.9267272949219,32.9267272949219,32.9267272949219,32.9267272949219,32.9267272949219,33.7588882446289,33.7588882446289,33.7588882446289,33.7588882446289,33.7588882446289,33.7588882446289,33.7588882446289,34.3830642700195,34.3830642700195,34.3830642700195,34.3830642700195,34.3830642700195,34.3830642700195,34.3830642700195,34.3830642700195,34.3830642700195,34.3830642700195,34.3830642700195,34.3830642700195,34.9817428588867,34.9817428588867,34.9817428588867,34.9817428588867,34.9817428588867,35.5739440917969,35.5739440917969,35.5739440917969,35.5739440917969,35.5739440917969,35.5739440917969,35.5739440917969,36.3845062255859,36.3845062255859,36.3845062255859,36.3845062255859,36.3845062255859,36.3845062255859,36.3845062255859,36.3845062255859,37.1009292602539,37.1009292602539,37.1009292602539,37.1009292602539,37.1009292602539,37.1009292602539,37.8580322265625,37.8580322265625,37.8580322265625,37.8580322265625,37.8580322265625,37.8580322265625,37.8580322265625,37.8580322265625,37.8580322265625,27.8150939941406,27.8150939941406,27.8150939941406,27.8150939941406,27.8150939941406,27.8150939941406,27.8150939941406,27.8150939941406,27.8150939941406,27.8150939941406,28.464485168457,28.464485168457,28.464485168457,28.464485168457,28.464485168457,28.464485168457,29.0903091430664,29.0903091430664,29.0903091430664,29.0903091430664,29.0903091430664,29.0903091430664,29.0903091430664,29.0903091430664,29.0903091430664,29.0903091430664,30.0929794311523,30.0929794311523,30.0929794311523,30.0929794311523,30.0929794311523,30.0929794311523,30.0929794311523,30.0929794311523,30.0929794311523,30.7865219116211,30.7865219116211,30.7865219116211,30.7865219116211,30.7865219116211,31.3943176269531,31.3943176269531,31.3943176269531,31.3943176269531,31.3943176269531,31.3943176269531,31.3943176269531,31.3943176269531,32.0627822875977,32.0627822875977,32.0627822875977,32.0627822875977,32.0627822875977,32.0627822875977,32.0627822875977,32.7195434570312,32.7195434570312,32.7195434570312,32.7195434570312,32.7195434570312,32.7195434570312,32.7195434570312,32.7195434570312,32.7195434570312,32.7195434570312,32.7195434570312,32.7195434570312,33.4235992431641,33.4235992431641,33.4235992431641,33.4235992431641,33.4235992431641,33.4235992431641,34.1066970825195,34.1066970825195,34.1066970825195,34.1066970825195,34.1066970825195,34.1066970825195,34.1066970825195,34.1066970825195,34.1066970825195,34.1066970825195,34.1066970825195,34.721565246582,34.721565246582,34.721565246582,34.721565246582,34.721565246582,34.721565246582,34.721565246582,34.721565246582,35.3116607666016,35.3116607666016,35.3116607666016,35.3116607666016,35.3116607666016,35.3116607666016,36.0329666137695,36.0329666137695,36.0329666137695,36.0329666137695,36.0329666137695,36.0329666137695,36.0329666137695,36.0329666137695,36.0329666137695,36.0329666137695,37.1240081787109,37.1240081787109,37.1240081787109,37.1240081787109,37.1240081787109,37.1240081787109,37.1240081787109,37.7079162597656,37.7079162597656,37.7079162597656,37.7079162597656,37.7079162597656,37.7079162597656,37.7079162597656,37.7079162597656,37.7079162597656,37.7079162597656,27.5769424438477,27.5769424438477,27.5769424438477,27.5769424438477,27.5769424438477,28.208984375,28.208984375,28.208984375,28.208984375,28.208984375,28.208984375,28.208984375,28.8510131835938,28.8510131835938,28.8510131835938,28.8510131835938,28.8510131835938,28.8510131835938,28.8510131835938,28.8510131835938,28.8510131835938,28.8510131835938,29.5024490356445,29.5024490356445,29.5024490356445,29.5024490356445,29.5024490356445,29.5024490356445,30.2972259521484,30.2972259521484,30.2972259521484,30.2972259521484,30.2972259521484,30.2972259521484,30.2972259521484,30.2972259521484,31.051643371582,31.051643371582,31.051643371582,31.051643371582,31.051643371582,31.051643371582,31.051643371582,31.051643371582,31.051643371582,31.051643371582,31.051643371582,32.1346893310547,32.1346893310547,32.1346893310547,32.1346893310547,32.1346893310547,32.1346893310547,32.1346893310547,32.1346893310547,32.9741897583008,32.9741897583008,32.9741897583008,32.9741897583008,32.9741897583008,32.9741897583008,32.9741897583008,32.9741897583008,33.5735244750977,33.5735244750977,33.5735244750977,34.1710815429688,34.1710815429688,34.1710815429688,34.1710815429688,34.1710815429688,34.1710815429688,35.3860855102539,35.3860855102539,35.3860855102539,35.3860855102539,35.3860855102539,35.3860855102539,35.3860855102539,36.128059387207,36.128059387207,36.128059387207,36.128059387207,36.128059387207,36.128059387207,36.128059387207,36.128059387207,36.128059387207,36.128059387207,36.128059387207,36.9608535766602,36.9608535766602,36.9608535766602,36.9608535766602,36.9608535766602,36.9608535766602,36.9608535766602,36.9608535766602,36.9608535766602,37.6023178100586,37.6023178100586,37.6023178100586,37.6023178100586,37.6023178100586,37.6023178100586,37.6023178100586,37.6023178100586,27.2070770263672,27.2070770263672,27.2070770263672,27.2070770263672,27.6015167236328,27.6015167236328,27.6015167236328,27.6015167236328,27.6015167236328,27.6015167236328,28.2777862548828,28.2777862548828,28.2777862548828,28.2777862548828,28.2777862548828,28.2777862548828,28.2777862548828,28.2777862548828,28.2777862548828,28.964111328125,28.964111328125,28.964111328125,28.964111328125,28.964111328125,28.964111328125,28.964111328125,28.964111328125,28.964111328125,28.964111328125,29.5730514526367,29.5730514526367,29.5730514526367,29.5730514526367,29.5730514526367,30.3335952758789,30.3335952758789,30.3335952758789,30.3335952758789,30.3335952758789,30.3335952758789,30.9411544799805,30.9411544799805,30.9411544799805,30.9411544799805,30.9411544799805,30.9411544799805,30.9411544799805,30.9411544799805,31.544548034668,31.544548034668,31.544548034668,31.544548034668,31.544548034668,31.544548034668,31.544548034668,31.544548034668,31.544548034668,31.544548034668,32.5229644775391,32.5229644775391,33.1308517456055,33.1308517456055,33.1308517456055,33.1308517456055,33.1308517456055,33.1308517456055,33.1308517456055,33.1308517456055,33.1308517456055,33.1308517456055,33.8595657348633,33.8595657348633,34.4015274047852,34.4015274047852,34.4015274047852,34.4015274047852,34.4015274047852,34.4015274047852,34.4015274047852,34.4015274047852,34.4015274047852,35.0616226196289,35.0616226196289,35.0616226196289,35.0616226196289,35.0616226196289,35.0616226196289,35.6543731689453,35.6543731689453,35.6543731689453,35.6543731689453,35.6543731689453,36.3544158935547,36.3544158935547,36.3544158935547,36.3544158935547,36.3544158935547,36.3544158935547,36.8541717529297,36.8541717529297,36.8541717529297,36.8541717529297,36.8541717529297,37.4113845825195,37.4113845825195,37.4113845825195,37.4113845825195,37.4113845825195,37.4113845825195,37.4113845825195,37.4113845825195,37.8421630859375,37.8421630859375,37.8421630859375,27.8425216674805,27.8425216674805,27.8425216674805,27.8425216674805,27.8425216674805,27.8425216674805,27.8425216674805,28.5233993530273,28.5233993530273,28.5233993530273,29.0995788574219,29.0995788574219,29.0995788574219,29.0995788574219,29.0995788574219,29.0995788574219,30.1190032958984,30.1190032958984,30.1190032958984,30.1190032958984,30.1190032958984,30.1190032958984,30.1190032958984,30.1190032958984,30.8916244506836,30.8916244506836,30.8916244506836,30.8916244506836,30.8916244506836,30.8916244506836,30.8916244506836,31.4741058349609,31.4741058349609,31.4741058349609,31.4741058349609,31.4741058349609,31.4741058349609,31.4741058349609,32.1262130737305,32.1262130737305,32.1262130737305,32.1262130737305,32.1262130737305,32.1262130737305,32.1262130737305,32.1262130737305,32.1262130737305,33.2116088867188,33.2116088867188,33.2116088867188,33.2116088867188,33.2116088867188,33.2116088867188,33.2116088867188,33.2116088867188,33.2116088867188,33.2116088867188,33.9272079467773,33.9272079467773,33.9272079467773,33.9272079467773,33.9272079467773,33.9272079467773,33.9272079467773,34.4939346313477,34.4939346313477,35.0642166137695,35.0642166137695,35.0642166137695,35.0642166137695,35.0642166137695,35.0642166137695,35.0642166137695,35.0642166137695,35.7013168334961,35.7013168334961,35.7013168334961,35.7013168334961,35.7013168334961,36.2848129272461,36.2848129272461,36.2848129272461,36.2848129272461,36.2848129272461,36.2848129272461,36.2848129272461,36.2848129272461,36.2848129272461,36.8587799072266,36.8587799072266,37.4949722290039,37.4949722290039,37.4949722290039,27.3089370727539,27.3089370727539,27.3089370727539,27.3089370727539,27.3089370727539,27.3089370727539,27.3089370727539,27.3089370727539,27.9346694946289,27.9346694946289,27.9346694946289,27.9346694946289,27.9346694946289,28.5301284790039,28.5301284790039,28.5301284790039,28.5301284790039,28.5301284790039,29.3087310791016,29.3087310791016,29.3087310791016,29.3087310791016,29.3087310791016,29.891242980957,29.891242980957,29.891242980957,29.891242980957,29.891242980957,29.891242980957,29.891242980957,29.891242980957,29.891242980957,30.8919830322266,30.8919830322266,30.8919830322266,30.8919830322266,31.4794921875,31.4794921875,31.4794921875,31.4794921875,31.4794921875,31.4794921875,31.4794921875,32.1334228515625,32.1334228515625,32.8231353759766,32.8231353759766,32.8231353759766,32.8231353759766,32.8231353759766,32.8231353759766,32.8231353759766,32.8231353759766,32.8231353759766,32.8231353759766,33.40087890625,33.40087890625,33.40087890625,33.40087890625,33.40087890625,33.40087890625,33.40087890625,33.40087890625,33.40087890625,33.40087890625,33.40087890625,33.40087890625,33.9997177124023,33.9997177124023,34.5683822631836,34.5683822631836,34.5683822631836,34.5683822631836,34.5683822631836,34.5683822631836,34.5683822631836,34.5683822631836,35.1363525390625,35.1363525390625,35.1363525390625,35.8396072387695,35.8396072387695,35.8396072387695,35.8396072387695,35.8396072387695,35.8396072387695,35.8396072387695,36.5971298217773,36.5971298217773,36.5971298217773,36.5971298217773,36.5971298217773,36.5971298217773,36.5971298217773,36.5971298217773,37.1697616577148,37.1697616577148,37.1697616577148,37.1697616577148,37.1697616577148,37.1697616577148,36.710205078125,36.710205078125,36.710205078125,36.710205078125,36.710205078125,36.710205078125,27.8698654174805,27.8698654174805,27.8698654174805,27.8698654174805,27.8698654174805,27.8698654174805,27.8698654174805,27.8698654174805,27.8698654174805,28.4506988525391,28.4506988525391,28.4506988525391,28.4506988525391,28.4506988525391,29.1137466430664,29.1137466430664,29.1137466430664,29.1137466430664,29.1137466430664,29.1137466430664,29.704948425293,29.704948425293,29.704948425293,29.704948425293,29.704948425293,29.704948425293,29.704948425293,30.3353652954102,30.3353652954102,30.3353652954102,30.3353652954102,30.3353652954102,30.3353652954102,30.3353652954102,30.3353652954102,30.3353652954102,30.3353652954102,30.989616394043,30.989616394043,30.989616394043,30.989616394043,30.989616394043,30.989616394043,30.989616394043,31.6513900756836,31.6513900756836,31.6513900756836,31.6513900756836,31.6513900756836,31.6513900756836,31.6513900756836,31.6513900756836,31.6513900756836,32.2368316650391,32.2368316650391,32.2368316650391,32.2368316650391,32.2368316650391,32.2368316650391,32.2368316650391,32.8907241821289,32.8907241821289,32.8907241821289,32.8907241821289,32.8907241821289,32.8907241821289,33.6329650878906,33.6329650878906,33.6329650878906,33.6329650878906,33.6329650878906,33.6329650878906,33.6329650878906,33.6329650878906,34.2344970703125,34.2344970703125,34.2344970703125,34.2344970703125,34.2344970703125,34.2344970703125,34.2344970703125,34.2344970703125,34.8564453125,34.8564453125,34.8564453125,34.8564453125,34.8564453125,34.8564453125,34.8564453125,34.8564453125,35.5007400512695,35.5007400512695,36.0848159790039,36.0848159790039,36.0848159790039,36.0848159790039,36.0848159790039,36.0848159790039,36.0848159790039,36.0848159790039,36.8712844848633,36.8712844848633,36.8712844848633,36.8712844848633,36.8712844848633,36.8712844848633,36.8712844848633,36.8712844848633,37.4263229370117,37.4263229370117,37.4263229370117,37.4263229370117,37.4263229370117,37.4263229370117,37.4263229370117,37.4263229370117,37.4263229370117,37.4263229370117,27.2309722900391,27.2309722900391,27.2309722900391,27.2309722900391,27.2309722900391,27.2309722900391,27.2309722900391,27.2309722900391,27.2309722900391,27.2309722900391,27.8374786376953,27.8374786376953,27.8374786376953,27.8374786376953,27.8374786376953,27.8374786376953,27.8374786376953,27.8374786376953,28.6136779785156,28.6136779785156,28.6136779785156,28.6136779785156,28.6136779785156,29.4312210083008,29.4312210083008,29.4312210083008,29.4312210083008,29.4312210083008,29.4312210083008,29.4312210083008,29.4312210083008,30.143440246582,30.143440246582,30.143440246582,30.143440246582,30.8358154296875,30.8358154296875,30.8358154296875,30.8358154296875,30.8358154296875,31.4567947387695,31.4567947387695,31.4567947387695,31.4567947387695,31.4567947387695,31.4567947387695,31.4567947387695,32.3744049072266,32.3744049072266,32.3744049072266,33.1511611938477,33.1511611938477,33.1511611938477,33.1511611938477,33.1511611938477,33.1511611938477,33.1511611938477,33.8679122924805,33.8679122924805,33.8679122924805,33.8679122924805,33.8679122924805,33.8679122924805,33.8679122924805,33.8679122924805,33.8679122924805,33.8679122924805,33.8679122924805,33.8679122924805,34.4385452270508,34.4385452270508,34.4385452270508,34.4385452270508,34.4385452270508,34.4385452270508,34.4385452270508,34.4385452270508,35.1641845703125,35.1641845703125,35.1641845703125,35.1641845703125,35.1641845703125,35.1641845703125,35.1641845703125,35.1641845703125,35.1641845703125,35.1641845703125,35.7633895874023,35.7633895874023,35.7633895874023,35.7633895874023,35.7633895874023,35.7633895874023,35.7633895874023,36.3726501464844,36.3726501464844,36.3726501464844,36.3726501464844,36.3726501464844,36.3726501464844,36.3726501464844,36.3726501464844,36.3726501464844,36.3726501464844,37.0340042114258,37.0340042114258,37.0340042114258,37.0340042114258,37.0340042114258,37.0340042114258,37.6722412109375,37.6722412109375,37.6722412109375,37.6722412109375,37.6722412109375,37.6722412109375,37.6722412109375,37.6722412109375,27.4445953369141,27.4445953369141,27.4445953369141,27.4445953369141,27.4445953369141,28.1651458740234,28.1651458740234,28.1651458740234,28.1651458740234,28.1651458740234,28.1651458740234,28.1651458740234,28.8644638061523,28.8644638061523,28.8644638061523,28.8644638061523,28.8644638061523,28.8644638061523,28.8644638061523,28.8644638061523,29.8651733398438,29.8651733398438,29.8651733398438,29.8651733398438,29.8651733398438,29.8651733398438,29.8651733398438,29.8651733398438,29.8651733398438,29.8651733398438,30.4372406005859,30.4372406005859,30.4372406005859,30.4372406005859,30.4372406005859,30.4372406005859,30.4372406005859,30.4372406005859,31.2670822143555,31.2670822143555,31.2670822143555,31.2670822143555,31.2670822143555,31.2670822143555,31.2670822143555,32.1261291503906,32.1261291503906,32.1261291503906,32.1261291503906,32.1261291503906,32.7438430786133,32.7438430786133,32.7438430786133,32.7438430786133,32.7438430786133,32.7438430786133,32.7438430786133,32.7438430786133,32.7438430786133,32.7438430786133,33.3271408081055,33.3271408081055,33.3271408081055,33.3271408081055,33.3271408081055,33.3271408081055,33.3271408081055,33.8974075317383,33.8974075317383,33.8974075317383,33.8974075317383,33.8974075317383,33.8974075317383,33.8974075317383,33.8974075317383,33.8974075317383,34.5974273681641,34.5974273681641,34.5974273681641,34.5974273681641,34.5974273681641,34.5974273681641,34.5974273681641,34.5974273681641,35.2506790161133,35.2506790161133,35.2506790161133,35.2506790161133,35.2506790161133,35.2506790161133,35.2506790161133,35.2506790161133,35.8232650756836,35.8232650756836,35.8232650756836,35.8232650756836,35.8232650756836,36.4215469360352,36.4215469360352,36.4215469360352,36.4215469360352,36.4215469360352,36.4215469360352,36.4215469360352,36.4215469360352,37.0351181030273,37.0351181030273,37.0351181030273,37.0351181030273,37.0351181030273,37.0351181030273,37.0351181030273,37.6650543212891,37.6650543212891,37.6650543212891,37.6650543212891,37.6650543212891,37.6650543212891,37.6650543212891,27.7886047363281,27.7886047363281,27.7886047363281,27.7886047363281,27.7886047363281,27.7886047363281,27.7886047363281,27.7886047363281,27.7886047363281,27.7886047363281,27.7886047363281,28.7751846313477,28.7751846313477,28.7751846313477,29.6268615722656,29.6268615722656,29.6268615722656,29.6268615722656,29.6268615722656,29.6268615722656,29.6268615722656,29.6268615722656,29.6268615722656,30.4441070556641,30.4441070556641,30.4441070556641,30.4441070556641,30.4441070556641,30.4441070556641,30.4441070556641,31.027099609375,31.027099609375,31.027099609375,31.027099609375,31.027099609375,31.027099609375,31.027099609375,31.027099609375,31.027099609375,31.027099609375,31.027099609375,31.6234817504883,31.6234817504883,31.6234817504883,31.6234817504883,31.6234817504883,31.6234817504883,31.6234817504883,31.6234817504883,31.6234817504883,31.6234817504883,31.6234817504883,31.6234817504883,32.2346954345703,32.2346954345703,32.2346954345703,32.2346954345703,32.2346954345703,32.2346954345703,33.0255355834961,33.0255355834961,33.0255355834961,33.0255355834961,33.0255355834961,33.0255355834961,33.0255355834961,33.0255355834961,33.0255355834961,33.6035690307617,33.6035690307617,33.6035690307617,33.6035690307617,33.6035690307617,33.6035690307617,33.6035690307617,33.6035690307617,33.6035690307617,33.6035690307617,33.6035690307617,34.3935699462891,34.3935699462891,34.3935699462891,34.3935699462891,34.3935699462891,34.3935699462891,34.3935699462891,34.3935699462891,34.3935699462891,34.3935699462891,34.3935699462891,35.0360260009766,35.0360260009766,35.6116180419922,35.6116180419922,35.6116180419922,35.6116180419922,35.6116180419922,36.1938552856445,36.1938552856445,36.1938552856445,36.1938552856445,36.1938552856445,36.1938552856445,36.1938552856445,36.7710418701172,36.7710418701172,36.7710418701172,36.7710418701172,36.7710418701172,36.7710418701172,36.7710418701172,37.3723297119141,37.3723297119141,37.3723297119141,37.3723297119141,37.3723297119141,37.3723297119141,37.3723297119141,27.2541122436523,27.2541122436523,27.2541122436523,27.2541122436523,27.2541122436523,27.2541122436523,28.108528137207,28.108528137207,28.108528137207,28.8701705932617,28.8701705932617,28.8701705932617,28.8701705932617,28.8701705932617,28.8701705932617,28.8701705932617,28.8701705932617,28.8701705932617,28.8701705932617,29.5545349121094,29.5545349121094,29.5545349121094,29.5545349121094,29.5545349121094,29.5545349121094,29.5545349121094,30.4892120361328,30.4892120361328,30.4892120361328,30.4892120361328,30.4892120361328,30.4892120361328,30.4892120361328,30.4892120361328,30.4892120361328,31.3980484008789,31.3980484008789,31.3980484008789,31.3980484008789,31.3980484008789,31.3980484008789,31.3980484008789,32.0470428466797,32.0470428466797,32.0470428466797,32.0470428466797,32.0470428466797,32.6237258911133,32.6237258911133,32.6237258911133,32.6237258911133,32.6237258911133,32.6237258911133,32.6237258911133,32.6237258911133,33.2145309448242,33.2145309448242,33.2145309448242,33.2145309448242,33.2145309448242,33.9922714233398,33.9922714233398,33.9922714233398,33.9922714233398,33.9922714233398,33.9922714233398,34.8367004394531,34.8367004394531,34.8367004394531,34.8367004394531,34.8367004394531,34.8367004394531,34.8367004394531,34.8367004394531,35.5928115844727,35.5928115844727,35.5928115844727,36.3364562988281,36.3364562988281,37.3457183837891,37.3457183837891,37.3457183837891,37.3457183837891,37.3457183837891,37.3457183837891,27.2571334838867,27.2571334838867,27.2571334838867,27.2571334838867,27.2571334838867,27.2571334838867,27.2571334838867,28.2382125854492,28.2382125854492,29.0111389160156,29.0111389160156,29.0111389160156,29.0111389160156,29.0111389160156,29.0111389160156,30.0223770141602,30.0223770141602,30.0223770141602,30.9960327148438,30.9960327148438,31.9433364868164,31.9433364868164,32.641471862793,32.641471862793,32.641471862793,32.641471862793,32.641471862793,32.641471862793,32.641471862793,32.641471862793,33.3260803222656,33.3260803222656,33.3260803222656,33.3260803222656,33.3260803222656,34.2157974243164,34.2157974243164,34.2157974243164,34.2157974243164,34.9515838623047,34.9515838623047,34.9515838623047,34.9515838623047,34.9515838623047,34.9515838623047,35.7915496826172,35.7915496826172,35.7915496826172,35.7915496826172,35.7915496826172,35.7915496826172,35.7915496826172,35.7915496826172,36.758415222168,36.758415222168,36.758415222168,36.758415222168,36.758415222168,36.758415222168,36.758415222168,36.758415222168,36.758415222168,36.758415222168,36.758415222168,37.7682037353516,37.7682037353516,37.7682037353516,37.7682037353516,37.7682037353516,37.7682037353516,37.7682037353516,27.7001876831055,27.7001876831055,27.7001876831055,27.7001876831055,27.7001876831055,27.7001876831055,27.7001876831055,27.7001876831055,27.7001876831055,27.7001876831055,28.3074798583984,28.3074798583984,28.3074798583984,28.3074798583984,28.9637603759766,28.9637603759766,29.6412124633789,29.6412124633789,29.6412124633789,29.6412124633789,29.6412124633789,29.6412124633789,29.6412124633789,30.3560943603516,30.3560943603516,30.3560943603516,30.3560943603516,30.3560943603516,30.3560943603516,30.9428482055664,30.9428482055664,30.9428482055664,30.9428482055664,30.9428482055664,32.0628356933594,32.0628356933594,32.6316986083984,32.6316986083984,32.6316986083984,32.6316986083984,32.6316986083984,32.6316986083984,33.209831237793,33.209831237793,33.209831237793,33.209831237793,33.209831237793,33.209831237793,33.9289016723633,33.9289016723633,33.9289016723633,33.9289016723633,33.9289016723633,33.9289016723633,33.9289016723633,34.6124114990234,34.6124114990234,34.6124114990234,34.6124114990234,34.6124114990234,34.6124114990234,34.6124114990234,34.6124114990234,35.197868347168,35.197868347168,35.197868347168,35.197868347168,35.197868347168,35.197868347168,35.197868347168,35.197868347168,36.1650924682617,36.1650924682617,36.1650924682617,36.1650924682617,36.1650924682617,36.1650924682617,36.1650924682617,36.1650924682617,36.1650924682617,36.7532806396484,36.7532806396484,36.7532806396484,36.7532806396484,37.8621520996094,37.8621520996094,37.8621520996094,37.8621520996094,37.8621520996094,37.8621520996094,37.8621520996094,37.8621520996094,37.8621520996094,37.8621520996094,37.8621520996094,37.8621520996094,37.8621520996094,37.8621520996094,27.844856262207,27.844856262207,27.844856262207,27.844856262207,27.844856262207,27.844856262207,27.844856262207,27.844856262207,27.844856262207,27.844856262207,27.844856262207,28.8482055664062,28.8482055664062,28.8482055664062,28.8482055664062,28.8482055664062,28.8482055664062,28.8482055664062,28.8482055664062,28.8482055664062,29.8445434570312,29.8445434570312,29.8445434570312,29.8445434570312,29.8445434570312,29.8445434570312,29.8445434570312,29.8445434570312,30.4274673461914,30.4274673461914,30.4274673461914,30.4274673461914,30.4274673461914,31.1992797851562,31.1992797851562,31.1992797851562,31.1992797851562,31.1992797851562,31.1992797851562,31.1992797851562,31.1992797851562,31.1992797851562,31.1992797851562,31.1992797851562,31.1992797851562,31.7770919799805,31.7770919799805,31.7770919799805,31.7770919799805,32.4200057983398,32.4200057983398,32.9954223632812,32.9954223632812,32.9954223632812,32.9954223632812,32.9954223632812,32.9954223632812,32.9954223632812,32.9954223632812,33.7768249511719,33.7768249511719,34.4356079101562,34.4356079101562,34.4356079101562,34.4356079101562,34.4356079101562,34.4356079101562,34.4356079101562,34.4356079101562,35.0777740478516,35.0777740478516,35.0777740478516,35.0777740478516,35.0777740478516,35.0777740478516,35.0777740478516,35.7012939453125,35.7012939453125,35.7012939453125,35.7012939453125,35.7012939453125,36.6012420654297,36.6012420654297,36.6012420654297,36.6012420654297,36.6012420654297,36.6012420654297,36.6012420654297,36.6012420654297,36.6012420654297,37.2340850830078,37.2340850830078,37.2340850830078,37.2340850830078,37.8100509643555,37.8100509643555,37.8100509643555,27.6143798828125,27.6143798828125,28.1852493286133,28.1852493286133,28.1852493286133,28.1852493286133,28.1852493286133,28.1852493286133,28.1852493286133,28.1852493286133,28.1852493286133,28.1852493286133,29.0459899902344,29.0459899902344,29.0459899902344,29.0459899902344,29.0459899902344,29.0459899902344,29.6694564819336,29.6694564819336,29.6694564819336,29.6694564819336,29.6694564819336,29.6694564819336,30.2563629150391,30.2563629150391,30.9363021850586,30.9363021850586,30.9363021850586,30.9363021850586,30.9363021850586,30.9363021850586,31.5219268798828,31.5219268798828,31.5219268798828,31.5219268798828,31.5219268798828,31.5219268798828,31.5219268798828,31.5219268798828,31.5219268798828,31.5219268798828,31.5219268798828,32.4831466674805,32.4831466674805,33.4302673339844,33.4302673339844,33.4302673339844,33.4302673339844,34.1545486450195,34.1545486450195,34.1545486450195,34.1545486450195,34.1545486450195,34.1545486450195,34.1545486450195,34.9186325073242,34.9186325073242,34.9186325073242,35.7135467529297,35.7135467529297,35.7135467529297,35.7135467529297,35.7135467529297,35.7135467529297,35.7135467529297,36.36328125,36.36328125,36.36328125,36.36328125,36.36328125,36.36328125,36.9955749511719,36.9955749511719,36.9955749511719,36.9955749511719,36.9955749511719,36.9955749511719,36.9955749511719,37.5909881591797,37.5909881591797,37.5909881591797,37.5909881591797,37.5909881591797,37.5909881591797,37.5909881591797,27.5296859741211,27.5296859741211,27.5296859741211,27.5296859741211,27.5296859741211,27.5296859741211,28.1713180541992,28.1713180541992,28.1713180541992,28.1713180541992,28.1713180541992,28.9300994873047,28.9300994873047,29.5598297119141,29.5598297119141,29.5598297119141,29.5598297119141,29.5598297119141,29.5598297119141,29.5598297119141,29.5598297119141,29.5598297119141,29.5598297119141,30.305793762207,30.305793762207,30.305793762207,30.305793762207,30.305793762207,30.305793762207,30.305793762207,30.8993453979492,30.8993453979492,30.8993453979492,31.4869003295898,31.4869003295898,31.4869003295898,31.4869003295898,31.4869003295898,31.4869003295898,31.4869003295898,32.1383361816406,32.1383361816406,32.1383361816406,32.1383361816406,32.1383361816406,32.1383361816406,32.1383361816406,32.1383361816406,33.1027603149414,33.1027603149414,33.1027603149414,33.1027603149414,33.1027603149414,33.1027603149414,33.1027603149414,33.1027603149414,33.1027603149414,33.1027603149414,33.8112869262695,33.8112869262695,33.8112869262695,33.8112869262695,33.8112869262695,33.8112869262695,34.4901123046875,34.4901123046875,34.4901123046875,34.4901123046875,34.4901123046875,35.406867980957,35.406867980957,35.406867980957,35.406867980957,35.406867980957,35.406867980957,35.406867980957,35.406867980957,36.3427276611328,36.3427276611328,36.3427276611328,36.3427276611328,36.3427276611328,36.3427276611328,36.3427276611328,36.3427276611328,36.3427276611328,37.3526763916016,37.3526763916016,37.3526763916016,37.3526763916016,37.3526763916016,37.3526763916016,37.3526763916016,37.8649063110352,37.8649063110352,37.8649063110352,37.8649063110352,37.8649063110352,37.8649063110352,37.8649063110352,37.8649063110352,37.8649063110352,27.8991470336914,27.8991470336914,27.8991470336914,27.8991470336914,27.8991470336914,27.8991470336914,27.8991470336914,28.6255874633789,28.6255874633789,29.2996826171875,29.2996826171875,29.2996826171875,29.2996826171875,29.2996826171875,29.2996826171875,29.2996826171875,29.2996826171875,29.2996826171875,29.2996826171875,29.9077377319336,29.9077377319336,29.9077377319336,29.9077377319336,29.9077377319336,29.9077377319336,29.9077377319336,29.9077377319336,30.6059188842773,30.6059188842773,30.6059188842773,30.6059188842773,30.6059188842773,31.289192199707,31.289192199707,31.289192199707,31.289192199707,31.289192199707,31.289192199707,31.9334716796875,31.9334716796875,32.5314025878906,32.5314025878906,32.5314025878906,32.5314025878906,32.5314025878906,33.1642074584961,33.1642074584961,33.1642074584961,33.1642074584961,33.1642074584961,33.1642074584961,33.1642074584961,33.1642074584961,33.8511734008789,33.8511734008789,33.8511734008789,33.8511734008789,33.8511734008789,33.8511734008789,33.8511734008789,33.8511734008789,33.8511734008789,33.8511734008789,34.852409362793,34.852409362793,34.852409362793,34.852409362793,34.852409362793,34.852409362793,34.852409362793,34.852409362793,35.4272613525391,35.4272613525391,35.4272613525391,35.4272613525391,35.4272613525391,36.0863342285156,36.0863342285156,36.0863342285156,36.0863342285156,36.0863342285156,36.7086639404297,36.7086639404297,36.7086639404297,36.7086639404297,36.7086639404297,36.7086639404297,36.7086639404297,36.7086639404297,37.3636169433594,37.3636169433594,37.3636169433594,37.3636169433594,37.3636169433594,37.3636169433594,37.3636169433594,37.3636169433594,37.8739700317383,37.8739700317383,37.8739700317383,37.8739700317383,37.8739700317383,37.8739700317383,37.8739700317383,37.8739700317383,27.9653854370117,27.9653854370117,27.9653854370117,27.9653854370117,27.9653854370117,27.9653854370117,27.9653854370117,27.9653854370117,27.9653854370117,27.9653854370117,28.771240234375,28.771240234375,28.771240234375,28.771240234375,28.771240234375,28.771240234375,29.3654022216797,29.3654022216797,29.3654022216797,29.3654022216797,29.3654022216797,29.3654022216797,29.3654022216797,29.3654022216797,29.3654022216797,29.3654022216797,30.4926300048828,30.4926300048828,30.4926300048828,30.4926300048828,30.4926300048828,30.4926300048828,30.4926300048828,30.4926300048828,31.5365524291992,31.5365524291992,31.5365524291992,32.55712890625,32.55712890625,32.55712890625,32.55712890625,32.55712890625,32.55712890625,32.55712890625,32.55712890625,32.55712890625,32.55712890625,32.55712890625,32.55712890625,32.55712890625,33.1309661865234,33.1309661865234,33.1309661865234,33.1309661865234,33.1309661865234,33.1309661865234,33.7320175170898,33.7320175170898,33.7320175170898,33.7320175170898,33.7320175170898,33.7320175170898,33.7320175170898,33.7320175170898,34.3136596679688,34.3136596679688,34.3136596679688,34.3136596679688,34.3136596679688,34.3136596679688,34.3136596679688,34.3136596679688,34.3136596679688,34.3136596679688,34.3136596679688,35.4063720703125,35.4063720703125,35.4063720703125,35.4063720703125,35.4063720703125,35.4063720703125,35.4063720703125,36.3937911987305,36.3937911987305,36.3937911987305,36.3937911987305,36.9701080322266,36.9701080322266,36.9701080322266,36.9701080322266,36.9701080322266,36.9701080322266,36.9701080322266,36.9701080322266,37.5493087768555,37.5493087768555,37.5493087768555,37.5493087768555,37.5493087768555,37.5493087768555,37.5493087768555,37.5493087768555,37.5493087768555,37.5493087768555,27.9810028076172,27.9810028076172,28.5873184204102,28.5873184204102,28.5873184204102,28.5873184204102,29.1602096557617,29.1602096557617,29.1602096557617,29.1602096557617,29.1602096557617,29.1602096557617,29.1602096557617,29.1602096557617,29.1602096557617,29.1602096557617,29.1602096557617,29.1602096557617,29.1602096557617,29.1602096557617,29.7696685791016,29.7696685791016,29.7696685791016,29.7696685791016,29.7696685791016,30.3590927124023,30.3590927124023,30.3590927124023,30.3590927124023,30.3590927124023,30.3590927124023,30.3590927124023,30.9536972045898,30.9536972045898,30.9536972045898,30.9536972045898,30.9536972045898,30.9536972045898,30.9536972045898,30.9536972045898,31.6428604125977,31.6428604125977,31.6428604125977,31.6428604125977,31.6428604125977,31.6428604125977,32.3430328369141,32.3430328369141,32.3430328369141,32.3430328369141,32.3430328369141,32.3430328369141,33.2326889038086,33.2326889038086,33.2326889038086,33.2326889038086,33.2326889038086,33.2326889038086,33.2326889038086,33.2326889038086,33.2326889038086,33.2326889038086,33.2326889038086,33.8385467529297,33.8385467529297,33.8385467529297,33.8385467529297,33.8385467529297,33.8385467529297,34.4083786010742,34.4083786010742,34.4083786010742,34.4083786010742,34.4083786010742,34.4083786010742,34.4083786010742,34.4083786010742,35.5920867919922,35.5920867919922,35.5920867919922,35.5920867919922,35.5920867919922,35.5920867919922,36.3360290527344,36.3360290527344,36.3360290527344,36.3360290527344,36.3360290527344,36.3360290527344,36.3360290527344,36.3360290527344,37.182991027832,37.182991027832,37.182991027832,37.182991027832,37.182991027832,37.182991027832,37.182991027832,37.182991027832,37.87939453125,37.87939453125,37.87939453125,37.87939453125,37.87939453125,37.87939453125,37.87939453125,37.87939453125,37.87939453125,37.87939453125,37.87939453125,37.87939453125,37.87939453125,27.9266738891602,27.9266738891602,27.9266738891602,27.9266738891602,27.9266738891602,27.9266738891602,27.9266738891602,27.9266738891602,27.9266738891602,27.9266738891602,28.6553344726562,28.6553344726562,28.6553344726562,28.6553344726562,28.6553344726562,28.6553344726562,29.5104293823242,29.5104293823242,29.5104293823242,29.5104293823242,29.5104293823242,29.5104293823242,29.5104293823242,30.1007843017578,30.1007843017578,30.1007843017578,30.1007843017578,30.1007843017578,30.1007843017578,30.1007843017578,30.76953125,30.76953125,30.76953125,30.76953125,30.76953125,30.76953125,30.76953125,30.76953125,31.3682556152344,31.3682556152344,31.3682556152344,31.3682556152344,31.9563293457031,31.9563293457031,31.9563293457031,31.9563293457031,31.9563293457031,32.6105499267578,32.6105499267578,32.6105499267578,32.6105499267578,32.6105499267578,32.6105499267578,32.6105499267578,32.6105499267578,32.6105499267578,32.6105499267578,32.6105499267578,33.1819152832031,33.1819152832031,33.1819152832031,33.1819152832031,33.1819152832031,33.1819152832031,33.1819152832031,33.8362197875977,33.8362197875977,33.8362197875977,33.8362197875977,33.8362197875977,33.8362197875977,33.8362197875977,33.8362197875977,33.8362197875977,33.8362197875977,34.4377059936523,34.4377059936523,34.4377059936523,34.4377059936523,34.4377059936523,34.4377059936523,34.4377059936523,34.4377059936523,35.588493347168,35.588493347168,35.588493347168,35.588493347168,35.588493347168,35.588493347168,36.3280563354492,36.3280563354492,36.3280563354492,36.3280563354492,36.3280563354492,36.3280563354492,36.3280563354492,36.3280563354492,36.3280563354492,36.3280563354492,36.3280563354492,36.9865264892578,36.9865264892578,36.9865264892578,36.9865264892578,36.9865264892578,36.9865264892578,36.9865264892578,36.9865264892578,37.559455871582,37.559455871582,27.4072723388672,27.4072723388672,27.4072723388672,27.4072723388672,27.4072723388672,27.4072723388672,28.0932006835938,28.0932006835938,28.6903686523438,28.6903686523438,29.2741317749023,29.2741317749023,29.9895477294922,29.9895477294922,29.9895477294922,29.9895477294922,29.9895477294922,29.9895477294922,29.9895477294922,30.7631149291992,30.7631149291992,30.7631149291992,30.7631149291992,30.7631149291992,30.7631149291992,30.7631149291992,31.3939895629883,31.3939895629883,31.3939895629883,31.3939895629883,31.3939895629883,32.0138626098633,32.0138626098633,32.0138626098633,32.7648315429688,32.7648315429688,32.7648315429688,32.7648315429688,32.7648315429688,32.7648315429688,32.7648315429688,33.3461837768555,33.3461837768555,33.3461837768555,33.3461837768555,33.3461837768555,33.3461837768555,33.3461837768555,34.120246887207,34.120246887207,34.120246887207,34.120246887207,34.120246887207,34.120246887207,34.120246887207,34.120246887207,34.120246887207,34.120246887207,34.7156066894531,34.7156066894531,34.7156066894531,34.7156066894531,34.7156066894531,34.7156066894531,34.7156066894531,34.7156066894531,34.7156066894531,35.3047409057617,35.3047409057617,35.3047409057617,35.3047409057617,35.3047409057617,36.2684478759766,36.2684478759766,36.2684478759766,36.2684478759766,36.2684478759766,36.8487319946289,36.8487319946289,36.8487319946289,36.8487319946289,36.8487319946289,36.8487319946289,36.8487319946289,37.6157150268555,37.6157150268555,37.6157150268555,27.6003570556641,27.6003570556641,27.6003570556641,27.6003570556641,27.6003570556641,27.6003570556641,27.6003570556641,27.6003570556641,27.6003570556641,27.6003570556641,27.6003570556641,28.259635925293,28.259635925293,28.259635925293,28.259635925293,28.8587265014648,28.8587265014648,28.8587265014648,28.8587265014648,28.8587265014648,28.8587265014648,28.8587265014648,28.8587265014648,28.8587265014648,28.8587265014648,28.8587265014648,28.8587265014648,29.4496078491211,29.4496078491211,29.4496078491211,29.4496078491211,29.4496078491211,29.4496078491211,30.406120300293,30.406120300293,30.406120300293,30.406120300293,30.406120300293,30.406120300293,30.406120300293,31.4123992919922,31.4123992919922,31.4123992919922,31.4123992919922,31.4123992919922,31.4123992919922,31.4123992919922,32.374382019043,32.374382019043,32.374382019043,32.374382019043,32.374382019043,32.374382019043,32.374382019043,32.374382019043,33.3882522583008,33.3882522583008,33.9751739501953,33.9751739501953,33.9751739501953,33.9751739501953,33.9751739501953,33.9751739501953,33.9751739501953,34.6665725708008,34.6665725708008,35.2599105834961,35.2599105834961,35.2599105834961,35.2599105834961,35.2599105834961,35.2599105834961,35.2599105834961,35.8603515625,35.8603515625,36.6190719604492,36.6190719604492,36.6190719604492,36.6190719604492,36.6190719604492,36.6190719604492,36.6190719604492,36.6190719604492,37.1923294067383,37.1923294067383,37.1923294067383,37.1923294067383,37.1923294067383,37.1923294067383,37.1923294067383,27.423698425293,27.423698425293,27.423698425293,27.423698425293,27.423698425293,27.423698425293,27.423698425293,27.423698425293,28.3826904296875,28.3826904296875,28.3826904296875,28.3826904296875,28.3826904296875,28.3826904296875,28.3826904296875,28.3826904296875,29.2357025146484,29.2357025146484,29.2357025146484,29.2357025146484,29.2357025146484,29.2357025146484,29.8576278686523,29.8576278686523,29.8576278686523,29.8576278686523,29.8576278686523,29.8576278686523,29.8576278686523,29.8576278686523,30.4864959716797,30.4864959716797,30.4864959716797,30.4864959716797,30.4864959716797,30.4864959716797,30.4864959716797,30.4864959716797,30.4864959716797,31.0822525024414,31.0822525024414,31.7398147583008,31.7398147583008,31.7398147583008,31.7398147583008,31.7398147583008,31.7398147583008,32.3682098388672,32.3682098388672,32.3682098388672,32.3682098388672,32.3682098388672,32.3682098388672,32.3682098388672,32.3682098388672,32.3682098388672,32.9631423950195,32.9631423950195,32.9631423950195,32.9631423950195,32.9631423950195,32.9631423950195,33.5370254516602,33.5370254516602,33.5370254516602,33.5370254516602,33.5370254516602,33.5370254516602,33.5370254516602,33.5370254516602,33.5370254516602,33.5370254516602,34.3121337890625,34.3121337890625,34.3121337890625,34.3121337890625,34.3121337890625,34.3121337890625,34.8964157104492,34.8964157104492,34.8964157104492,34.8964157104492,34.8964157104492,34.8964157104492,34.8964157104492,35.4614105224609,35.4614105224609,35.4614105224609,35.4614105224609,35.4614105224609,35.4614105224609,35.4614105224609,35.4614105224609,36.1642532348633,36.1642532348633,36.1642532348633,36.1642532348633,36.1642532348633,36.1642532348633,36.1642532348633,36.1642532348633,36.7275619506836,36.7275619506836,36.7275619506836,36.7275619506836,36.7275619506836,36.7275619506836,36.7275619506836,36.7275619506836,37.3933181762695,37.3933181762695,37.3933181762695,37.3933181762695,37.3933181762695,37.1280212402344,37.1280212402344,37.1280212402344,37.1280212402344,37.1280212402344,37.1280212402344,37.1280212402344,37.1280212402344,37.1280212402344,27.9673004150391,27.9673004150391,28.8099365234375,28.8099365234375,28.8099365234375,28.8099365234375,29.4991073608398,29.4991073608398,30.2541732788086,30.2541732788086,30.2541732788086,30.2541732788086,30.8296813964844,30.8296813964844,30.8296813964844,30.8296813964844,30.8296813964844,30.8296813964844,30.8296813964844,30.8296813964844,30.8296813964844,30.8296813964844,31.6307754516602,31.6307754516602,31.6307754516602,31.6307754516602,31.6307754516602,31.6307754516602,31.6307754516602,31.6307754516602,32.2377014160156,32.2377014160156,32.2377014160156,32.2377014160156,32.2377014160156,32.2377014160156,32.2377014160156,32.9007873535156,32.9007873535156,32.9007873535156,32.9007873535156,32.9007873535156,32.9007873535156,33.4687728881836,33.4687728881836,33.4687728881836,33.4687728881836,33.4687728881836,33.4687728881836,33.4687728881836,33.4687728881836,34.0642623901367,34.0642623901367,34.0642623901367,34.0642623901367,34.0642623901367,34.6029357910156,34.6029357910156,34.6029357910156,34.6029357910156,34.6029357910156,34.6029357910156,34.6029357910156,34.6029357910156,34.6029357910156,34.6029357910156,34.6029357910156,34.6029357910156,35.1621170043945,35.1621170043945,35.1621170043945,35.1621170043945,35.1621170043945,35.1621170043945,35.1621170043945,35.1621170043945,35.1621170043945,35.1621170043945,35.74560546875,35.74560546875,35.74560546875,35.74560546875,35.74560546875,35.74560546875,36.3175582885742,36.3175582885742,36.3175582885742,36.3175582885742,36.3175582885742,36.3175582885742,36.3175582885742,36.3175582885742,36.3175582885742,36.8865203857422,36.8865203857422,36.8865203857422,36.8865203857422,36.8865203857422,36.8865203857422,36.8865203857422,36.8865203857422,36.8865203857422,37.4958953857422,37.4958953857422,27.4518432617188,27.4518432617188,27.4518432617188,27.4518432617188,27.4518432617188,27.4518432617188,27.4518432617188,27.4518432617188,27.4518432617188,27.4518432617188,27.4518432617188,27.4518432617188,28.1044387817383,28.1044387817383,28.1044387817383,28.1044387817383,28.1044387817383,28.1044387817383,28.1044387817383,28.1044387817383,28.6745071411133,28.6745071411133,28.6745071411133,28.6745071411133,28.6745071411133,28.6745071411133,29.3281784057617,29.3281784057617,29.3281784057617,29.3281784057617,29.9026641845703,29.9026641845703,29.9026641845703,29.9026641845703,29.9026641845703,29.9026641845703,29.9026641845703,29.9026641845703,29.9026641845703,29.9026641845703,30.6019134521484,30.6019134521484,30.6019134521484,30.6019134521484,30.6019134521484,30.6019134521484,30.6019134521484,30.6019134521484,30.6019134521484,31.1819458007812,31.1819458007812,31.1819458007812,31.1819458007812,31.1819458007812,31.1819458007812,31.1819458007812,31.1819458007812,31.1819458007812,31.7793426513672,31.7793426513672,32.6309204101562,32.6309204101562,33.2251510620117,33.2251510620117,33.2251510620117,33.2251510620117,33.2251510620117,33.2251510620117,33.9709777832031,33.9709777832031,33.9709777832031,33.9709777832031,33.9709777832031,33.9709777832031,33.9709777832031,33.9709777832031,33.9709777832031,33.9709777832031,33.9709777832031,33.9709777832031,33.9709777832031,34.5398483276367,34.5398483276367,34.5398483276367,34.5398483276367,34.5398483276367,34.5398483276367,34.5398483276367,34.5398483276367,34.5398483276367,34.5398483276367,34.5398483276367,34.5398483276367,34.5398483276367,35.1497955322266,35.1497955322266,35.1497955322266,35.1497955322266,35.1497955322266,35.1497955322266,35.1497955322266,35.1497955322266,35.9834899902344,35.9834899902344,35.9834899902344,35.9834899902344,35.9834899902344,35.9834899902344,35.9834899902344,35.9834899902344,36.7483825683594,36.7483825683594,36.7483825683594,36.7483825683594,36.7483825683594,36.7483825683594,36.7483825683594,37.3406295776367,37.3406295776367,37.3406295776367,37.3406295776367,37.3406295776367,37.3406295776367,37.3406295776367,37.3406295776367,37.3406295776367,37.3406295776367,37.3406295776367,37.3406295776367,37.3406295776367,37.8257904052734,37.8257904052734,37.8257904052734,37.8257904052734,37.8257904052734,37.8257904052734,37.8257904052734,37.8257904052734,37.8257904052734,27.8355102539062,27.8355102539062,27.8355102539062,27.8355102539062,27.8355102539062,27.8355102539062,27.8355102539062,28.4299545288086,28.4299545288086,28.4299545288086,28.4299545288086,28.4299545288086,29.0896072387695,29.0896072387695,29.0896072387695,29.0896072387695,29.0896072387695,29.0896072387695,29.0896072387695,29.0896072387695,29.0896072387695,29.0896072387695,30.0680694580078,30.0680694580078,30.0680694580078,30.0680694580078,30.0680694580078,30.0680694580078,30.0680694580078,30.9666137695312,30.9666137695312,30.9666137695312,30.9666137695312,31.5793533325195,31.5793533325195,31.5793533325195,31.5793533325195,31.5793533325195,32.1629333496094,32.1629333496094,32.1629333496094,32.1629333496094,32.1629333496094,32.1629333496094,32.1629333496094,32.1629333496094,32.1629333496094,32.1629333496094,32.1629333496094,33.1312026977539,33.1312026977539,33.1312026977539,33.1312026977539,33.1312026977539,33.1312026977539,33.1312026977539,33.1312026977539,33.1312026977539,33.7998886108398,33.7998886108398,33.7998886108398,33.7998886108398,33.7998886108398,33.7998886108398,33.7998886108398,34.4292984008789,34.4292984008789,34.4292984008789,34.4292984008789,34.4292984008789,34.4292984008789,34.4292984008789,34.4292984008789,34.4292984008789,34.4292984008789,35.2285232543945,35.2285232543945,35.2285232543945,35.2285232543945,35.2285232543945,35.2285232543945,35.2285232543945,35.2285232543945,35.2285232543945,35.2285232543945,35.8686752319336,35.8686752319336,35.8686752319336,36.6113891601562,36.6113891601562,36.6113891601562,36.6113891601562,36.6113891601562,37.3006362915039,37.3006362915039,37.3006362915039,37.3006362915039,37.3006362915039,37.3006362915039,37.3006362915039,37.8370666503906,37.8370666503906,37.8370666503906,37.8370666503906,27.7230987548828,27.7230987548828,27.7230987548828,27.7230987548828,27.7230987548828,27.7230987548828,27.7230987548828,28.3255157470703,28.3255157470703,28.3255157470703,28.3255157470703,28.3255157470703,28.3255157470703,28.3255157470703,28.3255157470703,28.9280853271484,28.9280853271484,28.9280853271484,28.9280853271484,28.9280853271484,28.9280853271484,28.9280853271484,28.9280853271484,28.9280853271484,28.9280853271484,28.9280853271484,28.9280853271484,29.6048736572266,29.6048736572266,29.6048736572266,29.6048736572266,29.6048736572266,29.6048736572266,29.6048736572266,30.2259063720703,30.2259063720703,30.2259063720703,30.2259063720703,30.2259063720703,30.2259063720703,30.8935394287109,30.8935394287109,30.8935394287109,30.8935394287109,31.4794998168945,31.4794998168945,32.1366424560547,32.1366424560547,32.7086029052734,32.7086029052734,32.7086029052734,32.7086029052734,32.7086029052734,32.7086029052734,33.3002777099609,33.3002777099609,33.3002777099609,33.3002777099609,33.3002777099609,34.0160980224609,34.0160980224609,34.8965682983398,34.8965682983398,34.8965682983398,34.8965682983398,34.8965682983398,34.8965682983398,34.8965682983398,35.6211929321289,35.6211929321289,35.6211929321289,35.6211929321289,35.6211929321289,35.6211929321289,35.6211929321289,35.6211929321289,36.2929611206055,36.2929611206055,36.2929611206055,36.2929611206055,36.2929611206055,36.2929611206055,36.2929611206055,36.2929611206055,36.8631210327148,36.8631210327148,36.8631210327148,36.8631210327148,36.8631210327148,36.8631210327148,36.8631210327148,36.8631210327148,37.5079116821289,37.5079116821289,37.5079116821289,37.5079116821289,37.5079116821289,37.5079116821289,37.5079116821289,37.5079116821289,37.5079116821289,37.5079116821289,27.4452819824219,27.4452819824219,27.4452819824219,27.4452819824219,27.4452819824219,27.4452819824219,27.4452819824219,27.4452819824219,27.4452819824219,27.4452819824219,27.4452819824219,28.1054458618164,28.1054458618164,28.1054458618164,28.1054458618164,28.1054458618164,28.1054458618164,28.1054458618164,28.8609619140625,28.8609619140625,28.8609619140625,28.8609619140625,28.8609619140625,28.8609619140625,28.8609619140625,28.8609619140625,28.8609619140625,29.4923706054688,29.4923706054688,29.4923706054688,29.4923706054688,29.4923706054688,29.4923706054688,29.4923706054688,30.3800506591797,30.3800506591797,31.0604476928711,31.0604476928711,31.0604476928711,31.0604476928711,31.0604476928711,31.8120346069336,31.8120346069336,31.8120346069336,31.8120346069336,31.8120346069336,31.8120346069336,31.8120346069336,32.5668716430664,32.5668716430664,32.5668716430664,32.5668716430664,32.5668716430664,32.5668716430664,33.3096694946289,33.3096694946289,33.3096694946289,33.3096694946289,33.3096694946289,33.3096694946289,33.3096694946289,33.3096694946289,33.3096694946289,33.9695892333984,33.9695892333984,33.9695892333984,33.9695892333984,33.9695892333984,33.9695892333984,34.8677520751953,34.8677520751953,34.8677520751953,34.8677520751953,35.8337707519531,35.8337707519531,35.8337707519531,35.8337707519531,35.8337707519531,35.8337707519531,35.8337707519531,36.4168243408203,36.4168243408203,36.4168243408203,36.4168243408203,36.4168243408203,36.4168243408203,36.4168243408203,37.0123443603516,37.0123443603516,37.0123443603516,37.7804107666016,37.7804107666016,37.7804107666016,37.7804107666016,37.7804107666016,37.7804107666016,37.7804107666016,37.7804107666016,37.7804107666016,27.8137435913086,27.8137435913086,27.8137435913086,27.8137435913086,27.8137435913086,27.8137435913086,28.4061431884766,28.4061431884766,28.4061431884766,28.4061431884766,28.4061431884766,28.4061431884766,28.4061431884766,28.4061431884766,28.4061431884766,28.4061431884766,29.2844314575195,29.2844314575195,29.2844314575195,29.2844314575195,29.2844314575195,29.2844314575195,30.1416549682617,30.1416549682617,30.1416549682617,30.1416549682617,30.1416549682617,30.1416549682617,30.1416549682617,30.1416549682617,30.1416549682617,30.1416549682617,30.9323120117188,30.9323120117188,30.9323120117188,30.9323120117188,30.9323120117188,30.9323120117188,30.9323120117188,30.9323120117188,31.5148086547852,31.5148086547852,31.5148086547852,31.5148086547852,31.5148086547852,31.5148086547852,31.5148086547852,31.5148086547852,32.067253112793,32.067253112793,32.067253112793,32.067253112793,32.6295318603516,32.6295318603516,32.6295318603516,32.6295318603516,32.6295318603516,33.2202301025391,33.2202301025391,33.2202301025391,33.2202301025391,33.2202301025391,33.2202301025391,33.2202301025391,33.2202301025391,34.1008682250977,34.1008682250977,34.1008682250977,34.1008682250977,34.1008682250977,34.6996536254883,34.6996536254883,34.6996536254883,34.6996536254883,34.6996536254883,34.6996536254883,34.6996536254883,34.6996536254883,35.4125137329102,35.4125137329102,35.4125137329102,35.4125137329102,35.4125137329102,35.4125137329102,35.4125137329102,35.4125137329102,36.1378479003906,36.1378479003906,36.1378479003906,36.1378479003906,36.1378479003906,36.1378479003906,36.1378479003906,36.1378479003906,36.8810958862305,36.8810958862305,36.8810958862305,36.8810958862305,36.8810958862305,37.4651336669922,37.4651336669922,37.4651336669922,37.4651336669922,37.4651336669922,37.4651336669922,37.4651336669922,37.4651336669922,37.4651336669922,37.4651336669922,27.2833633422852,27.2833633422852,27.2833633422852,27.2833633422852,27.2833633422852,27.2833633422852,27.2833633422852,27.2833633422852,27.2833633422852,27.2833633422852,27.8525848388672,27.8525848388672,28.5233459472656,28.5233459472656,28.5233459472656,28.5233459472656,28.5233459472656,28.5233459472656,29.1205673217773,29.1205673217773,29.1205673217773,29.1205673217773,29.1205673217773,29.1205673217773,29.1205673217773,29.1205673217773,29.1205673217773,29.1205673217773,29.1205673217773,29.1205673217773,29.1205673217773,29.1205673217773,29.8368530273438,29.8368530273438,29.8368530273438,29.8368530273438,29.8368530273438,29.8368530273438,29.8368530273438,30.8291015625,30.8291015625,30.8291015625,30.8291015625,30.8291015625,30.8291015625,30.8291015625,30.8291015625,30.8291015625,31.5233917236328,31.5233917236328,31.5233917236328,31.5233917236328,31.5233917236328,32.224723815918,32.224723815918,32.224723815918,32.224723815918,32.7982788085938,32.7982788085938,32.7982788085938,32.7982788085938,32.7982788085938,32.7982788085938,32.7982788085938,32.7982788085938,32.7982788085938,32.7982788085938,32.7982788085938,33.7742691040039,33.7742691040039,33.7742691040039,33.7742691040039,33.7742691040039,33.7742691040039,33.7742691040039,34.9421157836914,34.9421157836914,34.9421157836914,34.9421157836914,34.9421157836914,34.9421157836914,34.9421157836914,35.5246200561523,35.5246200561523,35.5246200561523,35.5246200561523,35.5246200561523,35.5246200561523,35.5246200561523,36.1392059326172,36.1392059326172,36.1392059326172,36.1392059326172,36.1392059326172,36.1392059326172,36.1392059326172,36.1392059326172,36.1392059326172,36.7484512329102,36.7484512329102,36.7484512329102,36.7484512329102,36.7484512329102,36.7484512329102,36.7484512329102,36.7484512329102,37.7664489746094,37.7664489746094,37.7664489746094,37.7664489746094,37.7664489746094,27.7243576049805,27.7243576049805,27.7243576049805,27.7243576049805,27.7243576049805,27.7243576049805,27.7243576049805,27.7243576049805,28.8504867553711,28.8504867553711,28.8504867553711,28.8504867553711,28.8504867553711,29.4434585571289,29.4434585571289,29.4434585571289,29.4434585571289,29.4434585571289,29.4434585571289,29.4434585571289,30.0455017089844,30.0455017089844,30.7426071166992,30.7426071166992,30.7426071166992,30.7426071166992,30.7426071166992,30.7426071166992,30.7426071166992,31.4589462280273,31.4589462280273,31.4589462280273,31.4589462280273,31.4589462280273,31.4589462280273,31.4589462280273,32.1993865966797,32.1993865966797,32.1993865966797,32.1993865966797,32.1993865966797,32.1993865966797,32.1993865966797,32.1993865966797,32.1993865966797,32.1993865966797,32.1993865966797,32.1993865966797,32.9855422973633,32.9855422973633,32.9855422973633,32.9855422973633,32.9855422973633,32.9855422973633,32.9855422973633,32.9855422973633,32.9855422973633,32.9855422973633,32.9855422973633,32.9855422973633,33.7746353149414,33.7746353149414,33.7746353149414,33.7746353149414,33.7746353149414,33.7746353149414,33.7746353149414,33.7746353149414,33.7746353149414,34.7221298217773,34.7221298217773,35.340461730957,35.340461730957,35.340461730957,35.340461730957,35.340461730957,35.340461730957,35.340461730957,35.927360534668,35.927360534668,35.927360534668,35.927360534668,35.927360534668,35.927360534668,35.927360534668,35.927360534668,36.9585113525391,36.9585113525391,36.9585113525391,36.9585113525391,36.9585113525391,36.9585113525391,36.9585113525391,36.9585113525391,37.5726547241211,37.5726547241211,37.5726547241211,37.5726547241211,37.5726547241211,37.5726547241211,37.5726547241211,37.5726547241211,37.5726547241211,37.5726547241211,27.4628829956055,27.4628829956055,27.4628829956055,28.2093887329102,28.2093887329102,29.4061584472656,29.4061584472656,29.4061584472656,29.4061584472656,29.4061584472656,29.4061584472656,29.4061584472656,30.0149765014648,30.0149765014648,30.0149765014648,30.0149765014648,30.0149765014648,30.0149765014648,30.0149765014648,30.0149765014648,30.0149765014648,30.0149765014648,30.0149765014648,30.0149765014648,30.0149765014648,30.8081665039062,30.8081665039062,31.5927734375,31.5927734375,31.5927734375,31.5927734375,31.5927734375,31.5927734375,31.5927734375,31.5927734375,32.1643447875977,32.1643447875977,32.1643447875977,32.1643447875977,32.1643447875977,32.1643447875977,32.1643447875977,32.1643447875977,32.9395446777344,32.9395446777344,32.9395446777344,32.9395446777344,32.9395446777344,32.9395446777344,32.9395446777344,33.7397308349609,33.7397308349609,33.7397308349609,33.7397308349609,33.7397308349609,33.7397308349609,33.7397308349609,33.7397308349609,34.4248733520508,34.4248733520508,34.4248733520508,34.4248733520508,34.4248733520508,34.4248733520508,34.4248733520508,34.4248733520508,34.4248733520508,34.4248733520508,35.0655136108398,35.0655136108398,35.0655136108398,35.0655136108398,35.0655136108398,35.0655136108398,35.0655136108398,35.0655136108398,35.6346282958984,35.6346282958984,35.6346282958984,35.6346282958984,35.6346282958984,35.6346282958984,36.3907699584961,36.3907699584961,36.3907699584961,36.3907699584961,36.3907699584961,36.3907699584961,36.3907699584961,36.9828109741211,36.9828109741211,36.9828109741211,36.9828109741211,36.9828109741211,36.9828109741211,36.9828109741211,37.7839050292969,37.7839050292969,37.7839050292969,37.7839050292969,37.7839050292969,27.7769546508789,27.7769546508789,27.7769546508789,27.7769546508789,27.7769546508789,27.7769546508789,27.7769546508789,27.7769546508789,28.3895874023438,28.3895874023438,28.3895874023438,28.3895874023438,28.3895874023438,28.3895874023438,28.3895874023438,29.1517944335938,29.1517944335938,29.1517944335938,29.1517944335938,29.1517944335938,29.1517944335938,29.1517944335938,29.1517944335938,29.7479782104492,29.7479782104492,29.7479782104492,29.7479782104492,29.7479782104492,29.7479782104492,29.7479782104492,29.7479782104492,30.5918045043945,30.5918045043945,30.5918045043945,30.5918045043945,30.5918045043945,30.5918045043945,30.5918045043945,30.5918045043945,31.1913375854492,31.1913375854492,31.1913375854492,31.1913375854492,31.1913375854492,31.1913375854492,31.1913375854492,32.0702438354492,32.0702438354492,32.0702438354492,32.0702438354492,32.0702438354492,32.0702438354492,32.0702438354492,32.6815872192383,32.6815872192383,32.6815872192383,32.6815872192383,32.6815872192383,32.6815872192383,32.6815872192383,32.6815872192383,32.6815872192383,32.6815872192383,33.6590957641602,33.6590957641602,33.6590957641602,33.6590957641602,33.6590957641602,33.6590957641602,33.6590957641602,33.6590957641602,34.495491027832,34.495491027832,34.495491027832,34.495491027832,34.495491027832,34.495491027832,35.6268081665039,35.6268081665039,35.6268081665039,35.6268081665039,35.6268081665039,35.6268081665039,35.6268081665039,36.223991394043,36.223991394043,36.223991394043,36.223991394043,36.223991394043,36.223991394043,36.223991394043,37.0123519897461,37.0123519897461,37.0123519897461,37.0123519897461,37.0123519897461,37.0123519897461,37.0123519897461,37.0123519897461,37.8438110351562,37.8438110351562,37.8438110351562,37.8438110351562,37.8438110351562,37.8438110351562,37.8438110351562,37.8438110351562,28.0249633789062,28.0249633789062,28.0249633789062,28.0249633789062,28.0249633789062,28.0249633789062,28.8350524902344,28.8350524902344,28.8350524902344,28.8350524902344,29.7112503051758,29.7112503051758,29.7112503051758,29.7112503051758,30.4156494140625,30.4156494140625,30.4156494140625,30.4156494140625,30.4156494140625,30.4156494140625,30.4156494140625,31.0840301513672,31.0840301513672,31.0840301513672,31.0840301513672,31.0840301513672,31.0840301513672,31.0840301513672,31.6797485351562,31.6797485351562,31.6797485351562,31.6797485351562,32.2655868530273,32.2655868530273,32.2655868530273,32.2655868530273,32.2655868530273,32.2655868530273,32.2655868530273,32.2655868530273,32.8610153198242,32.8610153198242,33.7429275512695,33.7429275512695,33.7429275512695,33.7429275512695,33.7429275512695,33.7429275512695,33.7429275512695,33.7429275512695,33.7429275512695,34.3570327758789,34.3570327758789,34.3570327758789,34.3570327758789,34.3570327758789,34.3570327758789,34.3570327758789,34.3570327758789,34.9388046264648,34.9388046264648,34.9388046264648,34.9388046264648,34.9388046264648,35.6820831298828,35.6820831298828,35.6820831298828,35.6820831298828,35.6820831298828,35.6820831298828,35.6820831298828,35.6820831298828,36.3813629150391,36.3813629150391,36.3813629150391,36.3813629150391,36.3813629150391,36.3813629150391,36.3813629150391,37.0574264526367,37.0574264526367,37.8500518798828,37.8500518798828,37.8500518798828,37.8500518798828,37.8500518798828,37.8500518798828,27.8606033325195,27.8606033325195,27.8606033325195,27.8606033325195,27.8606033325195,27.8606033325195,27.8606033325195,27.8606033325195,28.6482696533203,28.6482696533203,28.6482696533203,28.6482696533203,28.6482696533203,28.6482696533203,28.6482696533203,29.2552185058594,29.2552185058594,29.2552185058594,29.2552185058594,29.2552185058594,29.2552185058594,29.2552185058594,29.2552185058594,29.9602127075195,29.9602127075195,29.9602127075195,29.9602127075195,29.9602127075195,29.9602127075195,29.9602127075195,29.9602127075195,30.5979843139648,30.5979843139648,30.5979843139648,30.5979843139648,31.2101898193359,31.2101898193359,31.8877258300781,31.8877258300781,31.8877258300781,31.8877258300781,31.8877258300781,31.8877258300781,32.6557235717773,32.6557235717773,32.6557235717773,32.6557235717773,32.6557235717773,32.6557235717773,32.6557235717773,33.3143157958984,33.3143157958984,33.3143157958984,33.3143157958984,33.3143157958984,33.3143157958984,33.3143157958984,33.8804168701172,33.8804168701172,33.8804168701172,33.8804168701172,33.8804168701172,33.8804168701172,33.8804168701172,33.8804168701172,34.4923400878906,34.4923400878906,34.4923400878906,34.4923400878906,34.4923400878906,34.4923400878906,35.0662231445312,35.0662231445312,35.6787796020508,35.6787796020508,35.6787796020508,35.6787796020508,35.6787796020508,35.6787796020508,35.6787796020508,35.6787796020508,35.6787796020508,35.6787796020508,36.6568756103516,36.6568756103516,36.6568756103516,36.6568756103516,36.6568756103516,36.6568756103516,36.6568756103516,37.2562484741211,37.2562484741211,37.2562484741211,37.2562484741211,37.2562484741211,37.2562484741211,37.8371505737305,37.8371505737305,37.8371505737305,37.8371505737305,37.8371505737305,37.8371505737305,37.8371505737305,37.8371505737305,27.8307723999023,27.8307723999023,27.8307723999023,27.8307723999023,27.8307723999023,27.8307723999023,27.8307723999023,28.4156188964844,28.4156188964844,28.4156188964844,28.4156188964844,28.4156188964844,28.4156188964844,29.1607131958008,29.1607131958008,29.1607131958008,29.1607131958008,29.1607131958008,29.1607131958008,29.1607131958008,29.1607131958008,29.7884979248047,29.7884979248047,29.7884979248047,29.7884979248047,29.7884979248047,29.7884979248047,30.7263107299805,30.7263107299805,30.7263107299805,30.7263107299805,30.7263107299805,31.3668594360352,31.3668594360352,31.3668594360352,31.3668594360352,31.3668594360352,32.0415649414062,32.0415649414062,32.0415649414062,32.0415649414062,32.6257476806641,32.6257476806641,32.6257476806641,32.6257476806641,32.6257476806641,32.6257476806641,33.2135238647461,33.2135238647461,33.2135238647461,33.2135238647461,33.2135238647461,33.2135238647461,33.2135238647461,33.8003387451172,33.8003387451172,33.8003387451172,33.8003387451172,33.8003387451172,33.8003387451172,33.8003387451172,33.8003387451172,33.8003387451172,34.6317596435547,34.6317596435547,34.6317596435547,34.6317596435547,34.6317596435547,34.6317596435547,34.6317596435547,34.6317596435547,34.6317596435547,34.6317596435547,34.6317596435547,34.6317596435547,35.2011566162109,35.2011566162109,35.2011566162109,35.2011566162109,35.2011566162109,35.792594909668,35.792594909668,35.792594909668,35.792594909668,35.792594909668,35.792594909668,36.5402526855469,36.5402526855469,36.5402526855469,36.5402526855469,36.5402526855469,36.5402526855469,36.5402526855469,37.1568832397461,37.1568832397461,37.1568832397461,37.1568832397461,37.1568832397461,37.1568832397461,37.1568832397461,37.7250442504883,37.7250442504883,37.7250442504883,37.7250442504883,37.7250442504883,37.7250442504883,37.7250442504883,37.7250442504883,27.9524536132812,27.9524536132812,27.9524536132812,27.9524536132812,27.9524536132812,27.9524536132812,27.9524536132812,27.9524536132812,28.5479354858398,28.5479354858398,28.5479354858398,28.5479354858398,29.4421005249023,29.4421005249023,29.4421005249023,29.4421005249023,29.4421005249023,29.4421005249023,29.4421005249023,29.4421005249023,30.0367279052734,30.0367279052734,30.0367279052734,30.6992111206055,30.6992111206055,30.6992111206055,30.6992111206055,30.6992111206055,30.6992111206055,30.6992111206055,30.6992111206055,30.6992111206055,31.3960418701172,31.3960418701172,31.3960418701172,31.3960418701172,31.3960418701172,31.3960418701172,31.3960418701172,31.3960418701172,32.0110244750977,32.0110244750977,32.7490615844727,32.7490615844727,32.7490615844727,32.7490615844727,32.7490615844727,33.4559783935547,33.4559783935547,33.4559783935547,33.4559783935547,33.4559783935547,33.4559783935547,33.4559783935547,33.4559783935547,33.4559783935547,33.4559783935547,33.4559783935547,34.3892059326172,34.3892059326172,34.3892059326172,34.3892059326172,34.3892059326172,34.3892059326172,34.3892059326172,34.3892059326172,34.9295196533203,34.9295196533203,34.9295196533203,34.9295196533203,34.9295196533203,34.9295196533203,35.4693069458008,35.4693069458008,35.4693069458008,35.4693069458008,35.4693069458008,35.4693069458008,35.4693069458008,35.4693069458008,36.0324249267578,36.0324249267578,36.0324249267578,36.0324249267578,36.0324249267578,36.0324249267578,36.8665237426758,36.8665237426758,36.8665237426758,36.8665237426758,36.8665237426758,36.8665237426758,36.8665237426758,36.8665237426758,37.3650741577148,37.3650741577148,37.3650741577148,37.3650741577148,37.3650741577148,37.8453598022461,37.8453598022461,37.8453598022461,37.8453598022461,37.8453598022461,37.8453598022461,37.8453598022461,37.8453598022461,27.6845092773438,27.6845092773438,28.2151031494141,28.2151031494141,28.2151031494141,28.2151031494141,28.2151031494141,28.2151031494141,28.7621078491211,28.7621078491211,28.7621078491211,28.7621078491211,29.3308792114258,29.3308792114258,29.3308792114258,29.3308792114258,29.3308792114258,30.1600036621094,30.1600036621094,30.1600036621094,30.979850769043,30.979850769043,30.979850769043,30.979850769043,30.979850769043,30.979850769043,30.979850769043,31.5647583007812,31.5647583007812,31.5647583007812,31.5647583007812,31.5647583007812,31.5647583007812,31.5647583007812,31.5647583007812,31.5647583007812,31.5647583007812,32.153205871582,32.153205871582,32.153205871582,32.153205871582,32.153205871582,32.153205871582,32.153205871582,32.153205871582,32.153205871582,33.1295394897461,33.1295394897461,33.1295394897461,33.1295394897461,33.1295394897461,33.7287292480469,33.7287292480469,34.3213272094727,34.3213272094727,34.3213272094727,34.3213272094727,34.3213272094727,34.3213272094727,34.3213272094727,34.3213272094727,34.3213272094727,34.3213272094727,34.9050827026367,34.9050827026367,34.9050827026367,34.9050827026367,34.9050827026367,34.9050827026367,34.9050827026367,35.5159530639648,35.5159530639648,35.5159530639648,35.5159530639648,35.5159530639648,35.5159530639648,35.5159530639648,35.5159530639648,35.5159530639648,35.5159530639648,36.0862503051758,36.0862503051758,36.0862503051758,36.0862503051758,36.0862503051758,36.0862503051758,36.0862503051758,36.688117980957,36.688117980957,36.688117980957,36.688117980957,36.688117980957,36.688117980957,36.688117980957,36.688117980957,37.2946624755859,37.2946624755859,37.2946624755859,37.2946624755859,37.2946624755859,37.2946624755859,27.6530380249023,27.6530380249023,27.6530380249023,27.6530380249023,27.6530380249023,27.6530380249023,28.7406234741211,28.7406234741211,28.7406234741211,29.6634140014648,29.6634140014648,29.6634140014648,29.6634140014648,29.6634140014648,29.6634140014648,29.6634140014648,29.6634140014648,29.6634140014648,29.6634140014648,29.6634140014648,29.6634140014648,29.6634140014648,30.2140426635742,30.2140426635742,30.2140426635742,30.2140426635742,30.2140426635742,30.8052062988281,30.8052062988281,30.8052062988281,30.8052062988281,30.8052062988281],&#34;meminc&#34;:[0,0,0,0,0,0,0,0.734588623046875,0,0,0,0,0.648178100585938,0,0,0,0,0,1.19927215576172,0,0,0,0,0,0,0,0.611701965332031,0,0,0.790863037109375,0,0,0,0,0,0,0,0,0,0,0,0.887336730957031,0,0,0,0,0,0,0,0,0,0.834312438964844,0,0,0,0,0,0,0.683326721191406,0,0,0,0,0,0,0.614219665527344,0,0,0,0,0,0,0,0.699119567871094,0,0,0,0,0,0,0.631546020507812,0,0,0,0,0,0.607048034667969,0,0,0,0,0,0,0,0,0.586067199707031,0,0,0,0,0,0,0,-10.0854949951172,0,0,0,0,0,0,0,0,0.636940002441406,0,0,0,0,0.977775573730469,0,0,0,0,0,0,0,0,0,0.772247314453125,0,0,0.593254089355469,0,0,0,0,0,0.652542114257812,0,0,0,0,0,0.91259765625,0,0,0,0,0,0,0,0,0,0,0,1.04330444335938,0,0,0,0,0,0,0.699363708496094,0,0,0,0,0,0,0,0,0,0.597198486328125,0,0,0,0,0,0.69195556640625,0,0,0,0,0,1.21636962890625,0,0.79437255859375,0,0.597366333007812,0,0,0,0,-10.0563583374023,0,0,0,0,0,0,0.596122741699219,0,0,0,0,0,0,0,0,0,0,0,0,0.870964050292969,0,0,0,0,0.589851379394531,0,0,0,0,0,0.612556457519531,0,0.613288879394531,0,0,0,0,0,0,0.59942626953125,0,0,0,0,0.684211730957031,0,0,0,0,0,0.671051025390625,0,0,0,0,0,0,0,0,0.586402893066406,0,0,0,0,0,0,0.69610595703125,0,0,0,0,0,0,0.697418212890625,0,0,0,0,0,0,0,0,0,0.598251342773438,0,0,0,0,0,0,0,0.590194702148438,0,0,0,0,0,0,0.6700439453125,0,0,0,0,0.795852661132812,0,0,0,0,0,0,0,-9.85085296630859,0,0,0,0,0,0,0,0.605377197265625,0,0,0,0,1.01222991943359,0,0,0,0,0.983993530273438,0,0,0,0,0,0.696495056152344,0,0.689300537109375,0,0,0,0,0,0,0,0.656517028808594,0,0,0,0,0,0,0,0,0,0,0.871513366699219,0,0,0,0,0.832160949707031,0,0,0,0,0,0,0.624176025390625,0,0,0,0,0,0,0,0,0,0,0,0.598678588867188,0,0,0,0,0.592201232910156,0,0,0,0,0,0,0.810562133789062,0,0,0,0,0,0,0,0.716423034667969,0,0,0,0,0,0.757102966308594,0,0,0,0,0,0,0,0,-10.0429382324219,0,0,0,0,0,0,0,0,0,0.649391174316406,0,0,0,0,0,0.625823974609375,0,0,0,0,0,0,0,0,0,1.00267028808594,0,0,0,0,0,0,0,0,0.69354248046875,0,0,0,0,0.607795715332031,0,0,0,0,0,0,0,0.668464660644531,0,0,0,0,0,0,0.656761169433594,0,0,0,0,0,0,0,0,0,0,0,0.704055786132812,0,0,0,0,0,0.683097839355469,0,0,0,0,0,0,0,0,0,0,0.6148681640625,0,0,0,0,0,0,0,0.590095520019531,0,0,0,0,0,0.721305847167969,0,0,0,0,0,0,0,0,0,1.09104156494141,0,0,0,0,0,0,0.583908081054688,0,0,0,0,0,0,0,0,0,-10.130973815918,0,0,0,0,0.632041931152344,0,0,0,0,0,0,0.64202880859375,0,0,0,0,0,0,0,0,0,0.651435852050781,0,0,0,0,0,0.794776916503906,0,0,0,0,0,0,0,0.754417419433594,0,0,0,0,0,0,0,0,0,0,1.08304595947266,0,0,0,0,0,0,0,0.839500427246094,0,0,0,0,0,0,0,0.599334716796875,0,0,0.597557067871094,0,0,0,0,0,1.21500396728516,0,0,0,0,0,0,0.741973876953125,0,0,0,0,0,0,0,0,0,0,0.832794189453125,0,0,0,0,0,0,0,0,0.641464233398438,0,0,0,0,0,0,0,-10.3952407836914,0,0,0,0.394439697265625,0,0,0,0,0,0.67626953125,0,0,0,0,0,0,0,0,0.686325073242188,0,0,0,0,0,0,0,0,0,0.608940124511719,0,0,0,0,0.760543823242188,0,0,0,0,0,0.607559204101562,0,0,0,0,0,0,0,0.6033935546875,0,0,0,0,0,0,0,0,0,0.978416442871094,0,0.607887268066406,0,0,0,0,0,0,0,0,0,0.728713989257812,0,0.541961669921875,0,0,0,0,0,0,0,0,0.66009521484375,0,0,0,0,0,0.592750549316406,0,0,0,0,0.700042724609375,0,0,0,0,0,0.499755859375,0,0,0,0,0.557212829589844,0,0,0,0,0,0,0,0.430778503417969,0,0,-9.99964141845703,0,0,0,0,0,0,0.680877685546875,0,0,0.576179504394531,0,0,0,0,0,1.01942443847656,0,0,0,0,0,0,0,0.772621154785156,0,0,0,0,0,0,0.582481384277344,0,0,0,0,0,0,0.652107238769531,0,0,0,0,0,0,0,0,1.08539581298828,0,0,0,0,0,0,0,0,0,0.715599060058594,0,0,0,0,0,0,0.566726684570312,0,0.570281982421875,0,0,0,0,0,0,0,0.637100219726562,0,0,0,0,0.58349609375,0,0,0,0,0,0,0,0,0.573966979980469,0,0.636192321777344,0,0,-10.18603515625,0,0,0,0,0,0,0,0.625732421875,0,0,0,0,0.595458984375,0,0,0,0,0.778602600097656,0,0,0,0,0.582511901855469,0,0,0,0,0,0,0,0,1.00074005126953,0,0,0,0.587509155273438,0,0,0,0,0,0,0.6539306640625,0,0.689712524414062,0,0,0,0,0,0,0,0,0,0.577743530273438,0,0,0,0,0,0,0,0,0,0,0,0.598838806152344,0,0.56866455078125,0,0,0,0,0,0,0,0.567970275878906,0,0,0.703254699707031,0,0,0,0,0,0,0.757522583007812,0,0,0,0,0,0,0,0.5726318359375,0,0,0,0,0,-0.459556579589844,0,0,0,0,0,-8.84033966064453,0,0,0,0,0,0,0,0,0.580833435058594,0,0,0,0,0.663047790527344,0,0,0,0,0,0.591201782226562,0,0,0,0,0,0,0.630416870117188,0,0,0,0,0,0,0,0,0,0.654251098632812,0,0,0,0,0,0,0.661773681640625,0,0,0,0,0,0,0,0,0.585441589355469,0,0,0,0,0,0,0.653892517089844,0,0,0,0,0,0.742240905761719,0,0,0,0,0,0,0,0.601531982421875,0,0,0,0,0,0,0,0.6219482421875,0,0,0,0,0,0,0,0.644294738769531,0,0.584075927734375,0,0,0,0,0,0,0,0.786468505859375,0,0,0,0,0,0,0,0.555038452148438,0,0,0,0,0,0,0,0,0,-10.1953506469727,0,0,0,0,0,0,0,0,0,0.60650634765625,0,0,0,0,0,0,0,0.776199340820312,0,0,0,0,0.817543029785156,0,0,0,0,0,0,0,0.71221923828125,0,0,0,0.692375183105469,0,0,0,0,0.620979309082031,0,0,0,0,0,0,0.917610168457031,0,0,0.776756286621094,0,0,0,0,0,0,0.716751098632812,0,0,0,0,0,0,0,0,0,0,0,0.570632934570312,0,0,0,0,0,0,0,0.725639343261719,0,0,0,0,0,0,0,0,0,0.599205017089844,0,0,0,0,0,0,0.609260559082031,0,0,0,0,0,0,0,0,0,0.661354064941406,0,0,0,0,0,0.638236999511719,0,0,0,0,0,0,0,-10.2276458740234,0,0,0,0,0.720550537109375,0,0,0,0,0,0,0.699317932128906,0,0,0,0,0,0,0,1.00070953369141,0,0,0,0,0,0,0,0,0,0.572067260742188,0,0,0,0,0,0,0,0.829841613769531,0,0,0,0,0,0,0.859046936035156,0,0,0,0,0.617713928222656,0,0,0,0,0,0,0,0,0,0.583297729492188,0,0,0,0,0,0,0.570266723632812,0,0,0,0,0,0,0,0,0.700019836425781,0,0,0,0,0,0,0,0.653251647949219,0,0,0,0,0,0,0,0.572586059570312,0,0,0,0,0.598281860351562,0,0,0,0,0,0,0,0.613571166992188,0,0,0,0,0,0,0.629936218261719,0,0,0,0,0,0,-9.87644958496094,0,0,0,0,0,0,0,0,0,0,0.986579895019531,0,0,0.851676940917969,0,0,0,0,0,0,0,0,0.817245483398438,0,0,0,0,0,0,0.582992553710938,0,0,0,0,0,0,0,0,0,0,0.596382141113281,0,0,0,0,0,0,0,0,0,0,0,0.611213684082031,0,0,0,0,0,0.790840148925781,0,0,0,0,0,0,0,0,0.578033447265625,0,0,0,0,0,0,0,0,0,0,0.790000915527344,0,0,0,0,0,0,0,0,0,0,0.6424560546875,0,0.575592041015625,0,0,0,0,0.582237243652344,0,0,0,0,0,0,0.577186584472656,0,0,0,0,0,0,0.601287841796875,0,0,0,0,0,0,-10.1182174682617,0,0,0,0,0,0.854415893554688,0,0,0.761642456054688,0,0,0,0,0,0,0,0,0,0.684364318847656,0,0,0,0,0,0,0.934677124023438,0,0,0,0,0,0,0,0,0.908836364746094,0,0,0,0,0,0,0.648994445800781,0,0,0,0,0.576683044433594,0,0,0,0,0,0,0,0.590805053710938,0,0,0,0,0.777740478515625,0,0,0,0,0,0.844429016113281,0,0,0,0,0,0,0,0.756111145019531,0,0,0.743644714355469,0,1.00926208496094,0,0,0,0,0,-10.0885848999023,0,0,0,0,0,0,0.9810791015625,0,0.772926330566406,0,0,0,0,0,1.01123809814453,0,0,0.973655700683594,0,0.947303771972656,0,0.698135375976562,0,0,0,0,0,0,0,0.684608459472656,0,0,0,0,0.889717102050781,0,0,0,0.735786437988281,0,0,0,0,0,0.8399658203125,0,0,0,0,0,0,0,0.966865539550781,0,0,0,0,0,0,0,0,0,0,1.00978851318359,0,0,0,0,0,0,-10.0680160522461,0,0,0,0,0,0,0,0,0,0.607292175292969,0,0,0,0.656280517578125,0,0.677452087402344,0,0,0,0,0,0,0.714881896972656,0,0,0,0,0,0.586753845214844,0,0,0,0,1.11998748779297,0,0.568862915039062,0,0,0,0,0,0.578132629394531,0,0,0,0,0,0.719070434570312,0,0,0,0,0,0,0.683509826660156,0,0,0,0,0,0,0,0.585456848144531,0,0,0,0,0,0,0,0.96722412109375,0,0,0,0,0,0,0,0,0.588188171386719,0,0,0,1.10887145996094,0,0,0,0,0,0,0,0,0,0,0,0,0,-10.0172958374023,0,0,0,0,0,0,0,0,0,0,1.00334930419922,0,0,0,0,0,0,0,0,0.996337890625,0,0,0,0,0,0,0,0.582923889160156,0,0,0,0,0.771812438964844,0,0,0,0,0,0,0,0,0,0,0,0.577812194824219,0,0,0,0.642913818359375,0,0.575416564941406,0,0,0,0,0,0,0,0.781402587890625,0,0.658782958984375,0,0,0,0,0,0,0,0.642166137695312,0,0,0,0,0,0,0.623519897460938,0,0,0,0,0.899948120117188,0,0,0,0,0,0,0,0,0.632843017578125,0,0,0,0.575965881347656,0,0,-10.195671081543,0,0.570869445800781,0,0,0,0,0,0,0,0,0,0.860740661621094,0,0,0,0,0,0.623466491699219,0,0,0,0,0,0.586906433105469,0,0.679939270019531,0,0,0,0,0,0.585624694824219,0,0,0,0,0,0,0,0,0,0,0.961219787597656,0,0.947120666503906,0,0,0,0.724281311035156,0,0,0,0,0,0,0.764083862304688,0,0,0.794914245605469,0,0,0,0,0,0,0.649734497070312,0,0,0,0,0,0.632293701171875,0,0,0,0,0,0,0.595413208007812,0,0,0,0,0,0,-10.0613021850586,0,0,0,0,0,0.641632080078125,0,0,0,0,0.758781433105469,0,0.629730224609375,0,0,0,0,0,0,0,0,0,0.745964050292969,0,0,0,0,0,0,0.593551635742188,0,0,0.587554931640625,0,0,0,0,0,0,0.651435852050781,0,0,0,0,0,0,0,0.964424133300781,0,0,0,0,0,0,0,0,0,0.708526611328125,0,0,0,0,0,0.678825378417969,0,0,0,0,0.916755676269531,0,0,0,0,0,0,0,0.935859680175781,0,0,0,0,0,0,0,0,1.00994873046875,0,0,0,0,0,0,0.512229919433594,0,0,0,0,0,0,0,0,-9.96575927734375,0,0,0,0,0,0,0.7264404296875,0,0.674095153808594,0,0,0,0,0,0,0,0,0,0.608055114746094,0,0,0,0,0,0,0,0.69818115234375,0,0,0,0,0.683273315429688,0,0,0,0,0,0.644279479980469,0,0.597930908203125,0,0,0,0,0.632804870605469,0,0,0,0,0,0,0,0.686965942382812,0,0,0,0,0,0,0,0,0,1.00123596191406,0,0,0,0,0,0,0,0.574851989746094,0,0,0,0,0.659072875976562,0,0,0,0,0.622329711914062,0,0,0,0,0,0,0,0.654953002929688,0,0,0,0,0,0,0,0.510353088378906,0,0,0,0,0,0,0,-9.90858459472656,0,0,0,0,0,0,0,0,0,0.805854797363281,0,0,0,0,0,0.594161987304688,0,0,0,0,0,0,0,0,0,1.12722778320312,0,0,0,0,0,0,0,1.04392242431641,0,0,1.02057647705078,0,0,0,0,0,0,0,0,0,0,0,0,0.573837280273438,0,0,0,0,0,0.601051330566406,0,0,0,0,0,0,0,0.581642150878906,0,0,0,0,0,0,0,0,0,0,1.09271240234375,0,0,0,0,0,0,0.987419128417969,0,0,0,0.576316833496094,0,0,0,0,0,0,0,0.579200744628906,0,0,0,0,0,0,0,0,0,-9.56830596923828,0,0.606315612792969,0,0,0,0.572891235351562,0,0,0,0,0,0,0,0,0,0,0,0,0,0.609458923339844,0,0,0,0,0.589424133300781,0,0,0,0,0,0,0.5946044921875,0,0,0,0,0,0,0,0.689163208007812,0,0,0,0,0,0.700172424316406,0,0,0,0,0,0.889656066894531,0,0,0,0,0,0,0,0,0,0,0.605857849121094,0,0,0,0,0,0.569831848144531,0,0,0,0,0,0,0,1.18370819091797,0,0,0,0,0,0.743942260742188,0,0,0,0,0,0,0,0.846961975097656,0,0,0,0,0,0,0,0.696403503417969,0,0,0,0,0,0,0,0,0,0,0,0,-9.95272064208984,0,0,0,0,0,0,0,0,0,0.728660583496094,0,0,0,0,0,0.855094909667969,0,0,0,0,0,0,0.590354919433594,0,0,0,0,0,0,0.668746948242188,0,0,0,0,0,0,0,0.598724365234375,0,0,0,0.58807373046875,0,0,0,0,0.654220581054688,0,0,0,0,0,0,0,0,0,0,0.571365356445312,0,0,0,0,0,0,0.654304504394531,0,0,0,0,0,0,0,0,0,0.601486206054688,0,0,0,0,0,0,0,1.15078735351562,0,0,0,0,0,0.73956298828125,0,0,0,0,0,0,0,0,0,0,0.658470153808594,0,0,0,0,0,0,0,0.572929382324219,0,-10.1521835327148,0,0,0,0,0,0.685928344726562,0,0.59716796875,0,0.583763122558594,0,0.715415954589844,0,0,0,0,0,0,0.773567199707031,0,0,0,0,0,0,0.630874633789062,0,0,0,0,0.619873046875,0,0,0.750968933105469,0,0,0,0,0,0,0.581352233886719,0,0,0,0,0,0,0.774063110351562,0,0,0,0,0,0,0,0,0,0.595359802246094,0,0,0,0,0,0,0,0,0.589134216308594,0,0,0,0,0.963706970214844,0,0,0,0,0.580284118652344,0,0,0,0,0,0,0.766983032226562,0,0,-10.0153579711914,0,0,0,0,0,0,0,0,0,0,0.659278869628906,0,0,0,0.599090576171875,0,0,0,0,0,0,0,0,0,0,0,0.59088134765625,0,0,0,0,0,0.956512451171875,0,0,0,0,0,0,1.00627899169922,0,0,0,0,0,0,0.961982727050781,0,0,0,0,0,0,0,1.01387023925781,0,0.586921691894531,0,0,0,0,0,0,0.691398620605469,0,0.593338012695312,0,0,0,0,0,0,0.600440979003906,0,0.758720397949219,0,0,0,0,0,0,0,0.573257446289062,0,0,0,0,0,0,-9.76863098144531,0,0,0,0,0,0,0,0.958992004394531,0,0,0,0,0,0,0,0.853012084960938,0,0,0,0,0,0.621925354003906,0,0,0,0,0,0,0,0.628868103027344,0,0,0,0,0,0,0,0,0.595756530761719,0,0.657562255859375,0,0,0,0,0,0.628395080566406,0,0,0,0,0,0,0,0,0.594932556152344,0,0,0,0,0,0.573883056640625,0,0,0,0,0,0,0,0,0,0.775108337402344,0,0,0,0,0,0.584281921386719,0,0,0,0,0,0,0.564994812011719,0,0,0,0,0,0,0,0.702842712402344,0,0,0,0,0,0,0,0.563308715820312,0,0,0,0,0,0,0,0.665756225585938,0,0,0,0,-0.265296936035156,0,0,0,0,0,0,0,0,-9.16072082519531,0,0.842636108398438,0,0,0,0.689170837402344,0,0.75506591796875,0,0,0,0.575508117675781,0,0,0,0,0,0,0,0,0,0.801094055175781,0,0,0,0,0,0,0,0.606925964355469,0,0,0,0,0,0,0.6630859375,0,0,0,0,0,0.567985534667969,0,0,0,0,0,0,0,0.595489501953125,0,0,0,0,0.538673400878906,0,0,0,0,0,0,0,0,0,0,0,0.559181213378906,0,0,0,0,0,0,0,0,0,0.583488464355469,0,0,0,0,0,0.571952819824219,0,0,0,0,0,0,0,0,0.568962097167969,0,0,0,0,0,0,0,0,0.609375,0,-10.0440521240234,0,0,0,0,0,0,0,0,0,0,0,0.652595520019531,0,0,0,0,0,0,0,0.570068359375,0,0,0,0,0,0.653671264648438,0,0,0,0.574485778808594,0,0,0,0,0,0,0,0,0,0.699249267578125,0,0,0,0,0,0,0,0,0.580032348632812,0,0,0,0,0,0,0,0,0.597396850585938,0,0.851577758789062,0,0.594230651855469,0,0,0,0,0,0.745826721191406,0,0,0,0,0,0,0,0,0,0,0,0,0.568870544433594,0,0,0,0,0,0,0,0,0,0,0,0,0.609947204589844,0,0,0,0,0,0,0,0.833694458007812,0,0,0,0,0,0,0,0.764892578125,0,0,0,0,0,0,0.592247009277344,0,0,0,0,0,0,0,0,0,0,0,0,0.485160827636719,0,0,0,0,0,0,0,0,-9.99028015136719,0,0,0,0,0,0,0.594444274902344,0,0,0,0,0.659652709960938,0,0,0,0,0,0,0,0,0,0.978462219238281,0,0,0,0,0,0,0.898544311523438,0,0,0,0.612739562988281,0,0,0,0,0.583580017089844,0,0,0,0,0,0,0,0,0,0,0.968269348144531,0,0,0,0,0,0,0,0,0.668685913085938,0,0,0,0,0,0,0.629409790039062,0,0,0,0,0,0,0,0,0,0.799224853515625,0,0,0,0,0,0,0,0,0,0.640151977539062,0,0,0.742713928222656,0,0,0,0,0.689247131347656,0,0,0,0,0,0,0.536430358886719,0,0,0,-10.1139678955078,0,0,0,0,0,0,0.6024169921875,0,0,0,0,0,0,0,0.602569580078125,0,0,0,0,0,0,0,0,0,0,0,0.676788330078125,0,0,0,0,0,0,0.62103271484375,0,0,0,0,0,0.667633056640625,0,0,0,0.585960388183594,0,0.657142639160156,0,0.57196044921875,0,0,0,0,0,0.5916748046875,0,0,0,0,0.7158203125,0,0.880470275878906,0,0,0,0,0,0,0.724624633789062,0,0,0,0,0,0,0,0.671768188476562,0,0,0,0,0,0,0,0.570159912109375,0,0,0,0,0,0,0,0.644790649414062,0,0,0,0,0,0,0,0,0,-10.062629699707,0,0,0,0,0,0,0,0,0,0,0.660163879394531,0,0,0,0,0,0,0.755516052246094,0,0,0,0,0,0,0,0,0.63140869140625,0,0,0,0,0,0,0.887680053710938,0,0.680397033691406,0,0,0,0,0.7515869140625,0,0,0,0,0,0,0.754837036132812,0,0,0,0,0,0.7427978515625,0,0,0,0,0,0,0,0,0.659919738769531,0,0,0,0,0,0.898162841796875,0,0,0,0.966018676757812,0,0,0,0,0,0,0.583053588867188,0,0,0,0,0,0,0.59552001953125,0,0,0.76806640625,0,0,0,0,0,0,0,0,-9.96666717529297,0,0,0,0,0,0.592399597167969,0,0,0,0,0,0,0,0,0,0.878288269042969,0,0,0,0,0,0.857223510742188,0,0,0,0,0,0,0,0,0,0.790657043457031,0,0,0,0,0,0,0,0.582496643066406,0,0,0,0,0,0,0,0.552444458007812,0,0,0,0.562278747558594,0,0,0,0,0.5906982421875,0,0,0,0,0,0,0,0.880638122558594,0,0,0,0,0.598785400390625,0,0,0,0,0,0,0,0.712860107421875,0,0,0,0,0,0,0,0.725334167480469,0,0,0,0,0,0,0,0.743247985839844,0,0,0,0,0.584037780761719,0,0,0,0,0,0,0,0,0,-10.181770324707,0,0,0,0,0,0,0,0,0,0.569221496582031,0,0.670761108398438,0,0,0,0,0,0.597221374511719,0,0,0,0,0,0,0,0,0,0,0,0,0,0.716285705566406,0,0,0,0,0,0,0.99224853515625,0,0,0,0,0,0,0,0,0.694290161132812,0,0,0,0,0.701332092285156,0,0,0,0.573554992675781,0,0,0,0,0,0,0,0,0,0,0.975990295410156,0,0,0,0,0,0,1.1678466796875,0,0,0,0,0,0,0.582504272460938,0,0,0,0,0,0,0.614585876464844,0,0,0,0,0,0,0,0,0.609245300292969,0,0,0,0,0,0,0,1.01799774169922,0,0,0,0,-10.0420913696289,0,0,0,0,0,0,0,1.12612915039062,0,0,0,0,0.592971801757812,0,0,0,0,0,0,0.602043151855469,0,0.697105407714844,0,0,0,0,0,0,0.716339111328125,0,0,0,0,0,0,0.740440368652344,0,0,0,0,0,0,0,0,0,0,0,0.786155700683594,0,0,0,0,0,0,0,0,0,0,0,0.789093017578125,0,0,0,0,0,0,0,0,0.947494506835938,0,0.618331909179688,0,0,0,0,0,0,0.586898803710938,0,0,0,0,0,0,0,1.03115081787109,0,0,0,0,0,0,0,0.614143371582031,0,0,0,0,0,0,0,0,0,-10.1097717285156,0,0,0.746505737304688,0,1.19676971435547,0,0,0,0,0,0,0.608818054199219,0,0,0,0,0,0,0,0,0,0,0,0,0.793190002441406,0,0.78460693359375,0,0,0,0,0,0,0,0.571571350097656,0,0,0,0,0,0,0,0.775199890136719,0,0,0,0,0,0,0.800186157226562,0,0,0,0,0,0,0,0.685142517089844,0,0,0,0,0,0,0,0,0,0.640640258789062,0,0,0,0,0,0,0,0.569114685058594,0,0,0,0,0,0.756141662597656,0,0,0,0,0,0,0.592041015625,0,0,0,0,0,0,0.801094055175781,0,0,0,0,-10.006950378418,0,0,0,0,0,0,0,0.612632751464844,0,0,0,0,0,0,0.76220703125,0,0,0,0,0,0,0,0.596183776855469,0,0,0,0,0,0,0,0.843826293945312,0,0,0,0,0,0,0,0.599533081054688,0,0,0,0,0,0,0.87890625,0,0,0,0,0,0,0.611343383789062,0,0,0,0,0,0,0,0,0,0.977508544921875,0,0,0,0,0,0,0,0.836395263671875,0,0,0,0,0,1.13131713867188,0,0,0,0,0,0,0.597183227539062,0,0,0,0,0,0,0.788360595703125,0,0,0,0,0,0,0,0.831459045410156,0,0,0,0,0,0,0,-9.81884765625,0,0,0,0,0,0.810089111328125,0,0,0,0.876197814941406,0,0,0,0.704399108886719,0,0,0,0,0,0,0.668380737304688,0,0,0,0,0,0,0.595718383789062,0,0,0,0.585838317871094,0,0,0,0,0,0,0,0.595428466796875,0,0.881912231445312,0,0,0,0,0,0,0,0,0.614105224609375,0,0,0,0,0,0,0,0.581771850585938,0,0,0,0,0.743278503417969,0,0,0,0,0,0,0,0.69927978515625,0,0,0,0,0,0,0.676063537597656,0,0.792625427246094,0,0,0,0,0,-9.98944854736328,0,0,0,0,0,0,0,0.787666320800781,0,0,0,0,0,0,0.606948852539062,0,0,0,0,0,0,0,0.704994201660156,0,0,0,0,0,0,0,0.637771606445312,0,0,0,0.612205505371094,0,0.677536010742188,0,0,0,0,0,0.767997741699219,0,0,0,0,0,0,0.658592224121094,0,0,0,0,0,0,0.56610107421875,0,0,0,0,0,0,0,0.611923217773438,0,0,0,0,0,0.573883056640625,0,0.612556457519531,0,0,0,0,0,0,0,0,0,0.978096008300781,0,0,0,0,0,0,0.599372863769531,0,0,0,0,0,0.580902099609375,0,0,0,0,0,0,0,-10.0063781738281,0,0,0,0,0,0,0.584846496582031,0,0,0,0,0,0.745094299316406,0,0,0,0,0,0,0,0.627784729003906,0,0,0,0,0,0.937812805175781,0,0,0,0,0.640548706054688,0,0,0,0,0.674705505371094,0,0,0,0.584182739257812,0,0,0,0,0,0.587776184082031,0,0,0,0,0,0,0.586814880371094,0,0,0,0,0,0,0,0,0.8314208984375,0,0,0,0,0,0,0,0,0,0,0,0.56939697265625,0,0,0,0,0.591438293457031,0,0,0,0,0,0.747657775878906,0,0,0,0,0,0,0.616630554199219,0,0,0,0,0,0,0.568161010742188,0,0,0,0,0,0,0,-9.77259063720703,0,0,0,0,0,0,0,0.595481872558594,0,0,0,0.8941650390625,0,0,0,0,0,0,0,0.594627380371094,0,0,0.662483215332031,0,0,0,0,0,0,0,0,0.696830749511719,0,0,0,0,0,0,0,0.614982604980469,0,0.738037109375,0,0,0,0,0.706916809082031,0,0,0,0,0,0,0,0,0,0,0.9332275390625,0,0,0,0,0,0,0,0.540313720703125,0,0,0,0,0,0.539787292480469,0,0,0,0,0,0,0,0.563117980957031,0,0,0,0,0,0.834098815917969,0,0,0,0,0,0,0,0.498550415039062,0,0,0,0,0.48028564453125,0,0,0,0,0,0,0,-10.1608505249023,0,0.530593872070312,0,0,0,0,0,0.547004699707031,0,0,0,0.568771362304688,0,0,0,0,0.829124450683594,0,0,0.819847106933594,0,0,0,0,0,0,0.584907531738281,0,0,0,0,0,0,0,0,0,0.588447570800781,0,0,0,0,0,0,0,0,0.976333618164062,0,0,0,0,0.599189758300781,0,0.592597961425781,0,0,0,0,0,0,0,0,0,0.583755493164062,0,0,0,0,0,0,0.610870361328125,0,0,0,0,0,0,0,0,0,0.570297241210938,0,0,0,0,0,0,0.60186767578125,0,0,0,0,0,0,0,0.606544494628906,0,0,0,0,0,-9.64162445068359,0,0,0,0,0,1.08758544921875,0,0,0.92279052734375,0,0,0,0,0,0,0,0,0,0,0,0,0.550628662109375,0,0,0,0,0.591163635253906,0,0,0,0],&#34;filename&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},&#34;interval&#34;:10,&#34;files&#34;:[],&#34;prof_output&#34;:&#34;/var/folders/f3/t51slq3x2dlfgk3ksp7vddzm0000gq/T//RtmpA9fvPr/file179b4b903890.prof&#34;,&#34;highlight&#34;:{&#34;output&#34;:[&#34;^output\\$&#34;],&#34;gc&#34;:[&#34;^&lt;GC&gt;$&#34;],&#34;stacktrace&#34;:[&#34;^\\.\\.stacktraceo(n|ff)\\.\\.$&#34;]},&#34;split&#34;:&#34;h&#34;}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;div id=&#34;htmlwidget-2&#34; style=&#34;width:100%;height:600px;&#34; class=&#34;profvis html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;message&#34;:{&#34;prof&#34;:{&#34;time&#34;:[1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15],&#34;depth&#34;:[2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1],&#34;label&#34;:[&#34;lazyLoadDBfetch&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sum&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;rlang::is_formula&#34;,&#34;sum&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sum&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;rlang::is_formula&#34;,&#34;sum&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;],&#34;filenum&#34;:[null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null],&#34;linenum&#34;:[null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,3,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null],&#34;memalloc&#34;:[28.4260025024414,28.4260025024414,32.4516067504883,32.4516067504883,32.4516067504883,32.4516067504883,32.4516067504883,32.4516067504883,32.4516067504883,32.4516067504883,37.7830429077148,37.7830429077148,37.7830429077148,37.7830429077148,37.7830429077148,37.7830429077148,37.7830429077148,37.7830429077148,43.1527633666992,43.1527633666992,43.1527633666992,43.1527633666992,43.1527633666992,43.1527633666992,43.1527633666992,48.4099578857422,48.4099578857422,48.4099578857422,48.4099578857422,48.4099578857422,48.4099578857422,48.4099578857422,48.4099578857422,53.8700561523438,53.8700561523438,53.8700561523438,53.8700561523438,53.8700561523438,53.8700561523438,59.2525939941406,59.2525939941406,59.2525939941406,59.2525939941406,59.2525939941406,59.2525939941406,59.2525939941406,59.2525939941406,63.6271057128906,63.6271057128906,63.6271057128906,63.6271057128906,63.6271057128906,63.6271057128906,63.6271057128906,63.6271057128906,29.802116394043,29.802116394043,29.802116394043,29.802116394043,29.802116394043,29.802116394043,29.802116394043,35.2801742553711,35.2801742553711,35.2801742553711,35.2801742553711,35.2801742553711,35.2801742553711,35.2801742553711,43.3475952148438,43.3475952148438,43.3475952148438,43.3475952148438,43.3475952148438,43.3475952148438,43.3475952148438,43.3475952148438,48.7585067749023,48.7585067749023,48.7585067749023,48.7585067749023,48.7585067749023,48.7585067749023,48.7585067749023,48.7585067749023,55.3192825317383,55.3192825317383,55.3192825317383,55.3192825317383,55.3192825317383,55.3192825317383,55.3192825317383,55.3192825317383,61.4487457275391,61.4487457275391,61.4487457275391,61.4487457275391,61.4487457275391,61.4487457275391,61.4487457275391,61.4487457275391,29.1952514648438,29.1952514648438,29.1952514648438,29.1952514648438,29.1952514648438,29.1952514648438,29.1952514648438,29.1952514648438],&#34;meminc&#34;:[0,0,4.02560424804688,0,0,0,0,0,0,0,5.33143615722656,0,0,0,0,0,0,0,5.36972045898438,0,0,0,0,0,0,5.25719451904297,0,0,0,0,0,0,0,5.46009826660156,0,0,0,0,0,5.38253784179688,0,0,0,0,0,0,0,4.37451171875,0,0,0,0,0,0,0,-33.8249893188477,0,0,0,0,0,0,5.47805786132812,0,0,0,0,0,0,8.06742095947266,0,0,0,0,0,0,0,5.41091156005859,0,0,0,0,0,0,0,6.56077575683594,0,0,0,0,0,0,0,6.12946319580078,0,0,0,0,0,0,0,-32.2534942626953,0,0,0,0,0,0,0],&#34;filename&#34;:[null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null]},&#34;interval&#34;:10,&#34;files&#34;:[{&#34;filename&#34;:&#34;&lt;expr&gt;&#34;,&#34;content&#34;:&#34;set.seed(2009)\nprofvis({\n    NullDistFSNDR_aw &lt;- fastSimNullDistRProp(sex ~ time, success=\&#34;Female\&#34;, data=tips)\n})&#34;,&#34;normpath&#34;:&#34;&lt;expr&gt;&#34;}],&#34;prof_output&#34;:&#34;/var/folders/f3/t51slq3x2dlfgk3ksp7vddzm0000gq/T//RtmpA9fvPr/file179b21e65e8c.prof&#34;,&#34;highlight&#34;:{&#34;output&#34;:[&#34;^output\\$&#34;],&#34;gc&#34;:[&#34;^&lt;GC&gt;$&#34;],&#34;stacktrace&#34;:[&#34;^\\.\\.stacktraceo(n|ff)\\.\\.$&#34;]},&#34;split&#34;:&#34;h&#34;}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;div id=&#34;htmlwidget-3&#34; style=&#34;width:100%;height:600px;&#34; class=&#34;profvis html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-3&#34;&gt;{&#34;x&#34;:{&#34;message&#34;:{&#34;prof&#34;:{&#34;time&#34;:[1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,10,10,10,10,10,10,10,10,11,11,11,11,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,19,19,20,20,20,20,20,20,20,20,20,21,21,21,21,21,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,25,25,25,26,26,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,29,29,29,30,30,30,30,30,30,30,30,30,30,31,31,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,34,34,34,34,34,35,35,35,35,35,36,36,36,36,36,36,37,37,37,37,37,38,38,38,38,38,38,38,38,38,39,39,39,39,39,40,40,40,40,40,40,40,40,41,41,42,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,46,46,46,46,46,47,47,47,47,47,47,48,48,48,48,48,48,48,49,49,49,49,49,49,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,52,52,52,52,52,53,53,53,53,53,54,54,54,55,55,55,55,56,56,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,59,60,60,60,60,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,63,63,64,64,64,64,64,64,65,65,65,65,65,65,65,65,66,66,66,66,66,66,66,66,66,66,66,66,67,67,67,67,67,67,67,67,67,67,67,67,68,68,68,68,68,68,68,68,68,68,69,69,69,69,69,69,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,73,73,74,74,74,74,74,74,74,75,75,75,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,78,78,79,79,80,80,80,80,80,80,80,80,80,80,81,81,81,81,81,82,82,83,83,83,83,83,83,83,83,84,84,84,84,84,84,84,85,85,85,85,85,85,85,85,86,86,86,86,86,86,86,86,87,87,87,88,88,88,88,88,88,88,88,88,88,89,89,89,89,89,89,89,89,89,89,89,89,89,90,90,90,91,91,91,91,91,91,91,91,91,91,91,92,92,92,92,92,92,92,93,93,94,94,94,94,94,94,95,95,95,95,95,95,95,95,96,96,97,97,97,97,97,97,97,98,98,98,98,98,99,99,99,99,99,99,99,100,100,100,100,100,100,100,101,101,101,101,101,101,101,101,101,101,102,102,102,102,102,102,102,102,102,103,103,103,103,103,103,103,104,104,104,104,104,104,104,104,104,105,105,105,105,105,105,105,105,105,105,106,106,106,106,106,106,106,106,106,106,107,107,107,107,107,107,108,108,108,108,108,109,109,109,109,109,110,110,110,110,110,111,111,112,112,112,112,112,113,113,113,113,113,113,113,113,113,113,114,114,114,114,114,115,115,115,115,116,116,116,116,117,117,117,117,117,117,118,118,118,118,119,119,119,119,119,119,119,119,119,120,120,120,120,120,121,121,121,121,121,122,122,122,122,122,122,122,122,122,122,123,123,123,123,123,123,123,123,123,124,124,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,127,127,127,127,127,128,128,129,129,129,129,129,129,129,129,130,130,130,130,130,130,130,131,131,131,131,131,132,132,132,132,132,132,132,132,132,132,133,133,133,133,133,133,134,134,134,134,134,134,134,134,135,135,136,136,136,136,137,137,137,137,137,137,137,138,138,138,138,138,138,138,138,138,138,138,139,139,139,139,139,139,139,139,140,140,141,141,141,141,141,141,141,142,142,142,142,142,142,142,142,142,143,143,143,143,143,144,144,144,144,144,144,145,145,145,145,145,145,145,145,146,146,146,146,146,146,146,147,147,147,147,147,147,147,148,148,148,148,148,148,148,148,148,148,148,149,149,149,149,149,149,150,150,150,150,150,150,150,150,150,150,150,151,151,151,151,151,151,151,151,152,152,152,152,152,153,153,153,153,153,154,154,154,154,154,154,154,155,155,155,155,155,155,155,155,155,155,156,156,156,156,156,156,156,156,157,157,157,157,157,157,157,158,158,159,159,159,159,159,159,159,159,159,159,159,159,160,160,160,160,160,161,161,161,161,161,161,161,162,162,162,162,162,162,162,163,163,163,163,163,163,163,163,163,163,163,163,164,164,164,164,164,164,164,164,165,165,165,165,165,165,166,166,166,166,166,166,166,167,167,167,167,167,167,167,168,168,168,168,168,168,168,169,169,169,170,170,170,170,170,170,170,171,171,171,171,171,171,171,171,171,171,172,172,172,172,172,172,172,172,172,172,173,173,173,173,173,173,174,174,175,175,175,175,175,176,176,176,176,176,176,176,176,176,176,177,177,177,177,177,177,177,177,177,178,178,178,178,178,178,178,178,178,178,179,179,179,179,179,179,179,179,179,180,180,180,181,181,181,181,181,181,181,181,182,182,182,182,182,183,183,183,183,184,184,184,184,184,184,184,185,185,185,185,185,186,186,186,186,186,186,186,186,187,187,187,187,187,187,187,187,188,188,188,188,188,188,188,188,189,189,189,189,189,190,190,190,190,190,190,190,190,190,190,191,191,191,191,191,191,192,192,192,192,192,192,192,192,192,193,193,193,193,193,193,193,193,194,194,194,194,194,195,195,195,195,195,195,195,195,195,195,196,196,196,196,196,197,197,197,197,197,197,197,198,198,198,198,198,198,198,199,199,199,199,199,199,199,199,199,200,200,200,200,200,201,201,201,202,202,202,202,202,203,203,203,203,203,204,204,204,204,204,204,204,205,205,206,206,207,207,207,207,207,208,208,208,208,208,208,209,209,209,209,209,209,209,210,210,210,210,210,210,211,211,211,211,211,211,211,211,211,211,211,211,211,212,212,212,212,212,212,212,212,213,213,213,213,213,213,214,214,214,214,215,215,215,215,215,215,215,215,215,216,216,216,216,216,217,217,218,218,218,218,218,218,218,219,219,219,219,220,220,220,220,220,220,220,221,221,221,222,222,223,223,223,223,223,223,223,224,224,224,224,224,224,224,224,224,225,225,225,225,225,225,225,225,226,226,226,227,227,227,227,227,227,228,228,228,228,228,228,228,228,228,229,229,229,229,229,229,230,230,230,230,230,230,230,230,230,230,231,231,231,231,231,231,231,232,232,232,232,232,232,232,232,232,232,233,233,233,233,233,234,234,234,234,234,234,234,235,235,235,235,235,235,235,235,235,236,236,237,237,237,237,237,238,238,238,238,238,238,239,239,239,239,239,239,239,239,239,239,239,240,240,240,241,241,241,241,241,241,242,242,242,242,242,242,242,242,242,242,242,242,243,243,243,243,243,243,243,243,243,243,244,244,245,245,245,245,245,245,246,246,246,246,246,246,246,247,247,247,247,247,247,248,248,248,248,248,248,249,249,250,250,250,250,250,250,250,251,251,252,252,252,252,252,253,253,253,253,253,253,253,254,254,255,255,255,255,255,255,255,256,256,256,256,256,256,256,256,256,256,256,257,257,257,257,257,257,257,258,258,258,258,258,258,258,259,259,259,259,259,259,259,259,260,260,260,260,260,261,261,261,261,261,262,262,262,262,262,262,263,263,263,263,263,263,264,264,264,264,264,264,264,264,265,265,265,265,265,266,266,266,266,266,266,266,266,267,267,268,268,268,268,268,268,269,269,269,269,269,269,269,270,270,270,270,270,270,271,271,271,271,271,271,272,272,272,272,272,273,273,273,273,273,273,274,274,274,274,274,274,274,274,274,274,274,274,274,275,275,275,275,275,276,276,276,276,276,276,276,276,276,277,277,277,278,278,278,278,278,278,279,279,279,279,279,279,279,279,280,280,280,281,281,281,281,281,281,281,281,281,281,282,282,282,282,282,282,282,282,282,282,283,283,284,284,284,285,285,285,285,285,285,285,285,285,286,286,286,286,286,286,286,287,287,287,287,287,288,288,288,288,288,288,288,289,289,289,289,289,289,289,289,289,290,290,290,290,290,290,290,291,291,291,291,291,291,291,291,291,292,292,292,292,292,292,292,293,293,293,293,293,293,293,293,294,294,294,294,294,294,294,294,295,295,295,295,295,295,295,295,295,295,295,295,295,295,296,296,296,296,297,297,298,298,298,298,298,298,298,299,299,299,299,300,300,300,300,300,300,301,301,301,301,301,301,301,301,302,302,302,302,302,302,302,302,303,303,304,304,304,304,304,304,304,304,304,304,305,305,305,305,305,305,305,306,306,307,307,307,307,307,307,307,307,307,308,308,309,309,309,309,309,310,310,310,310,310,310,310,310,311,311,311,311,311,311,312,312,312,312,312,312,313,313,313,313,313,313,313,314,314,314,314,314,315,315,315,315,315,316,316,316,316,317,317,317,317,317,317,317,318,318,318,318,318,318,318,318,319,319,319,319,319,319,319,319,320,320,320,320,320,320,320,320,320,320,320,320,320,320,321,321,321,321,321,321,321,322,322,322,322,322,323,323,324,324,324,324,324,325,325,325,325,325,325,325,325,325,325,325,325,326,326,326,326,326,326,326,327,327,327,327,327,327,327,327,327,327,328,328,329,329,329,329,329,329,330,330,330,330,330,331,331,331,331,331,331,331,331,331,331,331,332,332,332,332,332,332,332,332,333,333,333,333,333,334,334,334,334,334,334,334,335,335,335,335,335,335,336,336,336,336,336,336,337,337,337,337,337,337,337,338,338,338,338,338,338,339,339,339,339,339,340,340,340,340,340,341,341,342,342,342,342,342,342,342,342,342,343,343,343,343,343,343,343,343,343,344,344,344,344,345,345,345,345,345,345,345,345,346,346,346,346,346,346,346,346,347,347,347,347,347,347,347,347,348,348,348,348,348,348,348,348,349,349,349,349,349,349,349,349,350,350,350,350,350,350,350,350,351,351,351,351,351,351,351,351,352,352,352,352,352,352,352,352,353,353,354,354,354,354,354,354,354,354,354,355,355,355,355,355,355,355,355,356,356,356,356,356,356,357,357,357,357,357,357,357,357,357,357,358,358,358,358,359,359,359,359,359,359,359,360,360,361,361,361,362,362,362,362,362,362,362,362,362,363,363,363,363,363,363,363,363,363,364,364,364,364,364,364,364,365,365,365,365,365,365,365,366,366,366,366,366,366,367,367,367,367,367,367,367,368,368,369,369,369,369,369,369,369,369,369,369,369,370,370,370,370,370,370,370,370,371,371,371,371,371,372,372,372,372,372,373,373,373,373,373,373,373,373,373,374,374,374,374,374,374,374,375,375,375,375,375,375,375,376,376,376,376,376,376,376,376,376,376,377,377,377,377,377,377,377,377,377,378,378,378,378,378,378,378,378,379,379,379,379,379,379,379,380,380,380,380,380,380,380,380,381,381,381,381,381,381,381,381,381,382,382,382,382,382,383,383,383,383,383,383,383,384,384,384,384,384,384,384,384,385,385,385,385,385,386,386,386,386,386,386,386,386,386,386,386,386,387,387,387,387,387,387,388,388,388,388,388,388,388,388,389,389,390,390,390,390,390,390,390,390,390,390,391,391,391,391,391,391,391,391,391,391,391,391,392,392,392,392,392,392,392,392,393,393,393,393,393,393,393,394,394,394,394,395,395,395,395,395,395,396,396,396,396,396,396,396,397,397,398,398,398,398,398,398,399,399,399,399,399,399,399,400,400,400,400,400,400,400,401,401,401,401,401,401,401,401,401,402,402,402,402,402,402,402,402,403,403,403,403,403,403,403,404,404,404,404,404,405,405,405,405,406,406,406,406,406,406,407,407,407,407,407,408,408,408,408,408,409,409,409,409,409,409,410,410,410,410,410,410,410,410,410,411,411,411,411,411,411,411,412,412,412,412,412,412,412,412,413,413,413,413,413,413,413,413,414,414,414,414,414,414,414,414,414,414,414,414,414,415,415,415,416,416,417,417,417,417,417,417,417,417,417,418,418,419,419,419,419,419,420,420,420,420,420,420,420,420,421,421,422,422,422,422,422,422,423,423,423,423,423,423,423,423,423,423,424,424,424,424,424,424,424,424,424,424,425,425,425,425,425,425,425,426,426,426,426,427,427,427,427,427,427,428,428,428,428,428,429,429,429,430,430,430,430,430,430,430,430,430,431,431,432,432,432,432,432,432,432,433,433,433,433,433,434,434,434,434,434,434,434,434,434,435,435,435,435,435,435,435,435,435,435,436,436,436,436,436,436,437,437,437,437,437,437,437,437,437,438,438,438,438,438,438,438,438,439,439,439,439,439,439,439,439,439,439,440,440,440,440,440,440,441,441,441,441,441,441,441,442,442,442,442,442,442,442,442,442,442,442,443,443,443,443,443,443,443,443,443,444,444,445,445,446,446,446,446,446,447,447,447,447,447,447,447,447,447,447,448,448,448,448,448,448,449,449,450,450,450,450,450,450,450,450,450,450,450,450,451,451,451,451,451,452,452,453,453,453,453,453,453,453,453,453,454,454,454,454,454,454,454,454,454,455,455,456,456,456,456,456,456,457,457,457,457,457,457,457,457,458,458,459,459,459,459,459,459,459,460,460,460,460,460,461,461,461,461,461,461,461,461,461,461,462,462,462,462,462,463,463,463,463,463,463,463,463,463,464,464,464,464,464,464,464,464,465,465,465,465,465,465,465,466,466,466,466,466,466,466,466,467,467,467,467,467,467,468,468,468,468,468,468,468,469,469,469,469,469,470,470,470,470,470,470,470,470,471,471,471,471,471,472,472,472,472,472,472,472,472,472,472,473,473,474,474,474,474,475,475,475,475,475,475,475,475,476,476,476,476,476,476,476,477,477,477,477,477,477,477,477,478,478,478,478,478,478,478,478,479,479,479,479,479,479,479,479,479,480,480,480,480,480,480,480,481,481,481,481,481,481,481,481,482,482,482,482,482,483,483,484,484,484,484,484,484,484,484,485,485,485,485,485,485,485,485,486,486,486,486,486,486,487,487,487,487,488,488,488,488,488,489,489,489,489,489,489,489,489,489,490,490,490,490,490,490,490,490,491,491,491,491,491,491,491,492,492,492,492,492,492,492,492,492,492,493,493,494,494,494,494,494,494,494,495,495,495,495,495,495,495,495,496,496,496,496,496,496,496,496,496,497,497,497,497,497,497,497,497,497,497,497,497,498,498,498,498,498,498,498,498,498,498,498,499,499,499,499,499,499,499,500,500,500,500,500,500,500,501,501,501,501,501,502,502,502,502,502,502,502,502,503,503,503,504,504,504,504,504,505,505,505,505,505,505,505,505,506,506,506,506,506,507,507,508,508,508,508,509,509,509,509,509,510,510,510,510,511,511,511,511,511,511,511,511,512,512,512,512,513,513,514,514,514,514,514,514,515,515,516,516,516,516,516,516,516,517,517,517,517,517,517,517,518,518,518,518,518,518,518,518,519,519,520,520,520,520,520,520,520,520,521,521,521,521,522,522,522,522,522,522,522,523,523,523,523,523,523,523,524,524,524,524,524,524,524,524,525,525,525,525,525,525,525,526,526,526,526,526,527,527,527,527,527,528,528,528,528,528,528,529,529,529,529,529,529,530,530,530,531,531,531,531,531,531,531,531,532,532,532,532,532,533,533,533,533,534,534,534,534,534,534,534,534,535,535,536,536,536,536,536,536,536,537,537,537,537,537,538,538,539,539,539,539],&#34;depth&#34;:[6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,4,3,2,1,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,3,2,1,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,3,2,1,10,9,8,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,3,2,1,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,3,2,1,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,6,5,4,3,2,1,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,12,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,3,2,1,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,2,1,2,1,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,2,1,7,6,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,3,2,1,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,2,1,5,4,3,2,1,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,3,2,1,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,2,1,5,4,3,2,1,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,3,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,2,1,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,4,3,2,1,2,1,7,6,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,9,8,7,6,5,4,3,2,1,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,2,1,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,2,1,6,5,4,3,2,1,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,2,1,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,2,1,3,2,1,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,3,2,1,2,1,9,8,7,6,5,4,3,2,1,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,3,2,1,9,8,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,2,1,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,2,1,12,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,2,1,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,2,1,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,8,7,6,5,4,3,2,1,4,3,2,1,2,1,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,4,3,2,1,8,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,5,4,3,2,1,2,1,4,3,2,1],&#34;label&#34;:[&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;[.data.frame&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;caller_env&#34;,&#34;rlang::eval_tidy&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.External2&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;is.factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[[&lt;-&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;row.names&lt;-&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;is.data.frame&#34;,&#34;rownames&lt;-&#34;,&#34;row.names&lt;-.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.data.frame&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;do.call&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.row_names_info&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;grep&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;grep&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;any&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;grep&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;alist&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;diff.default&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rlang::is_formula&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.data.frame&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sum&#34;,&#34;local&#34;,&#34;is.factor&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;is.factor&#34;,&#34;FUN&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;is.factor&#34;,&#34;FUN&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;unique&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;logical&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;~&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;is.call&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;do.call&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;is.expression&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;NextMethod&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;any&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;Anonymous&gt;&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;is.data.frame&#34;,&#34;rownames&lt;-&#34;,&#34;row.names&lt;-.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;[.data.frame&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[.data.frame&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;-&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;grep&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;grep&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;make.unique&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;grep&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;levels&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;levels&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;make.unique&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sys.frame&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs_or_expr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;do.call&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parent.frame&#34;,&#34;enexpr&#34;,&#34;rhs_or_expr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;alist&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;names&lt;-&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;environment&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;[&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;unlist&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs.parsedFormula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;unique&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.row_names_info&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;grep&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;grep&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;alist&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sys.call&#34;,&#34;alist&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;Anonymous&gt;&#34;,&#34;rhs_or_expr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;is.ordered&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;paste0&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;make.unique&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;any&#34;,&#34;local&#34;,&#34;grep&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;diff.default&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;dim.data.frame&#34;,&#34;ncol&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;dim&#34;,&#34;ncol&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;paste0&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;attributes&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs_or_expr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;Anonymous&gt;&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list.default&#34;,&#34;alist&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.integer&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;enexpr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs.parsedFormula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;enexpr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parent.frame&#34;,&#34;~&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean.default&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sum&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rlang::enexpr&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.integer&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.integer&#34;,&#34;local&#34;,&#34;grep&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list.default&#34;,&#34;alist&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.data.frame&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;unlist&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;logical&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;list&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;grep&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition.parsedFormula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;dim&#34;,&#34;ncol&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;getOption&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.integer&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;dim.data.frame&#34;,&#34;ncol&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;sample&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs.parsedFormula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;names&#34;,&#34;local&#34;,&#34;sys.function&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;unique&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs.parsedFormula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs.parsedFormula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;alist&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;paste0&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;unlist&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;any&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean.default&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;parent.frame&#34;,&#34;&lt;Anonymous&gt;&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[[.data.frame&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;grep&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;[.data.frame&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parent.frame&#34;,&#34;&lt;Anonymous&gt;&#34;,&#34;rhs_or_expr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;&lt;Anonymous&gt;&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;unlist&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;attr&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition.parsedFormula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.External&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;alist&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;unlist&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;enexpr&#34;,&#34;rhs_or_expr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.External&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;&lt;Anonymous&gt;&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;logical&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;any&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;alist&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.External2&#34;,&#34;local&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;alist&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;paste0&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;unique&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;names&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;$&#34;,&#34;condition.parsedFormula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;names&lt;-&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;unlist&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;list&#34;,&#34;local&#34;,&#34;$&#34;,&#34;condition.parsedFormula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;rhs&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;paste0&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;rlang::is_formula&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;ncol&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sys.call&#34;,&#34;[[.data.frame&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;getOption&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;max&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;Anonymous&gt;&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list.default&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;length&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;$&#34;,&#34;lhs.parsedFormula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;do.call&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;grep&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;dim&#34;,&#34;ncol&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;diff.default&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;[[.data.frame&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.External&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;],&#34;filenum&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],&#34;linenum&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],&#34;memalloc&#34;:[28.7099533081055,28.7099533081055,28.7099533081055,28.7099533081055,28.7099533081055,28.7099533081055,29.4328918457031,29.4328918457031,29.4328918457031,29.4328918457031,29.4328918457031,29.4328918457031,29.9154968261719,29.9154968261719,29.9154968261719,29.9154968261719,29.9154968261719,29.9154968261719,29.9154968261719,29.9154968261719,30.4057922363281,30.4057922363281,30.4057922363281,30.4057922363281,30.4057922363281,30.4057922363281,30.9962387084961,30.9962387084961,30.9962387084961,30.9962387084961,30.9962387084961,30.9962387084961,30.9962387084961,30.9962387084961,31.7938919067383,31.7938919067383,31.7938919067383,31.7938919067383,31.7938919067383,31.7938919067383,31.7938919067383,31.7938919067383,31.7938919067383,32.3040084838867,32.3040084838867,32.3040084838867,32.3040084838867,32.3040084838867,32.3040084838867,32.3040084838867,32.3040084838867,32.7733688354492,32.7733688354492,32.7733688354492,32.7733688354492,32.7733688354492,32.7733688354492,32.7733688354492,32.7733688354492,33.3695068359375,33.3695068359375,33.9097442626953,33.9097442626953,33.9097442626953,33.9097442626953,33.9097442626953,33.9097442626953,33.9097442626953,33.9097442626953,34.3736038208008,34.3736038208008,34.3736038208008,34.3736038208008,34.8311767578125,34.8311767578125,34.8311767578125,34.8311767578125,34.8311767578125,34.8311767578125,34.8311767578125,34.8311767578125,35.497932434082,35.497932434082,35.497932434082,35.497932434082,35.497932434082,35.497932434082,35.497932434082,35.497932434082,35.497932434082,35.497932434082,35.497932434082,35.9322128295898,35.9322128295898,35.9322128295898,35.9322128295898,35.9322128295898,35.9322128295898,35.9322128295898,35.9322128295898,35.9322128295898,35.9322128295898,35.9322128295898,35.9322128295898,35.9322128295898,36.469123840332,36.469123840332,36.469123840332,36.469123840332,36.469123840332,36.469123840332,36.469123840332,36.469123840332,36.469123840332,36.469123840332,36.469123840332,36.469123840332,28.4702835083008,28.4702835083008,28.4702835083008,28.4702835083008,28.4702835083008,28.9452133178711,28.9452133178711,28.9452133178711,28.9452133178711,28.9452133178711,28.9452133178711,28.9452133178711,28.9452133178711,29.5007934570312,29.5007934570312,29.5007934570312,29.5007934570312,29.5007934570312,29.5007934570312,29.5007934570312,30.0442962646484,30.0442962646484,30.5199279785156,30.5199279785156,30.5199279785156,30.5199279785156,30.5199279785156,30.5199279785156,30.5199279785156,30.5199279785156,30.5199279785156,31.0496520996094,31.0496520996094,31.0496520996094,31.0496520996094,31.0496520996094,31.5189971923828,31.5189971923828,31.5189971923828,31.5189971923828,31.5189971923828,31.5189971923828,31.5189971923828,32.0598907470703,32.0598907470703,32.0598907470703,32.0598907470703,32.0598907470703,32.0598907470703,32.0598907470703,32.0598907470703,32.0598907470703,32.0598907470703,32.0598907470703,32.0598907470703,32.0598907470703,32.5291213989258,32.5291213989258,32.5291213989258,32.5291213989258,32.5291213989258,32.5291213989258,32.5291213989258,32.5291213989258,33.0425567626953,33.0425567626953,33.0425567626953,33.6034317016602,33.6034317016602,34.074348449707,34.074348449707,34.074348449707,34.074348449707,34.074348449707,34.074348449707,34.074348449707,34.9428176879883,34.9428176879883,34.9428176879883,34.9428176879883,34.9428176879883,34.9428176879883,34.9428176879883,34.9428176879883,34.9428176879883,34.9428176879883,34.9428176879883,35.4432144165039,35.4432144165039,35.4432144165039,35.91796875,35.91796875,35.91796875,35.91796875,35.91796875,35.91796875,35.91796875,35.91796875,35.91796875,35.91796875,36.3880844116211,36.3880844116211,28.5810623168945,28.5810623168945,28.5810623168945,28.5810623168945,28.5810623168945,28.5810623168945,28.5810623168945,29.0686492919922,29.0686492919922,29.0686492919922,29.0686492919922,29.0686492919922,29.0686492919922,29.0686492919922,29.0686492919922,29.5870819091797,29.5870819091797,29.5870819091797,29.5870819091797,29.5870819091797,30.4301452636719,30.4301452636719,30.4301452636719,30.4301452636719,30.4301452636719,31.2391510009766,31.2391510009766,31.2391510009766,31.2391510009766,31.2391510009766,31.2391510009766,32.1695709228516,32.1695709228516,32.1695709228516,32.1695709228516,32.1695709228516,32.8565139770508,32.8565139770508,32.8565139770508,32.8565139770508,32.8565139770508,32.8565139770508,32.8565139770508,32.8565139770508,32.8565139770508,33.5428619384766,33.5428619384766,33.5428619384766,33.5428619384766,33.5428619384766,33.997932434082,33.997932434082,33.997932434082,33.997932434082,33.997932434082,33.997932434082,33.997932434082,33.997932434082,34.7666397094727,34.7666397094727,35.5456466674805,35.5456466674805,35.5456466674805,35.5456466674805,35.5456466674805,35.5456466674805,35.5456466674805,35.5456466674805,35.5456466674805,35.5456466674805,36.0080795288086,36.0080795288086,36.0080795288086,36.0080795288086,36.0080795288086,36.0080795288086,36.0080795288086,36.0080795288086,36.0080795288086,36.0080795288086,28.4261856079102,28.4261856079102,28.4261856079102,28.4261856079102,28.4261856079102,28.4261856079102,28.4261856079102,28.4261856079102,28.4261856079102,28.4261856079102,28.952018737793,28.952018737793,28.952018737793,28.952018737793,28.952018737793,28.952018737793,28.952018737793,29.9170227050781,29.9170227050781,29.9170227050781,29.9170227050781,29.9170227050781,30.3880081176758,30.3880081176758,30.3880081176758,30.3880081176758,30.3880081176758,30.3880081176758,30.9104156494141,30.9104156494141,30.9104156494141,30.9104156494141,30.9104156494141,30.9104156494141,30.9104156494141,31.4937210083008,31.4937210083008,31.4937210083008,31.4937210083008,31.4937210083008,31.4937210083008,31.9658355712891,31.9658355712891,31.9658355712891,31.9658355712891,31.9658355712891,31.9658355712891,31.9658355712891,31.9658355712891,32.4412536621094,32.4412536621094,32.4412536621094,32.4412536621094,32.4412536621094,32.4412536621094,32.4412536621094,32.9353103637695,32.9353103637695,32.9353103637695,32.9353103637695,32.9353103637695,33.4716720581055,33.4716720581055,33.4716720581055,33.4716720581055,33.4716720581055,33.9412078857422,33.9412078857422,33.9412078857422,34.4118347167969,34.4118347167969,34.4118347167969,34.4118347167969,34.8867797851562,34.8867797851562,34.8867797851562,34.8867797851562,34.8867797851562,34.8867797851562,34.8867797851562,34.8867797851562,34.8867797851562,34.8867797851562,35.3550186157227,35.3550186157227,35.3550186157227,35.3550186157227,35.3550186157227,35.3550186157227,35.3550186157227,35.8258438110352,35.8258438110352,35.8258438110352,35.8258438110352,35.8258438110352,35.8258438110352,35.8258438110352,35.8258438110352,35.8258438110352,36.3046188354492,36.3046188354492,36.3046188354492,36.3046188354492,36.3046188354492,36.3046188354492,36.3046188354492,36.3046188354492,36.3046188354492,36.3046188354492,28.5287475585938,28.5287475585938,28.5287475585938,28.5287475585938,29.4166870117188,29.4166870117188,29.4166870117188,29.4166870117188,29.4166870117188,29.4166870117188,29.4166870117188,29.4166870117188,30.0856323242188,30.0856323242188,30.0856323242188,30.0856323242188,30.0856323242188,30.0856323242188,30.0856323242188,30.0856323242188,30.6732025146484,30.6732025146484,31.1754837036133,31.1754837036133,31.1754837036133,31.1754837036133,31.1754837036133,31.1754837036133,31.6488876342773,31.6488876342773,31.6488876342773,31.6488876342773,31.6488876342773,31.6488876342773,31.6488876342773,31.6488876342773,32.1671905517578,32.1671905517578,32.1671905517578,32.1671905517578,32.1671905517578,32.1671905517578,32.1671905517578,32.1671905517578,32.1671905517578,32.1671905517578,32.1671905517578,32.1671905517578,32.6365280151367,32.6365280151367,32.6365280151367,32.6365280151367,32.6365280151367,32.6365280151367,32.6365280151367,32.6365280151367,32.6365280151367,32.6365280151367,32.6365280151367,32.6365280151367,33.3289184570312,33.3289184570312,33.3289184570312,33.3289184570312,33.3289184570312,33.3289184570312,33.3289184570312,33.3289184570312,33.3289184570312,33.3289184570312,34.2268142700195,34.2268142700195,34.2268142700195,34.2268142700195,34.2268142700195,34.2268142700195,34.830078125,34.830078125,34.830078125,34.830078125,34.830078125,34.830078125,34.830078125,34.830078125,35.3363037109375,35.3363037109375,35.3363037109375,35.3363037109375,35.3363037109375,35.3363037109375,35.3363037109375,35.8602676391602,35.8602676391602,35.8602676391602,35.8602676391602,35.8602676391602,35.8602676391602,35.8602676391602,35.8602676391602,35.8602676391602,28.2442321777344,28.2442321777344,28.2442321777344,28.2442321777344,28.2442321777344,28.2442321777344,28.2442321777344,28.2442321777344,28.2442321777344,28.2442321777344,28.7796401977539,28.7796401977539,28.7796401977539,28.7796401977539,28.7796401977539,28.7796401977539,28.7796401977539,29.2947998046875,29.2947998046875,29.2947998046875,29.2947998046875,29.2947998046875,29.2947998046875,29.2947998046875,29.2947998046875,29.2947998046875,29.2947998046875,29.2947998046875,29.8335723876953,29.8335723876953,29.8335723876953,29.8335723876953,29.8335723876953,29.8335723876953,29.8335723876953,29.8335723876953,29.8335723876953,29.8335723876953,30.3555374145508,30.3555374145508,30.3555374145508,30.3555374145508,30.3555374145508,30.3555374145508,30.3555374145508,30.3555374145508,31.0226058959961,31.0226058959961,31.599723815918,31.599723815918,32.1855773925781,32.1855773925781,32.1855773925781,32.1855773925781,32.1855773925781,32.1855773925781,32.1855773925781,32.1855773925781,32.1855773925781,32.1855773925781,32.7318344116211,32.7318344116211,32.7318344116211,32.7318344116211,32.7318344116211,33.2499923706055,33.2499923706055,33.98046875,33.98046875,33.98046875,33.98046875,33.98046875,33.98046875,33.98046875,33.98046875,34.7419509887695,34.7419509887695,34.7419509887695,34.7419509887695,34.7419509887695,34.7419509887695,34.7419509887695,35.6689910888672,35.6689910888672,35.6689910888672,35.6689910888672,35.6689910888672,35.6689910888672,35.6689910888672,35.6689910888672,36.2087249755859,36.2087249755859,36.2087249755859,36.2087249755859,36.2087249755859,36.2087249755859,36.2087249755859,36.2087249755859,36.5719909667969,36.5719909667969,36.5719909667969,28.7109222412109,28.7109222412109,28.7109222412109,28.7109222412109,28.7109222412109,28.7109222412109,28.7109222412109,28.7109222412109,28.7109222412109,28.7109222412109,29.3892288208008,29.3892288208008,29.3892288208008,29.3892288208008,29.3892288208008,29.3892288208008,29.3892288208008,29.3892288208008,29.3892288208008,29.3892288208008,29.3892288208008,29.3892288208008,29.3892288208008,30.2124557495117,30.2124557495117,30.2124557495117,31.0347213745117,31.0347213745117,31.0347213745117,31.0347213745117,31.0347213745117,31.0347213745117,31.0347213745117,31.0347213745117,31.0347213745117,31.0347213745117,31.0347213745117,31.6477737426758,31.6477737426758,31.6477737426758,31.6477737426758,31.6477737426758,31.6477737426758,31.6477737426758,32.1246719360352,32.1246719360352,32.6299591064453,32.6299591064453,32.6299591064453,32.6299591064453,32.6299591064453,32.6299591064453,33.4332275390625,33.4332275390625,33.4332275390625,33.4332275390625,33.4332275390625,33.4332275390625,33.4332275390625,33.4332275390625,34.0005722045898,34.0005722045898,34.5024337768555,34.5024337768555,34.5024337768555,34.5024337768555,34.5024337768555,34.5024337768555,34.5024337768555,35.1723098754883,35.1723098754883,35.1723098754883,35.1723098754883,35.1723098754883,35.7099838256836,35.7099838256836,35.7099838256836,35.7099838256836,35.7099838256836,35.7099838256836,35.7099838256836,36.2646865844727,36.2646865844727,36.2646865844727,36.2646865844727,36.2646865844727,36.2646865844727,36.2646865844727,28.3673248291016,28.3673248291016,28.3673248291016,28.3673248291016,28.3673248291016,28.3673248291016,28.3673248291016,28.3673248291016,28.3673248291016,28.3673248291016,28.852668762207,28.852668762207,28.852668762207,28.852668762207,28.852668762207,28.852668762207,28.852668762207,28.852668762207,28.852668762207,29.6410293579102,29.6410293579102,29.6410293579102,29.6410293579102,29.6410293579102,29.6410293579102,29.6410293579102,30.320686340332,30.320686340332,30.320686340332,30.320686340332,30.320686340332,30.320686340332,30.320686340332,30.320686340332,30.320686340332,30.8307647705078,30.8307647705078,30.8307647705078,30.8307647705078,30.8307647705078,30.8307647705078,30.8307647705078,30.8307647705078,30.8307647705078,30.8307647705078,31.3287887573242,31.3287887573242,31.3287887573242,31.3287887573242,31.3287887573242,31.3287887573242,31.3287887573242,31.3287887573242,31.3287887573242,31.3287887573242,32.1347579956055,32.1347579956055,32.1347579956055,32.1347579956055,32.1347579956055,32.1347579956055,32.9393463134766,32.9393463134766,32.9393463134766,32.9393463134766,32.9393463134766,33.6267318725586,33.6267318725586,33.6267318725586,33.6267318725586,33.6267318725586,34.1929092407227,34.1929092407227,34.1929092407227,34.1929092407227,34.1929092407227,34.8494338989258,34.8494338989258,35.3365173339844,35.3365173339844,35.3365173339844,35.3365173339844,35.3365173339844,36.1434631347656,36.1434631347656,36.1434631347656,36.1434631347656,36.1434631347656,36.1434631347656,36.1434631347656,36.1434631347656,36.1434631347656,36.1434631347656,28.2936477661133,28.2936477661133,28.2936477661133,28.2936477661133,28.2936477661133,28.8322067260742,28.8322067260742,28.8322067260742,28.8322067260742,29.1702346801758,29.1702346801758,29.1702346801758,29.1702346801758,29.5547790527344,29.5547790527344,29.5547790527344,29.5547790527344,29.5547790527344,29.5547790527344,30.0418472290039,30.0418472290039,30.0418472290039,30.0418472290039,30.5133209228516,30.5133209228516,30.5133209228516,30.5133209228516,30.5133209228516,30.5133209228516,30.5133209228516,30.5133209228516,30.5133209228516,31.2101974487305,31.2101974487305,31.2101974487305,31.2101974487305,31.2101974487305,31.7681579589844,31.7681579589844,31.7681579589844,31.7681579589844,31.7681579589844,32.2580871582031,32.2580871582031,32.2580871582031,32.2580871582031,32.2580871582031,32.2580871582031,32.2580871582031,32.2580871582031,32.2580871582031,32.2580871582031,32.7275924682617,32.7275924682617,32.7275924682617,32.7275924682617,32.7275924682617,32.7275924682617,32.7275924682617,32.7275924682617,32.7275924682617,33.5738983154297,33.5738983154297,33.5738983154297,33.5738983154297,33.5738983154297,33.5738983154297,33.5738983154297,33.5738983154297,33.5738983154297,33.5738983154297,33.5738983154297,33.5738983154297,34.3141784667969,34.3141784667969,34.3141784667969,34.3141784667969,34.3141784667969,34.3141784667969,34.3141784667969,34.3141784667969,34.3141784667969,34.3141784667969,34.3141784667969,34.7888641357422,34.7888641357422,34.7888641357422,34.7888641357422,34.7888641357422,34.7888641357422,34.7888641357422,34.7888641357422,35.4778747558594,35.4778747558594,35.4778747558594,35.4778747558594,35.4778747558594,36.2902145385742,36.2902145385742,28.3196182250977,28.3196182250977,28.3196182250977,28.3196182250977,28.3196182250977,28.3196182250977,28.3196182250977,28.3196182250977,29.1410980224609,29.1410980224609,29.1410980224609,29.1410980224609,29.1410980224609,29.1410980224609,29.1410980224609,29.874267578125,29.874267578125,29.874267578125,29.874267578125,29.874267578125,30.6631927490234,30.6631927490234,30.6631927490234,30.6631927490234,30.6631927490234,30.6631927490234,30.6631927490234,30.6631927490234,30.6631927490234,30.6631927490234,31.5894241333008,31.5894241333008,31.5894241333008,31.5894241333008,31.5894241333008,31.5894241333008,32.3939895629883,32.3939895629883,32.3939895629883,32.3939895629883,32.3939895629883,32.3939895629883,32.3939895629883,32.3939895629883,33.1947402954102,33.1947402954102,33.9989395141602,33.9989395141602,33.9989395141602,33.9989395141602,34.797721862793,34.797721862793,34.797721862793,34.797721862793,34.797721862793,34.797721862793,34.797721862793,35.5311965942383,35.5311965942383,35.5311965942383,35.5311965942383,35.5311965942383,35.5311965942383,35.5311965942383,35.5311965942383,35.5311965942383,35.5311965942383,35.5311965942383,36.3863372802734,36.3863372802734,36.3863372802734,36.3863372802734,36.3863372802734,36.3863372802734,36.3863372802734,36.3863372802734,28.4391784667969,28.4391784667969,28.9711227416992,28.9711227416992,28.9711227416992,28.9711227416992,28.9711227416992,28.9711227416992,28.9711227416992,29.5208435058594,29.5208435058594,29.5208435058594,29.5208435058594,29.5208435058594,29.5208435058594,29.5208435058594,29.5208435058594,29.5208435058594,30.3496246337891,30.3496246337891,30.3496246337891,30.3496246337891,30.3496246337891,30.8293151855469,30.8293151855469,30.8293151855469,30.8293151855469,30.8293151855469,30.8293151855469,31.3931884765625,31.3931884765625,31.3931884765625,31.3931884765625,31.3931884765625,31.3931884765625,31.3931884765625,31.3931884765625,31.894889831543,31.894889831543,31.894889831543,31.894889831543,31.894889831543,31.894889831543,31.894889831543,32.7387619018555,32.7387619018555,32.7387619018555,32.7387619018555,32.7387619018555,32.7387619018555,32.7387619018555,33.5434188842773,33.5434188842773,33.5434188842773,33.5434188842773,33.5434188842773,33.5434188842773,33.5434188842773,33.5434188842773,33.5434188842773,33.5434188842773,33.5434188842773,34.3488159179688,34.3488159179688,34.3488159179688,34.3488159179688,34.3488159179688,34.3488159179688,35.1604385375977,35.1604385375977,35.1604385375977,35.1604385375977,35.1604385375977,35.1604385375977,35.1604385375977,35.1604385375977,35.1604385375977,35.1604385375977,35.1604385375977,35.9557342529297,35.9557342529297,35.9557342529297,35.9557342529297,35.9557342529297,35.9557342529297,35.9557342529297,35.9557342529297,36.4880828857422,36.4880828857422,36.4880828857422,36.4880828857422,36.4880828857422,28.3682327270508,28.3682327270508,28.3682327270508,28.3682327270508,28.3682327270508,28.8550033569336,28.8550033569336,28.8550033569336,28.8550033569336,28.8550033569336,28.8550033569336,28.8550033569336,29.6790313720703,29.6790313720703,29.6790313720703,29.6790313720703,29.6790313720703,29.6790313720703,29.6790313720703,29.6790313720703,29.6790313720703,29.6790313720703,30.5020370483398,30.5020370483398,30.5020370483398,30.5020370483398,30.5020370483398,30.5020370483398,30.5020370483398,30.5020370483398,31.3512191772461,31.3512191772461,31.3512191772461,31.3512191772461,31.3512191772461,31.3512191772461,31.3512191772461,32.3375549316406,32.3375549316406,32.8234939575195,32.8234939575195,32.8234939575195,32.8234939575195,32.8234939575195,32.8234939575195,32.8234939575195,32.8234939575195,32.8234939575195,32.8234939575195,32.8234939575195,32.8234939575195,33.7765197753906,33.7765197753906,33.7765197753906,33.7765197753906,33.7765197753906,34.7493743896484,34.7493743896484,34.7493743896484,34.7493743896484,34.7493743896484,34.7493743896484,34.7493743896484,35.3897705078125,35.3897705078125,35.3897705078125,35.3897705078125,35.3897705078125,35.3897705078125,35.3897705078125,35.8730163574219,35.8730163574219,35.8730163574219,35.8730163574219,35.8730163574219,35.8730163574219,35.8730163574219,35.8730163574219,35.8730163574219,35.8730163574219,35.8730163574219,35.8730163574219,36.3585662841797,36.3585662841797,36.3585662841797,36.3585662841797,36.3585662841797,36.3585662841797,36.3585662841797,36.3585662841797,28.8799743652344,28.8799743652344,28.8799743652344,28.8799743652344,28.8799743652344,28.8799743652344,29.7002410888672,29.7002410888672,29.7002410888672,29.7002410888672,29.7002410888672,29.7002410888672,29.7002410888672,30.1873931884766,30.1873931884766,30.1873931884766,30.1873931884766,30.1873931884766,30.1873931884766,30.1873931884766,31.0047912597656,31.0047912597656,31.0047912597656,31.0047912597656,31.0047912597656,31.0047912597656,31.0047912597656,31.9801712036133,31.9801712036133,31.9801712036133,32.6165618896484,32.6165618896484,32.6165618896484,32.6165618896484,32.6165618896484,32.6165618896484,32.6165618896484,33.0917205810547,33.0917205810547,33.0917205810547,33.0917205810547,33.0917205810547,33.0917205810547,33.0917205810547,33.0917205810547,33.0917205810547,33.0917205810547,33.5719680786133,33.5719680786133,33.5719680786133,33.5719680786133,33.5719680786133,33.5719680786133,33.5719680786133,33.5719680786133,33.5719680786133,33.5719680786133,34.161491394043,34.161491394043,34.161491394043,34.161491394043,34.161491394043,34.161491394043,34.9008407592773,34.9008407592773,35.5182876586914,35.5182876586914,35.5182876586914,35.5182876586914,35.5182876586914,36.0065994262695,36.0065994262695,36.0065994262695,36.0065994262695,36.0065994262695,36.0065994262695,36.0065994262695,36.0065994262695,36.0065994262695,36.0065994262695,36.5888442993164,36.5888442993164,36.5888442993164,36.5888442993164,36.5888442993164,36.5888442993164,36.5888442993164,36.5888442993164,36.5888442993164,29.1549224853516,29.1549224853516,29.1549224853516,29.1549224853516,29.1549224853516,29.1549224853516,29.1549224853516,29.1549224853516,29.1549224853516,29.1549224853516,29.8257217407227,29.8257217407227,29.8257217407227,29.8257217407227,29.8257217407227,29.8257217407227,29.8257217407227,29.8257217407227,29.8257217407227,30.5912246704102,30.5912246704102,30.5912246704102,31.4613494873047,31.4613494873047,31.4613494873047,31.4613494873047,31.4613494873047,31.4613494873047,31.4613494873047,31.4613494873047,32.2705154418945,32.2705154418945,32.2705154418945,32.2705154418945,32.2705154418945,33.071647644043,33.071647644043,33.071647644043,33.071647644043,33.5481033325195,33.5481033325195,33.5481033325195,33.5481033325195,33.5481033325195,33.5481033325195,33.5481033325195,34.0305099487305,34.0305099487305,34.0305099487305,34.0305099487305,34.0305099487305,34.5173187255859,34.5173187255859,34.5173187255859,34.5173187255859,34.5173187255859,34.5173187255859,34.5173187255859,34.5173187255859,35.009162902832,35.009162902832,35.009162902832,35.009162902832,35.009162902832,35.009162902832,35.009162902832,35.009162902832,35.4883193969727,35.4883193969727,35.4883193969727,35.4883193969727,35.4883193969727,35.4883193969727,35.4883193969727,35.4883193969727,36.2934799194336,36.2934799194336,36.2934799194336,36.2934799194336,36.2934799194336,28.5355758666992,28.5355758666992,28.5355758666992,28.5355758666992,28.5355758666992,28.5355758666992,28.5355758666992,28.5355758666992,28.5355758666992,28.5355758666992,29.3030776977539,29.3030776977539,29.3030776977539,29.3030776977539,29.3030776977539,29.3030776977539,29.7952194213867,29.7952194213867,29.7952194213867,29.7952194213867,29.7952194213867,29.7952194213867,29.7952194213867,29.7952194213867,29.7952194213867,30.2910232543945,30.2910232543945,30.2910232543945,30.2910232543945,30.2910232543945,30.2910232543945,30.2910232543945,30.2910232543945,30.8406219482422,30.8406219482422,30.8406219482422,30.8406219482422,30.8406219482422,31.3318405151367,31.3318405151367,31.3318405151367,31.3318405151367,31.3318405151367,31.3318405151367,31.3318405151367,31.3318405151367,31.3318405151367,31.3318405151367,31.7145156860352,31.7145156860352,31.7145156860352,31.7145156860352,31.7145156860352,32.254753112793,32.254753112793,32.254753112793,32.254753112793,32.254753112793,32.254753112793,32.254753112793,32.8853073120117,32.8853073120117,32.8853073120117,32.8853073120117,32.8853073120117,32.8853073120117,32.8853073120117,33.3657531738281,33.3657531738281,33.3657531738281,33.3657531738281,33.3657531738281,33.3657531738281,33.3657531738281,33.3657531738281,33.3657531738281,33.9618377685547,33.9618377685547,33.9618377685547,33.9618377685547,33.9618377685547,34.4401092529297,34.4401092529297,34.4401092529297,34.9328536987305,34.9328536987305,34.9328536987305,34.9328536987305,34.9328536987305,35.4021835327148,35.4021835327148,35.4021835327148,35.4021835327148,35.4021835327148,35.901496887207,35.901496887207,35.901496887207,35.901496887207,35.901496887207,35.901496887207,35.901496887207,36.3775405883789,36.3775405883789,28.7575836181641,28.7575836181641,29.2274398803711,29.2274398803711,29.2274398803711,29.2274398803711,29.2274398803711,30.1660385131836,30.1660385131836,30.1660385131836,30.1660385131836,30.1660385131836,30.1660385131836,31.1310882568359,31.1310882568359,31.1310882568359,31.1310882568359,31.1310882568359,31.1310882568359,31.1310882568359,31.609016418457,31.609016418457,31.609016418457,31.609016418457,31.609016418457,31.609016418457,32.0810089111328,32.0810089111328,32.0810089111328,32.0810089111328,32.0810089111328,32.0810089111328,32.0810089111328,32.0810089111328,32.0810089111328,32.0810089111328,32.0810089111328,32.0810089111328,32.0810089111328,32.5543975830078,32.5543975830078,32.5543975830078,32.5543975830078,32.5543975830078,32.5543975830078,32.5543975830078,32.5543975830078,33.3522567749023,33.3522567749023,33.3522567749023,33.3522567749023,33.3522567749023,33.3522567749023,34.3091812133789,34.3091812133789,34.3091812133789,34.3091812133789,34.8827514648438,34.8827514648438,34.8827514648438,34.8827514648438,34.8827514648438,34.8827514648438,34.8827514648438,34.8827514648438,34.8827514648438,35.3617782592773,35.3617782592773,35.3617782592773,35.3617782592773,35.3617782592773,35.8371505737305,35.8371505737305,36.3638458251953,36.3638458251953,36.3638458251953,36.3638458251953,36.3638458251953,36.3638458251953,36.3638458251953,28.3789596557617,28.3789596557617,28.3789596557617,28.3789596557617,28.9128265380859,28.9128265380859,28.9128265380859,28.9128265380859,28.9128265380859,28.9128265380859,28.9128265380859,29.6528625488281,29.6528625488281,29.6528625488281,30.153076171875,30.153076171875,31.1437759399414,31.1437759399414,31.1437759399414,31.1437759399414,31.1437759399414,31.1437759399414,31.1437759399414,31.6363220214844,31.6363220214844,31.6363220214844,31.6363220214844,31.6363220214844,31.6363220214844,31.6363220214844,31.6363220214844,31.6363220214844,32.1177749633789,32.1177749633789,32.1177749633789,32.1177749633789,32.1177749633789,32.1177749633789,32.1177749633789,32.1177749633789,32.6029357910156,32.6029357910156,32.6029357910156,33.0902328491211,33.0902328491211,33.0902328491211,33.0902328491211,33.0902328491211,33.0902328491211,33.6584854125977,33.6584854125977,33.6584854125977,33.6584854125977,33.6584854125977,33.6584854125977,33.6584854125977,33.6584854125977,33.6584854125977,34.2182235717773,34.2182235717773,34.2182235717773,34.2182235717773,34.2182235717773,34.2182235717773,35.2011032104492,35.2011032104492,35.2011032104492,35.2011032104492,35.2011032104492,35.2011032104492,35.2011032104492,35.2011032104492,35.2011032104492,35.2011032104492,35.6893920898438,35.6893920898438,35.6893920898438,35.6893920898438,35.6893920898438,35.6893920898438,35.6893920898438,36.1781005859375,36.1781005859375,36.1781005859375,36.1781005859375,36.1781005859375,36.1781005859375,36.1781005859375,36.1781005859375,36.1781005859375,36.1781005859375,28.7330703735352,28.7330703735352,28.7330703735352,28.7330703735352,28.7330703735352,29.7272872924805,29.7272872924805,29.7272872924805,29.7272872924805,29.7272872924805,29.7272872924805,29.7272872924805,30.2787399291992,30.2787399291992,30.2787399291992,30.2787399291992,30.2787399291992,30.2787399291992,30.2787399291992,30.2787399291992,30.2787399291992,31.2102890014648,31.2102890014648,31.8628768920898,31.8628768920898,31.8628768920898,31.8628768920898,31.8628768920898,32.6696853637695,32.6696853637695,32.6696853637695,32.6696853637695,32.6696853637695,32.6696853637695,33.479362487793,33.479362487793,33.479362487793,33.479362487793,33.479362487793,33.479362487793,33.479362487793,33.479362487793,33.479362487793,33.479362487793,33.479362487793,34.3115844726562,34.3115844726562,34.3115844726562,35.0354080200195,35.0354080200195,35.0354080200195,35.0354080200195,35.0354080200195,35.0354080200195,35.7914428710938,35.7914428710938,35.7914428710938,35.7914428710938,35.7914428710938,35.7914428710938,35.7914428710938,35.7914428710938,35.7914428710938,35.7914428710938,35.7914428710938,35.7914428710938,36.4083709716797,36.4083709716797,36.4083709716797,36.4083709716797,36.4083709716797,36.4083709716797,36.4083709716797,36.4083709716797,36.4083709716797,36.4083709716797,28.4722061157227,28.4722061157227,29.4489898681641,29.4489898681641,29.4489898681641,29.4489898681641,29.4489898681641,29.4489898681641,30.2904281616211,30.2904281616211,30.2904281616211,30.2904281616211,30.2904281616211,30.2904281616211,30.2904281616211,30.787712097168,30.787712097168,30.787712097168,30.787712097168,30.787712097168,30.787712097168,31.2783279418945,31.2783279418945,31.2783279418945,31.2783279418945,31.2783279418945,31.2783279418945,32.2654418945312,32.2654418945312,32.7528381347656,32.7528381347656,32.7528381347656,32.7528381347656,32.7528381347656,32.7528381347656,32.7528381347656,33.2399520874023,33.2399520874023,33.7042617797852,33.7042617797852,33.7042617797852,33.7042617797852,33.7042617797852,34.1927108764648,34.1927108764648,34.1927108764648,34.1927108764648,34.1927108764648,34.1927108764648,34.1927108764648,34.6454772949219,34.6454772949219,35.0820999145508,35.0820999145508,35.0820999145508,35.0820999145508,35.0820999145508,35.0820999145508,35.0820999145508,35.5661926269531,35.5661926269531,35.5661926269531,35.5661926269531,35.5661926269531,35.5661926269531,35.5661926269531,35.5661926269531,35.5661926269531,35.5661926269531,35.5661926269531,36.0224990844727,36.0224990844727,36.0224990844727,36.0224990844727,36.0224990844727,36.0224990844727,36.0224990844727,36.4955673217773,36.4955673217773,36.4955673217773,36.4955673217773,36.4955673217773,36.4955673217773,36.4955673217773,28.5484161376953,28.5484161376953,28.5484161376953,28.5484161376953,28.5484161376953,28.5484161376953,28.5484161376953,28.5484161376953,29.1172637939453,29.1172637939453,29.1172637939453,29.1172637939453,29.1172637939453,29.6498641967773,29.6498641967773,29.6498641967773,29.6498641967773,29.6498641967773,30.1244354248047,30.1244354248047,30.1244354248047,30.1244354248047,30.1244354248047,30.1244354248047,30.5937347412109,30.5937347412109,30.5937347412109,30.5937347412109,30.5937347412109,30.5937347412109,31.125114440918,31.125114440918,31.125114440918,31.125114440918,31.125114440918,31.125114440918,31.125114440918,31.125114440918,31.6331787109375,31.6331787109375,31.6331787109375,31.6331787109375,31.6331787109375,32.3183059692383,32.3183059692383,32.3183059692383,32.3183059692383,32.3183059692383,32.3183059692383,32.3183059692383,32.3183059692383,33.2328186035156,33.2328186035156,34.1518783569336,34.1518783569336,34.1518783569336,34.1518783569336,34.1518783569336,34.1518783569336,34.7476577758789,34.7476577758789,34.7476577758789,34.7476577758789,34.7476577758789,34.7476577758789,34.7476577758789,35.6222686767578,35.6222686767578,35.6222686767578,35.6222686767578,35.6222686767578,35.6222686767578,36.4309387207031,36.4309387207031,36.4309387207031,36.4309387207031,36.4309387207031,36.4309387207031,28.5076599121094,28.5076599121094,28.5076599121094,28.5076599121094,28.5076599121094,29.4941253662109,29.4941253662109,29.4941253662109,29.4941253662109,29.4941253662109,29.4941253662109,30.4807739257812,30.4807739257812,30.4807739257812,30.4807739257812,30.4807739257812,30.4807739257812,30.4807739257812,30.4807739257812,30.4807739257812,30.4807739257812,30.4807739257812,30.4807739257812,30.4807739257812,31.2048110961914,31.2048110961914,31.2048110961914,31.2048110961914,31.2048110961914,31.7384948730469,31.7384948730469,31.7384948730469,31.7384948730469,31.7384948730469,31.7384948730469,31.7384948730469,31.7384948730469,31.7384948730469,32.3095703125,32.3095703125,32.3095703125,33.1120529174805,33.1120529174805,33.1120529174805,33.1120529174805,33.1120529174805,33.1120529174805,33.7160034179688,33.7160034179688,33.7160034179688,33.7160034179688,33.7160034179688,33.7160034179688,33.7160034179688,33.7160034179688,34.6562271118164,34.6562271118164,34.6562271118164,35.4432220458984,35.4432220458984,35.4432220458984,35.4432220458984,35.4432220458984,35.4432220458984,35.4432220458984,35.4432220458984,35.4432220458984,35.4432220458984,35.9470367431641,35.9470367431641,35.9470367431641,35.9470367431641,35.9470367431641,35.9470367431641,35.9470367431641,35.9470367431641,35.9470367431641,35.9470367431641,36.4180374145508,36.4180374145508,28.636604309082,28.636604309082,28.636604309082,29.4457168579102,29.4457168579102,29.4457168579102,29.4457168579102,29.4457168579102,29.4457168579102,29.4457168579102,29.4457168579102,29.4457168579102,30.1751556396484,30.1751556396484,30.1751556396484,30.1751556396484,30.1751556396484,30.1751556396484,30.1751556396484,31.0350570678711,31.0350570678711,31.0350570678711,31.0350570678711,31.0350570678711,31.8202743530273,31.8202743530273,31.8202743530273,31.8202743530273,31.8202743530273,31.8202743530273,31.8202743530273,32.7301635742188,32.7301635742188,32.7301635742188,32.7301635742188,32.7301635742188,32.7301635742188,32.7301635742188,32.7301635742188,32.7301635742188,33.4327621459961,33.4327621459961,33.4327621459961,33.4327621459961,33.4327621459961,33.4327621459961,33.4327621459961,34.2855072021484,34.2855072021484,34.2855072021484,34.2855072021484,34.2855072021484,34.2855072021484,34.2855072021484,34.2855072021484,34.2855072021484,35.0406341552734,35.0406341552734,35.0406341552734,35.0406341552734,35.0406341552734,35.0406341552734,35.0406341552734,35.5600204467773,35.5600204467773,35.5600204467773,35.5600204467773,35.5600204467773,35.5600204467773,35.5600204467773,35.5600204467773,36.0946731567383,36.0946731567383,36.0946731567383,36.0946731567383,36.0946731567383,36.0946731567383,36.0946731567383,36.0946731567383,36.6285934448242,36.6285934448242,36.6285934448242,36.6285934448242,36.6285934448242,36.6285934448242,36.6285934448242,36.6285934448242,36.6285934448242,36.6285934448242,36.6285934448242,36.6285934448242,36.6285934448242,36.6285934448242,28.8334121704102,28.8334121704102,28.8334121704102,28.8334121704102,29.3495712280273,29.3495712280273,29.8612594604492,29.8612594604492,29.8612594604492,29.8612594604492,29.8612594604492,29.8612594604492,29.8612594604492,30.6590347290039,30.6590347290039,30.6590347290039,30.6590347290039,31.4610366821289,31.4610366821289,31.4610366821289,31.4610366821289,31.4610366821289,31.4610366821289,32.0011520385742,32.0011520385742,32.0011520385742,32.0011520385742,32.0011520385742,32.0011520385742,32.0011520385742,32.0011520385742,32.9784622192383,32.9784622192383,32.9784622192383,32.9784622192383,32.9784622192383,32.9784622192383,32.9784622192383,32.9784622192383,33.4736022949219,33.4736022949219,33.9606552124023,33.9606552124023,33.9606552124023,33.9606552124023,33.9606552124023,33.9606552124023,33.9606552124023,33.9606552124023,33.9606552124023,33.9606552124023,34.7674179077148,34.7674179077148,34.7674179077148,34.7674179077148,34.7674179077148,34.7674179077148,34.7674179077148,35.2776031494141,35.2776031494141,35.7732315063477,35.7732315063477,35.7732315063477,35.7732315063477,35.7732315063477,35.7732315063477,35.7732315063477,35.7732315063477,35.7732315063477,36.2833099365234,36.2833099365234,28.392463684082,28.392463684082,28.392463684082,28.392463684082,28.392463684082,28.9464874267578,28.9464874267578,28.9464874267578,28.9464874267578,28.9464874267578,28.9464874267578,28.9464874267578,28.9464874267578,29.5346145629883,29.5346145629883,29.5346145629883,29.5346145629883,29.5346145629883,29.5346145629883,30.0703125,30.0703125,30.0703125,30.0703125,30.0703125,30.0703125,30.6440505981445,30.6440505981445,30.6440505981445,30.6440505981445,30.6440505981445,30.6440505981445,30.6440505981445,31.5652694702148,31.5652694702148,31.5652694702148,31.5652694702148,31.5652694702148,32.3504409790039,32.3504409790039,32.3504409790039,32.3504409790039,32.3504409790039,33.1895217895508,33.1895217895508,33.1895217895508,33.1895217895508,33.6650772094727,33.6650772094727,33.6650772094727,33.6650772094727,33.6650772094727,33.6650772094727,33.6650772094727,34.6335678100586,34.6335678100586,34.6335678100586,34.6335678100586,34.6335678100586,34.6335678100586,34.6335678100586,34.6335678100586,35.2397689819336,35.2397689819336,35.2397689819336,35.2397689819336,35.2397689819336,35.2397689819336,35.2397689819336,35.2397689819336,36.2204055786133,36.2204055786133,36.2204055786133,36.2204055786133,36.2204055786133,36.2204055786133,36.2204055786133,36.2204055786133,36.2204055786133,36.2204055786133,36.2204055786133,36.2204055786133,36.2204055786133,36.2204055786133,28.8038101196289,28.8038101196289,28.8038101196289,28.8038101196289,28.8038101196289,28.8038101196289,28.8038101196289,29.2858734130859,29.2858734130859,29.2858734130859,29.2858734130859,29.2858734130859,30.1271820068359,30.1271820068359,30.6268615722656,30.6268615722656,30.6268615722656,30.6268615722656,30.6268615722656,31.2367248535156,31.2367248535156,31.2367248535156,31.2367248535156,31.2367248535156,31.2367248535156,31.2367248535156,31.2367248535156,31.2367248535156,31.2367248535156,31.2367248535156,31.2367248535156,31.9387359619141,31.9387359619141,31.9387359619141,31.9387359619141,31.9387359619141,31.9387359619141,31.9387359619141,32.5799026489258,32.5799026489258,32.5799026489258,32.5799026489258,32.5799026489258,32.5799026489258,32.5799026489258,32.5799026489258,32.5799026489258,32.5799026489258,33.5788879394531,33.5788879394531,34.1897583007812,34.1897583007812,34.1897583007812,34.1897583007812,34.1897583007812,34.1897583007812,34.7193832397461,34.7193832397461,34.7193832397461,34.7193832397461,34.7193832397461,35.7073745727539,35.7073745727539,35.7073745727539,35.7073745727539,35.7073745727539,35.7073745727539,35.7073745727539,35.7073745727539,35.7073745727539,35.7073745727539,35.7073745727539,36.1954574584961,36.1954574584961,36.1954574584961,36.1954574584961,36.1954574584961,36.1954574584961,36.1954574584961,36.1954574584961,28.4064025878906,28.4064025878906,28.4064025878906,28.4064025878906,28.4064025878906,29.2820205688477,29.2820205688477,29.2820205688477,29.2820205688477,29.2820205688477,29.2820205688477,29.2820205688477,29.7839965820312,29.7839965820312,29.7839965820312,29.7839965820312,29.7839965820312,29.7839965820312,30.7547760009766,30.7547760009766,30.7547760009766,30.7547760009766,30.7547760009766,30.7547760009766,31.29150390625,31.29150390625,31.29150390625,31.29150390625,31.29150390625,31.29150390625,31.29150390625,32.2829742431641,32.2829742431641,32.2829742431641,32.2829742431641,32.2829742431641,32.2829742431641,32.7765197753906,32.7765197753906,32.7765197753906,32.7765197753906,32.7765197753906,33.7713394165039,33.7713394165039,33.7713394165039,33.7713394165039,33.7713394165039,34.4412994384766,34.4412994384766,34.9170989990234,34.9170989990234,34.9170989990234,34.9170989990234,34.9170989990234,34.9170989990234,34.9170989990234,34.9170989990234,34.9170989990234,35.3987426757812,35.3987426757812,35.3987426757812,35.3987426757812,35.3987426757812,35.3987426757812,35.3987426757812,35.3987426757812,35.3987426757812,36.3563919067383,36.3563919067383,36.3563919067383,36.3563919067383,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,36.6406326293945,28.2830047607422,28.2830047607422,28.2830047607422,28.2830047607422,28.2830047607422,28.2830047607422,28.2830047607422,28.2830047607422,28.2830047607422,28.2830047607422,28.2830047607422,28.2830047607422,28.2830047607422,28.2830047607422,28.2830047607422,28.2830047607422,28.727897644043,28.727897644043,29.6615982055664,29.6615982055664,29.6615982055664,29.6615982055664,29.6615982055664,29.6615982055664,29.6615982055664,29.6615982055664,29.6615982055664,30.4846878051758,30.4846878051758,30.4846878051758,30.4846878051758,30.4846878051758,30.4846878051758,30.4846878051758,30.4846878051758,31.3134918212891,31.3134918212891,31.3134918212891,31.3134918212891,31.3134918212891,31.3134918212891,32.0917739868164,32.0917739868164,32.0917739868164,32.0917739868164,32.0917739868164,32.0917739868164,32.0917739868164,32.0917739868164,32.0917739868164,32.0917739868164,32.7910842895508,32.7910842895508,32.7910842895508,32.7910842895508,33.2785263061523,33.2785263061523,33.2785263061523,33.2785263061523,33.2785263061523,33.2785263061523,33.2785263061523,33.7698440551758,33.7698440551758,34.7422561645508,34.7422561645508,34.7422561645508,35.7436218261719,35.7436218261719,35.7436218261719,35.7436218261719,35.7436218261719,35.7436218261719,35.7436218261719,35.7436218261719,35.7436218261719,36.2274398803711,36.2274398803711,36.2274398803711,36.2274398803711,36.2274398803711,36.2274398803711,36.2274398803711,36.2274398803711,36.2274398803711,28.3094024658203,28.3094024658203,28.3094024658203,28.3094024658203,28.3094024658203,28.3094024658203,28.3094024658203,28.8713302612305,28.8713302612305,28.8713302612305,28.8713302612305,28.8713302612305,28.8713302612305,28.8713302612305,29.3815765380859,29.3815765380859,29.3815765380859,29.3815765380859,29.3815765380859,29.3815765380859,30.1514434814453,30.1514434814453,30.1514434814453,30.1514434814453,30.1514434814453,30.1514434814453,30.1514434814453,30.6504135131836,30.6504135131836,31.1445388793945,31.1445388793945,31.1445388793945,31.1445388793945,31.1445388793945,31.1445388793945,31.1445388793945,31.1445388793945,31.1445388793945,31.1445388793945,31.1445388793945,32.1431732177734,32.1431732177734,32.1431732177734,32.1431732177734,32.1431732177734,32.1431732177734,32.1431732177734,32.1431732177734,32.7337951660156,32.7337951660156,32.7337951660156,32.7337951660156,32.7337951660156,33.5017166137695,33.5017166137695,33.5017166137695,33.5017166137695,33.5017166137695,34.3598556518555,34.3598556518555,34.3598556518555,34.3598556518555,34.3598556518555,34.3598556518555,34.3598556518555,34.3598556518555,34.3598556518555,34.9499893188477,34.9499893188477,34.9499893188477,34.9499893188477,34.9499893188477,34.9499893188477,34.9499893188477,35.4486312866211,35.4486312866211,35.4486312866211,35.4486312866211,35.4486312866211,35.4486312866211,35.4486312866211,35.7517929077148,35.7517929077148,35.7517929077148,35.7517929077148,35.7517929077148,35.7517929077148,35.7517929077148,35.7517929077148,35.7517929077148,35.7517929077148,36.5596466064453,36.5596466064453,36.5596466064453,36.5596466064453,36.5596466064453,36.5596466064453,36.5596466064453,36.5596466064453,36.5596466064453,28.7762603759766,28.7762603759766,28.7762603759766,28.7762603759766,28.7762603759766,28.7762603759766,28.7762603759766,28.7762603759766,29.4013290405273,29.4013290405273,29.4013290405273,29.4013290405273,29.4013290405273,29.4013290405273,29.4013290405273,29.9027938842773,29.9027938842773,29.9027938842773,29.9027938842773,29.9027938842773,29.9027938842773,29.9027938842773,29.9027938842773,30.4890518188477,30.4890518188477,30.4890518188477,30.4890518188477,30.4890518188477,30.4890518188477,30.4890518188477,30.4890518188477,30.4890518188477,31.3348159790039,31.3348159790039,31.3348159790039,31.3348159790039,31.3348159790039,32.3118209838867,32.3118209838867,32.3118209838867,32.3118209838867,32.3118209838867,32.3118209838867,32.3118209838867,32.8106079101562,32.8106079101562,32.8106079101562,32.8106079101562,32.8106079101562,32.8106079101562,32.8106079101562,32.8106079101562,33.7842636108398,33.7842636108398,33.7842636108398,33.7842636108398,33.7842636108398,34.2698516845703,34.2698516845703,34.2698516845703,34.2698516845703,34.2698516845703,34.2698516845703,34.2698516845703,34.2698516845703,34.2698516845703,34.2698516845703,34.2698516845703,34.2698516845703,34.8987274169922,34.8987274169922,34.8987274169922,34.8987274169922,34.8987274169922,34.8987274169922,35.4006042480469,35.4006042480469,35.4006042480469,35.4006042480469,35.4006042480469,35.4006042480469,35.4006042480469,35.4006042480469,35.9327087402344,35.9327087402344,36.4401550292969,36.4401550292969,36.4401550292969,36.4401550292969,36.4401550292969,36.4401550292969,36.4401550292969,36.4401550292969,36.4401550292969,36.4401550292969,28.6492385864258,28.6492385864258,28.6492385864258,28.6492385864258,28.6492385864258,28.6492385864258,28.6492385864258,28.6492385864258,28.6492385864258,28.6492385864258,28.6492385864258,28.6492385864258,29.2736434936523,29.2736434936523,29.2736434936523,29.2736434936523,29.2736434936523,29.2736434936523,29.2736434936523,29.2736434936523,29.9075317382812,29.9075317382812,29.9075317382812,29.9075317382812,29.9075317382812,29.9075317382812,29.9075317382812,30.5461654663086,30.5461654663086,30.5461654663086,30.5461654663086,31.0475082397461,31.0475082397461,31.0475082397461,31.0475082397461,31.0475082397461,31.0475082397461,31.850227355957,31.850227355957,31.850227355957,31.850227355957,31.850227355957,31.850227355957,31.850227355957,32.8603515625,32.8603515625,33.3620147705078,33.3620147705078,33.3620147705078,33.3620147705078,33.3620147705078,33.3620147705078,34.3527526855469,34.3527526855469,34.3527526855469,34.3527526855469,34.3527526855469,34.3527526855469,34.3527526855469,35.3559799194336,35.3559799194336,35.3559799194336,35.3559799194336,35.3559799194336,35.3559799194336,35.3559799194336,36.0290222167969,36.0290222167969,36.0290222167969,36.0290222167969,36.0290222167969,36.0290222167969,36.0290222167969,36.0290222167969,36.0290222167969,28.4463500976562,28.4463500976562,28.4463500976562,28.4463500976562,28.4463500976562,28.4463500976562,28.4463500976562,28.4463500976562,29.1643600463867,29.1643600463867,29.1643600463867,29.1643600463867,29.1643600463867,29.1643600463867,29.1643600463867,29.72900390625,29.72900390625,29.72900390625,29.72900390625,29.72900390625,30.2351989746094,30.2351989746094,30.2351989746094,30.2351989746094,31.2394104003906,31.2394104003906,31.2394104003906,31.2394104003906,31.2394104003906,31.2394104003906,31.7404937744141,31.7404937744141,31.7404937744141,31.7404937744141,31.7404937744141,32.2428817749023,32.2428817749023,32.2428817749023,32.2428817749023,32.2428817749023,32.7341613769531,32.7341613769531,32.7341613769531,32.7341613769531,32.7341613769531,32.7341613769531,33.2687301635742,33.2687301635742,33.2687301635742,33.2687301635742,33.2687301635742,33.2687301635742,33.2687301635742,33.2687301635742,33.2687301635742,33.9226531982422,33.9226531982422,33.9226531982422,33.9226531982422,33.9226531982422,33.9226531982422,33.9226531982422,34.5605392456055,34.5605392456055,34.5605392456055,34.5605392456055,34.5605392456055,34.5605392456055,34.5605392456055,34.5605392456055,35.0460205078125,35.0460205078125,35.0460205078125,35.0460205078125,35.0460205078125,35.0460205078125,35.0460205078125,35.0460205078125,35.5344848632812,35.5344848632812,35.5344848632812,35.5344848632812,35.5344848632812,35.5344848632812,35.5344848632812,35.5344848632812,35.5344848632812,35.5344848632812,35.5344848632812,35.5344848632812,35.5344848632812,36.5109176635742,36.5109176635742,36.5109176635742,28.6113357543945,28.6113357543945,29.1041259765625,29.1041259765625,29.1041259765625,29.1041259765625,29.1041259765625,29.1041259765625,29.1041259765625,29.1041259765625,29.1041259765625,29.9201965332031,29.9201965332031,30.4176483154297,30.4176483154297,30.4176483154297,30.4176483154297,30.4176483154297,31.4006729125977,31.4006729125977,31.4006729125977,31.4006729125977,31.4006729125977,31.4006729125977,31.4006729125977,31.4006729125977,32.0581359863281,32.0581359863281,33.0375213623047,33.0375213623047,33.0375213623047,33.0375213623047,33.0375213623047,33.0375213623047,33.9929504394531,33.9929504394531,33.9929504394531,33.9929504394531,33.9929504394531,33.9929504394531,33.9929504394531,33.9929504394531,33.9929504394531,33.9929504394531,34.4942855834961,34.4942855834961,34.4942855834961,34.4942855834961,34.4942855834961,34.4942855834961,34.4942855834961,34.4942855834961,34.4942855834961,34.4942855834961,35.1345367431641,35.1345367431641,35.1345367431641,35.1345367431641,35.1345367431641,35.1345367431641,35.1345367431641,35.6263046264648,35.6263046264648,35.6263046264648,35.6263046264648,36.4226303100586,36.4226303100586,36.4226303100586,36.4226303100586,36.4226303100586,36.4226303100586,28.5176086425781,28.5176086425781,28.5176086425781,28.5176086425781,28.5176086425781,29.5105209350586,29.5105209350586,29.5105209350586,30.4987335205078,30.4987335205078,30.4987335205078,30.4987335205078,30.4987335205078,30.4987335205078,30.4987335205078,30.4987335205078,30.4987335205078,31.4899368286133,31.4899368286133,31.991813659668,31.991813659668,31.991813659668,31.991813659668,31.991813659668,31.991813659668,31.991813659668,32.4601135253906,32.4601135253906,32.4601135253906,32.4601135253906,32.4601135253906,33.0628814697266,33.0628814697266,33.0628814697266,33.0628814697266,33.0628814697266,33.0628814697266,33.0628814697266,33.0628814697266,33.0628814697266,33.6520004272461,33.6520004272461,33.6520004272461,33.6520004272461,33.6520004272461,33.6520004272461,33.6520004272461,33.6520004272461,33.6520004272461,33.6520004272461,34.6396636962891,34.6396636962891,34.6396636962891,34.6396636962891,34.6396636962891,34.6396636962891,35.2325668334961,35.2325668334961,35.2325668334961,35.2325668334961,35.2325668334961,35.2325668334961,35.2325668334961,35.2325668334961,35.2325668334961,35.7862243652344,35.7862243652344,35.7862243652344,35.7862243652344,35.7862243652344,35.7862243652344,35.7862243652344,35.7862243652344,36.4647064208984,36.4647064208984,36.4647064208984,36.4647064208984,36.4647064208984,36.4647064208984,36.4647064208984,36.4647064208984,36.4647064208984,36.4647064208984,28.7635726928711,28.7635726928711,28.7635726928711,28.7635726928711,28.7635726928711,28.7635726928711,29.5594940185547,29.5594940185547,29.5594940185547,29.5594940185547,29.5594940185547,29.5594940185547,29.5594940185547,30.5569915771484,30.5569915771484,30.5569915771484,30.5569915771484,30.5569915771484,30.5569915771484,30.5569915771484,30.5569915771484,30.5569915771484,30.5569915771484,30.5569915771484,31.0488662719727,31.0488662719727,31.0488662719727,31.0488662719727,31.0488662719727,31.0488662719727,31.0488662719727,31.0488662719727,31.0488662719727,31.5812072753906,31.5812072753906,32.0989532470703,32.0989532470703,32.7863998413086,32.7863998413086,32.7863998413086,32.7863998413086,32.7863998413086,33.3390884399414,33.3390884399414,33.3390884399414,33.3390884399414,33.3390884399414,33.3390884399414,33.3390884399414,33.3390884399414,33.3390884399414,33.3390884399414,33.8926391601562,33.8926391601562,33.8926391601562,33.8926391601562,33.8926391601562,33.8926391601562,34.7972259521484,34.7972259521484,35.4066925048828,35.4066925048828,35.4066925048828,35.4066925048828,35.4066925048828,35.4066925048828,35.4066925048828,35.4066925048828,35.4066925048828,35.4066925048828,35.4066925048828,35.4066925048828,35.9026565551758,35.9026565551758,35.9026565551758,35.9026565551758,35.9026565551758,36.4389724731445,36.4389724731445,28.543342590332,28.543342590332,28.543342590332,28.543342590332,28.543342590332,28.543342590332,28.543342590332,28.543342590332,28.543342590332,29.2504653930664,29.2504653930664,29.2504653930664,29.2504653930664,29.2504653930664,29.2504653930664,29.2504653930664,29.2504653930664,29.2504653930664,29.7688217163086,29.7688217163086,30.2665634155273,30.2665634155273,30.2665634155273,30.2665634155273,30.2665634155273,30.2665634155273,30.7725296020508,30.7725296020508,30.7725296020508,30.7725296020508,30.7725296020508,30.7725296020508,30.7725296020508,30.7725296020508,31.3109817504883,31.3109817504883,31.8556365966797,31.8556365966797,31.8556365966797,31.8556365966797,31.8556365966797,31.8556365966797,31.8556365966797,32.583251953125,32.583251953125,32.583251953125,32.583251953125,32.583251953125,33.2605743408203,33.2605743408203,33.2605743408203,33.2605743408203,33.2605743408203,33.2605743408203,33.2605743408203,33.2605743408203,33.2605743408203,33.2605743408203,34.2593536376953,34.2593536376953,34.2593536376953,34.2593536376953,34.2593536376953,34.8543090820312,34.8543090820312,34.8543090820312,34.8543090820312,34.8543090820312,34.8543090820312,34.8543090820312,34.8543090820312,34.8543090820312,35.6746063232422,35.6746063232422,35.6746063232422,35.6746063232422,35.6746063232422,35.6746063232422,35.6746063232422,35.6746063232422,36.239387512207,36.239387512207,36.239387512207,36.239387512207,36.239387512207,36.239387512207,36.239387512207,28.3721542358398,28.3721542358398,28.3721542358398,28.3721542358398,28.3721542358398,28.3721542358398,28.3721542358398,28.3721542358398,28.8755493164062,28.8755493164062,28.8755493164062,28.8755493164062,28.8755493164062,28.8755493164062,29.3734359741211,29.3734359741211,29.3734359741211,29.3734359741211,29.3734359741211,29.3734359741211,29.3734359741211,30.1747283935547,30.1747283935547,30.1747283935547,30.1747283935547,30.1747283935547,31.1707992553711,31.1707992553711,31.1707992553711,31.1707992553711,31.1707992553711,31.1707992553711,31.1707992553711,31.1707992553711,31.6832809448242,31.6832809448242,31.6832809448242,31.6832809448242,31.6832809448242,32.1380157470703,32.1380157470703,32.1380157470703,32.1380157470703,32.1380157470703,32.1380157470703,32.1380157470703,32.1380157470703,32.1380157470703,32.1380157470703,32.6087493896484,32.6087493896484,33.1584243774414,33.1584243774414,33.1584243774414,33.1584243774414,33.6637573242188,33.6637573242188,33.6637573242188,33.6637573242188,33.6637573242188,33.6637573242188,33.6637573242188,33.6637573242188,34.4666442871094,34.4666442871094,34.4666442871094,34.4666442871094,34.4666442871094,34.4666442871094,34.4666442871094,35.3074111938477,35.3074111938477,35.3074111938477,35.3074111938477,35.3074111938477,35.3074111938477,35.3074111938477,35.3074111938477,36.1122741699219,36.1122741699219,36.1122741699219,36.1122741699219,36.1122741699219,36.1122741699219,36.1122741699219,36.1122741699219,36.5850448608398,36.5850448608398,36.5850448608398,36.5850448608398,36.5850448608398,36.5850448608398,36.5850448608398,36.5850448608398,36.5850448608398,28.8252487182617,28.8252487182617,28.8252487182617,28.8252487182617,28.8252487182617,28.8252487182617,28.8252487182617,29.3107299804688,29.3107299804688,29.3107299804688,29.3107299804688,29.3107299804688,29.3107299804688,29.3107299804688,29.3107299804688,30.1789093017578,30.1789093017578,30.1789093017578,30.1789093017578,30.1789093017578,30.9904403686523,30.9904403686523,31.5746536254883,31.5746536254883,31.5746536254883,31.5746536254883,31.5746536254883,31.5746536254883,31.5746536254883,31.5746536254883,32.1325912475586,32.1325912475586,32.1325912475586,32.1325912475586,32.1325912475586,32.1325912475586,32.1325912475586,32.1325912475586,32.6226272583008,32.6226272583008,32.6226272583008,32.6226272583008,32.6226272583008,32.6226272583008,33.4324493408203,33.4324493408203,33.4324493408203,33.4324493408203,34.1395797729492,34.1395797729492,34.1395797729492,34.1395797729492,34.1395797729492,34.7453384399414,34.7453384399414,34.7453384399414,34.7453384399414,34.7453384399414,34.7453384399414,34.7453384399414,34.7453384399414,34.7453384399414,35.2453994750977,35.2453994750977,35.2453994750977,35.2453994750977,35.2453994750977,35.2453994750977,35.2453994750977,35.2453994750977,35.8970947265625,35.8970947265625,35.8970947265625,35.8970947265625,35.8970947265625,35.8970947265625,35.8970947265625,36.5396347045898,36.5396347045898,36.5396347045898,36.5396347045898,36.5396347045898,36.5396347045898,36.5396347045898,36.5396347045898,36.5396347045898,36.5396347045898,28.6827087402344,28.6827087402344,29.2544097900391,29.2544097900391,29.2544097900391,29.2544097900391,29.2544097900391,29.2544097900391,29.2544097900391,29.824104309082,29.824104309082,29.824104309082,29.824104309082,29.824104309082,29.824104309082,29.824104309082,29.824104309082,30.3418197631836,30.3418197631836,30.3418197631836,30.3418197631836,30.3418197631836,30.3418197631836,30.3418197631836,30.3418197631836,30.3418197631836,30.8989105224609,30.8989105224609,30.8989105224609,30.8989105224609,30.8989105224609,30.8989105224609,30.8989105224609,30.8989105224609,30.8989105224609,30.8989105224609,30.8989105224609,30.8989105224609,31.414176940918,31.414176940918,31.414176940918,31.414176940918,31.414176940918,31.414176940918,31.414176940918,31.414176940918,31.414176940918,31.414176940918,31.414176940918,31.9151611328125,31.9151611328125,31.9151611328125,31.9151611328125,31.9151611328125,31.9151611328125,31.9151611328125,32.439094543457,32.439094543457,32.439094543457,32.439094543457,32.439094543457,32.439094543457,32.439094543457,33.0825958251953,33.0825958251953,33.0825958251953,33.0825958251953,33.0825958251953,34.0027389526367,34.0027389526367,34.0027389526367,34.0027389526367,34.0027389526367,34.0027389526367,34.0027389526367,34.0027389526367,34.6562118530273,34.6562118530273,34.6562118530273,35.1511840820312,35.1511840820312,35.1511840820312,35.1511840820312,35.1511840820312,35.7609176635742,35.7609176635742,35.7609176635742,35.7609176635742,35.7609176635742,35.7609176635742,35.7609176635742,35.7609176635742,36.2900390625,36.2900390625,36.2900390625,36.2900390625,36.2900390625,28.5419845581055,28.5419845581055,29.0921936035156,29.0921936035156,29.0921936035156,29.0921936035156,29.5812225341797,29.5812225341797,29.5812225341797,29.5812225341797,29.5812225341797,30.198112487793,30.198112487793,30.198112487793,30.198112487793,30.7548980712891,30.7548980712891,30.7548980712891,30.7548980712891,30.7548980712891,30.7548980712891,30.7548980712891,30.7548980712891,31.2409591674805,31.2409591674805,31.2409591674805,31.2409591674805,31.8421936035156,31.8421936035156,32.3295745849609,32.3295745849609,32.3295745849609,32.3295745849609,32.3295745849609,32.3295745849609,32.8870849609375,32.8870849609375,33.3579330444336,33.3579330444336,33.3579330444336,33.3579330444336,33.3579330444336,33.3579330444336,33.3579330444336,33.8505935668945,33.8505935668945,33.8505935668945,33.8505935668945,33.8505935668945,33.8505935668945,33.8505935668945,34.3637390136719,34.3637390136719,34.3637390136719,34.3637390136719,34.3637390136719,34.3637390136719,34.3637390136719,34.3637390136719,34.8587265014648,34.8587265014648,35.4444580078125,35.4444580078125,35.4444580078125,35.4444580078125,35.4444580078125,35.4444580078125,35.4444580078125,35.4444580078125,36.1304168701172,36.1304168701172,36.1304168701172,36.1304168701172,36.5962753295898,36.5962753295898,36.5962753295898,36.5962753295898,36.5962753295898,36.5962753295898,36.5962753295898,28.8755722045898,28.8755722045898,28.8755722045898,28.8755722045898,28.8755722045898,28.8755722045898,28.8755722045898,29.8550415039062,29.8550415039062,29.8550415039062,29.8550415039062,29.8550415039062,29.8550415039062,29.8550415039062,29.8550415039062,30.5159149169922,30.5159149169922,30.5159149169922,30.5159149169922,30.5159149169922,30.5159149169922,30.5159149169922,30.9865417480469,30.9865417480469,30.9865417480469,30.9865417480469,30.9865417480469,31.7899398803711,31.7899398803711,31.7899398803711,31.7899398803711,31.7899398803711,32.6158218383789,32.6158218383789,32.6158218383789,32.6158218383789,32.6158218383789,32.6158218383789,33.4198455810547,33.4198455810547,33.4198455810547,33.4198455810547,33.4198455810547,33.4198455810547,34.2387084960938,34.2387084960938,34.2387084960938,35.0580673217773,35.0580673217773,35.0580673217773,35.0580673217773,35.0580673217773,35.0580673217773,35.0580673217773,35.0580673217773,35.8942565917969,35.8942565917969,35.8942565917969,35.8942565917969,35.8942565917969,36.382682800293,36.382682800293,36.382682800293,36.382682800293,28.7386169433594,28.7386169433594,28.7386169433594,28.7386169433594,28.7386169433594,28.7386169433594,28.7386169433594,28.7386169433594,29.234977722168,29.234977722168,29.9600067138672,29.9600067138672,29.9600067138672,29.9600067138672,29.9600067138672,29.9600067138672,29.9600067138672,30.946647644043,30.946647644043,30.946647644043,30.946647644043,30.946647644043,31.4834976196289,31.4834976196289,32.0535202026367,32.0535202026367,32.0535202026367,32.0535202026367],&#34;meminc&#34;:[0,0,0,0,0,0,0.722938537597656,0,0,0,0,0,0.48260498046875,0,0,0,0,0,0,0,0.49029541015625,0,0,0,0,0,0.590446472167969,0,0,0,0,0,0,0,0.797653198242188,0,0,0,0,0,0,0,0,0.510116577148438,0,0,0,0,0,0,0,0.4693603515625,0,0,0,0,0,0,0,0.596138000488281,0,0.540237426757812,0,0,0,0,0,0,0,0.463859558105469,0,0,0,0.457572937011719,0,0,0,0,0,0,0,0.666755676269531,0,0,0,0,0,0,0,0,0,0,0.434280395507812,0,0,0,0,0,0,0,0,0,0,0,0,0.536911010742188,0,0,0,0,0,0,0,0,0,0,0,-7.99884033203125,0,0,0,0,0.474929809570312,0,0,0,0,0,0,0,0.555580139160156,0,0,0,0,0,0,0.543502807617188,0,0.475631713867188,0,0,0,0,0,0,0,0,0.52972412109375,0,0,0,0,0.469345092773438,0,0,0,0,0,0,0.5408935546875,0,0,0,0,0,0,0,0,0,0,0,0,0.469230651855469,0,0,0,0,0,0,0,0.513435363769531,0,0,0.560874938964844,0,0.470916748046875,0,0,0,0,0,0,0.86846923828125,0,0,0,0,0,0,0,0,0,0,0.500396728515625,0,0,0.474754333496094,0,0,0,0,0,0,0,0,0,0.470115661621094,0,-7.80702209472656,0,0,0,0,0,0,0.487586975097656,0,0,0,0,0,0,0,0.5184326171875,0,0,0,0,0.843063354492188,0,0,0,0,0.809005737304688,0,0,0,0,0,0.930419921875,0,0,0,0,0.686943054199219,0,0,0,0,0,0,0,0,0.686347961425781,0,0,0,0,0.455070495605469,0,0,0,0,0,0,0,0.768707275390625,0,0.779006958007812,0,0,0,0,0,0,0,0,0,0.462432861328125,0,0,0,0,0,0,0,0,0,-7.58189392089844,0,0,0,0,0,0,0,0,0,0.525833129882812,0,0,0,0,0,0,0.965003967285156,0,0,0,0,0.470985412597656,0,0,0,0,0,0.522407531738281,0,0,0,0,0,0,0.583305358886719,0,0,0,0,0,0.472114562988281,0,0,0,0,0,0,0,0.475418090820312,0,0,0,0,0,0,0.494056701660156,0,0,0,0,0.536361694335938,0,0,0,0,0.469535827636719,0,0,0.470626831054688,0,0,0,0.474945068359375,0,0,0,0,0,0,0,0,0,0.468238830566406,0,0,0,0,0,0,0.4708251953125,0,0,0,0,0,0,0,0,0.478775024414062,0,0,0,0,0,0,0,0,0,-7.77587127685547,0,0,0,0.887939453125,0,0,0,0,0,0,0,0.6689453125,0,0,0,0,0,0,0,0.587570190429688,0,0.502281188964844,0,0,0,0,0,0.473403930664062,0,0,0,0,0,0,0,0.518302917480469,0,0,0,0,0,0,0,0,0,0,0,0.469337463378906,0,0,0,0,0,0,0,0,0,0,0,0.692390441894531,0,0,0,0,0,0,0,0,0,0.897895812988281,0,0,0,0,0,0.603263854980469,0,0,0,0,0,0,0,0.5062255859375,0,0,0,0,0,0,0.523963928222656,0,0,0,0,0,0,0,0,-7.61603546142578,0,0,0,0,0,0,0,0,0,0.535408020019531,0,0,0,0,0,0,0.515159606933594,0,0,0,0,0,0,0,0,0,0,0.538772583007812,0,0,0,0,0,0,0,0,0,0.521965026855469,0,0,0,0,0,0,0,0.667068481445312,0,0.577117919921875,0,0.585853576660156,0,0,0,0,0,0,0,0,0,0.546257019042969,0,0,0,0,0.518157958984375,0,0.730476379394531,0,0,0,0,0,0,0,0.761482238769531,0,0,0,0,0,0,0.927040100097656,0,0,0,0,0,0,0,0.53973388671875,0,0,0,0,0,0,0,0.363265991210938,0,0,-7.86106872558594,0,0,0,0,0,0,0,0,0,0.678306579589844,0,0,0,0,0,0,0,0,0,0,0,0,0.823226928710938,0,0,0.822265625,0,0,0,0,0,0,0,0,0,0,0.613052368164062,0,0,0,0,0,0,0.476898193359375,0,0.505287170410156,0,0,0,0,0,0.803268432617188,0,0,0,0,0,0,0,0.567344665527344,0,0.501861572265625,0,0,0,0,0,0,0.669876098632812,0,0,0,0,0.537673950195312,0,0,0,0,0,0,0.554702758789062,0,0,0,0,0,0,-7.89736175537109,0,0,0,0,0,0,0,0,0,0.485343933105469,0,0,0,0,0,0,0,0,0.788360595703125,0,0,0,0,0,0,0.679656982421875,0,0,0,0,0,0,0,0,0.510078430175781,0,0,0,0,0,0,0,0,0,0.498023986816406,0,0,0,0,0,0,0,0,0,0.80596923828125,0,0,0,0,0,0.804588317871094,0,0,0,0,0.687385559082031,0,0,0,0,0.566177368164062,0,0,0,0,0.656524658203125,0,0.487083435058594,0,0,0,0,0.80694580078125,0,0,0,0,0,0,0,0,0,-7.84981536865234,0,0,0,0,0.538558959960938,0,0,0,0.338027954101562,0,0,0,0.384544372558594,0,0,0,0,0,0.487068176269531,0,0,0,0.471473693847656,0,0,0,0,0,0,0,0,0.696876525878906,0,0,0,0,0.557960510253906,0,0,0,0,0.48992919921875,0,0,0,0,0,0,0,0,0,0.469505310058594,0,0,0,0,0,0,0,0,0.846305847167969,0,0,0,0,0,0,0,0,0,0,0,0.740280151367188,0,0,0,0,0,0,0,0,0,0,0.474685668945312,0,0,0,0,0,0,0,0.689010620117188,0,0,0,0,0.812339782714844,0,-7.97059631347656,0,0,0,0,0,0,0,0.821479797363281,0,0,0,0,0,0,0.733169555664062,0,0,0,0,0.788925170898438,0,0,0,0,0,0,0,0,0,0.926231384277344,0,0,0,0,0,0.8045654296875,0,0,0,0,0,0,0,0.800750732421875,0,0.80419921875,0,0,0,0.798782348632812,0,0,0,0,0,0,0.733474731445312,0,0,0,0,0,0,0,0,0,0,0.855140686035156,0,0,0,0,0,0,0,-7.94715881347656,0,0.531944274902344,0,0,0,0,0,0,0.549720764160156,0,0,0,0,0,0,0,0,0.828781127929688,0,0,0,0,0.479690551757812,0,0,0,0,0,0.563873291015625,0,0,0,0,0,0,0,0.501701354980469,0,0,0,0,0,0,0.8438720703125,0,0,0,0,0,0,0.804656982421875,0,0,0,0,0,0,0,0,0,0,0.805397033691406,0,0,0,0,0,0.811622619628906,0,0,0,0,0,0,0,0,0,0,0.795295715332031,0,0,0,0,0,0,0,0.5323486328125,0,0,0,0,-8.11985015869141,0,0,0,0,0.486770629882812,0,0,0,0,0,0,0.824028015136719,0,0,0,0,0,0,0,0,0,0.823005676269531,0,0,0,0,0,0,0,0.84918212890625,0,0,0,0,0,0,0.986335754394531,0,0.485939025878906,0,0,0,0,0,0,0,0,0,0,0,0.953025817871094,0,0,0,0,0.972854614257812,0,0,0,0,0,0,0.640396118164062,0,0,0,0,0,0,0.483245849609375,0,0,0,0,0,0,0,0,0,0,0,0.485549926757812,0,0,0,0,0,0,0,-7.47859191894531,0,0,0,0,0,0.820266723632812,0,0,0,0,0,0,0.487152099609375,0,0,0,0,0,0,0.817398071289062,0,0,0,0,0,0,0.975379943847656,0,0,0.636390686035156,0,0,0,0,0,0,0.47515869140625,0,0,0,0,0,0,0,0,0,0.480247497558594,0,0,0,0,0,0,0,0,0,0.589523315429688,0,0,0,0,0,0.739349365234375,0,0.617446899414062,0,0,0,0,0.488311767578125,0,0,0,0,0,0,0,0,0,0.582244873046875,0,0,0,0,0,0,0,0,-7.43392181396484,0,0,0,0,0,0,0,0,0,0.670799255371094,0,0,0,0,0,0,0,0,0.7655029296875,0,0,0.870124816894531,0,0,0,0,0,0,0,0.809165954589844,0,0,0,0,0.801132202148438,0,0,0,0.476455688476562,0,0,0,0,0,0,0.482406616210938,0,0,0,0,0.486808776855469,0,0,0,0,0,0,0,0.491844177246094,0,0,0,0,0,0,0,0.479156494140625,0,0,0,0,0,0,0,0.805160522460938,0,0,0,0,-7.75790405273438,0,0,0,0,0,0,0,0,0,0.767501831054688,0,0,0,0,0,0.492141723632812,0,0,0,0,0,0,0,0,0.495803833007812,0,0,0,0,0,0,0,0.549598693847656,0,0,0,0,0.491218566894531,0,0,0,0,0,0,0,0,0,0.382675170898438,0,0,0,0,0.540237426757812,0,0,0,0,0,0,0.63055419921875,0,0,0,0,0,0,0.480445861816406,0,0,0,0,0,0,0,0,0.596084594726562,0,0,0,0,0.478271484375,0,0,0.492744445800781,0,0,0,0,0.469329833984375,0,0,0,0,0.499313354492188,0,0,0,0,0,0,0.476043701171875,0,-7.61995697021484,0,0.469856262207031,0,0,0,0,0.9385986328125,0,0,0,0,0,0.965049743652344,0,0,0,0,0,0,0.477928161621094,0,0,0,0,0,0.471992492675781,0,0,0,0,0,0,0,0,0,0,0,0,0.473388671875,0,0,0,0,0,0,0,0.797859191894531,0,0,0,0,0,0.956924438476562,0,0,0,0.573570251464844,0,0,0,0,0,0,0,0,0.479026794433594,0,0,0,0,0.475372314453125,0,0.526695251464844,0,0,0,0,0,0,-7.98488616943359,0,0,0,0.533866882324219,0,0,0,0,0,0,0.740036010742188,0,0,0.500213623046875,0,0.990699768066406,0,0,0,0,0,0,0.492546081542969,0,0,0,0,0,0,0,0,0.481452941894531,0,0,0,0,0,0,0,0.485160827636719,0,0,0.487297058105469,0,0,0,0,0,0.568252563476562,0,0,0,0,0,0,0,0,0.559738159179688,0,0,0,0,0,0.982879638671875,0,0,0,0,0,0,0,0,0,0.488288879394531,0,0,0,0,0,0,0.48870849609375,0,0,0,0,0,0,0,0,0,-7.44503021240234,0,0,0,0,0.994216918945312,0,0,0,0,0,0,0.55145263671875,0,0,0,0,0,0,0,0,0.931549072265625,0,0.652587890625,0,0,0,0,0.806808471679688,0,0,0,0,0,0.809677124023438,0,0,0,0,0,0,0,0,0,0,0.832221984863281,0,0,0.723823547363281,0,0,0,0,0,0.756034851074219,0,0,0,0,0,0,0,0,0,0,0,0.616928100585938,0,0,0,0,0,0,0,0,0,-7.93616485595703,0,0.976783752441406,0,0,0,0,0,0.841438293457031,0,0,0,0,0,0,0.497283935546875,0,0,0,0,0,0.490615844726562,0,0,0,0,0,0.987113952636719,0,0.487396240234375,0,0,0,0,0,0,0.487113952636719,0,0.464309692382812,0,0,0,0,0.488449096679688,0,0,0,0,0,0,0.452766418457031,0,0.436622619628906,0,0,0,0,0,0,0.484092712402344,0,0,0,0,0,0,0,0,0,0,0.456306457519531,0,0,0,0,0,0,0.473068237304688,0,0,0,0,0,0,-7.94715118408203,0,0,0,0,0,0,0,0.56884765625,0,0,0,0,0.532600402832031,0,0,0,0,0.474571228027344,0,0,0,0,0,0.46929931640625,0,0,0,0,0,0.531379699707031,0,0,0,0,0,0,0,0.508064270019531,0,0,0,0,0.685127258300781,0,0,0,0,0,0,0,0.914512634277344,0,0.919059753417969,0,0,0,0,0,0.595779418945312,0,0,0,0,0,0,0.874610900878906,0,0,0,0,0,0.808670043945312,0,0,0,0,0,-7.92327880859375,0,0,0,0,0.986465454101562,0,0,0,0,0,0.986648559570312,0,0,0,0,0,0,0,0,0,0,0,0,0.724037170410156,0,0,0,0,0.533683776855469,0,0,0,0,0,0,0,0,0.571075439453125,0,0,0.802482604980469,0,0,0,0,0,0.603950500488281,0,0,0,0,0,0,0,0.940223693847656,0,0,0.786994934082031,0,0,0,0,0,0,0,0,0,0.503814697265625,0,0,0,0,0,0,0,0,0,0.471000671386719,0,-7.78143310546875,0,0,0.809112548828125,0,0,0,0,0,0,0,0,0.729438781738281,0,0,0,0,0,0,0.859901428222656,0,0,0,0,0.78521728515625,0,0,0,0,0,0,0.909889221191406,0,0,0,0,0,0,0,0,0.702598571777344,0,0,0,0,0,0,0.852745056152344,0,0,0,0,0,0,0,0,0.755126953125,0,0,0,0,0,0,0.519386291503906,0,0,0,0,0,0,0,0.534652709960938,0,0,0,0,0,0,0,0.533920288085938,0,0,0,0,0,0,0,0,0,0,0,0,0,-7.79518127441406,0,0,0,0.516159057617188,0,0.511688232421875,0,0,0,0,0,0,0.797775268554688,0,0,0,0.802001953125,0,0,0,0,0,0.540115356445312,0,0,0,0,0,0,0,0.977310180664062,0,0,0,0,0,0,0,0.495140075683594,0,0.487052917480469,0,0,0,0,0,0,0,0,0,0.8067626953125,0,0,0,0,0,0,0.510185241699219,0,0.495628356933594,0,0,0,0,0,0,0,0,0.510078430175781,0,-7.89084625244141,0,0,0,0,0.554023742675781,0,0,0,0,0,0,0,0.588127136230469,0,0,0,0,0,0.535697937011719,0,0,0,0,0,0.573738098144531,0,0,0,0,0,0,0.921218872070312,0,0,0,0,0.785171508789062,0,0,0,0,0.839080810546875,0,0,0,0.475555419921875,0,0,0,0,0,0,0.968490600585938,0,0,0,0,0,0,0,0.606201171875,0,0,0,0,0,0,0,0.980636596679688,0,0,0,0,0,0,0,0,0,0,0,0,0,-7.41659545898438,0,0,0,0,0,0,0.482063293457031,0,0,0,0,0.84130859375,0,0.499679565429688,0,0,0,0,0.60986328125,0,0,0,0,0,0,0,0,0,0,0,0.702011108398438,0,0,0,0,0,0,0.641166687011719,0,0,0,0,0,0,0,0,0,0.998985290527344,0,0.610870361328125,0,0,0,0,0,0.529624938964844,0,0,0,0,0.987991333007812,0,0,0,0,0,0,0,0,0,0,0.488082885742188,0,0,0,0,0,0,0,-7.78905487060547,0,0,0,0,0.875617980957031,0,0,0,0,0,0,0.501976013183594,0,0,0,0,0,0.970779418945312,0,0,0,0,0,0.536727905273438,0,0,0,0,0,0,0.991470336914062,0,0,0,0,0,0.493545532226562,0,0,0,0,0.994819641113281,0,0,0,0,0.669960021972656,0,0.475799560546875,0,0,0,0,0,0,0,0,0.481643676757812,0,0,0,0,0,0,0,0,0.957649230957031,0,0,0,0.28424072265625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-8.35762786865234,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.444892883300781,0,0.933700561523438,0,0,0,0,0,0,0,0,0.823089599609375,0,0,0,0,0,0,0,0.828804016113281,0,0,0,0,0,0.778282165527344,0,0,0,0,0,0,0,0,0,0.699310302734375,0,0,0,0.487442016601562,0,0,0,0,0,0,0.491317749023438,0,0.972412109375,0,0,1.00136566162109,0,0,0,0,0,0,0,0,0.483818054199219,0,0,0,0,0,0,0,0,-7.91803741455078,0,0,0,0,0,0,0.561927795410156,0,0,0,0,0,0,0.510246276855469,0,0,0,0,0,0.769866943359375,0,0,0,0,0,0,0.498970031738281,0,0.494125366210938,0,0,0,0,0,0,0,0,0,0,0.998634338378906,0,0,0,0,0,0,0,0.590621948242188,0,0,0,0,0.767921447753906,0,0,0,0,0.858139038085938,0,0,0,0,0,0,0,0,0.590133666992188,0,0,0,0,0,0,0.498641967773438,0,0,0,0,0,0,0.30316162109375,0,0,0,0,0,0,0,0,0,0.807853698730469,0,0,0,0,0,0,0,0,-7.78338623046875,0,0,0,0,0,0,0,0.625068664550781,0,0,0,0,0,0,0.50146484375,0,0,0,0,0,0,0,0.586257934570312,0,0,0,0,0,0,0,0,0.84576416015625,0,0,0,0,0.977005004882812,0,0,0,0,0,0,0.498786926269531,0,0,0,0,0,0,0,0.973655700683594,0,0,0,0,0.485588073730469,0,0,0,0,0,0,0,0,0,0,0,0.628875732421875,0,0,0,0,0,0.501876831054688,0,0,0,0,0,0,0,0.5321044921875,0,0.5074462890625,0,0,0,0,0,0,0,0,0,-7.79091644287109,0,0,0,0,0,0,0,0,0,0,0,0.624404907226562,0,0,0,0,0,0,0,0.633888244628906,0,0,0,0,0,0,0.638633728027344,0,0,0,0.5013427734375,0,0,0,0,0,0.802719116210938,0,0,0,0,0,0,1.01012420654297,0,0.501663208007812,0,0,0,0,0,0.990737915039062,0,0,0,0,0,0,1.00322723388672,0,0,0,0,0,0,0.673042297363281,0,0,0,0,0,0,0,0,-7.58267211914062,0,0,0,0,0,0,0,0.718009948730469,0,0,0,0,0,0,0.564643859863281,0,0,0,0,0.506195068359375,0,0,0,1.00421142578125,0,0,0,0,0,0.501083374023438,0,0,0,0,0.502388000488281,0,0,0,0,0.491279602050781,0,0,0,0,0,0.534568786621094,0,0,0,0,0,0,0,0,0.653923034667969,0,0,0,0,0,0,0.637886047363281,0,0,0,0,0,0,0,0.485481262207031,0,0,0,0,0,0,0,0.48846435546875,0,0,0,0,0,0,0,0,0,0,0,0,0.976432800292969,0,0,-7.89958190917969,0,0.492790222167969,0,0,0,0,0,0,0,0,0.816070556640625,0,0.497451782226562,0,0,0,0,0.983024597167969,0,0,0,0,0,0,0,0.657463073730469,0,0.979385375976562,0,0,0,0,0,0.955429077148438,0,0,0,0,0,0,0,0,0,0.501335144042969,0,0,0,0,0,0,0,0,0,0.640251159667969,0,0,0,0,0,0,0.491767883300781,0,0,0,0.79632568359375,0,0,0,0,0,-7.90502166748047,0,0,0,0,0.992912292480469,0,0,0.988212585449219,0,0,0,0,0,0,0,0,0.991203308105469,0,0.501876831054688,0,0,0,0,0,0,0.468299865722656,0,0,0,0,0.602767944335938,0,0,0,0,0,0,0,0,0.589118957519531,0,0,0,0,0,0,0,0,0,0.987663269042969,0,0,0,0,0,0.592903137207031,0,0,0,0,0,0,0,0,0.553657531738281,0,0,0,0,0,0,0,0.678482055664062,0,0,0,0,0,0,0,0,0,-7.70113372802734,0,0,0,0,0,0.795921325683594,0,0,0,0,0,0,0.99749755859375,0,0,0,0,0,0,0,0,0,0,0.491874694824219,0,0,0,0,0,0,0,0,0.532341003417969,0,0.517745971679688,0,0.687446594238281,0,0,0,0,0.552688598632812,0,0,0,0,0,0,0,0,0,0.553550720214844,0,0,0,0,0,0.904586791992188,0,0.609466552734375,0,0,0,0,0,0,0,0,0,0,0,0.495964050292969,0,0,0,0,0.53631591796875,0,-7.8956298828125,0,0,0,0,0,0,0,0,0.707122802734375,0,0,0,0,0,0,0,0,0.518356323242188,0,0.49774169921875,0,0,0,0,0,0.505966186523438,0,0,0,0,0,0,0,0.5384521484375,0,0.544654846191406,0,0,0,0,0,0,0.727615356445312,0,0,0,0,0.677322387695312,0,0,0,0,0,0,0,0,0,0.998779296875,0,0,0,0,0.594955444335938,0,0,0,0,0,0,0,0,0.820297241210938,0,0,0,0,0,0,0,0.564781188964844,0,0,0,0,0,0,-7.86723327636719,0,0,0,0,0,0,0,0.503395080566406,0,0,0,0,0,0.497886657714844,0,0,0,0,0,0,0.801292419433594,0,0,0,0,0.996070861816406,0,0,0,0,0,0,0,0.512481689453125,0,0,0,0,0.454734802246094,0,0,0,0,0,0,0,0,0,0.470733642578125,0,0.549674987792969,0,0,0,0.505332946777344,0,0,0,0,0,0,0,0.802886962890625,0,0,0,0,0,0,0.840766906738281,0,0,0,0,0,0,0,0.804862976074219,0,0,0,0,0,0,0,0.472770690917969,0,0,0,0,0,0,0,0,-7.75979614257812,0,0,0,0,0,0,0.485481262207031,0,0,0,0,0,0,0,0.868179321289062,0,0,0,0,0.811531066894531,0,0.584213256835938,0,0,0,0,0,0,0,0.557937622070312,0,0,0,0,0,0,0,0.490036010742188,0,0,0,0,0,0.809822082519531,0,0,0,0.707130432128906,0,0,0,0,0.605758666992188,0,0,0,0,0,0,0,0,0.50006103515625,0,0,0,0,0,0,0,0.651695251464844,0,0,0,0,0,0,0.642539978027344,0,0,0,0,0,0,0,0,0,-7.85692596435547,0,0.571701049804688,0,0,0,0,0,0,0.569694519042969,0,0,0,0,0,0,0,0.517715454101562,0,0,0,0,0,0,0,0,0.557090759277344,0,0,0,0,0,0,0,0,0,0,0,0.515266418457031,0,0,0,0,0,0,0,0,0,0,0.500984191894531,0,0,0,0,0,0,0.523933410644531,0,0,0,0,0,0,0.643501281738281,0,0,0,0,0.920143127441406,0,0,0,0,0,0,0,0.653472900390625,0,0,0.494972229003906,0,0,0,0,0.609733581542969,0,0,0,0,0,0,0,0.529121398925781,0,0,0,0,-7.74805450439453,0,0.550209045410156,0,0,0,0.489028930664062,0,0,0,0,0.616889953613281,0,0,0,0.556785583496094,0,0,0,0,0,0,0,0.486061096191406,0,0,0,0.601234436035156,0,0.487380981445312,0,0,0,0,0,0.557510375976562,0,0.470848083496094,0,0,0,0,0,0,0.492660522460938,0,0,0,0,0,0,0.513145446777344,0,0,0,0,0,0,0,0.494987487792969,0,0.585731506347656,0,0,0,0,0,0,0,0.685958862304688,0,0,0,0.465858459472656,0,0,0,0,0,0,-7.720703125,0,0,0,0,0,0,0.979469299316406,0,0,0,0,0,0,0,0.660873413085938,0,0,0,0,0,0,0.470626831054688,0,0,0,0,0.803398132324219,0,0,0,0,0.825881958007812,0,0,0,0,0,0.804023742675781,0,0,0,0,0,0.818862915039062,0,0,0.819358825683594,0,0,0,0,0,0,0,0.836189270019531,0,0,0,0,0.488426208496094,0,0,0,-7.64406585693359,0,0,0,0,0,0,0,0.496360778808594,0,0.725028991699219,0,0,0,0,0,0,0.986640930175781,0,0,0,0,0.536849975585938,0,0.570022583007812,0,0,0],&#34;filename&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},&#34;interval&#34;:10,&#34;files&#34;:[],&#34;prof_output&#34;:&#34;/var/folders/f3/t51slq3x2dlfgk3ksp7vddzm0000gq/T//RtmpA9fvPr/file179b68c8425f.prof&#34;,&#34;highlight&#34;:{&#34;output&#34;:[&#34;^output\\$&#34;],&#34;gc&#34;:[&#34;^&lt;GC&gt;$&#34;],&#34;stacktrace&#34;:[&#34;^\\.\\.stacktraceo(n|ff)\\.\\.$&#34;]},&#34;split&#34;:&#34;h&#34;}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;div id=&#34;htmlwidget-4&#34; style=&#34;width:100%;height:600px;&#34; class=&#34;profvis html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-4&#34;&gt;{&#34;x&#34;:{&#34;message&#34;:{&#34;prof&#34;:{&#34;time&#34;:[1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11],&#34;depth&#34;:[8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1],&#34;label&#34;:[&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;rlang::is_formula&#34;,&#34;sum&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;],&#34;filenum&#34;:[null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null],&#34;linenum&#34;:[null,null,null,3,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,3,null,null,null,null],&#34;memalloc&#34;:[30.741584777832,30.741584777832,30.741584777832,30.741584777832,30.741584777832,30.741584777832,30.741584777832,30.741584777832,36.5275955200195,36.5275955200195,36.5275955200195,36.5275955200195,36.5275955200195,36.5275955200195,36.5275955200195,42.4114990234375,42.4114990234375,42.4114990234375,42.4114990234375,42.4114990234375,42.4114990234375,42.4114990234375,42.4114990234375,51.2972259521484,51.2972259521484,51.2972259521484,51.2972259521484,51.2972259521484,51.2972259521484,51.2972259521484,51.2972259521484,61.113883972168,61.113883972168,61.113883972168,61.113883972168,61.113883972168,61.113883972168,61.113883972168,61.113883972168,30.10888671875,30.10888671875,30.10888671875,30.10888671875,30.10888671875,30.10888671875,30.10888671875,30.10888671875,30.10888671875,35.0400238037109,35.0400238037109,35.0400238037109,35.0400238037109,35.0400238037109,35.0400238037109,35.0400238037109,35.0400238037109,41.1032257080078,41.1032257080078,41.1032257080078,41.1032257080078,41.1032257080078,41.1032257080078,41.1032257080078,41.1032257080078,51.4042358398438,51.4042358398438,51.4042358398438,51.4042358398438,51.4042358398438,51.4042358398438,51.4042358398438,51.4042358398438,62.95166015625,62.95166015625,62.95166015625,62.95166015625,62.95166015625,62.95166015625,62.95166015625,62.95166015625,35.2925720214844,35.2925720214844,35.2925720214844,35.2925720214844,35.2925720214844,35.2925720214844,35.2925720214844],&#34;meminc&#34;:[0,0,0,0,0,0,0,0,5.7860107421875,0,0,0,0,0,0,5.88390350341797,0,0,0,0,0,0,0,8.88572692871094,0,0,0,0,0,0,0,9.81665802001953,0,0,0,0,0,0,0,-31.004997253418,0,0,0,0,0,0,0,0,4.93113708496094,0,0,0,0,0,0,0,6.06320190429688,0,0,0,0,0,0,0,10.3010101318359,0,0,0,0,0,0,0,11.5474243164062,0,0,0,0,0,0,0,-27.6590881347656,0,0,0,0,0,0],&#34;filename&#34;:[null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null]},&#34;interval&#34;:10,&#34;files&#34;:[{&#34;filename&#34;:&#34;&lt;expr&gt;&#34;,&#34;content&#34;:&#34;set.seed(2009)\nprofvis({\n    NullDistFSNDR_mw &lt;- fastSimNullDistRMean(total_bill ~ time, data=tips)\n})&#34;,&#34;normpath&#34;:&#34;&lt;expr&gt;&#34;}],&#34;prof_output&#34;:&#34;/var/folders/f3/t51slq3x2dlfgk3ksp7vddzm0000gq/T//RtmpA9fvPr/file179b7cc268c9.prof&#34;,&#34;highlight&#34;:{&#34;output&#34;:[&#34;^output\\$&#34;],&#34;gc&#34;:[&#34;^&lt;GC&gt;$&#34;],&#34;stacktrace&#34;:[&#34;^\\.\\.stacktraceo(n|ff)\\.\\.$&#34;]},&#34;split&#34;:&#34;h&#34;}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Das mit den beiden Routinen aus FastSimNullDistR die gleichen Ergebnisse zu erwarten sind, sie also ein “(quasi-)drop-in-replacements” der Mosaic Routinen darstellen, kann man an den folgenden QQ-Plots erkennen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df.diffprop &amp;lt;- data_frame(diffprop = c(NullDistFSNDR_aw$diffprop,
    NullDistMosaic_aw$diffprop), type = c(rep(&amp;quot;FSNDR&amp;quot;, 10000),
    rep(&amp;quot;mosaic&amp;quot;, 10000)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: `data_frame()` was deprecated in tibble 1.1.0.
## Please use `tibble()` instead.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_qq(~diffprop, color = ~type, data = df.diffprop)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-05-02-ein-wenig-schneller-zur-simulierten-nullverteilung_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df.diffmean &amp;lt;- data_frame(diffmean = c(NullDistFSNDR_mw$diffmean,
    NullDistMosaic_mw$diffmean), type = c(rep(&amp;quot;FSNDR&amp;quot;, 10000),
    rep(&amp;quot;mosaic&amp;quot;, 10000)))
gf_qq(~diffmean, color = ~type, data = df.diffmean)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-05-02-ein-wenig-schneller-zur-simulierten-nullverteilung_files/figure-html/unnamed-chunk-15-2.png&#34; width=&#34;672&#34; /&gt;
# qqplot(NullDistFSNDR_aw&lt;span class=&#34;math inline&#34;&gt;\(diffprop, NullDistMosaic_aw\)&lt;/span&gt;diffprop)
gf_qq(FSNDR ~ Mosaic, data=df)
# qqplot(NullDistFSNDR_mw&lt;span class=&#34;math inline&#34;&gt;\(diffmean, NullDistMosaic_mw\)&lt;/span&gt;diffmean)
gf_qq(NullDistFSNDR_mw&lt;span class=&#34;math inline&#34;&gt;\(diffmean ~ NullDistMosaic_mw\)&lt;/span&gt;diffmean)
```&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;woher-kommt-die-geschwindigkeit&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Woher kommt die Geschwindigkeit?&lt;/h2&gt;
&lt;p&gt;Schaut man sich den Quellcode von Mosaic an, wird einem schnell klar, dass es zwar didaktisch sinnvoll ist die unabhängige Variable mit &lt;code&gt;shuffle()&lt;/code&gt; zu bearbeiten, nicht aber programmiertechnisch. Und wenn, dann nicht in dem man die ganze Datenzeile für die Berechnung kopiert. Statt also &lt;span class=&#34;math inline&#34;&gt;\(10\,000\)&lt;/span&gt; mal die ganzen Daten im Speicher zu kopieren wäre es doch sinnvoller mit Hilfe eines Index auf die unveränderten Daten zuzugreifen. Und genau das machen die zwei Routinen. Es wird also nur dieser Zugriffsindex wird &lt;em&gt;geshuffelt&lt;/em&gt; und das spart Speicherplatz und deutlich auch Rechenzeit.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Nur ein wenig lineare Regression</title>
      <link>https://sefiroth.net/nab/post/nur-ein-wenig-lineare-regression/</link>
      <pubDate>Mon, 08 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/nur-ein-wenig-lineare-regression/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Der &lt;em&gt;tipping&lt;/em&gt; Datensatz wird oft analysiert. Das Verhältnis von Trinkgeld (&lt;em&gt;tip&lt;/em&gt;) und Rechnungsbetrag (&lt;em&gt;total_bill&lt;/em&gt;) steht dabei im Vordergrund einer lineare Regressionsanalyse.
So auch hier. Wir wollen die einzelnen Angaben von &lt;strong&gt;R&lt;/strong&gt; dabei in den Fokus rücken und einmal Hinterfragen, was wir bei der Ausgabe von &lt;strong&gt;R&lt;/strong&gt; eigentlich genau sehen, woher es kommt und wie man es interpretieren kann.&lt;/p&gt;
&lt;p&gt;Zunächst laden wir dazu die &lt;strong&gt;tipping&lt;/strong&gt; Daten mittels&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mosaic)
download.file(&amp;quot;https://goo.gl/whKjnl&amp;quot;, destfile = &amp;quot;tips.csv&amp;quot;)
tips &amp;lt;- read.csv2(&amp;quot;tips.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in den Arbeitsspeicher.&lt;/p&gt;
&lt;p&gt;Eine lineares Modell wird schnell mit&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;linMod &amp;lt;- lm(tip ~ total_bill, data = tips)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;erstellt.
Betrachten wir die Zusammenfassung:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(linMod)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = tip ~ total_bill, data = tips)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -3.1982 -0.5652 -0.0974  0.4863  3.7434 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept) 0.920270   0.159735   5.761 2.53e-08 ***
## total_bill  0.105025   0.007365  14.260  &amp;lt; 2e-16 ***
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 1.022 on 242 degrees of freedom
## Multiple R-squared:  0.4566, Adjusted R-squared:  0.4544 
## F-statistic: 203.4 on 1 and 242 DF,  p-value: &amp;lt; 2.2e-16&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Die zentrale Frage bei einer linearen Regression ist, finden wir einen linearen Zusammenhang in unserer Stichprobe, den wir auf die Population (als die Grundgesamtheit) übertragen können.&lt;/p&gt;
&lt;p&gt;Die Spalte &lt;strong&gt;Estimate&lt;/strong&gt; im Abschnitt &lt;strong&gt;Coefficients&lt;/strong&gt; liefert uns in unser Stichprobe einen möglichen linearen Zusammenhang gemäß&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\hat{y}_{\text{tip}} = \hat{\beta}_{\text{0}} + \hat{\beta}_{\text{total_bill}} \cdot x_{\text{total_bill}},\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;mit den &lt;em&gt;Regressionskoeffizienten&lt;/em&gt; &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}_0=0.9202696\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}_{\text{total_bill}}=0.1050245\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Graphisch ergibt sich damit das Modell wie folgt:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Statt plotModel(linMod) besser:
mypanel &amp;lt;- function(x, y) {
    # Scatterplot:
    panel.xyplot(x, y, col = &amp;quot;darkgreen&amp;quot;) 
    # Regressionsgerade:
    panel.abline(linMod, col = &amp;quot;red&amp;quot;, lwd = 1.2, lty = 2)
}
xyplot(
    tip ~ total_bill, data = tips, 
    panel = mypanel,
    main  = &amp;quot;Streudiagramm der Trinkgelder&amp;quot;,
    ylab  = &amp;quot;Trinkgeld&amp;quot;,
    xlab  = &amp;quot;Rechnungsbetrag&amp;quot;,
    key = list(
            space = &amp;quot;bottom&amp;quot;, padding.text = 8,
            lines = list(col = c(&amp;quot;red&amp;quot;), lty = c(2), lwd = 1.2),
            text = list(c(&amp;quot;Regressionsgerade&amp;quot;))
          )
     )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-01-08-nur-ein-wenig-lineare-regression_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Was hat es mit dem y-Achsenabschnitt &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}_0\)&lt;/span&gt; auf sich?&lt;/p&gt;
&lt;p&gt;Ist es etwa eine Art &lt;em&gt;Grundtrinkgeld&lt;/em&gt;, mit dem der Kellern rechnen kann, auch wenn der Kunde gar nichts bestellt?&lt;/p&gt;
&lt;p&gt;Nun ja, es so etwas in der Art, aber eben ein rein fiktiver Wert, der durch die Konstruktion der Parameter entsteht.
Eine (affin-)lineare Gerade geht nun einmal irgendwann durch die y-Achse (wenn sie nicht parallel dazu ist) und es kann passieren, dass eine sinnvolle Interpretation nicht so ohne weiteres möglich ist.&lt;/p&gt;
&lt;p&gt;Wir können aber dieses &lt;em&gt;Grundtrinkgeld&lt;/em&gt; heraus nehmen und den y-Achsenabschnitt auf Null setzen. Dazu ziehen wir &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}_0\)&lt;/span&gt; einfach von alle Trinkgeldern ab. Wir erhalten quasi nur noch den &lt;em&gt;Trinkgeldzuwach&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;beta_0 &amp;lt;- coef(linMod)[&amp;quot;(Intercept)&amp;quot;]  # Grundtrinkgeld
tips$delta_tip &amp;lt;- tips$tip - beta_0    # wird abgezogen&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vergleichen wir das alte lineare Modell mit dem neuen Modell (&lt;em&gt;linModDelta&lt;/em&gt;):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;linModDelta &amp;lt;- lm(delta_tip ~ total_bill, data = tips)
summary(linModDelta)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = delta_tip ~ total_bill, data = tips)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -3.1982 -0.5652 -0.0974  0.4863  3.7434 
## 
## Coefficients:
##               Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept) -4.549e-15  1.597e-01    0.00        1    
## total_bill   1.050e-01  7.365e-03   14.26   &amp;lt;2e-16 ***
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 1.022 on 242 degrees of freedom
## Multiple R-squared:  0.4566, Adjusted R-squared:  0.4544 
## F-statistic: 203.4 on 1 and 242 DF,  p-value: &amp;lt; 2.2e-16&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In diesem Modell ist der Wert für den y-Achsenabschnitt numerisch gleich 0. – Ja, da mag zwar &lt;span class=&#34;math inline&#34;&gt;\(-4.5487837\times 10^{-15}\)&lt;/span&gt; stehen, jedoch sind so kleine Werte der jedem Rechner inne wohnenden Ungenauigkeit in der Gleitkomma-Arithmetik geschuldet und ist faktisch gleich 0.&lt;/p&gt;
&lt;p&gt;Der Wert für die Steigung lautet weiterhin &lt;span class=&#34;math inline&#34;&gt;\(0.1050245\)&lt;/span&gt;.
Das war auch zu erwarten, denn wir haben unsere Regressionsgerade eigentlich nur um &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}_0\)&lt;/span&gt; nach unten verschoben. (Der Fachmann spricht von einer Translation (Parallelverschiebung)&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; um &lt;span class=&#34;math inline&#34;&gt;\(-\hat{\beta}_0\)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Statt plotModel(linModDelta) besser:
mypanel &amp;lt;- function(x, y) {
    # Scatterplot:
    panel.xyplot(x, y, col = &amp;quot;darkgreen&amp;quot;) 
    # Regressionsgerade:
    panel.abline(linModDelta, col = &amp;quot;red&amp;quot;, lwd = 1.2, lty = 2)
}
xyplot(
    delta_tip ~ total_bill, data=tips, 
    panel = mypanel,
    main  = &amp;quot;Streudiagramm der Delta Trinkgelder&amp;quot;,
    ylab  = &amp;quot;Delta Trinkgeld&amp;quot;,
    xlab  = &amp;quot;Rechnungsbetrag&amp;quot;,
    key = list(
            space=&amp;quot;bottom&amp;quot;, padding.text=8,
            lines=list(col=c(&amp;quot;red&amp;quot;), lty=c(2), lwd=1.2),
            text=list(c(&amp;quot;Regressionsgerade&amp;quot;)))
     )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-01-08-nur-ein-wenig-lineare-regression_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Vergleichen wir die beiden Zusammenfassungen, so stellen wir fest das sich mit Ausnahme der &lt;em&gt;[Intercept]&lt;/em&gt; Zeile praktisch nichts geändert hat. Das ist kein Wunder, sondern Absicht!&lt;/p&gt;
&lt;p&gt;Die Regressionsgerade stellt für unsere Stichprobe die Gerade mit dem geringsten Fehler an den Datenpunkten dar. Mathematisch heißt das folgendes:&lt;/p&gt;
&lt;p&gt;An den &lt;span class=&#34;math inline&#34;&gt;\(n=244\)&lt;/span&gt; Datenpunkten unserer Stichprobe &lt;span class=&#34;math inline&#34;&gt;\((x_i, y_i)=(tips\$total\_bill[i], tips\$tip[i])\)&lt;/span&gt; [für &lt;span class=&#34;math inline&#34;&gt;\((i=1, \dots, n)\)&lt;/span&gt;] sind die &lt;em&gt;Residuen&lt;/em&gt;, also die &lt;em&gt;Fehlerterme&lt;/em&gt;,&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
 \hat{e}_i =\hat{y}_i - y_i = \left[\hat{\beta}_{\text{0}} + \hat{\beta}_{\text{total_bill}} \cdot x_i\right] - y_i
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;durch die verwendete &lt;em&gt;Methode der kleinsten Quadrate&lt;/em&gt;&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; &lt;em&gt;quadratisch minimal&lt;/em&gt;. Kurz:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    \sum_{i=1}^n (\hat{e}_i)^2 \text{ ist minimal!}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir können diese Fehlerterme graphisch ansehen um die Varianz der Residuen zu sehen.
Dazu ziehen wir von allen Datenpunkten &lt;span class=&#34;math inline&#34;&gt;\(y_i\)&lt;/span&gt; den geschätzten Wert &lt;span class=&#34;math inline&#34;&gt;\(\hat{y}_i\)&lt;/span&gt; ab und erstellen ein neues lineares Modell:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;beta_total_bill &amp;lt;- coef(linModDelta)[&amp;quot;total_bill&amp;quot;]
tips$error_tip &amp;lt;- (tips$tip - beta_0 - beta_total_bill * tips$total_bill)
linModError &amp;lt;- lm(error_tip ~ total_bill, data = tips)
summary(linModError)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = error_tip ~ total_bill, data = tips)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -3.1982 -0.5652 -0.0974  0.4863  3.7434 
## 
## Coefficients:
##               Estimate Std. Error t value Pr(&amp;gt;|t|)
## (Intercept)  1.900e-15  1.597e-01       0        1
## total_bill  -8.740e-17  7.365e-03       0        1
## 
## Residual standard error: 1.022 on 242 degrees of freedom
## Multiple R-squared:  6.665e-31,  Adjusted R-squared:  -0.004132 
## F-statistic: 1.613e-28 on 1 and 242 DF,  p-value: 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also Diagramm sieht es dann so aus:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Statt plotModel(linModError) besser:
mypanel &amp;lt;- function(x, y) {
    # Scatterplot:
    panel.xyplot(x, y, col = &amp;quot;darkgreen&amp;quot;) 
    # Regressionsgerade:
    panel.abline(linModError, col = &amp;quot;red&amp;quot;, lwd = 1.2, lty = 2)
}
xyplot(
    error_tip ~ total_bill, data = tips, 
    panel = mypanel,
    main  = &amp;quot;Streudiagramm der Residuen&amp;quot;,
    ylab  = &amp;quot;Residuen&amp;quot;,
    xlab  = &amp;quot;Rechnungsbetrag&amp;quot;,
    key = list(
            space = &amp;quot;bottom&amp;quot;, rows = 3, padding.text = 8,
            lines = list(col=c(&amp;quot;red&amp;quot;), lty = c(2), lwd = 1.2),
            text = list(c(&amp;quot;Regressionsgerade / x-Achse&amp;quot;))
          )
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-01-08-nur-ein-wenig-lineare-regression_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Wir können die Graphik im wesentlichen auch einfacher über den Befehl&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;xyplot(residuals(linMod) ~ fitted(linMod))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-01-08-nur-ein-wenig-lineare-regression_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;erhalten.&lt;/p&gt;
&lt;p&gt;Betrachten wir kurz nur die Residuen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;favstats(~residuals(linMod))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        min         Q1      median        Q3      max          mean       sd   n
##  -3.198225 -0.5651615 -0.09744499 0.4863111 3.743435 -2.022281e-17 1.019943 244
##  missing
##        0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wir sehe, dass wir in der Zusammenfassung immer genau diese Werte unter dem Abschnitt &lt;em&gt;Residuals&lt;/em&gt; gefunden haben. Minimum, das 1. Quantil, der Median, das 3. Quantil und das Maximum stimmen überein.&lt;/p&gt;
&lt;p&gt;Der erwartungstreue und unverzerrte Schätzer für den Standardfehler der Residuen, lautet&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{align*}
    SE_{\text{Residuen}} &amp;amp;= \sqrt{\frac{1}{n-2} \cdot \sum_{i=1}^n (\hat{e_i})^2} = \sqrt{\frac{n-1}{n-2} \cdot \frac{1}{n-1} \cdot \sum_{i=1}^n (\hat{e_i})^2} \\
                         &amp;amp;= \sqrt{\frac{n-1}{n-2}} \cdot \sqrt{\frac{1}{n-1} \cdot \sum_{i=1}^n (\hat{e_i})^2} \\
                         &amp;amp;= \sqrt{\frac{n-1}{n-2}} \cdot s_{\text{Residuen}}
\end{align*}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Also finden wir den Wert &lt;em&gt;Residual standard error&lt;/em&gt; aus der Zeile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Residual standard error: 1.022 on 242 degrees of freedom&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in dem wir den in den &lt;em&gt;favstats&lt;/em&gt; gefundenen Wert für die Standardabweichung entsprechen korrigieren:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    SE_{\text{Residuen}} = \sqrt{\frac{n-1}{n-2}} \cdot s_{\text{Residuen}} = \sqrt{\frac{243}{242}} \cdot 1.0199426 = 1.0220477
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Der Median der Residuen ist nicht gleich Null, wie der Mittelwert. (Welcher auch hier als numerisch Null interpretiert werden muss!)
Es könnte also eine linkssteile, rechtsschiefe Verteilung der Residuen vorliegen.
Betrachten wir dazu das Histogramm:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;histogram(~residuals(linMod), nint = 19)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-01-08-nur-ein-wenig-lineare-regression_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Schon beim ersten Blick auf das Histogramm kann an eine Normalverteilung der Residuen nicht mehr so ganz geglaubt werden.&lt;/p&gt;
&lt;p&gt;Ein Shapiro-Wilk-Test&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; hat als Nullhypothese die Annahme, dass die Daten normalverteilt sind!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;shapiro.test(residuals(linMod))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Shapiro-Wilk normality test
## 
## data:  residuals(linMod)
## W = 0.96728, p-value = 2.171e-05&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Davon ist nach dem Ergebnis eben sowenig auszugehen, wie nach einem Blick auf das QQ-Normal-Diagramm:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qqnorm(residuals(linMod), col = &amp;quot;darkgreen&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-01-08-nur-ein-wenig-lineare-regression_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Ein K.O.-Kriterium für gute Prognosen.&lt;/p&gt;
&lt;p&gt;Wie gut aber beschreibt unsere Regressionsgerade die Daten?&lt;/p&gt;
&lt;p&gt;Als Maß dafür können wir das Bestimmtheitsmaß nehmen.&lt;/p&gt;
&lt;p&gt;Ein kurzer Blick auf die Situation, der Mittelwert der Trinkgelder ist&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    \bar{y} =  \frac{1}{n} \cdot \sum_{i=1}^n y_i = 2.9982787.
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir erhalten so folgendes Diagramm:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mypanel &amp;lt;- function(x, y) {
    panel.xyplot(x, y)
    panel.abline(h = mean(y), lwd = 1.2, lty = 2, col = &amp;quot;darkgreen&amp;quot;)
    panel.lmline(x, y, col = &amp;quot;red&amp;quot;, lwd = 1.2, lty = 2)
}
xyplot(
    tip ~ total_bill, data = tips, 
    panel = mypanel,
    main  = &amp;quot;Streudiagramm der Trinkgelder&amp;quot;,
    ylab  = &amp;quot;Trinkgeld&amp;quot;,
    xlab  = &amp;quot;Rechnungsbetrag&amp;quot;,
    key = list(
            space = &amp;quot;bottom&amp;quot;,
            padding.text = 8,
            columns = 2,
            just = c(&amp;quot;center&amp;quot;, &amp;quot;bottom&amp;quot;),
            lines = list(col = c(&amp;quot;darkgreen&amp;quot;, &amp;quot;red&amp;quot;), lty = c(2, 2), lwd = 1.2),
            text = list(c(expression(bar(y)), expression(hat(beta)[0]+hat(beta)[total_bill] * x[total_bill]))),
            text = list(c(&amp;quot;Mittelwert Trinkgeld&amp;quot;, &amp;quot;Regressionsgerade&amp;quot;))
    )
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-01-08-nur-ein-wenig-lineare-regression_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Die Varianz &lt;span class=&#34;math inline&#34;&gt;\(s^2_{y_i}=1.9144546\)&lt;/span&gt; beschreibt die mittlere quadratische Abweichung der Datenpunkte &lt;span class=&#34;math inline&#34;&gt;\(y_i\)&lt;/span&gt; vom Mittelwert &lt;span class=&#34;math inline&#34;&gt;\(\bar{y}\)&lt;/span&gt;.
Diese Varianz lässt sich Zerlegen in einen Anteil, der durch die Regressionsgerade &lt;em&gt;erklärt&lt;/em&gt; wird und in einen Anteil, der durch die Regressionsgerade &lt;em&gt;nicht erklärt&lt;/em&gt; wird.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    s^2_{y_i} = s^2_{\hat{y}_i} + s^2_{\hat{e}_i}
\]&lt;/span&gt;
Dividiert man beider Seiten durch die Varianz &lt;span class=&#34;math inline&#34;&gt;\(s^2_{y_i}\)&lt;/span&gt;, so normiert man den Ausdruck und kann den Faktor &lt;span class=&#34;math inline&#34;&gt;\(\frac{1}{n-1}\)&lt;/span&gt; (bzw. &lt;span class=&#34;math inline&#34;&gt;\(\frac{1}{n}\)&lt;/span&gt;) herauskürzen. Es bleibt dann:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    1 = \frac{\sum_{i=1}^n (\bar{y}- \hat{y_i})^2}{\sum_{i=1}^n (\bar{y}-y_i)^2} + \frac{\sum_{i=1}^n (\hat{e_i})^2}{\sum_{i=1}^n (\bar{y}-y_i)^2}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Multipliziert man beide Seiten mit &lt;span class=&#34;math inline&#34;&gt;\(\sum_{i=1}^n (y_i)^2\)&lt;/span&gt;, so erhält man:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    \sum_{i=1}^n (\bar{y}- y_i)^2 = \sum_{i=1}^n (\bar{y}- \hat{y_i})^2+ \sum_{i=1}^n (\hat{e_i})^2 
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Zur Vereinfachung nennt man die einzelnen Summen in dem Ausdruck wie folgt:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Der erste Ausdruck heißt &lt;strong&gt;Gesamtvarianz&lt;/strong&gt; oder &lt;strong&gt;total sum of squares&lt;/strong&gt; oder kurz &lt;strong&gt;&lt;span class=&#34;math inline&#34;&gt;\(SS_T\)&lt;/span&gt;&lt;/strong&gt;, (oder &lt;strong&gt;TSS&lt;/strong&gt;) er ist die Summe der quadrierten Differenzen&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    SS_T = \sum_{i=1}^n (\bar{y}-y_i)^2
\]&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Der zweite Ausdruck heißt &lt;strong&gt;Modellvarianz&lt;/strong&gt; oder &lt;strong&gt;model sum of squares&lt;/strong&gt; oder kurz &lt;strong&gt;&lt;span class=&#34;math inline&#34;&gt;\(SS_M\)&lt;/span&gt;&lt;/strong&gt; (oder &lt;strong&gt;RSS&lt;/strong&gt;), er ist die Summe der quadrierten Differenzen aus dem Mittelwert &lt;span class=&#34;math inline&#34;&gt;\(\bar{y}\)&lt;/span&gt; und der Punkte auf der Regressionsgeraden &lt;span class=&#34;math inline&#34;&gt;\(\hat{y}_i\)&lt;/span&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    SS_M = \sum_{i=1}^n (\bar{y}-\hat{y}_i)^2
\]&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Der dritte Ausdruck heißt &lt;strong&gt;Gesamt-Verhersage-Fehler&lt;/strong&gt;, &lt;strong&gt;Fehlersteuung der Regression&lt;/strong&gt; oder &lt;strong&gt;error sum of squares&lt;/strong&gt; oder kurz &lt;span class=&#34;math inline&#34;&gt;\(SS_E\)&lt;/span&gt; (oder &lt;strong&gt;ESS&lt;/strong&gt;), er ist die Summe der quadratischen Differenz aus den Datenpunkten &lt;span class=&#34;math inline&#34;&gt;\(y_i\)&lt;/span&gt; und den Punkten der Regressionsgeraden &lt;span class=&#34;math inline&#34;&gt;\(\hat{y}_i\)&lt;/span&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    SS_E = \sum_{i=1}^n (\hat{y}_i-y_i)^2 = \sum_{i=1}^n (\hat{e}_i)^2
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir können daher auch kurz&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    SS_T = SS_M + SS_E
\]&lt;/span&gt;
schreiben und sparen uns die ganzen Summenzeichen.&lt;/p&gt;
&lt;p&gt;Die Güte einer Regression wollen wir durch den Anteil der durch das Model erklärten Varianz (also der &lt;span class=&#34;math inline&#34;&gt;\(SS_M\)&lt;/span&gt;) ausdrücken und stellen daher nach &lt;span class=&#34;math inline&#34;&gt;\(SS_M\)&lt;/span&gt; um:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    SS_M = SS_T - SS_E
\]&lt;/span&gt;
Teilen wir beide Seiten durch &lt;span class=&#34;math inline&#34;&gt;\(SS_T\)&lt;/span&gt; also der maximalen (weil totalen) Quadratsumme, so erhalten wir:
&lt;span class=&#34;math display&#34;&gt;\[
    \frac{SS_M}{SS_T} = \frac{SS_T}{SS_T} - \frac{SS_E}{SS_T} = 1 - \frac{SS_E}{SS_T}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Den Ausdruck &lt;span class=&#34;math inline&#34;&gt;\(\frac{SS_M}{SS_T}\)&lt;/span&gt; nennen wir &lt;strong&gt;Bestimmtheitsmaß&lt;/strong&gt; und schreiben dafür &lt;span class=&#34;math inline&#34;&gt;\(R^2\)&lt;/span&gt;. Es ist ein Wert zwischen 0 und 1, der den Anteil der durch das Modell beschriebenen Varianz in Bezug auf die Gesamtvarianz angibt. Kraft Definition ist &lt;span class=&#34;math inline&#34;&gt;\(R^2\)&lt;/span&gt; im eindimensionalen Fall tatsächlich das Quadrat des (Pearson-)Korrelationskoeffizienten &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt;. (M.a.W.: &lt;span class=&#34;math inline&#34;&gt;\(R^2= r^2\)&lt;/span&gt;.)&lt;/p&gt;
&lt;p&gt;In unserer Zusammenfassung des linearen Models findet sich dieser Wert auch. Und zwar unter dem Begriff:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Multiple R-squared:  0.4566, &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Es gilt ja:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    R^2 = 1 - \frac{SS_E}{SS_T} = 1 - \frac{s^2_{\hat{e}_i}}{s^2_{y_i}} = 1 - \frac{1.0402829}{1.9144546} = 0.4566166
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Der Wert&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## ..., Adjusted R-squared:  0.4544&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;erklärt sich daraus&lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;, dass das Bestimmheitsmaß um so größer wird je größer die Zahl der unabhängigen Variablen wird.
Und zwar &lt;em&gt;unabhöngig&lt;/em&gt; davon, ob weitere unabhängige Variablen wirklich einen Beitrag zur Erklärungskraft liefern.
Daher nutzt man besser das &lt;strong&gt;korrigierte Bestimmtheitsmaß&lt;/strong&gt; (engl.: &lt;em&gt;adjusted R-squared&lt;/em&gt;) &lt;span class=&#34;math inline&#34;&gt;\(\bar{R}^2\)&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    \begin{align*}
        \bar{R}^2 &amp;amp;= 1- (1-R^2) \cdot \frac{n-1}{n-p-1}\\ 
                  &amp;amp;= R^2 - (1-R^2)  \cdot \frac{p}{n-p-1}
    \end{align*}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wobei &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; die Anzahl der unabhängigen Variablen im Modell darstellt.
In unserem Beispiel gilt daher:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    \begin{align*}
        \bar{R}^2 &amp;amp;= 1 - (1-R^2)  \cdot \frac{n-1}{n-p-1} \\
                  &amp;amp;= 1 - (1- 0.4566166)  \cdot \frac{244-1}{244- 1- 1} \\
                  &amp;amp;= 0.4543712
    \end{align*}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vorsicht:&lt;/strong&gt; Das &lt;em&gt;korrigierte Bestimmtheitsmaß&lt;/em&gt; ist nicht mehr an das Intervall &lt;span class=&#34;math inline&#34;&gt;\([0; 1]\)&lt;/span&gt; gebunden!
Es kann negative Werte annehmen, ist in der Regel kleiner als das (unkorrigierte) Bestimmtheitsmaß und erreicht die obere Grenze (&lt;span class=&#34;math inline&#34;&gt;\(\bar{R}^2=1\)&lt;/span&gt;) genau dann, wenn &lt;span class=&#34;math inline&#34;&gt;\(R^2 = 1\)&lt;/span&gt; ist.&lt;/p&gt;
&lt;p&gt;Bei der &lt;strong&gt;Gesamtsignifikanz des Modells&lt;/strong&gt; (auch &lt;strong&gt;Overall-F-Test&lt;/strong&gt; genannt) wird geprüft, ob mindestens eine Variable einen Erklärungsgehalt für das Modell liefert.&lt;/p&gt;
&lt;p&gt;Falls diese Hypothese verworfen wird ist somit das Modell nutzlos.
Dieser Test lässt sich so interpretieren als würde man die gesamte Güte des Modells, also das &lt;span class=&#34;math inline&#34;&gt;\(R^2\)&lt;/span&gt; des Modells, testen.
Aus diesem Grund wird der F-Test der Gesamtsignifikanz des Modells auch als Anpassungsgüte-Test bezeichnet.
Die Nullhypothese des F-Test der Gesamtsignifikanz des Modells sagt aus, dass alle erklärenden Variablen keinen Einfluss auf die abhängige Variable haben.
Sowohl die abhängige Variable als auch die unabhängigen Variablen können binär (kategoriell) oder metrisch sein.
Der &lt;em&gt;Wald-Test&lt;/em&gt; kann dann die Hypothesen testen (ohne Einbezug des Achsenabschnittes):&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    H_{0}\colon \beta _{1}=\beta _{2}=\ldots =\beta _{k}\;=\;0\Rightarrow R^{2}=0
\]&lt;/span&gt;
gegen&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    H_{1}:\beta _{j}\;\neq \;0\;\mathrm {f{\ddot {u}}r\;mindestens\;ein} \;j\in \{1,\ldots ,k\}\Rightarrow R^{2}\neq 0
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Die Teststatistik dieses Tests lautet&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
    F\;\;{\stackrel {H_{0}}{=}}{\frac {R^{2}}{1-R^{2}}} \cdot {\frac {n-p-1}{p}}\;\;{\stackrel {H_{0}}{\sim }}\;\;F(p,n-p)
\end{aligned}.
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;mit &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(\displaystyle (n-p-1)\)&lt;/span&gt; Freiheitsgraden.
Überschreitet der empirische F-Wert einen kritischen F-Wert, der zu einem a priori festgelegten Signifikanzniveau &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt;, so verwirft man die Nullhypothese &lt;span class=&#34;math inline&#34;&gt;\(H_{0}\)&lt;/span&gt;.
Das &lt;span class=&#34;math inline&#34;&gt;\(R^{2}\)&lt;/span&gt; ist dann ausreichend groß und mindestens ein Regressor trägt also vermutlich genügend viel Information zur Erklärung von &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; bei.
Es ist naheliegend bei hohen F-Werten die Nullhypothese zu verwerfen, da ein hohes Bestimmtheitsmaß zu einem hohen F-Wert führt.
Wenn der &lt;em&gt;Wald-Test&lt;/em&gt; für eine oder mehrere unabhängige Variablen die Nullhypothese ablehnt, dann kann man davon ausgehen, dass die zugehörigen Parameter ungleich Null sind, so dass die Variable(n) in das Modell mit einbezogen werden sollten.&lt;/p&gt;
&lt;p&gt;In unserem Beispiel ist&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    F={\frac {R^{2}}{1-R^{2}}} \cdot {\frac {n-p-1}{p}} = \frac{0.4566166}{1-0.4566166} \cdot \frac{244-1-1}{1} = 203.3577233
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;der Wert in der Zeile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## F-statistic: 203.4 on 1 and 242 DF,  p-value: &amp;lt; 2.2e-16&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mit Parametern &lt;span class=&#34;math inline&#34;&gt;\(p=1\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(n-p-1=242\)&lt;/span&gt; Freiheitsgraden.&lt;/p&gt;
&lt;p&gt;Der p-Wert von (numerisch) 0, liefert also ein hinreichendes Indiz dafür, dass der Rechnungsbetrag einen echten Beitrag liefert.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;vgl.: &lt;a href=&#34;https://de.wikipedia.org/wiki/Parallelverschiebung&#34; class=&#34;uri&#34;&gt;https://de.wikipedia.org/wiki/Parallelverschiebung&lt;/a&gt;&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;vgl.: &lt;a href=&#34;https://de.wikipedia.org/wiki/Methode_der_kleinsten_Quadrate&#34; class=&#34;uri&#34;&gt;https://de.wikipedia.org/wiki/Methode_der_kleinsten_Quadrate&lt;/a&gt;&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;vgl.: &lt;a href=&#34;https://de.wikipedia.org/wiki/Shapiro-Wilk-Test&#34; class=&#34;uri&#34;&gt;https://de.wikipedia.org/wiki/Shapiro-Wilk-Test&lt;/a&gt;&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;vgl.: &lt;a href=&#34;https://de.wikipedia.org/wiki/Bestimmtheitsmaß#Das_korrigierte_Bestimmtheitsmaß&#34; class=&#34;uri&#34;&gt;https://de.wikipedia.org/wiki/Bestimmtheitsmaß#Das_korrigierte_Bestimmtheitsmaß&lt;/a&gt;&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Prognose-, Konfidenz- und Fiduzialintervalle</title>
      <link>https://sefiroth.net/nab/post/prognose-konfidenz-und-fiduzialintervalle/</link>
      <pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/prognose-konfidenz-und-fiduzialintervalle/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;*&lt;strong&gt;WORK IN PROGRESS&lt;/strong&gt;
Dieser Eintrag ist noch nicht fertig und wird in der Zukunft erweitert!&lt;/p&gt;
&lt;div id=&#34;konfidenzintervalle&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Konfidenzintervalle&lt;/h2&gt;
&lt;div id=&#34;definition-von-konfidenzintervallen&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Definition von Konfidenzintervallen&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Für unabhängig identisch verteilte Zufallsvariablen &lt;span class=&#34;math inline&#34;&gt;\(X_1,\dotsc, X_n\)&lt;/span&gt; mit unbekanntem reellen Verteilungsparameter &lt;span class=&#34;math inline&#34;&gt;\(\vartheta\)&lt;/span&gt; kann unter bestimmten Umständen zwei Stichprobenfunktionen &lt;span class=&#34;math inline&#34;&gt;\(U\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(V\)&lt;/span&gt; angeben, so dass&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[P(U &amp;lt; \vartheta &amp;lt; V) \geq \gamma\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;gilt, mit &lt;span class=&#34;math inline&#34;&gt;\(\gamma \in (0,1)\)&lt;/span&gt;.
Dann heißt das (stochastische) Intervall &lt;span class=&#34;math inline&#34;&gt;\([U, V]\)&lt;/span&gt; ein &lt;strong&gt;Konfidenzintervall&lt;/strong&gt; für &lt;span class=&#34;math inline&#34;&gt;\(\vartheta\)&lt;/span&gt; zum Konfidenzniveau &lt;span class=&#34;math inline&#34;&gt;\(\gamma\)&lt;/span&gt; (auch: ein &lt;strong&gt;&lt;span class=&#34;math inline&#34;&gt;\(\gamma\)&lt;/span&gt;-Konfidenzintervall&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;Die Realisationen &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; von &lt;span class=&#34;math inline&#34;&gt;\(U\)&lt;/span&gt; bzw. &lt;span class=&#34;math inline&#34;&gt;\(V\)&lt;/span&gt; bilden das &lt;strong&gt;Schätzintervall&lt;/strong&gt; &lt;span class=&#34;math inline&#34;&gt;\([u, v]\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Da die Realisationen &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; der Grenzen &lt;span class=&#34;math inline&#34;&gt;\(U\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(V\)&lt;/span&gt; keine Zufallsvariablen sind und &lt;span class=&#34;math inline&#34;&gt;\(\vartheta\)&lt;/span&gt; ein fixer Wert ist, kann man &lt;strong&gt;nicht&lt;/strong&gt; sagen, dass das Schätzintervall &lt;span class=&#34;math inline&#34;&gt;\([u, v]\)&lt;/span&gt; mit einer Wahrscheinlichkeit von &lt;span class=&#34;math inline&#34;&gt;\(\gamma\)&lt;/span&gt; den unbekannten Parameter &lt;span class=&#34;math inline&#34;&gt;\(\vartheta\)&lt;/span&gt; enthält. Es bedeutet vielmehr, dass im Mittel ein Anteil von &lt;span class=&#34;math inline&#34;&gt;\(\gamma\)&lt;/span&gt; aller so berechneten Schätzintervalle den unbekannten Parameter überdecken. Dem nicht widersprechend, kann –- wie bereits von Ronald Fisher festgestellt – in manchen Modellen die Qualität des Schätzintervalls von den Daten abhängen und sogar zu Antworten führen, die mit Blick auf die Daten unsinnig sind. Probleme mit solcher Post-Data-Inkohärenz führen zur Theorie der bedingten Inferenz. Ein weiteres Problem sind die Stichprobenfunktionen U und V an sich. Um diese zu finden werden oft Vereinfachungen getroffen, dadurch können systematische Fehler entstehen, oft es gibt mehrere Konfidenzintervalle (bei der Binomialverteilung z.B. nach Clopper-Pearson, Agresti-Coull oder Wald), welche oft unterschiedliche Werte liefern.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ein-beispiel&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Ein Beispiel&lt;/h3&gt;
&lt;p&gt;Wir nehmen zunächst als Population &lt;span class=&#34;math inline&#34;&gt;\(N=1000\)&lt;/span&gt; normalverteilte Zufallszahlen mit dem Mittelwert &lt;span class=&#34;math inline&#34;&gt;\(\mu= 0\)&lt;/span&gt; und der Standardabweichung &lt;span class=&#34;math inline&#34;&gt;\(\sigma=2.0088\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Dazu das Histogramm der Population:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;histogram(pop, xlab=&amp;quot;Population&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-01-04-prognose-konfidenz-und-fiduzialintervalle_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Aus dieser Population ziehen wir eine Stichprobe &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; vom Umfang $n=$40 und erhalten die folgenden statistischen Daten:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;favstats(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    min      Q1 median    Q3   max   mean    sd  n missing
##  -3.38 -0.9781 0.2042 1.546 4.002 0.1877 1.901 40       0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wir wollen nun den wahren Mittelwert &lt;span class=&#34;math inline&#34;&gt;\(\vartheta=\mu\)&lt;/span&gt; mit Hilfe der Stichprobe &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; schätzen. So ist es ja in der Realität auch, denn normalerweise haben wir die Daten über die Population nicht.&lt;/p&gt;
&lt;p&gt;Die Schätzfunktion für den Mittelwert lautet nun
&lt;span class=&#34;math display&#34;&gt;\[\bar{X} = \frac1n \sum_{i=1}^n X_i\]&lt;/span&gt;,
und damit die konkrete Punktschätzung
&lt;span class=&#34;math display&#34;&gt;\[\hat{\mu}=\bar{x}= \sum_{i=1}^n x_i\]&lt;/span&gt;
liefert den Wert &lt;span class=&#34;math inline&#34;&gt;\(\hat{\mu}=\)&lt;/span&gt; 0.1877.&lt;/p&gt;
&lt;p&gt;In unserem Beispiel unterscheiden sich die beiden Werte um &lt;span class=&#34;math inline&#34;&gt;\(\mu - \hat{\mu}=\)&lt;/span&gt; -0.1877.&lt;/p&gt;
&lt;p&gt;Ein 95%-Konfidenzintervall nimmt nun den geschätzen Wert &lt;span class=&#34;math inline&#34;&gt;\(\hat{\mu}\)&lt;/span&gt; als Grundlage und gibt liefert ein Intervall mit der Eigentschaft, ausgehend von den konkreten Stichproben in 95% der Fälle den tatsächlichen Wert &lt;span class=&#34;math inline&#34;&gt;\(\mu\)&lt;/span&gt; zu umfassen. Es ist also
&lt;span class=&#34;math display&#34;&gt;\[\gamma = 0.95 = 1 - \alpha = 1 - 0.05, \quad \alpha = 0.05\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Dazu werden die beiden Stichprobenfunktionen&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[U=U(X_1, \dots, X_n)=\bar{X}-z_{\left(1-\frac{\alpha}{2}\right)}\cdot\frac{\sigma}{\sqrt{n}}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;und&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[V=V(X_1, \dots, X_n)=\bar{X}-z_{\left(1-\frac{\alpha}{2}\right)}\cdot\frac{\sigma}{\sqrt{n}}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;mit der &lt;em&gt;bekannten&lt;/em&gt; Standardabweichung &lt;span class=&#34;math inline&#34;&gt;\(\sigma\)&lt;/span&gt; der &lt;em&gt;Population&lt;/em&gt; und der Stichprobengröße &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; nun mit der konkreten Realisation &lt;span class=&#34;math inline&#34;&gt;\(x_1, \dots, x_n\)&lt;/span&gt; der Stichprobe gefüttert und wir erhalten damit&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[u = \bar{x}-z_{\left(1-\frac{\alpha}{2}\right)}\cdot\frac{\sigma}{\sqrt{n}} = 0.1877-z_{\left(0.975\right)}\cdot\frac{2.0088}{\sqrt{40}}=-0.4348\]&lt;/span&gt;
und&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[v = \bar{x}+z_{\left(1-\frac{\alpha}{2}\right)}\cdot\frac{\sigma}{\sqrt{n}} = 0.1877+z_{\left(0.975\right)}\cdot\frac{2.0088}{\sqrt{40}}=0.8102.\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Die Realisation unseres 95%-Konfidenzintervall lautet nun also:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[[-0.4348; 0.8102]\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Was hat es nun mit den ominösen 95% auf sich?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Das Konfidenzintervall ist ein stochastisches Intervall, d.h. die hier angegebenen Werte für &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; sind abhängig von der Realisation &lt;span class=&#34;math inline&#34;&gt;\(x_1, \dots, x_n\)&lt;/span&gt;, also der konkreten Stichprobe.&lt;/p&gt;
&lt;p&gt;Nehmen wir nun also einmal eine neue Stichprobe und berechnen erneut die Realisation unseres 95%-Konfidenzintervalls, so erhalten wir:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[[-0.7033; 0.5418]\]&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Interval coverage:&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     cover
## n     Low  Yes High
##   40 0.00 0.98 0.02&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: It is deprecated to specify `guide = FALSE` to remove a guide. Please
## use `guide = &amp;quot;none&amp;quot;` instead.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-01-04-prognose-konfidenz-und-fiduzialintervalle_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;prognoseintervalle&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Prognoseintervalle&lt;/h2&gt;
&lt;/div&gt;
&lt;div id=&#34;fuduzialintervalle&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Fuduzialintervalle&lt;/h2&gt;
&lt;p&gt;Quellen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Logik in der Statistik; Andrea Wiencierz, 7.10.2007 Link: &lt;a href=&#34;https://static.aminer.org/pdf/PDF/000/230/772/induktive_inferenz_und_mehrwertige_logik.pdf&#34; class=&#34;uri&#34;&gt;https://static.aminer.org/pdf/PDF/000/230/772/induktive_inferenz_und_mehrwertige_logik.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;vgl: &lt;a href=&#34;https://de.wikipedia.org/wiki/Konfidenzintervall&#34; class=&#34;uri&#34;&gt;https://de.wikipedia.org/wiki/Konfidenzintervall&lt;/a&gt;&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Konfidenzintervalle</title>
      <link>https://sefiroth.net/nab/post/konfidenzintervalle/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/konfidenzintervalle/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Stub!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zentrales Schwankungsintervall</title>
      <link>https://sefiroth.net/nab/post/zentrales-schwankungsintervall/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/zentrales-schwankungsintervall/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Das &lt;strong&gt;zentrale Schwankungsintervall&lt;/strong&gt; sagt etwas über die Präzision der Lageschätzung eines Parameters (zum Beispiel eines Mittelwertes) aus. Das Schwankungsintervall schließt einen Bereich um den wahren Wert des Parameters in der Grundgesamtheit ein, der – vereinfacht gesprochen – mit einer zuvor festgelegten Sicherheitswahrscheinlichkeit den aus der Stichprobe geschätzten Parameter enthält.&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;vgl: &lt;a href=&#34;https://de.wikipedia.org/wiki/Zentrales_Schwankungsintervall&#34; class=&#34;uri&#34;&gt;https://de.wikipedia.org/wiki/Zentrales_Schwankungsintervall&lt;/a&gt;&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Ein paar interessante Links</title>
      <link>https://sefiroth.net/nab/post/ein-paar-interessante-links/</link>
      <pubDate>Sun, 31 Dec 2017 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/ein-paar-interessante-links/</guid>
      <description>&lt;p&gt;Im Laufe der Zeit sammeln sich bei mir mehr und mehr Links zu anderen Seiten an, die ich irgendwie speichern will aber nicht ernsthaft sortieren möchte.
So ist diese Sammlung hier entstanden:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www2.hs-fulda.de/~grams/hoppla/wordpress/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Blog von Prof. Dr. Timm Grams&lt;/a&gt; &amp;ndash; &amp;ldquo;Ein Weblogbuch über sonderbare Nachrichten und alltäglichen Statistikplunder&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www2.hs-fulda.de/~grams/dnkfln.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Denkfallen und Paradoxa&lt;/a&gt; &amp;ndash; Prof. Dr. Timm Grams gibt einen Überblick&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www2.hs-fulda.de/~grams/mathehilft/schaetzen/Vierfeldertafel.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Signifikanztest mit der Vierfeldertafel&lt;/a&gt; &amp;ndash; Prof. Dr. Timm Grams&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www2.hs-fulda.de/~grams/Heuristik/Lektionen/Querbeet.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Querbeet &amp;ndash; Eine Problemsammlung&lt;/a&gt; &amp;ndash; Prof. Dr. Timm Grams&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://data-se.netlify.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Blog von Prof. Dr. Sebastian Sauer&lt;/a&gt; &amp;ndash; Quelle der Erleuchtung und Intuition&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.six-sigma-material.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Six Sigma Material&lt;/a&gt; &amp;ndash; Six Sigma Seite&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.foundstat.statistik.uni-muenchen.de/studium_lehre/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AG Method(olgo)ische Grundlagen der Statistik und Ihre Anwendung&lt;/a&gt; &amp;ndash; LMU München &amp;hellip; WOW!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.beltz.de/fileadmin/beltz/leseproben/978-3-7799-3658-9.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Leseprobe &amp;ldquo;Induktive Statistik und soziologische Theorie&amp;rdquo;&lt;/a&gt; &amp;ndash; Markus Ziegler - Eine Analyse des theoretischen Potenzials der Bayes-Statistik&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://support.minitab.com/de-de/minitab/18/help-and-how-to/modeling-statistics/reliability/how-to/probit-analysis/perform-the-analysis/estimate-percentiles-and-probabilities/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fiduzial&lt;/a&gt; &amp;ndash;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.stefanbartz.de/dateien/Vorsicht-bei-der-sigma-Regel.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vorsicht bei der σ-Regel&lt;/a&gt; &amp;ndash; Stefan Bartz&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Quartile, Quantile, Perzentile etc.</title>
      <link>https://sefiroth.net/nab/post/quartile-quantile-perzentile-etc/</link>
      <pubDate>Tue, 19 Dec 2017 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/quartile-quantile-perzentile-etc/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;“Was hat das eigentlich mit den Quartilen, Quantilen und so weiter auf sich?”
Diese Frage kommt ab und zu in Vorlesungen zur Statistik vor. Dabei ist die Antwort recht einfach.&lt;/p&gt;
&lt;div id=&#34;quantile&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Quantile&lt;/h2&gt;
&lt;div id=&#34;definitorische-antwort&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Definitorische Antwort&lt;/h3&gt;
&lt;p&gt;Für eine gegebene reelle Zufallsvariable &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; heißt eine reelle Zahl &lt;span class=&#34;math inline&#34;&gt;\(x_p\)&lt;/span&gt; ein &lt;strong&gt;p-Quantil&lt;/strong&gt; (von &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt;), falls gilt:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[P(X \leq x_p) \leq p \quad \text{ und }\quad P(x_p \leq X) \geq 1-p.\]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;was-bedeutet-das-denn-nun-konkret&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Was bedeutet das denn nun konkret?&lt;/h3&gt;
&lt;p&gt;Nun, ein Quantil ist ein Schwellenwert.
Ein bestimmter Anteil der Werte ist kleiner als das Quantil, der Rest ist größer.
Das 25-%-Quantil beispielsweise ist der Wert, für den gilt, dass 25 % aller Werte kleiner sind als dieser Wert.
Quantile formalisieren praktische Aussagen wie „25 % aller Frauen sind kleiner als 1,62 m“ –- wobei 1,62 m hier das 25-%-Quantil ist.&lt;/p&gt;
&lt;p&gt;Spezielle Quantile sind der &lt;em&gt;Median&lt;/em&gt;, die &lt;em&gt;Quartile&lt;/em&gt;, die &lt;em&gt;Quintile&lt;/em&gt;, die &lt;em&gt;Dezile&lt;/em&gt; und die &lt;em&gt;Perzentile&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;Wir betrachten dazu in den Bespielen die Datenreihe &lt;code&gt;dr&lt;/code&gt; an:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Die Zahlen von 0 bis 600 
dr &amp;lt;- 0:600&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;median&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Median&lt;/h3&gt;
&lt;p&gt;Der &lt;strong&gt;Median&lt;/strong&gt; (von lat. &lt;em&gt;Medium&lt;/em&gt; für „Mitte, Mittelpunkt“ abgeleiteter Begriff mit der Bedeutung “in der Mitte gelegen”) die das 50-%-Quantil. Der Wert, welcher die Datenreihe (bestenfalls) in zwei (etwa) gleich große Abschnitte trennt. Sehr oft schreibt man &lt;span class=&#34;math inline&#34;&gt;\(x_{med}\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(x_{50\%}\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(x_{Med}\)&lt;/span&gt; oder &lt;span class=&#34;math inline&#34;&gt;\(Q_2\)&lt;/span&gt; für den Median&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;median(dr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 300&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;terzile&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Terzile&lt;/h3&gt;
&lt;p&gt;Als &lt;strong&gt;Terile&lt;/strong&gt; (von lat. &lt;em&gt;tertius&lt;/em&gt; “der Dritte”) werden die beiden Quantile mit &lt;span class=&#34;math inline&#34;&gt;\(p=1/3\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(p=2/3\)&lt;/span&gt; bezeichnet.
Sie teilen die Datenreihe in drei Abschnitte.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quantile(dr, probs = seq(0, 1, 1/3))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        0% 33.33333% 66.66667%      100% 
##         0       200       400       600&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;quartile&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Quartile&lt;/h3&gt;
&lt;p&gt;Die &lt;strong&gt;Quartile&lt;/strong&gt; (von lat. &lt;em&gt;quartus&lt;/em&gt; „der Vierte“) werden die Quantile mit &lt;span class=&#34;math inline&#34;&gt;\(p=25\%\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(p=50\%\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(p=75\%\)&lt;/span&gt; bezeichnet.
Sie teilen die Datenreihe in vier Abschnitte.
Dabei schreibt man oft: &lt;span class=&#34;math inline&#34;&gt;\(Q_1 = x_{0{,}25}\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(x_{Med} = Q_2 = x_{0{,}50}\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(Q_3 = x_{0{,}75}\)&lt;/span&gt; für die drei Quantile.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quantile(dr) # oder auch: quantile(dr, probs=seq(0, 1, 1/4))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   0%  25%  50%  75% 100% 
##    0  150  300  450  600&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;quintile&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Quintile&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Quintile&lt;/strong&gt; (von lat. &lt;em&gt;quintus&lt;/em&gt; “der Fünfte”) werden die Quantile mit &lt;span class=&#34;math inline&#34;&gt;\(p=20\%\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(p=40\%\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(p=60\%\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(p=80\%\)&lt;/span&gt; bezeichnet.
Sie teilen die Datenreihe in fünf Abschnitte.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quantile(dr, probs = seq(0, 1, 1/5))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   0%  20%  40%  60%  80% 100% 
##    0  120  240  360  480  600&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;dezile&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Dezile&lt;/h3&gt;
&lt;p&gt;Die Quantile für vielfache von &lt;span class=&#34;math inline&#34;&gt;\(0{,}1\)&lt;/span&gt; also für &lt;span class=&#34;math inline&#34;&gt;\(p=0{,}1;0{,}2;\dots ;0{,}9\)&lt;/span&gt; werden &lt;strong&gt;Dezile&lt;/strong&gt; (von mittellateinisch &lt;em&gt;decimalis&lt;/em&gt;, zu lat. &lt;em&gt;decem&lt;/em&gt; „zehn“) genannt.
Dabei heißt das &lt;span class=&#34;math inline&#34;&gt;\(0{,}1\)&lt;/span&gt;-Quantil das erste Dezil, das &lt;span class=&#34;math inline&#34;&gt;\(0{,}2\)&lt;/span&gt;-Quantil das zweite Dezil usw.
Unterhalb des ersten Dezils liegen 10 % der Stichprobe, oberhalb entsprechend 90 % der Stichprobe.
Ebenso liegen 40 % der Stichprobe unterhalb des vierten Dezils und 60 % oberhalb.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quantile(dr, probs = seq(0, 1, 1/10))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   0%  10%  20%  30%  40%  50%  60%  70%  80%  90% 100% 
##    0   60  120  180  240  300  360  420  480  540  600&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;perzentile&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Perzentile&lt;/h3&gt;
&lt;p&gt;Als &lt;strong&gt;Perzentile&lt;/strong&gt; (von lat.-ital. &lt;em&gt;per centum&lt;/em&gt; “von Hundert, Hundertstel”) werden die Quantile von &lt;span class=&#34;math inline&#34;&gt;\(\displaystyle 0{,}01\)&lt;/span&gt; bis $ 0{,}99$ in Schritten von &lt;span class=&#34;math inline&#34;&gt;\(0{,}01\)&lt;/span&gt; bezeichnet.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quantile(dr, probs = seq(0, 1, 1/100))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   0%   1%   2%   3%   4%   5%   6%   7%   8%   9%  10%  11%  12%  13%  14%  15% 
##    0    6   12   18   24   30   36   42   48   54   60   66   72   78   84   90 
##  16%  17%  18%  19%  20%  21%  22%  23%  24%  25%  26%  27%  28%  29%  30%  31% 
##   96  102  108  114  120  126  132  138  144  150  156  162  168  174  180  186 
##  32%  33%  34%  35%  36%  37%  38%  39%  40%  41%  42%  43%  44%  45%  46%  47% 
##  192  198  204  210  216  222  228  234  240  246  252  258  264  270  276  282 
##  48%  49%  50%  51%  52%  53%  54%  55%  56%  57%  58%  59%  60%  61%  62%  63% 
##  288  294  300  306  312  318  324  330  336  342  348  354  360  366  372  378 
##  64%  65%  66%  67%  68%  69%  70%  71%  72%  73%  74%  75%  76%  77%  78%  79% 
##  384  390  396  402  408  414  420  426  432  438  444  450  456  462  468  474 
##  80%  81%  82%  83%  84%  85%  86%  87%  88%  89%  90%  91%  92%  93%  94%  95% 
##  480  486  492  498  504  510  516  522  528  534  540  546  552  558  564  570 
##  96%  97%  98%  99% 100% 
##  576  582  588  594  600&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>10 Dinge die kein Talent benötigen!</title>
      <link>https://sefiroth.net/nab/post/10-dinge-die-kein-talent-benotigen/</link>
      <pubDate>Thu, 13 Jul 2017 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/10-dinge-die-kein-talent-benotigen/</guid>
      <description>&lt;p&gt;Gerade im Internet gefunden:&lt;/p&gt;
&lt;h3 id=&#34;10-dinge-die-kein-talent-benötigen&#34;&gt;10 Dinge die kein Talent benötigen!&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Pünktlichkeit&lt;/li&gt;
&lt;li&gt;Arbeitsmoral&lt;/li&gt;
&lt;li&gt;Anstrengung&lt;/li&gt;
&lt;li&gt;Körpersprache&lt;/li&gt;
&lt;li&gt;Energie&lt;/li&gt;
&lt;li&gt;Haltung&lt;/li&gt;
&lt;li&gt;Leidenschaft&lt;/li&gt;
&lt;li&gt;Lernwillig sein&lt;/li&gt;
&lt;li&gt;Etwas mehr als das Minimum tun&lt;/li&gt;
&lt;li&gt;Vorbereitet sein&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Der Zentrale Grenzwertsatz</title>
      <link>https://sefiroth.net/nab/post/der-zentrale-grenzwertsatz/</link>
      <pubDate>Wed, 05 Apr 2017 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/der-zentrale-grenzwertsatz/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;der-zentrale-grenzwertsatz-der-statistik-bei-identischer-verteilung.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Der &lt;strong&gt;Zentrale Grenzwertsatz&lt;/strong&gt; der Statistik bei identischer Verteilung.&lt;/h2&gt;
&lt;div id=&#34;zentraler-grenzwertsatz&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Zentraler Grenzwertsatz&lt;/h3&gt;
&lt;p&gt;Seien &lt;span class=&#34;math inline&#34;&gt;\(X_1, X_2, ..., X_n\)&lt;/span&gt; unabhängige und identisch verteilte Zufallsvariablen mit bekanntem Erwartungswert &lt;span class=&#34;math inline&#34;&gt;\(E(X_i) = \mu\)&lt;/span&gt; und bekannter Varianz &lt;span class=&#34;math inline&#34;&gt;\(Var(X_i)=\sigma^2\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Für die Summe &lt;span class=&#34;math inline&#34;&gt;\(S_n = \sum_{i=1}^n X_i\)&lt;/span&gt; ist dann der Erwartungswert &lt;span class=&#34;math inline&#34;&gt;\(E(S_n)= n \cdot \mu\)&lt;/span&gt; und die Varianz &lt;span class=&#34;math inline&#34;&gt;\(Var(S_n)= n \cdot \sigma^2\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Dann gilt für die &lt;em&gt;standardisierte&lt;/em&gt; Zufallsvariable&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{align*}
Z_n &amp;amp;= \frac{\left(\sum\limits_{i=1}^n X_i\right) - n \cdot \mu}{\sqrt{n\cdot \sigma^2}}
    = \frac{S_n - n \cdot \mu}{\sigma \cdot \sqrt{n}} 
    = \frac{n \cdot \bar{X}_n-n \cdot \mu}{\sigma \cdot n / \sqrt{n}} \\
    &amp;amp;= \frac{\bar{X}_n - \mu}{\sigma / \sqrt{n}} 
    = \frac{\bar{X}_n - \mu}{\sigma} \cdot \sqrt{n},
\end{align*}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;dass sie für wachsendes &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; immer besser durch die &lt;em&gt;Standardnormalverteilung&lt;/em&gt; &lt;span class=&#34;math inline&#34;&gt;\(N(0, 1)\)&lt;/span&gt; approximiert werden kann.&lt;/p&gt;
&lt;p&gt;Mit anderen Worten:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
P(Z_n \leq x) \longrightarrow \Phi(x), \quad \text{ für }\; n \rightarrow \infty
\]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;ein-beispiel&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Ein Beispiel:&lt;/h2&gt;
&lt;p&gt;Nehmen wir drei Verteilungen mit Zufallsvariable &lt;span class=&#34;math inline&#34;&gt;\(U\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; und jeweils &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; Realisationen &lt;span class=&#34;math inline&#34;&gt;\(u_1,\dots, u_n\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(x_1,\dots, x_n\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(y_1,\dots, y_n\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Wählen wir zunächst &lt;span class=&#34;math inline&#34;&gt;\(n=5\)&lt;/span&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;u&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 19.726 69.683 60.790  0.955 42.901&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  7.942 15.905 12.917  6.818  4.434&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;y&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 59.961 56.552 51.094 75.288 47.985&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Standardisieren wir die Werte:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mosaic)
zscore(u)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -0.6695256  1.0830283  0.7710507 -1.3280357  0.1434823&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;zscore(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -0.3543069  1.3440714  0.7067796 -0.5940379 -1.1025063&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;zscore(y)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  0.1677971 -0.1526624 -0.6657361  1.6085958 -0.9579944&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Die Behauptung des Zentralengrenzwertsatzes ist nun, dass mit steigender Anzahl an Werten &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; die standardisierten Werte in der empirischen Verteilungsfunktion sich immer mehr der Verteilungsfunktion der Standardnormalverteilung annähern:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2017-04-05-der-zentrale-grenzwertsatz_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2017-04-05-der-zentrale-grenzwertsatz_files/figure-html/unnamed-chunk-4-2.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2017-04-05-der-zentrale-grenzwertsatz_files/figure-html/unnamed-chunk-4-3.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2017-04-05-der-zentrale-grenzwertsatz_files/figure-html/unnamed-chunk-4-4.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Weiterführende Literatur und Quellen dieses Eintrags:&lt;/strong&gt;&lt;/p&gt;
&lt;div id=&#34;refs&#34; class=&#34;references csl-bib-body&#34;&gt;
&lt;div id=&#34;ref-Schira2005&#34; class=&#34;csl-entry&#34;&gt;
&lt;p&gt;&lt;div class=&#34;csl-left-margin&#34;&gt;1. &lt;/div&gt;&lt;div class=&#34;csl-right-inline&#34;&gt;Schira, J.: Statistische Methoden der VWL und BWL. PEARSON Studion, München (2005)&lt;/div&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-website:WikipediaZGS&#34; class=&#34;csl-entry&#34;&gt;
&lt;p&gt;&lt;div class=&#34;csl-left-margin&#34;&gt;2. &lt;/div&gt;&lt;div class=&#34;csl-right-inline&#34;&gt;Wikipedia: Zentraler Grenzwertsatz, &lt;a href=&#34;https://de.wikipedia.org/w/index.php?title=Zentraler_Grenzwertsatz&amp;amp;oldid=162715036&#34;&gt;https://de.wikipedia.org/w/index.php?title=Zentraler_Grenzwertsatz&amp;amp;oldid=162715036&lt;/a&gt;, (2017)&lt;/div&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-website:WolframMathWorldCLT&#34; class=&#34;csl-entry&#34;&gt;
&lt;p&gt;&lt;div class=&#34;csl-left-margin&#34;&gt;3. &lt;/div&gt;&lt;div class=&#34;csl-right-inline&#34;&gt;Weisstein, E.W.: Central limit theorem, &lt;a href=&#34;http://mathworld.wolfram.com/CentralLimitTheorem.html&#34;&gt;http://mathworld.wolfram.com/CentralLimitTheorem.html&lt;/a&gt;, (2017)&lt;/div&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
