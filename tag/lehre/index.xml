<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lehre | Norman&#39;s Academic Blog</title>
    <link>https://sefiroth.net/nab/tag/lehre/</link>
      <atom:link href="https://sefiroth.net/nab/tag/lehre/index.xml" rel="self" type="application/rss+xml" />
    <description>Lehre</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>de-de</language><copyright>© in 2017-2021 by Norman Markgraf</copyright><lastBuildDate>Wed, 18 Mar 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://sefiroth.net/nab/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Lehre</title>
      <link>https://sefiroth.net/nab/tag/lehre/</link>
    </image>
    
    <item>
      <title>Korrigieren von Arbeiten mit Excel und R</title>
      <link>https://sefiroth.net/nab/post/korrigieren-von-arbeiten-mit-excel-und-r/</link>
      <pubDate>Wed, 18 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/korrigieren-von-arbeiten-mit-excel-und-r/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Das korrigieren von Arbeiten ist nicht gerade des Lehrenden liebste Tätigkeit. Vorallem, wenn man eine Mischung auf Multiple-Choice und Freitest Aufgaben zu korrigieren hat und leider keine gute technische Unterstützung vorfindet.&lt;/p&gt;
&lt;p&gt;Klar gibt es wunderschöne Lösungen mit R dazu, wie zum Beispiel &lt;a href=&#34;http://www.r-exams.org&#34; class=&#34;uri&#34;&gt;http://www.r-exams.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aber zum Glück kann man den Ablauf auch “mit Bordmitteln” etwas verbessern.&lt;/p&gt;
&lt;p&gt;Wir bekommen eine Liste der Teilnehmer, in Form eine Excel- oder CSV-Datei, in die wir die Punkte eintragen können, die von der Hochschule digital verarbeitet wird. Diese Liste nehmen wir als Grundlage um den Ablauf etwas zu optimieren.&lt;/p&gt;
&lt;p&gt;In den Klausuren gibt es vier Sorten von Aufgabentypen:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Multiple Choice mit genau einer Antwortmöglichkeit&lt;/li&gt;
&lt;li&gt;Multiple Choice mit mehr als einer Antwortmöglichkeit&lt;/li&gt;
&lt;li&gt;(Ganze) Zahlen als Antwort auf eine Frage&lt;/li&gt;
&lt;li&gt;Begründungen und/oder freie Textantworten&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Die ersten drei Aufgabentypen können sehr schön mit Hilfe einer Exceltabelle erfasst werden. Der vierte Aufgabentyp muss direkt bewertet werden und wird in so ebenfalls in die Exceltabelle eingegeben.&lt;/p&gt;
&lt;p&gt;Die erfassten Daten der Klausuren liegen zu Beginn der Auswertung in einer Exceldatei bereit, die in etwa wie folgt aussieht:&lt;/p&gt;
&lt;p&gt;&amp;lt; &amp;lt; &amp;lt; BILD EXCEL DATEI &amp;gt; &amp;gt; &amp;gt;&lt;/p&gt;
&lt;p&gt;Diese Datei wird unter dem Namen &lt;code&gt;Klausurteilnehmendenliste.xslx&lt;/code&gt; gespeichert.&lt;/p&gt;
&lt;p&gt;Die Auswertung geschieht dann mittels eines kleinen R-Skripts:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mosaic)
library(readxl)

max.show &amp;lt;- 10

Aufgaben.Index &amp;lt;- 1:40
Aufgaben.Typ   &amp;lt;- rep(&amp;quot;MC&amp;quot;, 40)
for (idx in c(1, 9, 14, 36, 37, 38, 39, 40)){
    Aufgaben.Typ[idx] &amp;lt;- &amp;quot;nonMC&amp;quot;
}

Aufgaben.Punkte.max &amp;lt;- c( 8, 1, 1, 1, 2, 1, 2, 2, 3, 1, 
                          2, 1, 1, 3, 2, 1, 4, 2, 2, 2, 
                          2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 
                          1, 2, 1, 1, 1, 6, 4, 4, 6, 8)
Aufgaben.MC.richtig &amp;lt;- c(NA, &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;D&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, NA, &amp;quot;B&amp;quot;,
                         &amp;quot;BD&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;A&amp;quot;, NA, &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;BC&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;A&amp;quot;,
                         &amp;quot;B&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;,  &amp;quot;2&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;,
                         &amp;quot;B&amp;quot;, &amp;quot;F&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;B&amp;quot;, NA, NA, NA, NA, NA
                        )
if (sum(Aufgaben.Punkte.max) != 90) stop(&amp;quot;Gesamtpunktzahl ist nicht 90!&amp;quot;)

for (idx in 1:40) {
    if (Aufgaben.Typ[idx] == &amp;quot;MC&amp;quot;) {
        if (is.na(Aufgaben.MC.richtig[idx])) stop(paste(&amp;quot;MC Aufgabe&amp;quot;, idx, &amp;quot;ohne Musterlösung!&amp;quot;))
    } else {
        if (!is.na(Aufgaben.MC.richtig[idx])) stop(paste(&amp;quot;Nicht-MC Aufgabe&amp;quot;, idx, &amp;quot;mit Musterlösung!&amp;quot;))
    }
}

Aufgaben &amp;lt;- c( 531388,
                NA, &amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;,  NA, &amp;quot;B&amp;quot;,
                &amp;quot;BD&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;A&amp;quot;,  NA, &amp;quot;B&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;,  &amp;quot;&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;B&amp;quot;,
                &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;,
                &amp;quot;A&amp;quot;, &amp;quot;E&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;C&amp;quot;, NA, NA, NA, NA, NA
                )

sumMC &amp;lt;- function(test) {
    summe &amp;lt;- 0
    for(idx in 1:40) {
        if (!is.na(test[idx+1]) &amp;amp;&amp;amp; (!(test[idx+1] == &amp;quot;/&amp;quot; ))) {
            if (Aufgaben.Typ[idx] == &amp;quot;MC&amp;quot;) {
                tmp &amp;lt;- length(Aufgaben.MC.richtig[idx])
                if (tmp &amp;gt; 1) {
                    pp &amp;lt;-  Aufgaben.Punkte.max[idx]/tmp
                    for(x in unlist(strsplit(Aufgaben.MC.richtig[idx], NULL))) {
                        if (toupper(x) %in% toupper(test[idx+1])) {
                            summe &amp;lt;- summe + pp
                        }
                    }
                } else {
                    if (toupper(test[idx+1]) == toupper(Aufgaben.MC.richtig[idx])) {
                        summe &amp;lt;- summe + Aufgaben.Punkte.max[idx]
                    }
                }
            } else {
                if (!is.na(test[idx+1])) {
                    summe &amp;lt;- summe + as.integer(test[idx+1])
                }
            }
        }
    }
    return(summe)
}

Klausurteilnehmendenliste &amp;lt;- read_excel(&amp;quot;Klausurteilnehmendenliste.xlsx&amp;quot;)
Klausurteilnehmendenliste &amp;lt;- Klausurteilnehmendenliste %&amp;gt;% select(c(-1,-2)) %&amp;gt;% mutate_all(toupper)

Punkte &amp;lt;- apply(Klausurteilnehmendenliste, 1, sumMC)
Klausurteilnehmendenliste &amp;lt;- cbind(Klausurteilnehmendenliste, Punkte)

head(select(Klausurteilnehmendenliste, c(1, &amp;quot;Punkte&amp;quot;)), max.show)
tail(select(Klausurteilnehmendenliste, c(1, &amp;quot;Punkte&amp;quot;)), max.show)

Klausurteilnehmendenliste %&amp;gt;%
    filter(Punkte &amp;gt; 10) %&amp;gt;%
    gf_counts(~ Punkte, data=.)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mit den Zeilen&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Aufgaben.Typ   &amp;lt;- rep(&amp;quot;MC&amp;quot;, 40)
for (idx in c(1, 9, 14, 36, 37, 38, 39, 40)){
    Aufgaben.Typ[idx] &amp;lt;- &amp;quot;nonMC&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;werden zunächst 40 MC-Aufgaben angelegt und danach die Aufgaben 1, 9, 14, 36, 37, 38, 39 und 40 als nicht MC Aufgaben gekennzeichnet. Hier muss später die Punktzahl direkt eingegeben werden!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Aufgaben.Punkte.max &amp;lt;- c( 8, 1, 1, 1, 2, 1, 2, 2, 3, 1, 
                          2, 1, 1, 3, 2, 1, 4, 2, 2, 2, 
                          2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 
                          1, 2, 1, 1, 1, 6, 4, 4, 6, 8)
Aufgaben.MC.richtig &amp;lt;- c(NA, &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;D&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, NA, &amp;quot;B&amp;quot;,
                         &amp;quot;BD&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;A&amp;quot;, NA, &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;BC&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;A&amp;quot;,
                         &amp;quot;B&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;,  &amp;quot;2&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;A&amp;quot;,
                         &amp;quot;B&amp;quot;, &amp;quot;F&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;B&amp;quot;, NA, NA, NA, NA, NA
                        )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;code&gt;Aufgaben.Punkte.max&lt;/code&gt; werden die maximal erreichbaren Punkte pro Aufgabe gespeichert. In &lt;code&gt;Aufgaben.MC.richtig&lt;/code&gt; sind alle &lt;em&gt;nicht MC&lt;/em&gt;-Aufgaben mit &lt;code&gt;NA&lt;/code&gt; gekennzeichnet. Die Lösungen werden als Zeichenkette (in Großbuchstaben) hinterlegt. Sollte eine MC-Aufgabe mehrere richtige Antworten haben, so schreibt man diese einfach hintereinander. So bedeutet “BD”, dass die Lösungen “B” und “D” richtig sind.&lt;/p&gt;
&lt;p&gt;Wird in den Lösungen für eine Aufgabe “/” eingetragen, so gilt diese Aufgabe als nicht bearbeitet und wird mit 0 Punkten bewertet.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Eine typische Frage von Studierenden</title>
      <link>https://sefiroth.net/nab/post/eine-typische-frage-von-studierenden/</link>
      <pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/eine-typische-frage-von-studierenden/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Vor kurzem fand ich mal wieder eine Anfrage einer Studierenden in meinem Email Postfach. Die Frage lautete in etwa wie folgt:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Guten Tag Herr Markgraf,&lt;/p&gt;
&lt;p&gt;ich würde gerne die Hypothese untersuchen: Die reduzierte Abhängigkeit des Iphones tagsüber liegt am schönen Wetter.
Dazu habe ich eine Variable “iphones.tagsüber.unbeachtet” mit 1x, 2x und 3x täglich als Ausprägungen und eine andere Variable “wetter.ist.gut”, die als Ausprägung “Ja” und “Nein” hat.
Welchen Test kann ich dazu zur Überprüfung einer Abhängigkeit nehmen?&lt;/p&gt;
&lt;p&gt;Vielen Dank im Voraus.&lt;/p&gt;
&lt;p&gt;MfG Monika Mustermann&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Natürlich ist diese Frage im Prinzip einfach zu beantworten, sogar von Leuten, die Statistik an einer Hochschule gehört haben. – Aber da ich ja auch sonst nichts zu tun habe, gebe ich gerne statistische Hilfestellung für Studierende.
Sicher, ich verdiene damit eigentlich mein Geld.
Also ist es nur natürlich, dass ich so etwas vollkommen unentgeldlich mache.
Und wieso sollten Studierende einfach mal ein Buch in die Hand nehmen und
selber nachdenken?
Es gibt vermutlich keine Bücher zu diesem Thema, denn es ist ganz sicher eine Geheimwissenschaft.
Und wieso sollte man dann also seine Betreuungsperson zu diesem Probem fragen?
Die hat ja auch so viel zu tun… – Egal.&lt;/p&gt;
&lt;p&gt;Was haben wir hier vorliegen? – Im einfachsten Fall sind es zwei kategoriale Variablen, und wir wollen sehen ob diese von einander (un-)abhängig sind.&lt;/p&gt;
&lt;p&gt;Mangels tatsächlicher Daten basteln wir uns einfach mal ein Beispiel:&lt;/p&gt;
&lt;div id=&#34;wir-bastlen-uns-ein-beispiel&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Wir bastlen uns ein Beispiel&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Wie immer zuerst das Paket &amp;#39;mosaic&amp;#39; laden
library(mosaic)

# Einen beliebigen Startwert für den Zufallszahlengenerator
# für die Reproduzierbarkeit
set.seed(123)

# Anzahl der Vorfälle insgesamt
n &amp;lt;- 176

# Anzahl der Wiederholungen für die SBI-Methoden
loops &amp;lt;- 10000

# Erfinden eines Beispieldatensatzes
daten &amp;lt;- data.frame(
  iphones.tagsüber.unbeachtet = sample(rep(c(&amp;quot;1xtäglich&amp;quot;,&amp;quot;2xtäglich&amp;quot;,&amp;quot;3xtäglich&amp;quot;),n),n),
  wetter.ist.gut = sample(rep(c(&amp;quot;Ja&amp;quot;,&amp;quot;Nein&amp;quot;),n),n)
)

# Ausgabe der ersten Zeilen des Datensatzes
head(daten)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   iphones.tagsüber.unbeachtet wetter.ist.gut
## 1                   1xtäglich             Ja
## 2                   1xtäglich           Nein
## 3                   2xtäglich             Ja
## 4                   3xtäglich           Nein
## 5                   1xtäglich             Ja
## 6                   2xtäglich             Ja&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;ein-blick-auf-kennzahlen-und-visualisierungsmöglichkeiten&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Ein Blick auf Kennzahlen und Visualisierungsmöglichkeiten&lt;/h3&gt;
&lt;p&gt;Man kann diese Daten als Kreuztabelle zusammenfassen und diese dann mit Hilfe eines Mosaikplots darstellen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tally(iphones.tagsüber.unbeachtet ~ wetter.ist.gut, data = daten)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                            wetter.ist.gut
## iphones.tagsüber.unbeachtet Ja Nein
##                   1xtäglich 29   33
##                   2xtäglich 34   26
##                   3xtäglich 27   27&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mosaicplot(wetter.ist.gut ~ iphones.tagsüber.unbeachtet, data = daten)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2020-02-12-eine-typische-frage-von-studierenden_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Für später speichern wir die Kreuztabelle in obs.tab
obs.tab &amp;lt;- tally(iphones.tagsüber.unbeachtet ~ wetter.ist.gut, data = daten)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;von-der-forschungsthese-zur-hypothese&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Von der Forschungsthese zur Hypothese&lt;/h3&gt;
&lt;p&gt;Um nun zwischen abhängig und unabhängig statistisch zu unterscheiden, sollte man sich die Null- und Alternativhypothese genau überlegen und &lt;em&gt;operationalisieren&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Ein Blick auf die (orginale) Forschungsthese: “Die reduzierte Abhängigkeit des Iphones tagsüber liegt am schönen Wetter.”&lt;/p&gt;
&lt;p&gt;Oh je, eine kausale Forschungsthese. Ein dezenter Hinweis auf das Werk von Judea Pearl und Dana Mackenzie &lt;a href=&#34;https://www.amazon.de/Book-Why-Science-Cause-Effect/dp/046509760X/ref=sr_1_1?adgrpid=70747374853&amp;amp;dchild=1&amp;amp;gclid=EAIaIQobChMIio7A5a-57gIVBKOyCh1zPAemEAAYAyAAEgKbXPD_BwE&amp;amp;hvadid=352621590167&amp;amp;hvdev=c&amp;amp;hvlocphy=9043910&amp;amp;hvnetw=g&amp;amp;hvqmt=b&amp;amp;hvrand=4305248996988708271&amp;amp;hvtargid=kwd-422343395170&amp;amp;hydadcr=16871_1724817&amp;amp;keywords=the+book+of+why+judea+pearl&amp;amp;qid=1611656438&amp;amp;sr=8-1&amp;amp;tag=googhydr08-21&#34;&gt;“The Book of Why!”&lt;/a&gt; muss an dieser Stelle sein. – Aber da wir keine kausale Modellierung machen wollen, müssen wir das Problem sinngetreu umformulieren:&lt;/p&gt;
&lt;p&gt;“Es besteht ein Zusammenhang zwischen ‘schönem Wetter’ und dem ‘Iphone tagsüber unbeachtet’ lassen.”&lt;/p&gt;
&lt;p&gt;Warum diese neue Formulierung? – Nun, in der orginal Forschungsthese wird ein &lt;strong&gt;kausal&lt;/strong&gt; Zusammenhang geprüft. Da es sich vermutlich um eine Beobachtungstudie handelt können wir einen solchen Ursache-Wirkungs-Zusammenhang aber hier nicht so einfach prüfen. Wie das gehen könnte, dazu schaut man mal bei J.Pearl und D.Mackenzie (s.o.) nach.
Zwar kann man von außen sagen: “Wenn es einen Zusammenhang gibt, dann führt das schöne Wetter zur Nichtbeachtung.” mit klassischer Statistik können wir hier aber nur den Zusammenhang (und zwar ungerichtet!) testen.
Liegt dieser &lt;strong&gt;nicht&lt;/strong&gt; vor, so spricht erstmal auch nichts für einen kausalen Zusammenhang, aber ein Zusammenhang an sich spricht noch nicht für einen kausalen Zusammenhang!
(Korrelation ist ebeb &lt;strong&gt;nicht&lt;/strong&gt; Kausalität!)&lt;/p&gt;
&lt;p&gt;Aus der umformulierten Forschungsfrage können wir die Alternativ- und auch die Nullhypothese ableiten:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Alternativhypothese:&lt;/strong&gt; Es besteht ein Zusammenhang zwischen ‘schönem Wetter’ und dem ‘Iphone tagsüber unbeachtet’ lassen.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nullhypothese:&lt;/strong&gt; Es besteht &lt;strong&gt;kein&lt;/strong&gt; Zusammenhang zwischen ‘schönem Wetter’ und dem ‘Iphone tagsüber unbeachtet’ lassen.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;wie-kann-man-nun-den-zusammenhang-messen-und-wie-sieht-kein-zusammenhang-dabei-aus&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Wie kann man nun den Zusammenhang &lt;em&gt;messen&lt;/em&gt; und wie sieht &lt;em&gt;kein Zusammenhang&lt;/em&gt; dabei aus?&lt;/h2&gt;
&lt;p&gt;Um zu sehen ob unsere Werte keinen Zusammenhang haben, also rein zufällig sind, oder es einen inneren Zusammenhang gibt müssen wir die äußeren von den inneren Häufigkeiten trennen.&lt;/p&gt;
&lt;p&gt;Konkret heißt das, wir schauen uns an wie die Häufigkeiten oder auch Verteilung der einzelnen Variabeln ausssehen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tally(~ wetter.ist.gut, data = daten)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## wetter.ist.gut
##   Ja Nein 
##   90   86&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tally(~ iphones.tagsüber.unbeachtet, data = daten)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## iphones.tagsüber.unbeachtet
## 1xtäglich 2xtäglich 3xtäglich 
##        62        60        54&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;freiheitsgrade&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Freiheitsgrade&lt;/h4&gt;
&lt;p&gt;Die Werte innerhalb der Kreuztabelle oben werden im wesendlichen durch diese Werte bestimmt. Die außeren Werte sind also unsere Rahmenbedingungen. Dabei ist der Einfluss der sogenannten &lt;em&gt;Randhäufigkeiten&lt;/em&gt; (&lt;em&gt;Marginale Häufigkeit&lt;/em&gt;) nicht zu unterschätzen. Denn wenn wir diese als &lt;em&gt;fix&lt;/em&gt;/&lt;em&gt;gegeben&lt;/em&gt; ansehen, können wir nur mit den sechs Werten in der Mitte unserer Kreuztabelle &lt;em&gt;spielen&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Doch sind nicht alle sechs Werte wirklich frei wählbar. Denn um zum Beispiel die Summe 62 in der ersten Zeile zu erhalten haben wir ja die Summe von 29 und 33 gebildet.&lt;/p&gt;
&lt;p&gt;Ist nun der Rand, also 62, fest, so kann ich nicht &lt;em&gt;beide&lt;/em&gt; Summanden frei wählen, denn&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[62 = 29 + 33\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;impliziert ja, dass allgemein&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[62 = x + y\]&lt;/span&gt;
gelten muss und somit durch&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[x = 62 - y \qquad\text{ bzw. }\qquad y = 62 - x\]&lt;/span&gt;
immer maximal eine der Variabeln – &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; oder &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; – wirklich frei wählen kann.&lt;/p&gt;
&lt;p&gt;Da dies für jede Zeile, aber auch für jede Spalte gilt, denn z.B. ist die Summe der ersten Spalte gegeben durch&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[90 = 29 + 34 + 27,\]&lt;/span&gt;
sind von den sechs Werten in der Kreuztabelle in der Tat nur 2 Werte wirklich frei zu wählen.
Wir haben also ein Problem mit &lt;em&gt;2 Freiheitsgraden&lt;/em&gt;, man schreibt das kurz mit &lt;span class=&#34;math inline&#34;&gt;\(df=2\)&lt;/span&gt; (&lt;em&gt;df&lt;/em&gt; steht dabei für &lt;em&gt;degree of freedom&lt;/em&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;unabhängigkeit-in-der-statistik&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Unabhängigkeit in der Statistik&lt;/h3&gt;
&lt;p&gt;Wir sagen, in der Statistik, dass ein gemeinsames Ereignis unabhängig ist wenn sich das Ereignis als Produkt der beiden Einzelereignisse berechnen lässt.
Seien &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; also zwei Ereignisse, dann gilt im Falle der Unabhängigkeit:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[P(A \cap B) = P(A) \cdot P(B)\]&lt;/span&gt;
Oder etwas informeller: &lt;em&gt;Die Wahrscheinlichkeit das beide Ereignisse eintreffen ist das Produkt der Wahrscheinlichkeiten, dass jeweils eines der beiden Ereignisse eintrifft.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Wir können diese Definition aus der Wahrscheinlichkeitstheorie an unser Problem adaptieren, in dem wir die Wahrscheinlichkeiten durch die relativen Häufigkeiten ersetzen.&lt;/p&gt;
&lt;p&gt;Der Wert für das gemeinsame Ereignis &lt;code&gt;iphone.tagsüber.unbeachtet = 1xtäglich&lt;/code&gt; und das &lt;code&gt;wetter.ist.gut=ja&lt;/code&gt; wird im Falle der Unabhägigkeit durch die beiden Randhäufigkeiten bestimmt:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[62 \cdot 90 = 31.7045455\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir können nun mit eine Kreuztabelle erstellen, wie sie seien müsste, falls wir tatsächlich &lt;em&gt;statitische Unabhängigkeit&lt;/em&gt; hätten. Wir nutzen dafür eine sehr allgemein gehaltene, aber selbst programmierte, Funktion &lt;code&gt;expectation.tab()&lt;/code&gt;, der wir eine Tabelle mit den Häufigkeiten der Beobachtungen geben und die uns dann die Tabelle liefert, wie sie aussehen würde, falls tatsächlich &lt;em&gt;statitische Unabhängigkeit&lt;/em&gt; herrschen würde.&lt;/p&gt;
&lt;p&gt;Die Tabelle mit den beobchteten Werten speichern wir in &lt;code&gt;obs.tab&lt;/code&gt;, die der erwarteten Werte in &lt;code&gt;exp.tab&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;expectation.tab &amp;lt;- function(tab.obs) {
  ret &amp;lt;- tab.obs
  max.i &amp;lt;- dim(tab.obs)[1]
  max.j &amp;lt;- dim(tab.obs)[2]
  
  # Randhäufigkeiten 
  x &amp;lt;- rep(0, max.i)
  for (i in 0:max.i) x[i] = sum(tab.obs[i,])

  y &amp;lt;- rep(0, max.j)
  for (j in 0:max.j) y[j] = sum(tab.obs[,j])

  # Anzahl aller Beobachtungen
  n = sum(tab.obs)
  
  for (i in 0:max.i) {
    for (j in 0:max.j) {
       ret[i,j] &amp;lt;- (x[i] * y[j] / n)
    }
  }

  ret
}

# Kreuztabelle der beobachtete Werte
obs.tab &amp;lt;- tally(iphones.tagsüber.unbeachtet ~ wetter.ist.gut, data = daten)

# Kreuztabelle der erwarteten Werte auf Grundlage der beobachteten Werte
exp.tab &amp;lt;- expectation.tab(obs.tab)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Schauen wir uns die beiden Tabellen kurz an. Zuerst die der beobachteten Werte:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;obs.tab&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                            wetter.ist.gut
## iphones.tagsüber.unbeachtet Ja Nein
##                   1xtäglich 29   33
##                   2xtäglich 34   26
##                   3xtäglich 27   27&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dann die der erwarteten Werte:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;exp.tab&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                            wetter.ist.gut
## iphones.tagsüber.unbeachtet       Ja     Nein
##                   1xtäglich 31.70455 30.29545
##                   2xtäglich 30.68182 29.31818
##                   3xtäglich 27.61364 26.38636&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;was-können-wir-nun-messen&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Was können wir nun messen?&lt;/h3&gt;
&lt;p&gt;Unsicherheit und Zufall spielen eine große Rolle. Wir können also nicht erwarten, dass die Werte für die Kreuztabelle in der Realität genau getroffen werden. (Vorallem, weil wir hier ja mit Nachkommastellen arbeiten!) Aber wir können versuchen den Abstand zu diesen Werten zu messen. Je weiter weg die Werte in der Kreuztabelle von den theoretischen Werten liegen, um so unwarscheinlicher ist es, dass die Werte zufällig aus einer unabhängigen Population gezogen wurden. D.h. wir könnten uns für eine Abhägigkeit aussprechen.&lt;/p&gt;
&lt;div id=&#34;messen-mit-dem-absolutabstand&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Messen mit dem Absolutabstand?&lt;/h4&gt;
&lt;p&gt;Man könnte nun auf die Idee kommen die Abstände an jeder Stelle zu messen und den absoluten Abstand zu summieren:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum(abs(obs.tab - exp.tab))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 13.27273&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nur was sagt dieser Wert aus? – Ist das ein kleiner Abstand oder ein großer?&lt;/p&gt;
&lt;p&gt;Wir brauchen Referenzwerte zur Orientierung. Eine Idee lautet: &lt;strong&gt;Permutationstest&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sind die Werte unabhängig von einander, dann spielt die konkrete Zuordnung keine Rolle, sondern nur die Anzahl der Ereignisse an sich. Ordnen wir nun zufällig einem &lt;code&gt;iphones.tagsüber.unbeachtet&lt;/code&gt;-Wert einen beliebigen &lt;code&gt;wetter.ist.gut&lt;/code&gt;-Wert zu, dann besteht kein Zusammenhang mehr zwischen den Werten. Dies machen wir mittels &lt;code&gt;iphones.tagsüber.unbeachtet ~ shuffle(wetter.ist.gut)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Wir simulieren so den Zustand, dass es keine Abhängigkeit zwischen den Werten gibt.&lt;/p&gt;
&lt;p&gt;Dabei messen wir den Abstand zwischen den Abstand zwischen den beobachteten Werten und den Werten, die wir erwarten würden, falls Unabhägigkeit vorliegen würde. Dafür nutzen wir die selbsterstellte Funktioen &lt;code&gt;diffabsobsexp&lt;/code&gt;, welche die Summe der absoluten Abweichungen berechnet:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\text{diffabsobsexp}(obs, exp) = \sum\limits_i \left|obs_i - exp_i\right|\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir Wiederholen das ganze mit Hilfe von &lt;code&gt;do(loops)&lt;/code&gt; genau &lt;code&gt;loops&lt;/code&gt;&lt;span class=&#34;math inline&#34;&gt;\(=10^{4}\)&lt;/span&gt; mal, geben dann das Histogramm aus und tragen als rote Linie den Wert ein, die wir bei unseren beobachteten Daten tatsächliche gemessen haben:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Funktion zur Berechnung der absoluten Differenz zwischen
# beobachteten und erwarteten Werte
diffabsobsexp &amp;lt;- function(obs, exp) {
  sum(abs(obs - exp))
}

# Absolute Abweichung der gemessenen Werte
obs.abs &amp;lt;- diffabsobsexp(obs.tab, exp.tab)

# Erzeugen der Nullverteilung
NullVert  &amp;lt;- do(loops) * diffabsobsexp(tally(iphones.tagsüber.unbeachtet ~ shuffle(wetter.ist.gut), data = daten), exp.tab)
gf_histogram(~ diffabsobsexp, data = NullVert) %&amp;gt;%
  gf_vline(xintercept = ~ obs.abs, color = &amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2020-02-12-eine-typische-frage-von-studierenden_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Wir können nun den p-Wert, also die relative Fläche rechts von der roten Linie in unseren Histogramm, abschätzen mit:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;prop( ~ diffabsobsexp &amp;gt;= obs.abs, data = NullVert)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## prop_TRUE 
##    0.5714&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Absolute Abweichungen (oder auch &lt;em&gt;absolute Fehler&lt;/em&gt;) haben die Tendenz bei großen Zahlen auch große Abweichungswerte zu liefern und bei kleinen Werten eher kleine Abweichungswerte.
Das kann man als Markel ansehen.
Daher arbeitet man vielleicht lieber mit relativen Abweichungen (oder auch &lt;em&gt;relativen Fehlern&lt;/em&gt;).
Dabei setzt man die absolute Abweichung jedesmal in Bezug auf den erwarteten Wert.
Die dazu passenden Funktion haben wir unten mit &lt;code&gt;diffabsobsexprel&lt;/code&gt; implementiert.
Dabei ist:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\text{diffabsobsexprel}(obs, exp) = \sum\limits_i \frac{\left|obs_i - exp_i\right|}{exp_i}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir Wiederholen das ganze mit Hilfe von &lt;code&gt;do(loops)&lt;/code&gt; genau &lt;code&gt;loops&lt;/code&gt;&lt;span class=&#34;math inline&#34;&gt;\(=10^{4}\)&lt;/span&gt; mal, geben dann das Histogramm aus und tragen als rote Linie den Wert ein, den wir bei unseren beobachteten Daten tatsächliche gemessen haben:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Funktion zur Berechnung der korrigierten absoluten 
# Differenz zwischen beobachteten und erwarteten Werten
diffabsobsexprel &amp;lt;- function(obs, exp) {
  sum((abs(obs - exp))/exp)
}

# Absolute Abweichung der gemessenen Werte -- korrigiert
obs.abs &amp;lt;- diffabsobsexprel(obs.tab, exp.tab)

# Erzeugen der Nullverteilung
NullVert  &amp;lt;- do(loops) * diffabsobsexprel(tally(iphones.tagsüber.unbeachtet ~ shuffle(wetter.ist.gut), data = daten), exp.tab)
gf_dhistogram(~ diffabsobsexprel, data = NullVert) %&amp;gt;%
  gf_vline(xintercept = ~ obs.abs, color = &amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2020-02-12-eine-typische-frage-von-studierenden_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Auch hier können wir den p-Wert abschätzen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;prop( ~ diffabsobsexprel &amp;gt;= obs.abs, data = NullVert)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## prop_TRUE 
##    0.5983&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Ist der absolute Abstand überhaupt gut gewählt? – Wäre nicht eher der quadratische Abstand angebracht?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ein Vorteil des quadratischen Abstand ist es, dass er kleine Abstände kleiner und große Abstände größer bewertet, als der absolute Abstand. Außerdem hat er mathematisch einige Vorteile. Wir messen nun den quadratischen Abstande mit der Funktion
&lt;code&gt;diffquad&lt;/code&gt;, die wie folgt arbeitet:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\text{diffquad}(obs, exp) = \sum\limits_i \left(obs_i - exp_i\right)^2\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir Wiederholen dies nun mit Hilfe von &lt;code&gt;do(loops)&lt;/code&gt; genau &lt;code&gt;loops&lt;/code&gt;&lt;span class=&#34;math inline&#34;&gt;\(=10^{4}\)&lt;/span&gt; mal, geben dann das Histogramm aus und tragen als rote Linie den Wert ein, den wir bei unseren beobachteten Daten tatsächliche gemessen haben:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Funktion zur Berechnung der quadratischen 
# Differenz zwischen beobachteten und erwarteten Werten
diffquad &amp;lt;- function(obs, exp) {
  sum((obs - exp)^2)
}

# Quadratische Abweichung der gemessenen Werte
obs.abs &amp;lt;- diffquad(obs.tab, exp.tab)

# Erzeugen der Nullverteilung
NullVert  &amp;lt;- do(loops) * diffquad(tally(iphones.tagsüber.unbeachtet ~ shuffle(wetter.ist.gut), data = daten), exp.tab)
gf_dhistogram(~ diffquad, data = NullVert) %&amp;gt;%
  gf_vline(xintercept = ~ obs.abs, color = &amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2020-02-12-eine-typische-frage-von-studierenden_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Wir können nun den p-Wert abschätzen mit:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;prop( ~ diffquad &amp;gt;= obs.abs, data = NullVert)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## prop_TRUE 
##    0.5389&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wie beim absoluten Abstand werden hier die Größe der Werte ausser acht gelassen und vielleicht fühlen wir uns etwas wohler, wenn wir statt des quadratischen Abstands den relativen quadratischen Abstand benutzen:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\text{diffquadrel}(obs, exp) = \sum\limits_i \frac{\left(obs_i - exp_i\right)^2}{exp_i}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Dies wiederholen wir nun mit Hilfe von &lt;code&gt;do(loops)&lt;/code&gt; genau &lt;code&gt;loops&lt;/code&gt;&lt;span class=&#34;math inline&#34;&gt;\(=10^{4}\)&lt;/span&gt; mal, geben dann das Histogramm aus und tragen als rote Linie den Wert ein, den wir bei unseren beobachteten Daten tatsächliche gemessen haben:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Funktion zur Berechnung der korrigierten quadratischen 
# Differenz zwischen beobachteten und erwarteten Werten
diffquadrel &amp;lt;- function(obs, exp) {
  sum(((obs - exp)^2)/exp)
}

# Quadratische Abweichung der gemessenen Werte -- korrigiert
obs.abs &amp;lt;- diffquadrel(obs.tab, exp.tab)

# Erzeugen der Nullverteilung
NullVert  &amp;lt;- do(loops) * diffquadrel(tally(iphones.tagsüber.unbeachtet ~ shuffle(wetter.ist.gut), data = daten), exp.tab)
gf_histogram(~ diffquadrel, binwidth = 0.5, center = 0.25, data = NullVert) %&amp;gt;%
  gf_vline(xintercept = ~ obs.abs, color = &amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2020-02-12-eine-typische-frage-von-studierenden_files/figure-html/unnamed-chunk-20-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Den Wert 1.2344597, den wir mit Hilfe der relativen quadratischen Abweichung berechnet haben, nennen wir auch &lt;span class=&#34;math inline&#34;&gt;\(\chi^2\)&lt;/span&gt; Wert.&lt;/p&gt;
&lt;p&gt;Wir können nun den p-Wert abschätzen mit:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;prop( ~ diffquadrel &amp;gt;= obs.abs, data = NullVert)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## prop_TRUE 
##    0.5599&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An Hand der p-Werte können wir nun über die Nullhypothese entscheiden:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;was-sagt-die-klassische-statistik&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Was sagt die klassische Statistik?&lt;/h3&gt;
&lt;p&gt;In der klassischen Statistik könnte man hier den &lt;span class=&#34;math inline&#34;&gt;\(\chi^2\)&lt;/span&gt;-Unabhängigkeitstest anwenden:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;xchisq.test(iphones.tagsüber.unbeachtet ~ wetter.ist.gut, data = daten)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Pearson&amp;#39;s Chi-squared test
## 
## data:  x
## X-squared = 1.2345, df = 2, p-value = 0.5394
## 
##    29       33   
## (31.70)  (30.30) 
## [0.231]  [0.241] 
## &amp;lt;-0.48&amp;gt;  &amp;lt; 0.49&amp;gt; 
##    
##    34       26   
## (30.68)  (29.32) 
## [0.359]  [0.376] 
## &amp;lt; 0.60&amp;gt;  &amp;lt;-0.61&amp;gt; 
##    
##    27       27   
## (27.61)  (26.39) 
## [0.014]  [0.014] 
## &amp;lt;-0.12&amp;gt;  &amp;lt; 0.12&amp;gt; 
##    
## key:
##  observed
##  (expected)
##  [contribution to X-squared]
##  &amp;lt;Pearson residual&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vergleichen wir nun die beiden Ansätze, SBI auf der einen und der klassische Ansatz auf der anderern Seite, einmal in einem Diagramm. Das (Dichte-)Histogramm sind die Daten aus der Nullverteilung für die quadratische, korrigierte Differenz. Die rote Linie ist der gemessene Abweichungswert. Die schwarze Linie ist der Graph der &lt;span class=&#34;math inline&#34;&gt;\(\chi^2\)&lt;/span&gt;-Verteilung mit zwei Freiheitsgraden:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_dhistogram(~ diffquadrel, binwidth = 0.5, center = 0.25, data = NullVert) %&amp;gt;%
  gf_fun(dchisq(x, df=2) ~ x, xlim = c(0:20), color = &amp;quot;blue&amp;quot;) %&amp;gt;% 
  gf_vline(xintercept = ~ obs.abs, color = &amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2020-02-12-eine-typische-frage-von-studierenden_files/figure-html/unnamed-chunk-26-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Aber es gibt auch den (exakten) Fisher-Test:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fisher.test(obs.tab, alternative = &amp;quot;greater&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Fisher&amp;#39;s Exact Test for Count Data
## 
## data:  obs.tab
## p-value = 0.5609
## alternative hypothesis: greater&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;fazit&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Fazit&lt;/h3&gt;
&lt;p&gt;Wir können die p-Werte der einzelnen Tests nun gegenüber stellen:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Scale for &amp;#39;y&amp;#39; is already present. Adding another scale for &amp;#39;y&amp;#39;, which will
## replace the existing scale.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2020-02-12-eine-typische-frage-von-studierenden_files/figure-html/unnamed-chunk-29-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Gewöhnlich haben wir ein Signifikanznivau von &lt;span class=&#34;math inline&#34;&gt;\(5\% = 0{,}05\)&lt;/span&gt; angenommen.
Die rote Linie zeigt diese Grenze.
Liegt der Balken links vor dieser Linie, so sprechen wir davon, dass der
gemessene Wert selten bei unabhänigen Daten vorliegt und würden uns gegen die
Nullhypothese und damit quasi für die Alternativhypothese entscheiden.
Liegt der Balken recht der roten Linie, so haben wir übliche Werte für
unabhängige Daten und keinen Grund gefunden, der gegen die Nullhypothese
spricht.
Warum wir sie dann, auf Grundlage unserer Daten, auch nicht ablehnen können.&lt;/p&gt;
&lt;p&gt;Bleibt Sie Frage, gibt es Situationen in denen die Entscheidung über die
Nullhypothese bei den einzelen betrachteten Verfahren unterschiedlichen ist?
Und wenn ja, wann und wieoft?&lt;/p&gt;
&lt;p&gt;Diese Fragen sind nicht Thema dieses Beitrags, aber vielleicht habe ich Zeit
und betrachte das später einmal.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Die ersten Schritte zur Prognose mitteles linearer Regression</title>
      <link>https://sefiroth.net/nab/post/die-ersten-schritte-zur-prognose-mitteles-linearer-regression/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/die-ersten-schritte-zur-prognose-mitteles-linearer-regression/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Prognosen sind ein wichtiger Bestandteil von Data Science und ist durchaus nicht nur auf moderne Ansätze, wie Neuronale Netze, deep lerning etc. begrenzt. Auch die gute, alte Regression kann ein sehr sinnvolles Mittel sein solche Prognosen zu erstellen.&lt;/p&gt;
&lt;p&gt;Um ein wenig die Ideen hinter Prognosen zu beleuchten wollen wir uns an Prognosen mit dem &lt;strong&gt;tipping&lt;/strong&gt;-Daten heranwagen.&lt;/p&gt;
&lt;div id=&#34;einlesen-der-tipping-daten&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Einlesen der tipping-Daten&lt;/h2&gt;
&lt;p&gt;Zuerst laden wir die notwenidgen Pakete:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mosaic)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Falls die &lt;strong&gt;tipping&lt;/strong&gt;-Daten noch nicht im Verzeichnis liegen, laden wir sie aus dem Internet nach:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!file.exists(&amp;quot;tips.csv&amp;quot;)) {
  download.file(&amp;quot;https://goo.gl/whKjnl&amp;quot;, destfile = &amp;quot;tips.csv&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nun laden wir die &lt;strong&gt;tipping&lt;/strong&gt;-Daten in den Speicher in den Datenrahmen &lt;code&gt;tips&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tips &amp;lt;- read.csv2(&amp;quot;tips.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wir werfen einen ersten Blick auf die &lt;strong&gt;tipping&lt;/strong&gt;-Daten:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;inspect(tips)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## categorical variables:  
##     name     class levels   n missing
## 1    sex character      2 244       0
## 2 smoker character      2 244       0
## 3    day character      4 244       0
## 4   time character      2 244       0
##                                    distribution
## 1 Male (64.3%), Female (35.7%)                 
## 2 No (61.9%), Yes (38.1%)                      
## 3 Sat (35.7%), Sun (31.1%), Thur (25.4%) ...   
## 4 Dinner (72.1%), Lunch (27.9%)                
## 
## quantitative variables:  
##            name   class  min      Q1 median      Q3   max      mean        sd
## ...1 total_bill numeric 3.07 13.3475 17.795 24.1275 50.81 19.785943 8.9024120
## ...2        tip numeric 1.00  2.0000  2.900  3.5625 10.00  2.998279 1.3836382
## ...3       size integer 1.00  2.0000  2.000  3.0000  6.00  2.569672 0.9510998
##        n missing
## ...1 244       0
## ...2 244       0
## ...3 244       0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;vorbereiten-der-test-trainings--und-auswertungesdaten&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Vorbereiten der Test-/Trainings- und Auswertungesdaten&lt;/h2&gt;
&lt;p&gt;Zunächst schränken wir die &lt;strong&gt;tipping&lt;/strong&gt;-Daten auf die Variabeln “total_bill”, “sex”, “smoker”, “day”, “time”, “size” ein und speichern das Ergebnis wieder in &lt;code&gt;tips&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tips %&amp;gt;%
    select(c(&amp;quot;total_bill&amp;quot;, &amp;quot;sex&amp;quot;, &amp;quot;smoker&amp;quot;, &amp;quot;day&amp;quot;, &amp;quot;time&amp;quot;, &amp;quot;size&amp;quot;)) -&amp;gt; tips&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ziel ist es, den Rechnungsbetrag (“total_bill”) auf Grundlage der Variabeln “sex”, “smoker”, “day”, “time” und/oder “size” vorherzusagen.&lt;/p&gt;
&lt;p&gt;Wir teilen den tipping-Datensatz auf in eine Trainingsdatensatz (“tipstrain”), einem Testdatensatz (“tipstest”) und einem Prüfdatensatz (“tipspruef”).
Der Trainingsdatensatz sollte rund zweidrittel der Daten die wir haben umfassen.
Der Testdatensatz die restlich ca. eindrittel.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;trainings_anteil = 2/3

# n.train ist ein Index für alle Werte, 
# die wir im Trainingsdatensatz haben wollen:
x.train &amp;lt;- sample(1:nrow(tips), floor(trainings_anteil*nrow(tips)))

# Trainingsdatensatz erstellen:
tipstrain &amp;lt;- slice(tips, x.train)

# Prüfdatensatz erstellen, also alles was 
# nicht in den Trainingsdatensatz gekommen ist:
tipspruef &amp;lt;- slice(tips, -(x.train))

# Der Testdatensatz ist der Prüfdatensatz 
# ohne die Variable total_bill:
tipspruef %&amp;gt;% 
    select(-total_bill) -&amp;gt; tipstest&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mit dem Tainingsdatensatz versuchen wir nun ein Prognosemodell zu erstellen, um aus den Testdatensatz eine Prognose für “total_bill” zu erstellen.&lt;/p&gt;
&lt;p&gt;Das Prognose-Modell wird ausschließlich auf Grundlage des Trainingsdatensatzes erstellt. Am Ende wollen wir unser Modell dann aber mit Hilfe des Prüfdatensatzes bewertet.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;die-datenlage&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Die Datenlage&lt;/h2&gt;
&lt;p&gt;Ein (paar) Blick(e) auf unsere Trainingsdaten:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_point(total_bill ~ jitter(size), color=~time, data=tipstrain)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2019-12-18-die-ersten-schritte-zur-prognose-mitteles-linearer-regression_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_point(total_bill ~ day | time, color = ~ sex, data=tipstrain)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2019-12-18-die-ersten-schritte-zur-prognose-mitteles-linearer-regression_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;prognosemodel-nullmodell&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Prognosemodel: Nullmodell&lt;/h2&gt;
&lt;div id=&#34;aufstellen-des-nullmodel-aka-regression-mit-der-achse&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Aufstellen des Nullmodel aka Regression mit der Achse&lt;/h3&gt;
&lt;p&gt;Wir erstellen das Nullmodell wie folgt:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lm.null &amp;lt;- lm( total_bill ~ 1, data=tipstrain)
summary(lm.null)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = total_bill ~ 1, data = tipstrain)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -13.159  -6.989  -2.429   4.171  30.401 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept)  20.4086     0.7311   27.91   &amp;lt;2e-16 ***
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 9.306 on 161 degrees of freedom&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Das Nullmodell sagt in jedem Fall den Rechnungsbetrag vorher als den Mittelwert der Trainingsdaten!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mean(~ total_bill, data=tipstrain)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 20.40864&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nun bestimmten wir mit Hilfe des Nullmodells “lm.null” eine Vorhersage für die Testdaten:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;predict.null &amp;lt;- predict(lm.null, newdata=tipstest)
head(predict.null)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        1        2        3        4        5        6 
## 20.40864 20.40864 20.40864 20.40864 20.40864 20.40864&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wie gesagt, das Nullmodell liefert als Prognose immer den Mittelwert der Trainingsdaten zurück,
das mathematische Nullmodell lautet also:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\widehat{total\_bill_i} = 20.408642  \]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;auswertung-des-nullmodells&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Auswertung des Nullmodells&lt;/h3&gt;
&lt;p&gt;Zur Auswertung Nutzen wir den &lt;em&gt;mittleren Absolutabstand&lt;/em&gt; zwischen der Vorhersage und den Prüfdaten:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;maa.null &amp;lt;-sum( abs( tipspruef$total_bill - predict.null))
maa.null&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 544.772&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;prognosemodell-lineare-regression-gegen-size-als-metrischer-wert&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Prognosemodell: Lineare Regression gegen “size” als metrischer Wert&lt;/h2&gt;
&lt;div id=&#34;aufstellen-des-modells&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Aufstellen des Modells&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;auswertung-des-regressionsmodell&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Auswertung des Regressionsmodell&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Statistik21</title>
      <link>https://sefiroth.net/nab/publication/statistik21/</link>
      <pubDate>Wed, 25 Sep 2019 00:00:00 +0200</pubDate>
      <guid>https://sefiroth.net/nab/publication/statistik21/</guid>
      <description></description>
    </item>
    
    <item>
      <title>SBI - Simulation Based Inference</title>
      <link>https://sefiroth.net/nab/post/sbi-simulation-based-inference/</link>
      <pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/sbi-simulation-based-inference/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Wenn meine Tochter &lt;em&gt;SBI&lt;/em&gt; hört, denkt sie an &lt;em&gt;Sally Bollywood Investigation&lt;/em&gt;. – Und ich oft auch. – Mit &lt;em&gt;SBI&lt;/em&gt; ist hier aber nicht der Trickfilm für Kinder, sondern &lt;em&gt;&lt;strong&gt;S&lt;/strong&gt;imulation &lt;strong&gt;B&lt;/strong&gt;ased &lt;strong&gt;I&lt;/strong&gt;nference&lt;/em&gt;, gemeint.&lt;/p&gt;
&lt;p&gt;Angestachelt von Prof. Dr. Karsten Lübke und im Schlepptau von Prof. Dr. Oliver Gansser, Prof. Dr. Matthias Gehrke und Prof. Dr. Bianca Krol haben ein paar kluge Köpfe bei der &lt;a href=&#34;http://www.fom.de&#34;&gt;FOM&lt;/a&gt; den Unterricht für Statistik auf eine neue Grundlage gestellt.
Und ich habe das Glück gehabt,dabei mitwirken zu dürfen.&lt;/p&gt;
&lt;p&gt;Unser Mastermind, Karsten Lübke, hat dazu einen sehr schönen und lesenswerten Blog-Eintrag geschrieben: &lt;a href=&#34;https://www.causeweb.org/sbi/?p=1559&#34; class=&#34;uri&#34;&gt;https://www.causeweb.org/sbi/?p=1559&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ein wenig schneller zur simulierten Nullverteilung</title>
      <link>https://sefiroth.net/nab/post/ein-wenig-schneller-zur-simulierten-nullverteilung/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/ein-wenig-schneller-zur-simulierten-nullverteilung/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/d3/d3.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/profvis/profvis.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/profvis/profvis.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/profvis/scroll.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/highlight/textmate.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/highlight/highlight.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/profvis-binding/profvis.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Ein Nullhypothesentest ist schnell geschrieben.
Will man den approximativen Weg gehen, so hilft &lt;strong&gt;R&lt;/strong&gt; einem mit entsprechenden Tests mit einfachen Befehlen.
Nimmt man &lt;strong&gt;MOSAIC&lt;/strong&gt; dazu, so bekommt man u.a. für den Test auf Anteils- oder Mittelwerte sogar einen sehr einfachen, weil einheitlichen, Syntax.&lt;/p&gt;
&lt;div id=&#34;zwei-beispiele-für-approximative-hypothesentests-mit-mosaic&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Zwei Beispiele für approximative Hypothesentests mit MOSAIC&lt;/h3&gt;
&lt;p&gt;Laden wir unsere Testdaten, die &lt;strong&gt;tipping&lt;/strong&gt; Daten wie folgt:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mosaic)
download.file(&amp;quot;https://goo.gl/whKjnl&amp;quot;, destfile = &amp;quot;tips.csv&amp;quot;)
tips &amp;lt;- read.csv2(&amp;quot;tips.csv&amp;quot;)
set.seed(2009)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dann erstellen wir zwei Forschungsfragen:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Ist der mittlere Frauenanteil unter der Bezahler*innen zu den Zeitpunkten Lunch und Dinner gleich?&lt;/li&gt;
&lt;li&gt;Ist der mittlere Rechnungsbetrag zu den Zeitpunkten Lunch und Dinner gleich?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Im ersten Fall ist die Hypothese schnell geschrieben:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
H_0 : \pi_{\text{Lunch}} = \pi_{\text{Dinner}} \quad\text{vs.}\quad H_1 : \pi_{\text{Lunch}} \neq \pi_{\text{Dinner}}
\]&lt;/span&gt;
Der approximative Test mit R und MOSAIC lautet nun:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;prop.test(sex ~ time, success = &amp;quot;Female&amp;quot;, data = tips)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  2-sample test for equality of proportions with continuity correction
## 
## data:  tally(sex ~ time)
## X-squared = 9.3438, df = 1, p-value = 0.002237
## alternative hypothesis: two.sided
## 95 percent confidence interval:
##  -0.36602563 -0.07247705
## sample estimates:
##    prop 1    prop 2 
## 0.2954545 0.5147059&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ähnlich sieht es für den zweiten Fall aus. Die Hypothese lautet hier:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
H_0 : \mu_{Lunch} = \mu_{Dinner} \quad\text{vs.}\quad H_1 : \mu_{Lunch} \neq \mu_{Dinner}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Der dazugehörige Test lautet dann:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;t.test(total_bill ~ time, data = tips)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Welch Two Sample t-test
## 
## data:  total_bill by time
## t = 3.123, df = 143.29, p-value = 0.002167
## alternative hypothesis: true difference in means between group Dinner and group Lunch is not equal to 0
## 95 percent confidence interval:
##  1.331877 5.925088
## sample estimates:
## mean in group Dinner  mean in group Lunch 
##             20.79716             17.16868&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;simulation-der-nullverteilung-mit-mosaic&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Simulation der Nullverteilung mit MOSAIC&lt;/h2&gt;
&lt;p&gt;Ein anderer Weg ist es die Stichprobe selber zu nutzen um daraus eine Verteilung der Nullhypothese (die Nullverteilung) ableiten zu können.
Im ersten Fall schaut man sich die Anteilsunterschiede an, wenn man die (potentielle) Abhängigkeit von der Tageszeit (Lunch und Dinner) künstlich “abschaltet”:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(2009)
NullVtlgAntwert &amp;lt;- do(10000) * diffprop(sex ~ shuffle(time),
    success = &amp;quot;Female&amp;quot;, data = tips)
gf_histogram(~diffprop, nint = 25, data = NullVtlgAntwert)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-05-02-ein-wenig-schneller-zur-simulierten-nullverteilung_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Schaut man sich nun die Lage der Anteilsdifferenz der Stichprobe &lt;span class=&#34;math inline&#34;&gt;\(\hat\pi=0.2192513\)&lt;/span&gt; in Bezug auf diese Nullverteilung geometrisch an, so kann man schon einen ersten Eindruck erlangen, ob die Nullhypothese abzulehnen ist oder nicht:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;diffpropdach &amp;lt;- diffprop(sex ~ time, success = &amp;quot;Female&amp;quot;, data = tips)
gf_histogram(~diffprop, nint = 25, data = NullVtlgAntwert) +
    geom_vline(xintercept = diffpropdach, color = &amp;quot;blue&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-05-02-ein-wenig-schneller-zur-simulierten-nullverteilung_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Offenbar ist &lt;span class=&#34;math inline&#34;&gt;\(\hat\pi\)&lt;/span&gt; kein sehr häufiges Ereignis.&lt;/p&gt;
&lt;p&gt;Der &lt;em&gt;p-Wert&lt;/em&gt; ist ebenfalls leicht zu ermitteln:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pvalue_aw &amp;lt;- prop(~abs(diffprop) &amp;gt;= abs(diffpropdach), data = NullVtlgAntwert)
pvalue_aw&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## prop_TRUE 
##    0.0018&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mit einem Anteilswert (p-Wert) von 0.0018 zweigen wir wie selten das Ereignis unter der &lt;span class=&#34;math inline&#34;&gt;\(H_0\)&lt;/span&gt; ist.&lt;/p&gt;
&lt;p&gt;Ähnlich sieht die Situation im zweien Fall aus. Mit Hilfe weniger Befehle erzeugen wir die Nullverteilung:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(2009)
NullVtlgMittelwert &amp;lt;- do(10000) * diffmean(total_bill ~ shuffle(time),
    data = tips)
gf_histogram(~diffmean, nint = 25, data = NullVtlgMittelwert)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-05-02-ein-wenig-schneller-zur-simulierten-nullverteilung_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Und können im Anschluss die Mittelwertsdifferenz der Stichprobe geometrisch einordnen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;diffmeandach &amp;lt;- diffmean(total_bill ~ time, data = tips)
gf_histogram(~diffmean, nint = 25, data = NullVtlgMittelwert) +
    geom_vline(xintercept = diffmeandach, color = &amp;quot;blue&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-05-02-ein-wenig-schneller-zur-simulierten-nullverteilung_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Auch den &lt;em&gt;p-Wert&lt;/em&gt; können wir wieder leicht bestimmen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pvalue_mw &amp;lt;- prop(~abs(diffmean) &amp;gt;= abs(diffmeandach), data = NullVtlgMittelwert)
pvalue_mw&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## prop_TRUE 
##    0.0047&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;das-problem-zeit&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Das Problem – Zeit&lt;/h2&gt;
&lt;p&gt;Das Problem bei der Simulation ist die Zeit, die &lt;strong&gt;R&lt;/strong&gt; braucht um die Nullverteilungen zu generieren.
Das liegt im wesentlichen an Mosaic.
Mit den Routinen aus &lt;a href=&#34;https://github.com/NMarkgraf/FastSimNullDistR&#34;&gt;FastSimNullDistR&lt;/a&gt; lassen sich die Nullverteilungen deutlich schneller berechnen.
Ein Vergleich:&lt;/p&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:600px;&#34; class=&#34;profvis html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;message&#34;:{&#34;prof&#34;:{&#34;time&#34;:[1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,12,12,12,12,12,12,13,13,13,13,13,13,13,14,14,14,14,14,14,14,15,15,15,15,15,15,15,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,21,21,22,22,22,22,22,22,22,23,23,23,23,23,24,24,24,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,28,28,28,28,28,29,29,29,29,30,30,30,30,30,30,30,31,31,31,31,31,31,31,32,32,32,32,32,32,32,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,38,38,38,38,38,38,38,39,39,39,39,39,39,40,40,40,40,40,41,41,41,41,42,42,42,42,42,42,42,42,43,43,43,43,43,43,44,44,44,44,44,45,45,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,50,50,51,51,51,52,52,53,53,53,53,53,53,53,54,54,55,55,55,55,55,55,55,55,56,56,56,56,56,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,58,58,58,59,59,59,59,59,59,60,60,60,60,60,60,60,60,61,61,61,61,61,61,62,62,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,64,64,64,64,64,64,64,64,65,65,65,65,65,65,65,65,65,65,66,66,66,66,67,67,67,67,67,68,68,68,68,68,68,69,69,69,69,69,69,69,70,70,70,70,70,70,70,71,71,71,71,71,71,71,72,72,72,72,72,73,73,73,73,73,73,73,73,74,74,74,74,74,74,75,75,75,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,78,78,78,79,79,79,80,80,80,80,80,80,80,80,80,81,81,81,81,81,81,81,81,81,81,82,82,82,82,82,83,83,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,85,85,85,85,85,85,85,85,85,85,86,86,86,86,86,87,87,88,88,88,88,88,88,88,88,88,88,89,89,89,89,89,89,89,89,90,90,90,90,90,90,91,91,91,91,91,91,91,92,92,92,92,92,92,92,92,92,92,93,93,93,93,93,93,93,93,94,94,95,95,95,95,95,95,95,95,96,96,96,96,96,96,96,97,97,97,97,97,97,98,98,99,99,99,99,99,100,100,101,101,101,101,101,102,102,102,102,102,103,103,103,103,103,103,103,103,103,104,104,104,104,104,104,104,104,104,104,104,104,104,105,105,105,105,105,105,105,105,106,106,106,106,106,106,106,106,107,107,107,107,107,107,107,107,108,108,108,108,108,108,108,108,109,109,109,109,109,110,110,110,110,110,110,111,111,111,111,111,111,111,112,112,113,113,113,113,113,113,113,114,114,114,114,114,114,114,115,115,116,116,116,116,116,116,116,116,116,117,117,117,117,117,118,118,118,118,118,118,118,119,119,119,119,119,119,119,119,119,119,119,120,120,120,120,120,120,120,120,120,121,121,121,121,121,122,122,122,122,122,122,122,123,123,123,123,123,124,124,124,124,124,124,124,125,125,126,126,126,126,126,127,127,127,127,127,127,127,127,128,128,128,128,128,128,128,129,129,129,129,129,129,129,129,130,130,130,130,131,131,131,131,131,131,131,132,132,132,132,132,132,132,132,132,132,132,133,133,133,133,133,133,133,134,134,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,136,136,136,136,136,136,136,136,136,136,136,137,137,137,137,137,138,138,138,138,138,138,138,138,139,139,139,139,139,139,139,139,140,140,140,140,140,141,141,141,141,141,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,143,143,143,144,144,144,144,144,144,144,145,145,145,145,145,145,145,145,146,146,146,146,146,146,146,147,147,148,148,148,148,148,148,148,149,149,149,149,149,149,149,149,150,150,150,151,151,151,151,151,151,152,152,152,152,152,152,153,153,153,153,153,153,153,153,153,153,153,154,154,154,154,154,154,154,155,155,156,156,156,156,156,156,156,156,156,156,157,157,157,157,157,157,157,157,157,157,158,158,158,158,158,158,158,158,159,159,159,159,159,159,159,159,160,160,160,160,160,160,160,161,161,161,161,161,162,162,162,162,162,162,162,163,163,163,163,163,163,164,164,164,164,164,164,164,165,165,165,165,165,165,166,166,166,166,166,166,166,166,166,166,167,167,167,167,167,167,168,168,168,168,168,168,169,169,169,169,170,170,170,170,170,170,171,171,171,171,171,171,171,172,172,172,172,173,173,173,173,173,174,174,174,174,174,174,174,174,174,175,175,176,176,176,176,176,177,177,177,177,177,177,177,178,178,178,178,178,178,179,179,179,179,179,179,179,179,180,180,180,180,180,180,180,180,181,181,181,181,181,181,181,181,181,182,182,182,182,182,182,182,183,183,183,184,184,184,184,184,184,185,185,185,185,185,185,185,186,186,186,186,186,187,187,187,187,187,187,188,188,189,189,190,190,190,190,190,190,190,191,191,192,192,193,193,194,194,194,194,194,194,195,195,195,195,196,196,196,196,196,196,196,197,197,197,197,197,197,197,197,197,197,197,198,198,198,198,198,198,198,199,199,200,200,200,200,200,201,201,201,201,201,201,201,201,202,202,202,202,202,202,202,202,202,202,202,203,203,203,203,203,203,203,203,204,204,205,205,206,206,206,206,206,206,206,206,207,207,207,207,207,207,207,207,207,207,207,208,208,208,208,208,208,208,209,209,209,209,209,209,209,209,209,209,209,210,210,210,210,210,210,210,211,211,211,211,211,211,212,212,212,212,212,212,212,213,213,213,213,213,213,213,213,213,213,214,214,214,214,215,215,215,215,215,216,216,216,216,216,216,216,216,216,216,216,217,217,217,217,217,217,217,217,217,218,218,218,218,218,218,218,218,218,219,219,220,220,220,220,220,220,221,221,221,221,221,221,221,221,222,222,222,222,222,222,223,223,224,224,224,224,224,224,224,225,225,225,226,226,226,226,226,226,226,227,227,227,227,227,227,228,228,228,228,229,229,229,229,229,229,229,230,230,231,231,231,231,231,231,231,232,232,232,232,232,232,232,232,232,233,233,233,233,233,234,234,234,234,234,234,234,235,235,235,235,235,235,235,235,236,236,236,236,236,236,236,236,237,237,237,237,237,237,237,237,237,237,238,238,239,239,240,240,240,240,240,240,240,241,241,241,241,241,241,241,241,241,242,242,242,242,243,243,243,243,243,243,243,244,244,244,244,244,244,244,245,245,245,245,245,245,245,245,245,245,246,246,246,246,246,246,247,247,247,247,247,247,247,247,247,248,248,248,248,248,248,248,248,248,248,249,249,249,249,249,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,251,251,251,252,252,252,252,252,253,253,253,253,253,253,254,254,254,254,254,254,254,255,255,255,255,255,255,255,255,256,256,256,256,256,256,256,256,256,256,256,257,257,257,257,257,257,257,258,258,258,258,258,258,259,259,259,259,259,259,259,259,259,260,260,260,261,261,261,261,261,261,262,262,262,262,262,262,262,263,263,263,263,263,263,263,264,264,264,265,265,265,265,265,266,266,266,266,266,266,266,266,267,267,267,267,267,267,268,268,268,268,268,268,268,268,268,268,269,269,269,269,269,269,269,270,270,270,270,270,270,270,271,271,271,271,271,271,272,272,272,272,272,272,273,273,273,273,273,273,274,274,274,274,274,274,275,275,275,275,275,275,275,275,275,275,276,276,277,277,277,277,277,278,278,278,278,278,278,279,279,279,279,279,279,279,279,279,280,280,280,280,280,280,280,280,280,280,281,281,281,281,281,281,281,281,281,282,282,282,282,282,282,283,283,283,283,283,283,283,283,284,284,284,284,284,284,284,285,285,285,285,285,286,286,286,286,286,287,287,288,288,288,288,288,289,289,289,289,290,290,290,290,290,290,290,290,291,291,291,291,291,291,291,292,292,292,292,292,292,292,292,293,293,293,293,294,294,294,294,294,294,294,294,294,294,294,294,294,295,295,295,295,295,295,296,296,296,296,296,296,296,296,296,296,296,297,297,297,297,297,298,298,298,298,298,298,298,299,299,299,299,299,299,299,300,300,300,300,300,300,300,301,301,301,301,301,301,301,301,301,301,301,301,302,302,302,302,302,302,302,302,303,303,304,304,305,305,305,305,305,305,305,306,306,306,306,306,306,306,306,306,306,306,307,307,307,307,307,307,307,307,307,307,308,308,309,309,310,310,310,310,310,311,311,311,311,311,311,311,312,312,312,312,312,312,312,312,312,312,312,313,313,313,313,313,313,313,313,314,314,314,314,314,314,315,315,316,316,316,317,317,317,317,317,317,317,317,318,318,318,318,318,318,318,319,319,320,320,320,320,320,320,321,321,321,321,321,321,321,321,322,322,322,322,322,322,322,322,323,323,323,324,324,324,324,324,324,324,324,324,325,325,325,326,326,326,326,326,326,326,326,326,327,327,327,327,327,327,328,328,328,328,328,328,328,329,329,329,329,329,329,329,330,330,330,330,330,330,330,330,330,330,330,331,331,331,331,331,331,332,332,332,332,332,332,333,333,333,333,333,333,334,334,334,334,334,334,335,335,335,335,335,335,335,335,336,336,336,336,336,336,336,336,336,336,337,337,337,337,337,337,337,337,337,337,338,338,338,338,338,338,338,339,339,339,339,339,339,339,339,340,340,340,340,340,340,340,340,340,340,340,341,341,341,341,341,341,342,342,342,342,342,342,342,343,343,344,344,345,345,346,346,346,346,346,346,347,347,347,347,347,347,347,348,348,348,348,348,348,348,348,348,349,349,350,350,350,350,350,350,350,350,351,351,351,351,351,351,352,352,352,352,352,352,352,352,353,353,353,353,353,354,354,354,354,354,354,354,354,355,355,355,355,356,356,356,356,356,356,356,356,357,357,357,357,357,357,357,357,358,358,358,358,358,358,358,359,359,359,359,359,360,360,360,360,360,360,360,360,361,361,361,361,361,361,361,361,362,362,363,363,363,363,363,363,363,364,364,365,365,365,365,365,365,365,366,366,366,366,366,366,366,366,367,367,367,367,367,367,367,367,367,367,367,367,368,368,368,368,368,368,368,368,368,368,369,369,369,369,369,369,369,370,370,370,370,370,370,370,370,371,371,372,372,372,372,372,372,372,372,372,372,372,373,373,373,373,373,373,374,374,374,374,374,374,374,374,375,375,375,375,375,375,375,375,375,375,375,376,376,376,376,376,376,376,376,376,376,377,377,377,377,377,378,378,378,378,379,379,380,380,380,380,380,380,380,381,381,381,381,381,382,382,382,382,382,382,383,383,384,384,384,384,384,384,384,384,385,385,385,385,385,385,385,385,386,386,386,386,386,386,386,386,386,387,387,387,387,387,387,387,387,388,388,388,388,389,389,389,389,389,389,389,390,390,390,390,390,391,391,391,391,391,391,391,392,392,392,392,392,393,393,393,393,393,393,393,394,394,394,394,394,395,395,395,395,395,395,395,396,396,396,396,396,397,397,397,397,397,397,397,397,397,397,398,398,398,398,398,398,398,398,398,398,398,399,399,399,399,399,399,399,399,400,400,400,400,400,401,401,401,401,401,401,402,402,402,402,402,402,402,403,403,404,404,404,404,404,404,404,405,405,405,405,406,406,406,406,406,406,406,406,406,406,407,407,407,407,407,407,407,407,407,408,408,408,408,408,408,408,408,408,408,409,409,409,409,409,409,409,410,410,411,411,411,411,411,411,411,412,412,412,412,412,412,412,413,413,413,413,413,413,413,413,414,414,414,414,414,414,414,415,415,415,415,415,415,415,415,415,415,415,416,416,416,416,416,417,417,417,417,417,417,417,418,418,418,418,418,419,419,419,419,419,420,420,420,420,420,420,420,420,421,421,421,421,421,421,421,422,422,422,422,422,422,422,422,423,423,423,423,423,423,423,424,424,425,425,425,426,426,426,426,426,426,426,426,427,427,427,427,427,427,427,427,428,428,429,429,429,429,429,429,429,430,430,430,430,430,430,430,431,431,431,431,431,431,431,431,432,432,433,433,433,433,433,433,434,434,434,434,434,435,435,435,435,435,436,436,436,436,436,436,436,437,437,437,437,437,437,437,437,437,437,438,438,439,439,439,439,439,439,439,439,439,439,439,440,440,440,440,440,440,440,440,441,441,441,441,441,442,442,442,442,442,442,442,442,443,443,443,443,443,443,444,444,444,444,444,444,444,444,444,444,445,445,445,445,445,446,446,446,446,446,446,447,447,447,447,447,447,447,447,447,448,448,448,448,448,448,449,449,449,449,449,450,450,450,450,450,450,450,451,451,451,451,451,452,452,453,453,453,453,453,453,453,454,454,455,455,455,455,455,455,455,455,455,455,456,456,456,456,456,456,456,456,457,457,457,457,457,457,457,457,458,458,458,458,458,458,458,458,458,458,459,459,459,459,459,459,459,459,459,459,460,460,460,460,460,460,460,461,461,461,462,462,462,462,462,462,462,463,463,464,464,464,464,464,464,464,464,465,465,465,465,465,466,466,466,466,466,466,467,467,467,467,467,467,467,467,467,467,468,468,468,468,468,469,469,469,469,469,469,470,470,471,471,471,471,471,471,471,472,472,473,473,473,473,473,474,474,474,474,474,474,474,474,475,475,475,475,475,475,476,476,476,476,476,476,477,477,477,477,477,477,477,478,478,478,478,478,479,479,479,479,479,479,479,480,480,480,480,480,480,480,480,480,480,480,480,481,481,481,481,481,481,481,481,482,482,482,482,482,482,482,482,482,482,482,483,483,483,483,483,483,483,484,484,484,484,484,484,484,484,484,484,485,485,486,486,486,486,487,487,487,487,487,487,488,488,488,488,488,488,488,488,489,489,489,489,489,490,490,490,490,490,490,490,490,491,491,491,491,491,492,492,492,493,493,493,493,493,493,493,493,493,494,494,494,494,494,494,494,494,495,495,495,495,495,495,495,495,495,495,496,496,496,496,496,496,496,496,496,497,497,497,497,497,497,497,498,498,498,498,498,498,498,499,499,499,499,499,499,499,499,499,499,499,500,500,501,501,501,501,501,501,501,502,502,503,503,503,503,503,503,503,504,504,504,504,504,504,504,504,504,504,505,505,505,505,505,505,505,505,506,506,506,507,507,507,507,507,507,507,507,507,508,508,508,508,508,508,508,508,509,509,509,509,509,509,509,510,510,510,510,510,510,510,511,511,511,511,511,511,511,512,512,512,512,512,512,512,512,513,513,513,513,513,513,513,513,514,514,515,515,515,515,515,515,515,515,515,516,516,516,516,516,516,516,516,516,517,517,517,517,517,517,518,518,518,518,518,519,519,519,519,519,519,519,520,520,520,520,520,520,521,521,521,522,522,522,522,522,523,523,523,523,523,523,524,524,525,525,525,525,525,525,525,525,525,525,526,526,526,526,526,526,526,527,527,527,527,527,527,527,527,527,527,528,528,528,528,528,528,528,529,529,529,529,529,530,530,531,531,531,531,531,531,531,531,532,532,532,532],&#34;depth&#34;:[5,4,3,2,1,7,6,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,2,1,3,2,1,2,1,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,3,2,1,3,2,1,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,2,1,5,4,3,2,1,2,1,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,2,1,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,2,1,2,1,7,6,5,4,3,2,1,2,1,2,1,2,1,6,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,2,1,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,4,3,2,1,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,2,1,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,2,1,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,2,1,5,4,3,2,1,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,2,1,2,1,5,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,2,1,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,3,2,1,9,8,7,6,5,4,3,2,1,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,2,1,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,4,3,2,1,2,1,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,4,3,2,1,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,2,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,2,1,7,6,5,4,3,2,1,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,2,1,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,3,2,1,5,4,3,2,1,6,5,4,3,2,1,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,4,3,2,1],&#34;label&#34;:[&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;enexpr&#34;,&#34;rhs_or_expr&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[.data.frame&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;enexpr&#34;,&#34;rhs_or_expr&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list.default&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;Anonymous&gt;&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diff&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;enexpr&#34;,&#34;rhs_or_expr&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.parent&#34;,&#34;match.arg&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;==&#34;,&#34;local&#34;,&#34;diff.default&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.External&#34;,&#34;local&#34;,&#34;unique&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.unique&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list.default&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.parent&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[[&lt;-&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;rhs.parsedFormula&#34;,&#34;rhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;as.data.frame&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;dimnames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;any&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;logical&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;list&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.subset&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;NextMethod&#34;,&#34;[.table&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unlist&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;any&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;match.fun&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;is.na&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;lhs&#34;,&#34;lhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.parent&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.row_names_info&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.set_row_names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;anyNA&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.parent&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;nzchar&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;rhs&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaicCore::tally&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[.data.frame&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;NextMethod&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.integer&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;lhs.parsedFormula&#34;,&#34;lhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.subset&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.parent&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;=&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;abs&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;$&#34;,&#34;condition.parsedFormula&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;list.names&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;rhs_or_expr&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaicCore::tally&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.unique&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;is.call&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;do.call&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;is.pairlist&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;is.factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unlist&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;seq.int&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;dim&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parent.frame&#34;,&#34;caller_env&#34;,&#34;rlang::eval_tidy&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;is.factor&#34;,&#34;FUN&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.fun&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parent.frame&#34;,&#34;rlang::enexpr&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;formals&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;formals&#34;,&#34;match.arg&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;dim.data.frame&#34;,&#34;ncol&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;enexpr&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;Anonymous&gt;&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;environment&#34;,&#34;&lt;Anonymous&gt;&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.subset&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.subset&#34;,&#34;local&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;enexpr&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;formals&#34;,&#34;match.arg&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;names&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;enexpr&#34;,&#34;rhs_or_expr&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;startsWith&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.integer&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;any&#34;,&#34;local&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;unlist&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;~&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unlist&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;any&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[.data.frame&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.frame&#34;,&#34;match.arg&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;list.names&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;vapply&#34;,&#34;list.names&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;any&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;enexpr&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;names&lt;-&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;unlist&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;environment&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parent.frame&#34;,&#34;&lt;Anonymous&gt;&#34;,&#34;rhs_or_expr&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;$&#34;,&#34;rhs.parsedFormula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;integer&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;names&#34;,&#34;local&#34;,&#34;rhs&#34;,&#34;rhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.subset&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;pmatch&#34;,&#34;match.arg&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;cull&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sum&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prod&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.fun&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unlist&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list.default&#34;,&#34;alist&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;abs&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.function&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;dim&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list.default&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;diff.default&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;$&#34;,&#34;condition.parsedFormula&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;max&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;alist&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unlist&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;[[&lt;-&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sum&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;logical2factor&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;rhs_or_expr&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;checkHT&#34;,&#34;tail.default&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;rhs&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;any&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sum&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;rhs&#34;,&#34;rhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.function&#34;,&#34;match.arg&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;array&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;rhs&#34;,&#34;rhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[.data.frame&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;NextMethod&#34;,&#34;[.table&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;rlang::is_formula&#34;,&#34;rhs_or_expr&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;is.factor&#34;,&#34;FUN&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;$&#34;,&#34;condition.parsedFormula&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[.table&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;condition.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;sample&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;logical&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.unique&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;list.names&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.External2&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;enexpr&#34;,&#34;rhs_or_expr&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;match.fun&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diff.default&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;names&#34;,&#34;local&#34;,&#34;.set_row_names&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;list.names&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;utils::tail&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;NextMethod&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;],&#34;filenum&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],&#34;linenum&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],&#34;memalloc&#34;:[27.7949066162109,27.7949066162109,27.7949066162109,27.7949066162109,27.7949066162109,28.6707229614258,28.6707229614258,28.6707229614258,28.6707229614258,28.6707229614258,28.6707229614258,28.6707229614258,29.3246383666992,29.3246383666992,29.3246383666992,30.1142044067383,30.1142044067383,30.1142044067383,30.1142044067383,30.1142044067383,30.1142044067383,30.1142044067383,30.9884338378906,30.9884338378906,30.9884338378906,30.9884338378906,30.9884338378906,30.9884338378906,30.9884338378906,31.5646057128906,31.5646057128906,31.5646057128906,31.5646057128906,31.5646057128906,32.1782150268555,32.1782150268555,32.1782150268555,32.1782150268555,32.1782150268555,32.790885925293,32.790885925293,32.790885925293,32.790885925293,32.790885925293,33.3740539550781,33.3740539550781,33.3740539550781,33.3740539550781,33.3740539550781,33.3740539550781,33.3740539550781,33.9704742431641,33.9704742431641,33.9704742431641,33.9704742431641,33.9704742431641,33.9704742431641,33.9704742431641,33.9704742431641,34.5922470092773,34.5922470092773,34.5922470092773,34.5922470092773,34.5922470092773,34.5922470092773,34.5922470092773,35.8214263916016,35.8214263916016,35.8214263916016,35.8214263916016,35.8214263916016,35.8214263916016,36.4345245361328,36.4345245361328,36.4345245361328,36.4345245361328,36.4345245361328,36.4345245361328,36.4345245361328,37.0491485595703,37.0491485595703,37.0491485595703,37.0491485595703,37.0491485595703,37.0491485595703,37.0491485595703,37.658203125,37.658203125,37.658203125,37.658203125,37.658203125,37.658203125,37.658203125,28.0479278564453,28.0479278564453,28.0479278564453,28.0479278564453,28.0479278564453,28.0479278564453,28.0479278564453,28.6614456176758,28.6614456176758,28.6614456176758,28.6614456176758,28.6614456176758,28.6614456176758,28.6614456176758,28.6614456176758,28.6614456176758,28.6614456176758,28.6614456176758,28.6614456176758,29.2713317871094,29.2713317871094,29.2713317871094,29.2713317871094,29.2713317871094,30.510124206543,30.510124206543,30.510124206543,30.510124206543,30.510124206543,30.510124206543,30.510124206543,30.510124206543,31.7458572387695,31.7458572387695,31.7458572387695,31.7458572387695,31.7458572387695,31.7458572387695,32.3782730102539,32.3782730102539,32.9480133056641,32.9480133056641,32.9480133056641,32.9480133056641,32.9480133056641,32.9480133056641,32.9480133056641,33.5151138305664,33.5151138305664,33.5151138305664,33.5151138305664,33.5151138305664,34.1284713745117,34.1284713745117,34.1284713745117,34.7872619628906,34.7872619628906,34.7872619628906,34.7872619628906,34.7872619628906,34.7872619628906,34.7872619628906,35.4008560180664,35.4008560180664,35.4008560180664,35.4008560180664,35.4008560180664,35.4008560180664,35.4008560180664,35.4008560180664,35.4008560180664,35.4008560180664,35.4008560180664,35.4008560180664,35.4008560180664,36.2895660400391,36.2895660400391,36.2895660400391,36.2895660400391,36.2895660400391,36.2895660400391,36.2895660400391,37.1046371459961,37.1046371459961,37.1046371459961,37.1046371459961,37.1046371459961,27.293571472168,27.293571472168,27.293571472168,27.293571472168,28.0140228271484,28.0140228271484,28.0140228271484,28.0140228271484,28.0140228271484,28.0140228271484,28.0140228271484,28.6696243286133,28.6696243286133,28.6696243286133,28.6696243286133,28.6696243286133,28.6696243286133,28.6696243286133,29.5270919799805,29.5270919799805,29.5270919799805,29.5270919799805,29.5270919799805,29.5270919799805,29.5270919799805,30.24169921875,30.24169921875,30.24169921875,30.24169921875,30.24169921875,30.24169921875,30.24169921875,31.0280990600586,31.0280990600586,31.0280990600586,31.0280990600586,31.0280990600586,31.0280990600586,31.0280990600586,31.0280990600586,31.0280990600586,31.0280990600586,31.0280990600586,31.0280990600586,31.0280990600586,31.0280990600586,31.6589431762695,31.6589431762695,31.6589431762695,31.6589431762695,31.6589431762695,31.6589431762695,31.6589431762695,32.2539367675781,32.2539367675781,32.2539367675781,32.2539367675781,32.2539367675781,32.2539367675781,32.2539367675781,32.2539367675781,32.2539367675781,32.2539367675781,32.2539367675781,33.3707733154297,33.3707733154297,33.3707733154297,33.3707733154297,33.3707733154297,33.9689025878906,33.9689025878906,33.9689025878906,33.9689025878906,33.9689025878906,33.9689025878906,33.9689025878906,34.5769500732422,34.5769500732422,34.5769500732422,34.5769500732422,34.5769500732422,34.5769500732422,35.1809158325195,35.1809158325195,35.1809158325195,35.1809158325195,35.1809158325195,35.747932434082,35.747932434082,35.747932434082,35.747932434082,36.2848052978516,36.2848052978516,36.2848052978516,36.2848052978516,36.2848052978516,36.2848052978516,36.2848052978516,36.2848052978516,36.9107055664062,36.9107055664062,36.9107055664062,36.9107055664062,36.9107055664062,36.9107055664062,37.5353469848633,37.5353469848633,37.5353469848633,37.5353469848633,37.5353469848633,27.4056015014648,27.4056015014648,28.110221862793,28.110221862793,28.110221862793,28.110221862793,28.110221862793,28.110221862793,28.110221862793,28.110221862793,28.110221862793,28.7177047729492,28.7177047729492,28.7177047729492,28.7177047729492,28.7177047729492,28.7177047729492,29.5112152099609,29.5112152099609,29.5112152099609,29.5112152099609,29.5112152099609,29.5112152099609,29.5112152099609,29.5112152099609,30.2541275024414,30.2541275024414,30.2541275024414,30.2541275024414,30.2541275024414,30.2541275024414,30.2541275024414,30.2541275024414,30.2541275024414,30.9294815063477,30.9294815063477,31.561882019043,31.561882019043,31.561882019043,32.3079833984375,32.3079833984375,33.1175155639648,33.1175155639648,33.1175155639648,33.1175155639648,33.1175155639648,33.1175155639648,33.1175155639648,33.7262496948242,33.7262496948242,34.3386001586914,34.3386001586914,34.3386001586914,34.3386001586914,34.3386001586914,34.3386001586914,34.3386001586914,34.3386001586914,35.021369934082,35.021369934082,35.021369934082,35.021369934082,35.021369934082,36.2207107543945,36.2207107543945,36.2207107543945,36.2207107543945,36.2207107543945,36.2207107543945,36.2207107543945,36.2207107543945,36.2207107543945,36.915168762207,36.915168762207,36.915168762207,36.915168762207,36.915168762207,36.915168762207,36.915168762207,36.915168762207,36.915168762207,36.915168762207,36.915168762207,36.915168762207,36.915168762207,37.5458984375,37.5458984375,37.5458984375,37.5458984375,37.5458984375,37.5458984375,27.4503707885742,27.4503707885742,27.4503707885742,27.4503707885742,27.4503707885742,27.4503707885742,27.4503707885742,27.4503707885742,28.2184143066406,28.2184143066406,28.2184143066406,28.2184143066406,28.2184143066406,28.2184143066406,29.0395126342773,29.0395126342773,29.0395126342773,29.0395126342773,29.0395126342773,29.0395126342773,29.0395126342773,29.0395126342773,29.0395126342773,29.0395126342773,29.0395126342773,29.6962051391602,29.6962051391602,29.6962051391602,29.6962051391602,29.6962051391602,29.6962051391602,29.6962051391602,29.6962051391602,29.6962051391602,30.6596450805664,30.6596450805664,30.6596450805664,30.6596450805664,30.6596450805664,30.6596450805664,30.6596450805664,30.6596450805664,31.4011688232422,31.4011688232422,31.4011688232422,31.4011688232422,31.4011688232422,31.4011688232422,31.4011688232422,31.4011688232422,31.4011688232422,31.4011688232422,32.0860290527344,32.0860290527344,32.0860290527344,32.0860290527344,33.3031158447266,33.3031158447266,33.3031158447266,33.3031158447266,33.3031158447266,34.539176940918,34.539176940918,34.539176940918,34.539176940918,34.539176940918,34.539176940918,35.1285400390625,35.1285400390625,35.1285400390625,35.1285400390625,35.1285400390625,35.1285400390625,35.1285400390625,35.7412109375,35.7412109375,35.7412109375,35.7412109375,35.7412109375,35.7412109375,35.7412109375,36.6857986450195,36.6857986450195,36.6857986450195,36.6857986450195,36.6857986450195,36.6857986450195,36.6857986450195,37.2595596313477,37.2595596313477,37.2595596313477,37.2595596313477,37.2595596313477,27.2510223388672,27.2510223388672,27.2510223388672,27.2510223388672,27.2510223388672,27.2510223388672,27.2510223388672,27.2510223388672,28.4878234863281,28.4878234863281,28.4878234863281,28.4878234863281,28.4878234863281,28.4878234863281,29.2843856811523,29.2843856811523,29.2843856811523,30.5110473632812,30.5110473632812,30.5110473632812,30.5110473632812,30.5110473632812,30.5110473632812,30.5110473632812,31.1228408813477,31.1228408813477,31.1228408813477,31.1228408813477,31.1228408813477,31.1228408813477,31.1228408813477,31.1228408813477,32.3469772338867,32.3469772338867,32.3469772338867,33.0910720825195,33.0910720825195,33.0910720825195,34.1616592407227,34.1616592407227,34.1616592407227,34.1616592407227,34.1616592407227,34.1616592407227,34.1616592407227,34.1616592407227,34.1616592407227,35.3837356567383,35.3837356567383,35.3837356567383,35.3837356567383,35.3837356567383,35.3837356567383,35.3837356567383,35.3837356567383,35.3837356567383,35.3837356567383,35.9890365600586,35.9890365600586,35.9890365600586,35.9890365600586,35.9890365600586,36.9617614746094,36.9617614746094,36.9617614746094,36.9617614746094,36.9617614746094,36.9617614746094,36.9617614746094,36.9617614746094,37.7906723022461,37.7906723022461,37.7906723022461,37.7906723022461,37.7906723022461,37.7906723022461,37.7906723022461,37.7906723022461,37.7906723022461,27.1831817626953,27.1831817626953,27.1831817626953,27.1831817626953,27.1831817626953,27.1831817626953,27.1831817626953,27.1831817626953,27.1831817626953,27.1831817626953,27.7781524658203,27.7781524658203,27.7781524658203,27.7781524658203,27.7781524658203,28.4959716796875,28.4959716796875,29.097900390625,29.097900390625,29.097900390625,29.097900390625,29.097900390625,29.097900390625,29.097900390625,29.097900390625,29.097900390625,29.097900390625,29.6928482055664,29.6928482055664,29.6928482055664,29.6928482055664,29.6928482055664,29.6928482055664,29.6928482055664,29.6928482055664,30.892822265625,30.892822265625,30.892822265625,30.892822265625,30.892822265625,30.892822265625,32.0986480712891,32.0986480712891,32.0986480712891,32.0986480712891,32.0986480712891,32.0986480712891,32.0986480712891,33.2114944458008,33.2114944458008,33.2114944458008,33.2114944458008,33.2114944458008,33.2114944458008,33.2114944458008,33.2114944458008,33.2114944458008,33.2114944458008,33.8361358642578,33.8361358642578,33.8361358642578,33.8361358642578,33.8361358642578,33.8361358642578,33.8361358642578,33.8361358642578,34.9192047119141,34.9192047119141,36.0666122436523,36.0666122436523,36.0666122436523,36.0666122436523,36.0666122436523,36.0666122436523,36.0666122436523,36.0666122436523,37.205924987793,37.205924987793,37.205924987793,37.205924987793,37.205924987793,37.205924987793,37.205924987793,37.7595138549805,37.7595138549805,37.7595138549805,37.7595138549805,37.7595138549805,37.7595138549805,27.6282577514648,27.6282577514648,28.3611679077148,28.3611679077148,28.3611679077148,28.3611679077148,28.3611679077148,29.3750076293945,29.3750076293945,30.0142517089844,30.0142517089844,30.0142517089844,30.0142517089844,30.0142517089844,31.198616027832,31.198616027832,31.198616027832,31.198616027832,31.198616027832,31.7974548339844,31.7974548339844,31.7974548339844,31.7974548339844,31.7974548339844,31.7974548339844,31.7974548339844,31.7974548339844,31.7974548339844,32.3918838500977,32.3918838500977,32.3918838500977,32.3918838500977,32.3918838500977,32.3918838500977,32.3918838500977,32.3918838500977,32.3918838500977,32.3918838500977,32.3918838500977,32.3918838500977,32.3918838500977,33.0798873901367,33.0798873901367,33.0798873901367,33.0798873901367,33.0798873901367,33.0798873901367,33.0798873901367,33.0798873901367,34.1732559204102,34.1732559204102,34.1732559204102,34.1732559204102,34.1732559204102,34.1732559204102,34.1732559204102,34.1732559204102,35.0047378540039,35.0047378540039,35.0047378540039,35.0047378540039,35.0047378540039,35.0047378540039,35.0047378540039,35.0047378540039,35.9391860961914,35.9391860961914,35.9391860961914,35.9391860961914,35.9391860961914,35.9391860961914,35.9391860961914,35.9391860961914,36.9409484863281,36.9409484863281,36.9409484863281,36.9409484863281,36.9409484863281,37.5222778320312,37.5222778320312,37.5222778320312,37.5222778320312,37.5222778320312,37.5222778320312,27.4482574462891,27.4482574462891,27.4482574462891,27.4482574462891,27.4482574462891,27.4482574462891,27.4482574462891,28.1481704711914,28.1481704711914,29.1106338500977,29.1106338500977,29.1106338500977,29.1106338500977,29.1106338500977,29.1106338500977,29.1106338500977,29.6922378540039,29.6922378540039,29.6922378540039,29.6922378540039,29.6922378540039,29.6922378540039,29.6922378540039,30.8730697631836,30.8730697631836,31.4908218383789,31.4908218383789,31.4908218383789,31.4908218383789,31.4908218383789,31.4908218383789,31.4908218383789,31.4908218383789,31.4908218383789,32.0914306640625,32.0914306640625,32.0914306640625,32.0914306640625,32.0914306640625,32.6693267822266,32.6693267822266,32.6693267822266,32.6693267822266,32.6693267822266,32.6693267822266,32.6693267822266,33.2659225463867,33.2659225463867,33.2659225463867,33.2659225463867,33.2659225463867,33.2659225463867,33.2659225463867,33.2659225463867,33.2659225463867,33.2659225463867,33.2659225463867,33.8498992919922,33.8498992919922,33.8498992919922,33.8498992919922,33.8498992919922,33.8498992919922,33.8498992919922,33.8498992919922,33.8498992919922,34.4512634277344,34.4512634277344,34.4512634277344,34.4512634277344,34.4512634277344,35.0344390869141,35.0344390869141,35.0344390869141,35.0344390869141,35.0344390869141,35.0344390869141,35.0344390869141,35.6328430175781,35.6328430175781,35.6328430175781,35.6328430175781,35.6328430175781,36.2160186767578,36.2160186767578,36.2160186767578,36.2160186767578,36.2160186767578,36.2160186767578,36.2160186767578,36.7994766235352,36.7994766235352,37.3833312988281,37.3833312988281,37.3833312988281,37.3833312988281,37.3833312988281,27.6854782104492,27.6854782104492,27.6854782104492,27.6854782104492,27.6854782104492,27.6854782104492,27.6854782104492,27.6854782104492,28.2845916748047,28.2845916748047,28.2845916748047,28.2845916748047,28.2845916748047,28.2845916748047,28.2845916748047,29.0318603515625,29.0318603515625,29.0318603515625,29.0318603515625,29.0318603515625,29.0318603515625,29.0318603515625,29.0318603515625,29.6390228271484,29.6390228271484,29.6390228271484,29.6390228271484,30.2382507324219,30.2382507324219,30.2382507324219,30.2382507324219,30.2382507324219,30.2382507324219,30.2382507324219,31.4500503540039,31.4500503540039,31.4500503540039,31.4500503540039,31.4500503540039,31.4500503540039,31.4500503540039,31.4500503540039,31.4500503540039,31.4500503540039,31.4500503540039,32.6606903076172,32.6606903076172,32.6606903076172,32.6606903076172,32.6606903076172,32.6606903076172,32.6606903076172,33.8561553955078,33.8561553955078,33.8561553955078,33.8561553955078,33.8561553955078,33.8561553955078,33.8561553955078,33.8561553955078,33.8561553955078,33.8561553955078,33.8561553955078,34.4563598632812,34.4563598632812,34.4563598632812,34.4563598632812,34.4563598632812,34.4563598632812,34.4563598632812,34.4563598632812,34.4563598632812,34.4563598632812,35.6492233276367,35.6492233276367,35.6492233276367,35.6492233276367,35.6492233276367,35.6492233276367,35.6492233276367,35.6492233276367,35.6492233276367,35.6492233276367,35.6492233276367,36.439582824707,36.439582824707,36.439582824707,36.439582824707,36.439582824707,37.3450088500977,37.3450088500977,37.3450088500977,37.3450088500977,37.3450088500977,37.3450088500977,37.3450088500977,37.3450088500977,37.8384170532227,37.8384170532227,37.8384170532227,37.8384170532227,37.8384170532227,37.8384170532227,37.8384170532227,37.8384170532227,27.7244644165039,27.7244644165039,27.7244644165039,27.7244644165039,27.7244644165039,28.4775466918945,28.4775466918945,28.4775466918945,28.4775466918945,28.4775466918945,29.6736145019531,29.6736145019531,29.6736145019531,29.6736145019531,29.6736145019531,29.6736145019531,29.6736145019531,30.8800735473633,30.8800735473633,30.8800735473633,30.8800735473633,30.8800735473633,30.8800735473633,30.8800735473633,30.8800735473633,30.8800735473633,30.8800735473633,30.8800735473633,30.8800735473633,32.0762710571289,32.0762710571289,32.0762710571289,32.0762710571289,32.0762710571289,32.0762710571289,32.0762710571289,33.2583618164062,33.2583618164062,33.2583618164062,33.2583618164062,33.2583618164062,33.2583618164062,33.2583618164062,33.2583618164062,34.4517440795898,34.4517440795898,34.4517440795898,34.4517440795898,34.4517440795898,34.4517440795898,34.4517440795898,35.5194091796875,35.5194091796875,36.3210983276367,36.3210983276367,36.3210983276367,36.3210983276367,36.3210983276367,36.3210983276367,36.3210983276367,36.9325561523438,36.9325561523438,36.9325561523438,36.9325561523438,36.9325561523438,36.9325561523438,36.9325561523438,36.9325561523438,37.5266723632812,37.5266723632812,37.5266723632812,27.3978652954102,27.3978652954102,27.3978652954102,27.3978652954102,27.3978652954102,27.3978652954102,28.0308074951172,28.0308074951172,28.0308074951172,28.0308074951172,28.0308074951172,28.0308074951172,28.6330947875977,28.6330947875977,28.6330947875977,28.6330947875977,28.6330947875977,28.6330947875977,28.6330947875977,28.6330947875977,28.6330947875977,28.6330947875977,28.6330947875977,29.4235992431641,29.4235992431641,29.4235992431641,29.4235992431641,29.4235992431641,29.4235992431641,29.4235992431641,30.0365524291992,30.0365524291992,30.6792831420898,30.6792831420898,30.6792831420898,30.6792831420898,30.6792831420898,30.6792831420898,30.6792831420898,30.6792831420898,30.6792831420898,30.6792831420898,31.8285827636719,31.8285827636719,31.8285827636719,31.8285827636719,31.8285827636719,31.8285827636719,31.8285827636719,31.8285827636719,31.8285827636719,31.8285827636719,33.0432052612305,33.0432052612305,33.0432052612305,33.0432052612305,33.0432052612305,33.0432052612305,33.0432052612305,33.0432052612305,33.64990234375,33.64990234375,33.64990234375,33.64990234375,33.64990234375,33.64990234375,33.64990234375,33.64990234375,34.8503036499023,34.8503036499023,34.8503036499023,34.8503036499023,34.8503036499023,34.8503036499023,34.8503036499023,35.5840377807617,35.5840377807617,35.5840377807617,35.5840377807617,35.5840377807617,36.6715240478516,36.6715240478516,36.6715240478516,36.6715240478516,36.6715240478516,36.6715240478516,36.6715240478516,37.2618103027344,37.2618103027344,37.2618103027344,37.2618103027344,37.2618103027344,37.2618103027344,27.6704254150391,27.6704254150391,27.6704254150391,27.6704254150391,27.6704254150391,27.6704254150391,27.6704254150391,28.2699661254883,28.2699661254883,28.2699661254883,28.2699661254883,28.2699661254883,28.2699661254883,29.4917678833008,29.4917678833008,29.4917678833008,29.4917678833008,29.4917678833008,29.4917678833008,29.4917678833008,29.4917678833008,29.4917678833008,29.4917678833008,30.3147430419922,30.3147430419922,30.3147430419922,30.3147430419922,30.3147430419922,30.3147430419922,30.8217086791992,30.8217086791992,30.8217086791992,30.8217086791992,30.8217086791992,30.8217086791992,31.8837966918945,31.8837966918945,31.8837966918945,31.8837966918945,32.9541549682617,32.9541549682617,32.9541549682617,32.9541549682617,32.9541549682617,32.9541549682617,33.5975570678711,33.5975570678711,33.5975570678711,33.5975570678711,33.5975570678711,33.5975570678711,33.5975570678711,34.2023620605469,34.2023620605469,34.2023620605469,34.2023620605469,35.4033584594727,35.4033584594727,35.4033584594727,35.4033584594727,35.4033584594727,36.001594543457,36.001594543457,36.001594543457,36.001594543457,36.001594543457,36.001594543457,36.001594543457,36.001594543457,36.001594543457,37.1711502075195,37.1711502075195,37.7593460083008,37.7593460083008,37.7593460083008,37.7593460083008,37.7593460083008,27.582160949707,27.582160949707,27.582160949707,27.582160949707,27.582160949707,27.582160949707,27.582160949707,28.7816162109375,28.7816162109375,28.7816162109375,28.7816162109375,28.7816162109375,28.7816162109375,29.595458984375,29.595458984375,29.595458984375,29.595458984375,29.595458984375,29.595458984375,29.595458984375,29.595458984375,30.6048126220703,30.6048126220703,30.6048126220703,30.6048126220703,30.6048126220703,30.6048126220703,30.6048126220703,30.6048126220703,31.4360046386719,31.4360046386719,31.4360046386719,31.4360046386719,31.4360046386719,31.4360046386719,31.4360046386719,31.4360046386719,31.4360046386719,32.4168930053711,32.4168930053711,32.4168930053711,32.4168930053711,32.4168930053711,32.4168930053711,32.4168930053711,33.6183700561523,33.6183700561523,33.6183700561523,34.5180130004883,34.5180130004883,34.5180130004883,34.5180130004883,34.5180130004883,34.5180130004883,35.1292037963867,35.1292037963867,35.1292037963867,35.1292037963867,35.1292037963867,35.1292037963867,35.1292037963867,35.6871719360352,35.6871719360352,35.6871719360352,35.6871719360352,35.6871719360352,36.2685012817383,36.2685012817383,36.2685012817383,36.2685012817383,36.2685012817383,36.2685012817383,37.0817184448242,37.0817184448242,27.5020980834961,27.5020980834961,28.1057281494141,28.1057281494141,28.1057281494141,28.1057281494141,28.1057281494141,28.1057281494141,28.1057281494141,28.8638153076172,28.8638153076172,29.7777481079102,29.7777481079102,30.3774032592773,30.3774032592773,30.9293518066406,30.9293518066406,30.9293518066406,30.9293518066406,30.9293518066406,30.9293518066406,31.6011962890625,31.6011962890625,31.6011962890625,31.6011962890625,32.3894729614258,32.3894729614258,32.3894729614258,32.3894729614258,32.3894729614258,32.3894729614258,32.3894729614258,33.1957244873047,33.1957244873047,33.1957244873047,33.1957244873047,33.1957244873047,33.1957244873047,33.1957244873047,33.1957244873047,33.1957244873047,33.1957244873047,33.1957244873047,33.9207611083984,33.9207611083984,33.9207611083984,33.9207611083984,33.9207611083984,33.9207611083984,33.9207611083984,35.109016418457,35.109016418457,36.2765808105469,36.2765808105469,36.2765808105469,36.2765808105469,36.2765808105469,37.4654541015625,37.4654541015625,37.4654541015625,37.4654541015625,37.4654541015625,37.4654541015625,37.4654541015625,37.4654541015625,27.3525238037109,27.3525238037109,27.3525238037109,27.3525238037109,27.3525238037109,27.3525238037109,27.3525238037109,27.3525238037109,27.3525238037109,27.3525238037109,27.3525238037109,28.0384521484375,28.0384521484375,28.0384521484375,28.0384521484375,28.0384521484375,28.0384521484375,28.0384521484375,28.0384521484375,29.2353973388672,29.2353973388672,29.8487243652344,29.8487243652344,30.7691650390625,30.7691650390625,30.7691650390625,30.7691650390625,30.7691650390625,30.7691650390625,30.7691650390625,30.7691650390625,31.3662948608398,31.3662948608398,31.3662948608398,31.3662948608398,31.3662948608398,31.3662948608398,31.3662948608398,31.3662948608398,31.3662948608398,31.3662948608398,31.3662948608398,32.3028945922852,32.3028945922852,32.3028945922852,32.3028945922852,32.3028945922852,32.3028945922852,32.3028945922852,32.8987045288086,32.8987045288086,32.8987045288086,32.8987045288086,32.8987045288086,32.8987045288086,32.8987045288086,32.8987045288086,32.8987045288086,32.8987045288086,32.8987045288086,33.4224090576172,33.4224090576172,33.4224090576172,33.4224090576172,33.4224090576172,33.4224090576172,33.4224090576172,34.297492980957,34.297492980957,34.297492980957,34.297492980957,34.297492980957,34.297492980957,35.1945343017578,35.1945343017578,35.1945343017578,35.1945343017578,35.1945343017578,35.1945343017578,35.1945343017578,35.7981719970703,35.7981719970703,35.7981719970703,35.7981719970703,35.7981719970703,35.7981719970703,35.7981719970703,35.7981719970703,35.7981719970703,35.7981719970703,36.3963012695312,36.3963012695312,36.3963012695312,36.3963012695312,36.9837265014648,36.9837265014648,36.9837265014648,36.9837265014648,36.9837265014648,37.8460693359375,37.8460693359375,37.8460693359375,37.8460693359375,37.8460693359375,37.8460693359375,37.8460693359375,37.8460693359375,37.8460693359375,37.8460693359375,37.8460693359375,28.0160064697266,28.0160064697266,28.0160064697266,28.0160064697266,28.0160064697266,28.0160064697266,28.0160064697266,28.0160064697266,28.0160064697266,28.6138458251953,28.6138458251953,28.6138458251953,28.6138458251953,28.6138458251953,28.6138458251953,28.6138458251953,28.6138458251953,28.6138458251953,29.1928482055664,29.1928482055664,30.3334350585938,30.3334350585938,30.3334350585938,30.3334350585938,30.3334350585938,30.3334350585938,30.9893264770508,30.9893264770508,30.9893264770508,30.9893264770508,30.9893264770508,30.9893264770508,30.9893264770508,30.9893264770508,32.0410461425781,32.0410461425781,32.0410461425781,32.0410461425781,32.0410461425781,32.0410461425781,32.6406707763672,32.6406707763672,33.8364639282227,33.8364639282227,33.8364639282227,33.8364639282227,33.8364639282227,33.8364639282227,33.8364639282227,34.6043930053711,34.6043930053711,34.6043930053711,35.6298446655273,35.6298446655273,35.6298446655273,35.6298446655273,35.6298446655273,35.6298446655273,35.6298446655273,36.4272918701172,36.4272918701172,36.4272918701172,36.4272918701172,36.4272918701172,36.4272918701172,37.0245971679688,37.0245971679688,37.0245971679688,37.0245971679688,27.4346160888672,27.4346160888672,27.4346160888672,27.4346160888672,27.4346160888672,27.4346160888672,27.4346160888672,28.5845336914062,28.5845336914062,29.2456207275391,29.2456207275391,29.2456207275391,29.2456207275391,29.2456207275391,29.2456207275391,29.2456207275391,29.8512420654297,29.8512420654297,29.8512420654297,29.8512420654297,29.8512420654297,29.8512420654297,29.8512420654297,29.8512420654297,29.8512420654297,30.7981491088867,30.7981491088867,30.7981491088867,30.7981491088867,30.7981491088867,31.8232116699219,31.8232116699219,31.8232116699219,31.8232116699219,31.8232116699219,31.8232116699219,31.8232116699219,32.6957321166992,32.6957321166992,32.6957321166992,32.6957321166992,32.6957321166992,32.6957321166992,32.6957321166992,32.6957321166992,33.4710922241211,33.4710922241211,33.4710922241211,33.4710922241211,33.4710922241211,33.4710922241211,33.4710922241211,33.4710922241211,34.6684112548828,34.6684112548828,34.6684112548828,34.6684112548828,34.6684112548828,34.6684112548828,34.6684112548828,34.6684112548828,34.6684112548828,34.6684112548828,35.2812881469727,35.2812881469727,36.48583984375,36.48583984375,37.1161193847656,37.1161193847656,37.1161193847656,37.1161193847656,37.1161193847656,37.1161193847656,37.1161193847656,37.7160263061523,37.7160263061523,37.7160263061523,37.7160263061523,37.7160263061523,37.7160263061523,37.7160263061523,37.7160263061523,37.7160263061523,28.0464019775391,28.0464019775391,28.0464019775391,28.0464019775391,28.6344451904297,28.6344451904297,28.6344451904297,28.6344451904297,28.6344451904297,28.6344451904297,28.6344451904297,29.2313461303711,29.2313461303711,29.2313461303711,29.2313461303711,29.2313461303711,29.2313461303711,29.2313461303711,30.366455078125,30.366455078125,30.366455078125,30.366455078125,30.366455078125,30.366455078125,30.366455078125,30.366455078125,30.366455078125,30.366455078125,30.9613876342773,30.9613876342773,30.9613876342773,30.9613876342773,30.9613876342773,30.9613876342773,32.0335845947266,32.0335845947266,32.0335845947266,32.0335845947266,32.0335845947266,32.0335845947266,32.0335845947266,32.0335845947266,32.0335845947266,32.6221923828125,32.6221923828125,32.6221923828125,32.6221923828125,32.6221923828125,32.6221923828125,32.6221923828125,32.6221923828125,32.6221923828125,32.6221923828125,33.5617065429688,33.5617065429688,33.5617065429688,33.5617065429688,33.5617065429688,34.75,34.75,34.75,34.75,34.75,34.75,34.75,35.8566207885742,35.8566207885742,35.8566207885742,35.8566207885742,35.8566207885742,35.8566207885742,35.8566207885742,35.8566207885742,35.8566207885742,35.8566207885742,35.8566207885742,36.4336166381836,36.4336166381836,36.4336166381836,36.4336166381836,36.4336166381836,37.0204315185547,37.0204315185547,37.0204315185547,37.0204315185547,37.0204315185547,37.0204315185547,37.7652053833008,37.7652053833008,37.7652053833008,37.7652053833008,37.7652053833008,37.7652053833008,37.7652053833008,28.2103958129883,28.2103958129883,28.2103958129883,28.2103958129883,28.2103958129883,28.2103958129883,28.2103958129883,28.2103958129883,29.4218902587891,29.4218902587891,29.4218902587891,29.4218902587891,29.4218902587891,29.4218902587891,29.4218902587891,29.4218902587891,29.4218902587891,29.4218902587891,29.4218902587891,30.0314559936523,30.0314559936523,30.0314559936523,30.0314559936523,30.0314559936523,30.0314559936523,30.0314559936523,30.9679183959961,30.9679183959961,30.9679183959961,30.9679183959961,30.9679183959961,30.9679183959961,31.7821960449219,31.7821960449219,31.7821960449219,31.7821960449219,31.7821960449219,31.7821960449219,31.7821960449219,31.7821960449219,31.7821960449219,32.3912353515625,32.3912353515625,32.3912353515625,33.127311706543,33.127311706543,33.127311706543,33.127311706543,33.127311706543,33.127311706543,33.8388824462891,33.8388824462891,33.8388824462891,33.8388824462891,33.8388824462891,33.8388824462891,33.8388824462891,34.6423797607422,34.6423797607422,34.6423797607422,34.6423797607422,34.6423797607422,34.6423797607422,34.6423797607422,35.8126907348633,35.8126907348633,35.8126907348633,36.4031982421875,36.4031982421875,36.4031982421875,36.4031982421875,36.4031982421875,37.0045471191406,37.0045471191406,37.0045471191406,37.0045471191406,37.0045471191406,37.0045471191406,37.0045471191406,37.0045471191406,37.5901260375977,37.5901260375977,37.5901260375977,37.5901260375977,37.5901260375977,37.5901260375977,27.4285736083984,27.4285736083984,27.4285736083984,27.4285736083984,27.4285736083984,27.4285736083984,27.4285736083984,27.4285736083984,27.4285736083984,27.4285736083984,28.6380004882812,28.6380004882812,28.6380004882812,28.6380004882812,28.6380004882812,28.6380004882812,28.6380004882812,29.2270431518555,29.2270431518555,29.2270431518555,29.2270431518555,29.2270431518555,29.2270431518555,29.2270431518555,30.4351577758789,30.4351577758789,30.4351577758789,30.4351577758789,30.4351577758789,30.4351577758789,31.6335296630859,31.6335296630859,31.6335296630859,31.6335296630859,31.6335296630859,31.6335296630859,32.8314056396484,32.8314056396484,32.8314056396484,32.8314056396484,32.8314056396484,32.8314056396484,34.0236587524414,34.0236587524414,34.0236587524414,34.0236587524414,34.0236587524414,34.0236587524414,35.2189559936523,35.2189559936523,35.2189559936523,35.2189559936523,35.2189559936523,35.2189559936523,35.2189559936523,35.2189559936523,35.2189559936523,35.2189559936523,35.7924194335938,35.7924194335938,36.3921508789062,36.3921508789062,36.3921508789062,36.3921508789062,36.3921508789062,36.9878540039062,36.9878540039062,36.9878540039062,36.9878540039062,36.9878540039062,36.9878540039062,37.8526229858398,37.8526229858398,37.8526229858398,37.8526229858398,37.8526229858398,37.8526229858398,37.8526229858398,37.8526229858398,37.8526229858398,27.9284744262695,27.9284744262695,27.9284744262695,27.9284744262695,27.9284744262695,27.9284744262695,27.9284744262695,27.9284744262695,27.9284744262695,27.9284744262695,29.1569519042969,29.1569519042969,29.1569519042969,29.1569519042969,29.1569519042969,29.1569519042969,29.1569519042969,29.1569519042969,29.1569519042969,29.7642135620117,29.7642135620117,29.7642135620117,29.7642135620117,29.7642135620117,29.7642135620117,30.3777084350586,30.3777084350586,30.3777084350586,30.3777084350586,30.3777084350586,30.3777084350586,30.3777084350586,30.3777084350586,31.6043853759766,31.6043853759766,31.6043853759766,31.6043853759766,31.6043853759766,31.6043853759766,31.6043853759766,32.8291168212891,32.8291168212891,32.8291168212891,32.8291168212891,32.8291168212891,34.0524215698242,34.0524215698242,34.0524215698242,34.0524215698242,34.0524215698242,35.2541809082031,35.2541809082031,36.4613494873047,36.4613494873047,36.4613494873047,36.4613494873047,36.4613494873047,37.0715026855469,37.0715026855469,37.0715026855469,37.0715026855469,37.745735168457,37.745735168457,37.745735168457,37.745735168457,37.745735168457,37.745735168457,37.745735168457,37.745735168457,27.6129302978516,27.6129302978516,27.6129302978516,27.6129302978516,27.6129302978516,27.6129302978516,27.6129302978516,28.6590957641602,28.6590957641602,28.6590957641602,28.6590957641602,28.6590957641602,28.6590957641602,28.6590957641602,28.6590957641602,29.474983215332,29.474983215332,29.474983215332,29.474983215332,30.7044448852539,30.7044448852539,30.7044448852539,30.7044448852539,30.7044448852539,30.7044448852539,30.7044448852539,30.7044448852539,30.7044448852539,30.7044448852539,30.7044448852539,30.7044448852539,30.7044448852539,31.8847351074219,31.8847351074219,31.8847351074219,31.8847351074219,31.8847351074219,31.8847351074219,32.4669494628906,32.4669494628906,32.4669494628906,32.4669494628906,32.4669494628906,32.4669494628906,32.4669494628906,32.4669494628906,32.4669494628906,32.4669494628906,32.4669494628906,33.6769256591797,33.6769256591797,33.6769256591797,33.6769256591797,33.6769256591797,34.2658538818359,34.2658538818359,34.2658538818359,34.2658538818359,34.2658538818359,34.2658538818359,34.2658538818359,35.4511642456055,35.4511642456055,35.4511642456055,35.4511642456055,35.4511642456055,35.4511642456055,35.4511642456055,36.65478515625,36.65478515625,36.65478515625,36.65478515625,36.65478515625,36.65478515625,36.65478515625,37.8480224609375,37.8480224609375,37.8480224609375,37.8480224609375,37.8480224609375,37.8480224609375,37.8480224609375,37.8480224609375,37.8480224609375,37.8480224609375,37.8480224609375,37.8480224609375,28.3412094116211,28.3412094116211,28.3412094116211,28.3412094116211,28.3412094116211,28.3412094116211,28.3412094116211,28.3412094116211,29.0612030029297,29.0612030029297,30.0076065063477,30.0076065063477,30.7607192993164,30.7607192993164,30.7607192993164,30.7607192993164,30.7607192993164,30.7607192993164,30.7607192993164,31.9714202880859,31.9714202880859,31.9714202880859,31.9714202880859,31.9714202880859,31.9714202880859,31.9714202880859,31.9714202880859,31.9714202880859,31.9714202880859,31.9714202880859,33.1446151733398,33.1446151733398,33.1446151733398,33.1446151733398,33.1446151733398,33.1446151733398,33.1446151733398,33.1446151733398,33.1446151733398,33.1446151733398,33.7549057006836,33.7549057006836,34.3665161132812,34.3665161132812,35.5661926269531,35.5661926269531,35.5661926269531,35.5661926269531,35.5661926269531,36.7507705688477,36.7507705688477,36.7507705688477,36.7507705688477,36.7507705688477,36.7507705688477,36.7507705688477,37.8707885742188,37.8707885742188,37.8707885742188,37.8707885742188,37.8707885742188,37.8707885742188,37.8707885742188,37.8707885742188,37.8707885742188,37.8707885742188,37.8707885742188,27.8810729980469,27.8810729980469,27.8810729980469,27.8810729980469,27.8810729980469,27.8810729980469,27.8810729980469,27.8810729980469,29.035888671875,29.035888671875,29.035888671875,29.035888671875,29.035888671875,29.035888671875,30.244026184082,30.244026184082,31.3002166748047,31.3002166748047,31.3002166748047,32.04248046875,32.04248046875,32.04248046875,32.04248046875,32.04248046875,32.04248046875,32.04248046875,32.04248046875,33.232048034668,33.232048034668,33.232048034668,33.232048034668,33.232048034668,33.232048034668,33.232048034668,33.831298828125,33.831298828125,34.4186477661133,34.4186477661133,34.4186477661133,34.4186477661133,34.4186477661133,34.4186477661133,35.6011581420898,35.6011581420898,35.6011581420898,35.6011581420898,35.6011581420898,35.6011581420898,35.6011581420898,35.6011581420898,36.7826385498047,36.7826385498047,36.7826385498047,36.7826385498047,36.7826385498047,36.7826385498047,36.7826385498047,36.7826385498047,37.8750381469727,37.8750381469727,37.8750381469727,28.4598846435547,28.4598846435547,28.4598846435547,28.4598846435547,28.4598846435547,28.4598846435547,28.4598846435547,28.4598846435547,28.4598846435547,29.6702575683594,29.6702575683594,29.6702575683594,30.8834991455078,30.8834991455078,30.8834991455078,30.8834991455078,30.8834991455078,30.8834991455078,30.8834991455078,30.8834991455078,30.8834991455078,31.4844970703125,31.4844970703125,31.4844970703125,31.4844970703125,31.4844970703125,31.4844970703125,32.1672210693359,32.1672210693359,32.1672210693359,32.1672210693359,32.1672210693359,32.1672210693359,32.1672210693359,33.2766952514648,33.2766952514648,33.2766952514648,33.2766952514648,33.2766952514648,33.2766952514648,33.2766952514648,34.4878082275391,34.4878082275391,34.4878082275391,34.4878082275391,34.4878082275391,34.4878082275391,34.4878082275391,34.4878082275391,34.4878082275391,34.4878082275391,34.4878082275391,35.6658477783203,35.6658477783203,35.6658477783203,35.6658477783203,35.6658477783203,35.6658477783203,36.2090377807617,36.2090377807617,36.2090377807617,36.2090377807617,36.2090377807617,36.2090377807617,36.7763519287109,36.7763519287109,36.7763519287109,36.7763519287109,36.7763519287109,36.7763519287109,37.3488845825195,37.3488845825195,37.3488845825195,37.3488845825195,37.3488845825195,37.3488845825195,37.8740310668945,37.8740310668945,37.8740310668945,37.8740310668945,37.8740310668945,37.8740310668945,37.8740310668945,37.8740310668945,27.8089904785156,27.8089904785156,27.8089904785156,27.8089904785156,27.8089904785156,27.8089904785156,27.8089904785156,27.8089904785156,27.8089904785156,27.8089904785156,28.4089584350586,28.4089584350586,28.4089584350586,28.4089584350586,28.4089584350586,28.4089584350586,28.4089584350586,28.4089584350586,28.4089584350586,28.4089584350586,28.98095703125,28.98095703125,28.98095703125,28.98095703125,28.98095703125,28.98095703125,28.98095703125,29.5611267089844,29.5611267089844,29.5611267089844,29.5611267089844,29.5611267089844,29.5611267089844,29.5611267089844,29.5611267089844,30.1583099365234,30.1583099365234,30.1583099365234,30.1583099365234,30.1583099365234,30.1583099365234,30.1583099365234,30.1583099365234,30.1583099365234,30.1583099365234,30.1583099365234,31.3556518554688,31.3556518554688,31.3556518554688,31.3556518554688,31.3556518554688,31.3556518554688,31.9563903808594,31.9563903808594,31.9563903808594,31.9563903808594,31.9563903808594,31.9563903808594,31.9563903808594,32.5337371826172,32.5337371826172,33.1053466796875,33.1053466796875,33.7152633666992,33.7152633666992,34.4461669921875,34.4461669921875,34.4461669921875,34.4461669921875,34.4461669921875,34.4461669921875,35.0330505371094,35.0330505371094,35.0330505371094,35.0330505371094,35.0330505371094,35.0330505371094,35.0330505371094,36.036018371582,36.036018371582,36.036018371582,36.036018371582,36.036018371582,36.036018371582,36.036018371582,36.036018371582,36.036018371582,36.5904006958008,36.5904006958008,37.1630477905273,37.1630477905273,37.1630477905273,37.1630477905273,37.1630477905273,37.1630477905273,37.1630477905273,37.1630477905273,37.7335433959961,37.7335433959961,37.7335433959961,37.7335433959961,37.7335433959961,37.7335433959961,27.4154891967773,27.4154891967773,27.4154891967773,27.4154891967773,27.4154891967773,27.4154891967773,27.4154891967773,27.4154891967773,27.9976196289062,27.9976196289062,27.9976196289062,27.9976196289062,27.9976196289062,29.1186981201172,29.1186981201172,29.1186981201172,29.1186981201172,29.1186981201172,29.1186981201172,29.1186981201172,29.1186981201172,30.3416519165039,30.3416519165039,30.3416519165039,30.3416519165039,30.9291687011719,30.9291687011719,30.9291687011719,30.9291687011719,30.9291687011719,30.9291687011719,30.9291687011719,30.9291687011719,31.5306854248047,31.5306854248047,31.5306854248047,31.5306854248047,31.5306854248047,31.5306854248047,31.5306854248047,31.5306854248047,32.1118774414062,32.1118774414062,32.1118774414062,32.1118774414062,32.1118774414062,32.1118774414062,32.1118774414062,32.9882583618164,32.9882583618164,32.9882583618164,32.9882583618164,32.9882583618164,33.5832443237305,33.5832443237305,33.5832443237305,33.5832443237305,33.5832443237305,33.5832443237305,33.5832443237305,33.5832443237305,34.2878036499023,34.2878036499023,34.2878036499023,34.2878036499023,34.2878036499023,34.2878036499023,34.2878036499023,34.2878036499023,35.3512115478516,35.3512115478516,36.2072448730469,36.2072448730469,36.2072448730469,36.2072448730469,36.2072448730469,36.2072448730469,36.2072448730469,36.7952575683594,36.7952575683594,37.3888778686523,37.3888778686523,37.3888778686523,37.3888778686523,37.3888778686523,37.3888778686523,37.3888778686523,36.258918762207,36.258918762207,36.258918762207,36.258918762207,36.258918762207,36.258918762207,36.258918762207,36.258918762207,27.7866287231445,27.7866287231445,27.7866287231445,27.7866287231445,27.7866287231445,27.7866287231445,27.7866287231445,27.7866287231445,27.7866287231445,27.7866287231445,27.7866287231445,27.7866287231445,28.3679504394531,28.3679504394531,28.3679504394531,28.3679504394531,28.3679504394531,28.3679504394531,28.3679504394531,28.3679504394531,28.3679504394531,28.3679504394531,28.9430770874023,28.9430770874023,28.9430770874023,28.9430770874023,28.9430770874023,28.9430770874023,28.9430770874023,29.5321273803711,29.5321273803711,29.5321273803711,29.5321273803711,29.5321273803711,29.5321273803711,29.5321273803711,29.5321273803711,30.1045837402344,30.1045837402344,30.686767578125,30.686767578125,30.686767578125,30.686767578125,30.686767578125,30.686767578125,30.686767578125,30.686767578125,30.686767578125,30.686767578125,30.686767578125,31.2624664306641,31.2624664306641,31.2624664306641,31.2624664306641,31.2624664306641,31.2624664306641,31.8524932861328,31.8524932861328,31.8524932861328,31.8524932861328,31.8524932861328,31.8524932861328,31.8524932861328,31.8524932861328,32.4347763061523,32.4347763061523,32.4347763061523,32.4347763061523,32.4347763061523,32.4347763061523,32.4347763061523,32.4347763061523,32.4347763061523,32.4347763061523,32.4347763061523,33.0064315795898,33.0064315795898,33.0064315795898,33.0064315795898,33.0064315795898,33.0064315795898,33.0064315795898,33.0064315795898,33.0064315795898,33.0064315795898,34.1715316772461,34.1715316772461,34.1715316772461,34.1715316772461,34.1715316772461,35.0900115966797,35.0900115966797,35.0900115966797,35.0900115966797,35.956657409668,35.956657409668,36.5402297973633,36.5402297973633,36.5402297973633,36.5402297973633,36.5402297973633,36.5402297973633,36.5402297973633,37.4186630249023,37.4186630249023,37.4186630249023,37.4186630249023,37.4186630249023,27.2782135009766,27.2782135009766,27.2782135009766,27.2782135009766,27.2782135009766,27.2782135009766,28.0123977661133,28.0123977661133,29.2072830200195,29.2072830200195,29.2072830200195,29.2072830200195,29.2072830200195,29.2072830200195,29.2072830200195,29.2072830200195,29.8168106079102,29.8168106079102,29.8168106079102,29.8168106079102,29.8168106079102,29.8168106079102,29.8168106079102,29.8168106079102,31.0195846557617,31.0195846557617,31.0195846557617,31.0195846557617,31.0195846557617,31.0195846557617,31.0195846557617,31.0195846557617,31.0195846557617,31.6279983520508,31.6279983520508,31.6279983520508,31.6279983520508,31.6279983520508,31.6279983520508,31.6279983520508,31.6279983520508,32.8330993652344,32.8330993652344,32.8330993652344,32.8330993652344,33.4253387451172,33.4253387451172,33.4253387451172,33.4253387451172,33.4253387451172,33.4253387451172,33.4253387451172,34.0237426757812,34.0237426757812,34.0237426757812,34.0237426757812,34.0237426757812,34.6069183349609,34.6069183349609,34.6069183349609,34.6069183349609,34.6069183349609,34.6069183349609,34.6069183349609,35.2062606811523,35.2062606811523,35.2062606811523,35.2062606811523,35.2062606811523,35.7884979248047,35.7884979248047,35.7884979248047,35.7884979248047,35.7884979248047,35.7884979248047,35.7884979248047,36.3878402709961,36.3878402709961,36.3878402709961,36.3878402709961,36.3878402709961,36.9700775146484,36.9700775146484,36.9700775146484,36.9700775146484,36.9700775146484,36.9700775146484,36.9700775146484,37.5694198608398,37.5694198608398,37.5694198608398,37.5694198608398,37.5694198608398,27.9206008911133,27.9206008911133,27.9206008911133,27.9206008911133,27.9206008911133,27.9206008911133,27.9206008911133,27.9206008911133,27.9206008911133,27.9206008911133,29.1448822021484,29.1448822021484,29.1448822021484,29.1448822021484,29.1448822021484,29.1448822021484,29.1448822021484,29.1448822021484,29.1448822021484,29.1448822021484,29.1448822021484,30.3692626953125,30.3692626953125,30.3692626953125,30.3692626953125,30.3692626953125,30.3692626953125,30.3692626953125,30.3692626953125,31.4262771606445,31.4262771606445,31.4262771606445,31.4262771606445,31.4262771606445,32.1927871704102,32.1927871704102,32.1927871704102,32.1927871704102,32.1927871704102,32.1927871704102,33.3923721313477,33.3923721313477,33.3923721313477,33.3923721313477,33.3923721313477,33.3923721313477,33.3923721313477,34.6116485595703,34.6116485595703,35.2011871337891,35.2011871337891,35.2011871337891,35.2011871337891,35.2011871337891,35.2011871337891,35.2011871337891,35.8117370605469,35.8117370605469,35.8117370605469,35.8117370605469,36.4211044311523,36.4211044311523,36.4211044311523,36.4211044311523,36.4211044311523,36.4211044311523,36.4211044311523,36.4211044311523,36.4211044311523,36.4211044311523,37.1646881103516,37.1646881103516,37.1646881103516,37.1646881103516,37.1646881103516,37.1646881103516,37.1646881103516,37.1646881103516,37.1646881103516,27.6011962890625,27.6011962890625,27.6011962890625,27.6011962890625,27.6011962890625,27.6011962890625,27.6011962890625,27.6011962890625,27.6011962890625,27.6011962890625,28.8242111206055,28.8242111206055,28.8242111206055,28.8242111206055,28.8242111206055,28.8242111206055,28.8242111206055,30.0245132446289,30.0245132446289,30.6374740600586,30.6374740600586,30.6374740600586,30.6374740600586,30.6374740600586,30.6374740600586,30.6374740600586,31.8595657348633,31.8595657348633,31.8595657348633,31.8595657348633,31.8595657348633,31.8595657348633,31.8595657348633,32.765022277832,32.765022277832,32.765022277832,32.765022277832,32.765022277832,32.765022277832,32.765022277832,32.765022277832,33.6574783325195,33.6574783325195,33.6574783325195,33.6574783325195,33.6574783325195,33.6574783325195,33.6574783325195,34.8685760498047,34.8685760498047,34.8685760498047,34.8685760498047,34.8685760498047,34.8685760498047,34.8685760498047,34.8685760498047,34.8685760498047,34.8685760498047,34.8685760498047,36.051025390625,36.051025390625,36.051025390625,36.051025390625,36.051025390625,36.6577072143555,36.6577072143555,36.6577072143555,36.6577072143555,36.6577072143555,36.6577072143555,36.6577072143555,37.5722579956055,37.5722579956055,37.5722579956055,37.5722579956055,37.5722579956055,27.7240829467773,27.7240829467773,27.7240829467773,27.7240829467773,27.7240829467773,28.9230575561523,28.9230575561523,28.9230575561523,28.9230575561523,28.9230575561523,28.9230575561523,28.9230575561523,28.9230575561523,30.1380081176758,30.1380081176758,30.1380081176758,30.1380081176758,30.1380081176758,30.1380081176758,30.1380081176758,31.3600769042969,31.3600769042969,31.3600769042969,31.3600769042969,31.3600769042969,31.3600769042969,31.3600769042969,31.3600769042969,32.5706481933594,32.5706481933594,32.5706481933594,32.5706481933594,32.5706481933594,32.5706481933594,32.5706481933594,33.7795181274414,33.7795181274414,34.9892578125,34.9892578125,34.9892578125,36.178092956543,36.178092956543,36.178092956543,36.178092956543,36.178092956543,36.178092956543,36.178092956543,36.178092956543,37.3711318969727,37.3711318969727,37.3711318969727,37.3711318969727,37.3711318969727,37.3711318969727,37.3711318969727,37.3711318969727,27.8467712402344,27.8467712402344,28.4594650268555,28.4594650268555,28.4594650268555,28.4594650268555,28.4594650268555,28.4594650268555,28.4594650268555,29.3734130859375,29.3734130859375,29.3734130859375,29.3734130859375,29.3734130859375,29.3734130859375,29.3734130859375,30.2676620483398,30.2676620483398,30.2676620483398,30.2676620483398,30.2676620483398,30.2676620483398,30.2676620483398,30.2676620483398,31.4920806884766,31.4920806884766,32.700927734375,32.700927734375,32.700927734375,32.700927734375,32.700927734375,32.700927734375,33.3028793334961,33.3028793334961,33.3028793334961,33.3028793334961,33.3028793334961,34.5004119873047,34.5004119873047,34.5004119873047,34.5004119873047,34.5004119873047,35.1687316894531,35.1687316894531,35.1687316894531,35.1687316894531,35.1687316894531,35.1687316894531,35.1687316894531,36.24755859375,36.24755859375,36.24755859375,36.24755859375,36.24755859375,36.24755859375,36.24755859375,36.24755859375,36.24755859375,36.24755859375,37.4300994873047,37.4300994873047,27.9069900512695,27.9069900512695,27.9069900512695,27.9069900512695,27.9069900512695,27.9069900512695,27.9069900512695,27.9069900512695,27.9069900512695,27.9069900512695,27.9069900512695,28.8516159057617,28.8516159057617,28.8516159057617,28.8516159057617,28.8516159057617,28.8516159057617,28.8516159057617,28.8516159057617,29.3955993652344,29.3955993652344,29.3955993652344,29.3955993652344,29.3955993652344,30.4759140014648,30.4759140014648,30.4759140014648,30.4759140014648,30.4759140014648,30.4759140014648,30.4759140014648,30.4759140014648,31.0840148925781,31.0840148925781,31.0840148925781,31.0840148925781,31.0840148925781,31.0840148925781,31.7434234619141,31.7434234619141,31.7434234619141,31.7434234619141,31.7434234619141,31.7434234619141,31.7434234619141,31.7434234619141,31.7434234619141,31.7434234619141,32.9292602539062,32.9292602539062,32.9292602539062,32.9292602539062,32.9292602539062,33.79443359375,33.79443359375,33.79443359375,33.79443359375,33.79443359375,33.79443359375,34.6856842041016,34.6856842041016,34.6856842041016,34.6856842041016,34.6856842041016,34.6856842041016,34.6856842041016,34.6856842041016,34.6856842041016,35.2842407226562,35.2842407226562,35.2842407226562,35.2842407226562,35.2842407226562,35.2842407226562,35.8708267211914,35.8708267211914,35.8708267211914,35.8708267211914,35.8708267211914,37.057487487793,37.057487487793,37.057487487793,37.057487487793,37.057487487793,37.057487487793,37.057487487793,27.5433349609375,27.5433349609375,27.5433349609375,27.5433349609375,27.5433349609375,28.1750411987305,28.1750411987305,28.7844772338867,28.7844772338867,28.7844772338867,28.7844772338867,28.7844772338867,28.7844772338867,28.7844772338867,29.3873977661133,29.3873977661133,30.6102676391602,30.6102676391602,30.6102676391602,30.6102676391602,30.6102676391602,30.6102676391602,30.6102676391602,30.6102676391602,30.6102676391602,30.6102676391602,31.6608352661133,31.6608352661133,31.6608352661133,31.6608352661133,31.6608352661133,31.6608352661133,31.6608352661133,31.6608352661133,32.432373046875,32.432373046875,32.432373046875,32.432373046875,32.432373046875,32.432373046875,32.432373046875,32.432373046875,33.0297622680664,33.0297622680664,33.0297622680664,33.0297622680664,33.0297622680664,33.0297622680664,33.0297622680664,33.0297622680664,33.0297622680664,33.0297622680664,33.6300659179688,33.6300659179688,33.6300659179688,33.6300659179688,33.6300659179688,33.6300659179688,33.6300659179688,33.6300659179688,33.6300659179688,33.6300659179688,34.2399368286133,34.2399368286133,34.2399368286133,34.2399368286133,34.2399368286133,34.2399368286133,34.2399368286133,35.4630355834961,35.4630355834961,35.4630355834961,36.0511932373047,36.0511932373047,36.0511932373047,36.0511932373047,36.0511932373047,36.0511932373047,36.0511932373047,37.258659362793,37.258659362793,27.7448425292969,27.7448425292969,27.7448425292969,27.7448425292969,27.7448425292969,27.7448425292969,27.7448425292969,27.7448425292969,28.9706115722656,28.9706115722656,28.9706115722656,28.9706115722656,28.9706115722656,29.6057510375977,29.6057510375977,29.6057510375977,29.6057510375977,29.6057510375977,29.6057510375977,30.1925964355469,30.1925964355469,30.1925964355469,30.1925964355469,30.1925964355469,30.1925964355469,30.1925964355469,30.1925964355469,30.1925964355469,30.1925964355469,31.4212951660156,31.4212951660156,31.4212951660156,31.4212951660156,31.4212951660156,32.0458068847656,32.0458068847656,32.0458068847656,32.0458068847656,32.0458068847656,32.0458068847656,32.8888397216797,32.8888397216797,33.6781005859375,33.6781005859375,33.6781005859375,33.6781005859375,33.6781005859375,33.6781005859375,33.6781005859375,34.3933334350586,34.3933334350586,35.6010894775391,35.6010894775391,35.6010894775391,35.6010894775391,35.6010894775391,36.1878356933594,36.1878356933594,36.1878356933594,36.1878356933594,36.1878356933594,36.1878356933594,36.1878356933594,36.1878356933594,37.3727264404297,37.3727264404297,37.3727264404297,37.3727264404297,37.3727264404297,37.3727264404297,36.7862777709961,36.7862777709961,36.7862777709961,36.7862777709961,36.7862777709961,36.7862777709961,28.3081893920898,28.3081893920898,28.3081893920898,28.3081893920898,28.3081893920898,28.3081893920898,28.3081893920898,29.092399597168,29.092399597168,29.092399597168,29.092399597168,29.092399597168,30.3176727294922,30.3176727294922,30.3176727294922,30.3176727294922,30.3176727294922,30.3176727294922,30.3176727294922,31.5576934814453,31.5576934814453,31.5576934814453,31.5576934814453,31.5576934814453,31.5576934814453,31.5576934814453,31.5576934814453,31.5576934814453,31.5576934814453,31.5576934814453,31.5576934814453,32.1720504760742,32.1720504760742,32.1720504760742,32.1720504760742,32.1720504760742,32.1720504760742,32.1720504760742,32.1720504760742,33.3956985473633,33.3956985473633,33.3956985473633,33.3956985473633,33.3956985473633,33.3956985473633,33.3956985473633,33.3956985473633,33.3956985473633,33.3956985473633,33.3956985473633,34.4363479614258,34.4363479614258,34.4363479614258,34.4363479614258,34.4363479614258,34.4363479614258,34.4363479614258,35.2213287353516,35.2213287353516,35.2213287353516,35.2213287353516,35.2213287353516,35.2213287353516,35.2213287353516,35.2213287353516,35.2213287353516,35.2213287353516,36.4422988891602,36.4422988891602,37.6233367919922,37.6233367919922,37.6233367919922,37.6233367919922,28.1588973999023,28.1588973999023,28.1588973999023,28.1588973999023,28.1588973999023,28.1588973999023,29.3991394042969,29.3991394042969,29.3991394042969,29.3991394042969,29.3991394042969,29.3991394042969,29.3991394042969,29.3991394042969,30.0046005249023,30.0046005249023,30.0046005249023,30.0046005249023,30.0046005249023,31.0944976806641,31.0944976806641,31.0944976806641,31.0944976806641,31.0944976806641,31.0944976806641,31.0944976806641,31.0944976806641,31.7113265991211,31.7113265991211,31.7113265991211,31.7113265991211,31.7113265991211,32.9346771240234,32.9346771240234,32.9346771240234,34.1584701538086,34.1584701538086,34.1584701538086,34.1584701538086,34.1584701538086,34.1584701538086,34.1584701538086,34.1584701538086,34.1584701538086,35.3805541992188,35.3805541992188,35.3805541992188,35.3805541992188,35.3805541992188,35.3805541992188,35.3805541992188,35.3805541992188,36.579460144043,36.579460144043,36.579460144043,36.579460144043,36.579460144043,36.579460144043,36.579460144043,36.579460144043,36.579460144043,36.579460144043,37.1891555786133,37.1891555786133,37.1891555786133,37.1891555786133,37.1891555786133,37.1891555786133,37.1891555786133,37.1891555786133,37.1891555786133,37.7873840332031,37.7873840332031,37.7873840332031,37.7873840332031,37.7873840332031,37.7873840332031,37.7873840332031,28.2406539916992,28.2406539916992,28.2406539916992,28.2406539916992,28.2406539916992,28.2406539916992,28.2406539916992,28.8372955322266,28.8372955322266,28.8372955322266,28.8372955322266,28.8372955322266,28.8372955322266,28.8372955322266,28.8372955322266,28.8372955322266,28.8372955322266,28.8372955322266,29.445426940918,29.445426940918,30.1592712402344,30.1592712402344,30.1592712402344,30.1592712402344,30.1592712402344,30.1592712402344,30.1592712402344,31.2397232055664,31.2397232055664,31.9419708251953,31.9419708251953,31.9419708251953,31.9419708251953,31.9419708251953,31.9419708251953,31.9419708251953,32.6566314697266,32.6566314697266,32.6566314697266,32.6566314697266,32.6566314697266,32.6566314697266,32.6566314697266,32.6566314697266,32.6566314697266,32.6566314697266,33.3867263793945,33.3867263793945,33.3867263793945,33.3867263793945,33.3867263793945,33.3867263793945,33.3867263793945,33.3867263793945,34.272834777832,34.272834777832,34.272834777832,34.8602676391602,34.8602676391602,34.8602676391602,34.8602676391602,34.8602676391602,34.8602676391602,34.8602676391602,34.8602676391602,34.8602676391602,35.5011367797852,35.5011367797852,35.5011367797852,35.5011367797852,35.5011367797852,35.5011367797852,35.5011367797852,35.5011367797852,36.1030349731445,36.1030349731445,36.1030349731445,36.1030349731445,36.1030349731445,36.1030349731445,36.1030349731445,36.9345092773438,36.9345092773438,36.9345092773438,36.9345092773438,36.9345092773438,36.9345092773438,36.9345092773438,37.5860061645508,37.5860061645508,37.5860061645508,37.5860061645508,37.5860061645508,37.5860061645508,37.5860061645508,27.478759765625,27.478759765625,27.478759765625,27.478759765625,27.478759765625,27.478759765625,27.478759765625,27.478759765625,28.284782409668,28.284782409668,28.284782409668,28.284782409668,28.284782409668,28.284782409668,28.284782409668,28.284782409668,28.9061737060547,28.9061737060547,29.5533599853516,29.5533599853516,29.5533599853516,29.5533599853516,29.5533599853516,29.5533599853516,29.5533599853516,29.5533599853516,29.5533599853516,30.1767959594727,30.1767959594727,30.1767959594727,30.1767959594727,30.1767959594727,30.1767959594727,30.1767959594727,30.1767959594727,30.1767959594727,30.8487091064453,30.8487091064453,30.8487091064453,30.8487091064453,30.8487091064453,30.8487091064453,31.5696487426758,31.5696487426758,31.5696487426758,31.5696487426758,31.5696487426758,32.3934936523438,32.3934936523438,32.3934936523438,32.3934936523438,32.3934936523438,32.3934936523438,32.3934936523438,33.1106109619141,33.1106109619141,33.1106109619141,33.1106109619141,33.1106109619141,33.1106109619141,33.7919921875,33.7919921875,33.7919921875,34.3983001708984,34.3983001708984,34.3983001708984,34.3983001708984,34.3983001708984,35.0853805541992,35.0853805541992,35.0853805541992,35.0853805541992,35.0853805541992,35.0853805541992,35.8122253417969,35.8122253417969,36.432861328125,36.432861328125,36.432861328125,36.432861328125,36.432861328125,36.432861328125,36.432861328125,36.432861328125,36.432861328125,36.432861328125,37.051139831543,37.051139831543,37.051139831543,37.051139831543,37.051139831543,37.051139831543,37.051139831543,37.7805252075195,37.7805252075195,37.7805252075195,37.7805252075195,37.7805252075195,37.7805252075195,37.7805252075195,37.7805252075195,37.7805252075195,37.7805252075195,27.7643737792969,27.7643737792969,27.7643737792969,27.7643737792969,27.7643737792969,27.7643737792969,27.7643737792969,28.4444885253906,28.4444885253906,28.4444885253906,28.4444885253906,28.4444885253906,29.1069412231445,29.1069412231445,29.8340454101562,29.8340454101562,29.8340454101562,29.8340454101562,29.8340454101562,29.8340454101562,29.8340454101562,29.8340454101562,30.720458984375,30.720458984375,30.720458984375,30.720458984375],&#34;meminc&#34;:[0,0,0,0,0,0.875816345214844,0,0,0,0,0,0,0.653915405273438,0,0,0.789566040039062,0,0,0,0,0,0,0.874229431152344,0,0,0,0,0,0,0.576171875,0,0,0,0,0.613609313964844,0,0,0,0,0.6126708984375,0,0,0,0,0.583168029785156,0,0,0,0,0,0,0.596420288085938,0,0,0,0,0,0,0,0.621772766113281,0,0,0,0,0,0,1.22917938232422,0,0,0,0,0,0.61309814453125,0,0,0,0,0,0,0.6146240234375,0,0,0,0,0,0,0.609054565429688,0,0,0,0,0,0,-9.61027526855469,0,0,0,0,0,0,0.613517761230469,0,0,0,0,0,0,0,0,0,0,0,0.609886169433594,0,0,0,0,1.23879241943359,0,0,0,0,0,0,0,1.23573303222656,0,0,0,0,0,0.632415771484375,0,0.569740295410156,0,0,0,0,0,0,0.567100524902344,0,0,0,0,0.613357543945312,0,0,0.658790588378906,0,0,0,0,0,0,0.613594055175781,0,0,0,0,0,0,0,0,0,0,0,0,0.888710021972656,0,0,0,0,0,0,0.815071105957031,0,0,0,0,-9.81106567382812,0,0,0,0.720451354980469,0,0,0,0,0,0,0.655601501464844,0,0,0,0,0,0,0.857467651367188,0,0,0,0,0,0,0.714607238769531,0,0,0,0,0,0,0.786399841308594,0,0,0,0,0,0,0,0,0,0,0,0,0,0.630844116210938,0,0,0,0,0,0,0.594993591308594,0,0,0,0,0,0,0,0,0,0,1.11683654785156,0,0,0,0,0.598129272460938,0,0,0,0,0,0,0.608047485351562,0,0,0,0,0,0.603965759277344,0,0,0,0,0.5670166015625,0,0,0,0.536872863769531,0,0,0,0,0,0,0,0.625900268554688,0,0,0,0,0,0.624641418457031,0,0,0,0,-10.1297454833984,0,0.704620361328125,0,0,0,0,0,0,0,0,0.60748291015625,0,0,0,0,0,0.793510437011719,0,0,0,0,0,0,0,0.742912292480469,0,0,0,0,0,0,0,0,0.67535400390625,0,0.632400512695312,0,0,0.746101379394531,0,0.809532165527344,0,0,0,0,0,0,0.608734130859375,0,0.612350463867188,0,0,0,0,0,0,0,0.682769775390625,0,0,0,0,1.1993408203125,0,0,0,0,0,0,0,0,0.6944580078125,0,0,0,0,0,0,0,0,0,0,0,0,0.630729675292969,0,0,0,0,0,-10.0955276489258,0,0,0,0,0,0,0,0.768043518066406,0,0,0,0,0,0.821098327636719,0,0,0,0,0,0,0,0,0,0,0.656692504882812,0,0,0,0,0,0,0,0,0.96343994140625,0,0,0,0,0,0,0,0.741523742675781,0,0,0,0,0,0,0,0,0,0.684860229492188,0,0,0,1.21708679199219,0,0,0,0,1.23606109619141,0,0,0,0,0,0.589363098144531,0,0,0,0,0,0,0.6126708984375,0,0,0,0,0,0,0.944587707519531,0,0,0,0,0,0,0.573760986328125,0,0,0,0,-10.0085372924805,0,0,0,0,0,0,0,1.23680114746094,0,0,0,0,0,0.796562194824219,0,0,1.22666168212891,0,0,0,0,0,0,0.611793518066406,0,0,0,0,0,0,0,1.22413635253906,0,0,0.744094848632812,0,0,1.07058715820312,0,0,0,0,0,0,0,0,1.22207641601562,0,0,0,0,0,0,0,0,0,0.605300903320312,0,0,0,0,0.972724914550781,0,0,0,0,0,0,0,0.828910827636719,0,0,0,0,0,0,0,0,-10.6074905395508,0,0,0,0,0,0,0,0,0,0.594970703125,0,0,0,0,0.717819213867188,0,0.6019287109375,0,0,0,0,0,0,0,0,0,0.594947814941406,0,0,0,0,0,0,0,1.19997406005859,0,0,0,0,0,1.20582580566406,0,0,0,0,0,0,1.11284637451172,0,0,0,0,0,0,0,0,0,0.624641418457031,0,0,0,0,0,0,0,1.08306884765625,0,1.14740753173828,0,0,0,0,0,0,0,1.13931274414062,0,0,0,0,0,0,0.5535888671875,0,0,0,0,0,-10.1312561035156,0,0.73291015625,0,0,0,0,1.01383972167969,0,0.639244079589844,0,0,0,0,1.18436431884766,0,0,0,0,0.598838806152344,0,0,0,0,0,0,0,0,0.594429016113281,0,0,0,0,0,0,0,0,0,0,0,0,0.688003540039062,0,0,0,0,0,0,0,1.09336853027344,0,0,0,0,0,0,0,0.83148193359375,0,0,0,0,0,0,0,0.9344482421875,0,0,0,0,0,0,0,1.00176239013672,0,0,0,0,0.581329345703125,0,0,0,0,0,-10.0740203857422,0,0,0,0,0,0,0.699913024902344,0,0.96246337890625,0,0,0,0,0,0,0.58160400390625,0,0,0,0,0,0,1.18083190917969,0,0.617752075195312,0,0,0,0,0,0,0,0,0.600608825683594,0,0,0,0,0.577896118164062,0,0,0,0,0,0,0.596595764160156,0,0,0,0,0,0,0,0,0,0,0.583976745605469,0,0,0,0,0,0,0,0,0.601364135742188,0,0,0,0,0.583175659179688,0,0,0,0,0,0,0.598403930664062,0,0,0,0,0.583175659179688,0,0,0,0,0,0,0.583457946777344,0,0.583854675292969,0,0,0,0,-9.69785308837891,0,0,0,0,0,0,0,0.599113464355469,0,0,0,0,0,0,0.747268676757812,0,0,0,0,0,0,0,0.607162475585938,0,0,0,0.599227905273438,0,0,0,0,0,0,1.21179962158203,0,0,0,0,0,0,0,0,0,0,1.21063995361328,0,0,0,0,0,0,1.19546508789062,0,0,0,0,0,0,0,0,0,0,0.600204467773438,0,0,0,0,0,0,0,0,0,1.19286346435547,0,0,0,0,0,0,0,0,0,0,0.790359497070312,0,0,0,0,0.905426025390625,0,0,0,0,0,0,0,0.493408203125,0,0,0,0,0,0,0,-10.1139526367188,0,0,0,0,0.753082275390625,0,0,0,0,1.19606781005859,0,0,0,0,0,0,1.20645904541016,0,0,0,0,0,0,0,0,0,0,0,1.19619750976562,0,0,0,0,0,0,1.18209075927734,0,0,0,0,0,0,0,1.19338226318359,0,0,0,0,0,0,1.06766510009766,0,0.801689147949219,0,0,0,0,0,0,0.611457824707031,0,0,0,0,0,0,0,0.5941162109375,0,0,-10.1288070678711,0,0,0,0,0,0.632942199707031,0,0,0,0,0,0.602287292480469,0,0,0,0,0,0,0,0,0,0,0.790504455566406,0,0,0,0,0,0,0.612953186035156,0,0.642730712890625,0,0,0,0,0,0,0,0,0,1.14929962158203,0,0,0,0,0,0,0,0,0,1.21462249755859,0,0,0,0,0,0,0,0.606697082519531,0,0,0,0,0,0,0,1.20040130615234,0,0,0,0,0,0,0.733734130859375,0,0,0,0,1.08748626708984,0,0,0,0,0,0,0.590286254882812,0,0,0,0,0,-9.59138488769531,0,0,0,0,0,0,0.599540710449219,0,0,0,0,0,1.2218017578125,0,0,0,0,0,0,0,0,0,0.822975158691406,0,0,0,0,0,0.506965637207031,0,0,0,0,0,1.06208801269531,0,0,0,1.07035827636719,0,0,0,0,0,0.643402099609375,0,0,0,0,0,0,0.604804992675781,0,0,0,1.20099639892578,0,0,0,0,0.598236083984375,0,0,0,0,0,0,0,0,1.1695556640625,0,0.58819580078125,0,0,0,0,-10.1771850585938,0,0,0,0,0,0,1.19945526123047,0,0,0,0,0,0.8138427734375,0,0,0,0,0,0,0,1.00935363769531,0,0,0,0,0,0,0,0.831192016601562,0,0,0,0,0,0,0,0,0.980888366699219,0,0,0,0,0,0,1.20147705078125,0,0,0.899642944335938,0,0,0,0,0,0.611190795898438,0,0,0,0,0,0,0.557968139648438,0,0,0,0,0.581329345703125,0,0,0,0,0,0.813217163085938,0,-9.57962036132812,0,0.603630065917969,0,0,0,0,0,0,0.758087158203125,0,0.913932800292969,0,0.599655151367188,0,0.551948547363281,0,0,0,0,0,0.671844482421875,0,0,0,0.788276672363281,0,0,0,0,0,0,0.806251525878906,0,0,0,0,0,0,0,0,0,0,0.72503662109375,0,0,0,0,0,0,1.18825531005859,0,1.16756439208984,0,0,0,0,1.18887329101562,0,0,0,0,0,0,0,-10.1129302978516,0,0,0,0,0,0,0,0,0,0,0.685928344726562,0,0,0,0,0,0,0,1.19694519042969,0,0.613327026367188,0,0.920440673828125,0,0,0,0,0,0,0,0.597129821777344,0,0,0,0,0,0,0,0,0,0,0.936599731445312,0,0,0,0,0,0,0.595809936523438,0,0,0,0,0,0,0,0,0,0,0.523704528808594,0,0,0,0,0,0,0.875083923339844,0,0,0,0,0,0.897041320800781,0,0,0,0,0,0,0.6036376953125,0,0,0,0,0,0,0,0,0,0.598129272460938,0,0,0,0.587425231933594,0,0,0,0,0.862342834472656,0,0,0,0,0,0,0,0,0,0,-9.83006286621094,0,0,0,0,0,0,0,0,0.59783935546875,0,0,0,0,0,0,0,0,0.579002380371094,0,1.14058685302734,0,0,0,0,0,0.655891418457031,0,0,0,0,0,0,0,1.05171966552734,0,0,0,0,0,0.599624633789062,0,1.19579315185547,0,0,0,0,0,0,0.767929077148438,0,0,1.02545166015625,0,0,0,0,0,0,0.797447204589844,0,0,0,0,0,0.597305297851562,0,0,0,-9.58998107910156,0,0,0,0,0,0,1.14991760253906,0,0.661087036132812,0,0,0,0,0,0,0.605621337890625,0,0,0,0,0,0,0,0,0.946907043457031,0,0,0,0,1.02506256103516,0,0,0,0,0,0,0.872520446777344,0,0,0,0,0,0,0,0.775360107421875,0,0,0,0,0,0,0,1.19731903076172,0,0,0,0,0,0,0,0,0,0.612876892089844,0,1.20455169677734,0,0.630279541015625,0,0,0,0,0,0,0.599906921386719,0,0,0,0,0,0,0,0,-9.66962432861328,0,0,0,0.588043212890625,0,0,0,0,0,0,0.596900939941406,0,0,0,0,0,0,1.13510894775391,0,0,0,0,0,0,0,0,0,0.594932556152344,0,0,0,0,0,1.07219696044922,0,0,0,0,0,0,0,0,0.588607788085938,0,0,0,0,0,0,0,0,0,0.93951416015625,0,0,0,0,1.18829345703125,0,0,0,0,0,0,1.10662078857422,0,0,0,0,0,0,0,0,0,0,0.576995849609375,0,0,0,0,0.586814880371094,0,0,0,0,0,0.744773864746094,0,0,0,0,0,0,-9.5548095703125,0,0,0,0,0,0,0,1.21149444580078,0,0,0,0,0,0,0,0,0,0,0.609565734863281,0,0,0,0,0,0,0.93646240234375,0,0,0,0,0,0.814277648925781,0,0,0,0,0,0,0,0,0.609039306640625,0,0,0.736076354980469,0,0,0,0,0,0.711570739746094,0,0,0,0,0,0,0.803497314453125,0,0,0,0,0,0,1.17031097412109,0,0,0.590507507324219,0,0,0,0,0.601348876953125,0,0,0,0,0,0,0,0.585578918457031,0,0,0,0,0,-10.1615524291992,0,0,0,0,0,0,0,0,0,1.20942687988281,0,0,0,0,0,0,0.589042663574219,0,0,0,0,0,0,1.20811462402344,0,0,0,0,0,1.19837188720703,0,0,0,0,0,1.1978759765625,0,0,0,0,0,1.19225311279297,0,0,0,0,0,1.19529724121094,0,0,0,0,0,0,0,0,0,0.573463439941406,0,0.5997314453125,0,0,0,0,0.595703125,0,0,0,0,0,0.864768981933594,0,0,0,0,0,0,0,0,-9.92414855957031,0,0,0,0,0,0,0,0,0,1.22847747802734,0,0,0,0,0,0,0,0,0.607261657714844,0,0,0,0,0,0.613494873046875,0,0,0,0,0,0,0,1.22667694091797,0,0,0,0,0,0,1.2247314453125,0,0,0,0,1.22330474853516,0,0,0,0,1.20175933837891,0,1.20716857910156,0,0,0,0,0.610153198242188,0,0,0,0.674232482910156,0,0,0,0,0,0,0,-10.1328048706055,0,0,0,0,0,0,1.04616546630859,0,0,0,0,0,0,0,0.815887451171875,0,0,0,1.22946166992188,0,0,0,0,0,0,0,0,0,0,0,0,1.18029022216797,0,0,0,0,0,0.58221435546875,0,0,0,0,0,0,0,0,0,0,1.20997619628906,0,0,0,0,0.58892822265625,0,0,0,0,0,0,1.18531036376953,0,0,0,0,0,0,1.20362091064453,0,0,0,0,0,0,1.1932373046875,0,0,0,0,0,0,0,0,0,0,0,-9.50681304931641,0,0,0,0,0,0,0,0.719993591308594,0,0.946403503417969,0,0.75311279296875,0,0,0,0,0,0,1.21070098876953,0,0,0,0,0,0,0,0,0,0,1.17319488525391,0,0,0,0,0,0,0,0,0,0.61029052734375,0,0.611610412597656,0,1.19967651367188,0,0,0,0,1.18457794189453,0,0,0,0,0,0,1.12001800537109,0,0,0,0,0,0,0,0,0,0,-9.98971557617188,0,0,0,0,0,0,0,1.15481567382812,0,0,0,0,0,1.20813751220703,0,1.05619049072266,0,0,0.742263793945312,0,0,0,0,0,0,0,1.18956756591797,0,0,0,0,0,0,0.599250793457031,0,0.587348937988281,0,0,0,0,0,1.18251037597656,0,0,0,0,0,0,0,1.18148040771484,0,0,0,0,0,0,0,1.09239959716797,0,0,-9.41515350341797,0,0,0,0,0,0,0,0,1.21037292480469,0,0,1.21324157714844,0,0,0,0,0,0,0,0,0.600997924804688,0,0,0,0,0,0.682723999023438,0,0,0,0,0,0,1.10947418212891,0,0,0,0,0,0,1.21111297607422,0,0,0,0,0,0,0,0,0,0,1.17803955078125,0,0,0,0,0,0.543190002441406,0,0,0,0,0,0.567314147949219,0,0,0,0,0,0.572532653808594,0,0,0,0,0,0.525146484375,0,0,0,0,0,0,0,-10.0650405883789,0,0,0,0,0,0,0,0,0,0.599967956542969,0,0,0,0,0,0,0,0,0,0.571998596191406,0,0,0,0,0,0,0.580169677734375,0,0,0,0,0,0,0,0.597183227539062,0,0,0,0,0,0,0,0,0,0,1.19734191894531,0,0,0,0,0,0.600738525390625,0,0,0,0,0,0,0.577346801757812,0,0.571609497070312,0,0.609916687011719,0,0.730903625488281,0,0,0,0,0,0.586883544921875,0,0,0,0,0,0,1.00296783447266,0,0,0,0,0,0,0,0,0.55438232421875,0,0.572647094726562,0,0,0,0,0,0,0,0.57049560546875,0,0,0,0,0,-10.3180541992188,0,0,0,0,0,0,0,0.582130432128906,0,0,0,0,1.12107849121094,0,0,0,0,0,0,0,1.22295379638672,0,0,0,0.587516784667969,0,0,0,0,0,0,0,0.601516723632812,0,0,0,0,0,0,0,0.581192016601562,0,0,0,0,0,0,0.876380920410156,0,0,0,0,0.594985961914062,0,0,0,0,0,0,0,0.704559326171875,0,0,0,0,0,0,0,1.06340789794922,0,0.856033325195312,0,0,0,0,0,0,0.5880126953125,0,0.593620300292969,0,0,0,0,0,0,-1.12995910644531,0,0,0,0,0,0,0,-8.4722900390625,0,0,0,0,0,0,0,0,0,0,0,0.581321716308594,0,0,0,0,0,0,0,0,0,0.575126647949219,0,0,0,0,0,0,0.58905029296875,0,0,0,0,0,0,0,0.572456359863281,0,0.582183837890625,0,0,0,0,0,0,0,0,0,0,0.575698852539062,0,0,0,0,0,0.59002685546875,0,0,0,0,0,0,0,0.582283020019531,0,0,0,0,0,0,0,0,0,0,0.5716552734375,0,0,0,0,0,0,0,0,0,1.16510009765625,0,0,0,0,0.918479919433594,0,0,0,0.866645812988281,0,0.583572387695312,0,0,0,0,0,0,0.878433227539062,0,0,0,0,-10.1404495239258,0,0,0,0,0,0.734184265136719,0,1.19488525390625,0,0,0,0,0,0,0,0.609527587890625,0,0,0,0,0,0,0,1.20277404785156,0,0,0,0,0,0,0,0,0.608413696289062,0,0,0,0,0,0,0,1.20510101318359,0,0,0,0.592239379882812,0,0,0,0,0,0,0.598403930664062,0,0,0,0,0.583175659179688,0,0,0,0,0,0,0.599342346191406,0,0,0,0,0.582237243652344,0,0,0,0,0,0,0.599342346191406,0,0,0,0,0.582237243652344,0,0,0,0,0,0,0.599342346191406,0,0,0,0,-9.64881896972656,0,0,0,0,0,0,0,0,0,1.22428131103516,0,0,0,0,0,0,0,0,0,0,1.22438049316406,0,0,0,0,0,0,0,1.05701446533203,0,0,0,0,0.766510009765625,0,0,0,0,0,1.1995849609375,0,0,0,0,0,0,1.21927642822266,0,0.58953857421875,0,0,0,0,0,0,0.610549926757812,0,0,0,0.609367370605469,0,0,0,0,0,0,0,0,0,0.743583679199219,0,0,0,0,0,0,0,0,-9.56349182128906,0,0,0,0,0,0,0,0,0,1.22301483154297,0,0,0,0,0,0,1.20030212402344,0,0.612960815429688,0,0,0,0,0,0,1.22209167480469,0,0,0,0,0,0,0.90545654296875,0,0,0,0,0,0,0,0.8924560546875,0,0,0,0,0,0,1.21109771728516,0,0,0,0,0,0,0,0,0,0,1.18244934082031,0,0,0,0,0.606681823730469,0,0,0,0,0,0,0.91455078125,0,0,0,0,-9.84817504882812,0,0,0,0,1.198974609375,0,0,0,0,0,0,0,1.21495056152344,0,0,0,0,0,0,1.22206878662109,0,0,0,0,0,0,0,1.2105712890625,0,0,0,0,0,0,1.20886993408203,0,1.20973968505859,0,0,1.18883514404297,0,0,0,0,0,0,0,1.19303894042969,0,0,0,0,0,0,0,-9.52436065673828,0,0.612693786621094,0,0,0,0,0,0,0.913948059082031,0,0,0,0,0,0,0.894248962402344,0,0,0,0,0,0,0,1.22441864013672,0,1.20884704589844,0,0,0,0,0,0.601951599121094,0,0,0,0,1.19753265380859,0,0,0,0,0.668319702148438,0,0,0,0,0,0,1.07882690429688,0,0,0,0,0,0,0,0,0,1.18254089355469,0,-9.52310943603516,0,0,0,0,0,0,0,0,0,0,0.944625854492188,0,0,0,0,0,0,0,0.543983459472656,0,0,0,0,1.08031463623047,0,0,0,0,0,0,0,0.608100891113281,0,0,0,0,0,0.659408569335938,0,0,0,0,0,0,0,0,0,1.18583679199219,0,0,0,0,0.86517333984375,0,0,0,0,0,0.891250610351562,0,0,0,0,0,0,0,0,0.598556518554688,0,0,0,0,0,0.586585998535156,0,0,0,0,1.18666076660156,0,0,0,0,0,0,-9.51415252685547,0,0,0,0,0.631706237792969,0,0.60943603515625,0,0,0,0,0,0,0.602920532226562,0,1.22286987304688,0,0,0,0,0,0,0,0,0,1.05056762695312,0,0,0,0,0,0,0,0.771537780761719,0,0,0,0,0,0,0,0.597389221191406,0,0,0,0,0,0,0,0,0,0.600303649902344,0,0,0,0,0,0,0,0,0,0.609870910644531,0,0,0,0,0,0,1.22309875488281,0,0,0.588157653808594,0,0,0,0,0,0,1.20746612548828,0,-9.51381683349609,0,0,0,0,0,0,0,1.22576904296875,0,0,0,0,0.635139465332031,0,0,0,0,0,0.586845397949219,0,0,0,0,0,0,0,0,0,1.22869873046875,0,0,0,0,0.62451171875,0,0,0,0,0,0.843032836914062,0,0.789260864257812,0,0,0,0,0,0,0.715232849121094,0,1.20775604248047,0,0,0,0,0.586746215820312,0,0,0,0,0,0,0,1.18489074707031,0,0,0,0,0,-0.586448669433594,0,0,0,0,0,-8.47808837890625,0,0,0,0,0,0,0.784210205078125,0,0,0,0,1.22527313232422,0,0,0,0,0,0,1.24002075195312,0,0,0,0,0,0,0,0,0,0,0,0.614356994628906,0,0,0,0,0,0,0,1.22364807128906,0,0,0,0,0,0,0,0,0,0,1.0406494140625,0,0,0,0,0,0,0.784980773925781,0,0,0,0,0,0,0,0,0,1.22097015380859,0,1.18103790283203,0,0,0,-9.46443939208984,0,0,0,0,0,1.24024200439453,0,0,0,0,0,0,0,0.605461120605469,0,0,0,0,1.08989715576172,0,0,0,0,0,0,0,0.616828918457031,0,0,0,0,1.22335052490234,0,0,1.22379302978516,0,0,0,0,0,0,0,0,1.22208404541016,0,0,0,0,0,0,0,1.19890594482422,0,0,0,0,0,0,0,0,0,0.609695434570312,0,0,0,0,0,0,0,0,0.598228454589844,0,0,0,0,0,0,-9.54673004150391,0,0,0,0,0,0,0.596641540527344,0,0,0,0,0,0,0,0,0,0,0.608131408691406,0,0.713844299316406,0,0,0,0,0,0,1.08045196533203,0,0.702247619628906,0,0,0,0,0,0,0.71466064453125,0,0,0,0,0,0,0,0,0,0.730094909667969,0,0,0,0,0,0,0,0.8861083984375,0,0,0.587432861328125,0,0,0,0,0,0,0,0,0.640869140625,0,0,0,0,0,0,0,0.601898193359375,0,0,0,0,0,0,0.831474304199219,0,0,0,0,0,0,0.651496887207031,0,0,0,0,0,0,-10.1072463989258,0,0,0,0,0,0,0,0.806022644042969,0,0,0,0,0,0,0,0.621391296386719,0,0.647186279296875,0,0,0,0,0,0,0,0,0.623435974121094,0,0,0,0,0,0,0,0,0.671913146972656,0,0,0,0,0,0.720939636230469,0,0,0,0,0.823844909667969,0,0,0,0,0,0,0.717117309570312,0,0,0,0,0,0.681381225585938,0,0,0.606307983398438,0,0,0,0,0.687080383300781,0,0,0,0,0,0.726844787597656,0,0.620635986328125,0,0,0,0,0,0,0,0,0,0.618278503417969,0,0,0,0,0,0,0.729385375976562,0,0,0,0,0,0,0,0,0,-10.0161514282227,0,0,0,0,0,0,0.68011474609375,0,0,0,0,0.662452697753906,0,0.727104187011719,0,0,0,0,0,0,0,0.88641357421875,0,0,0],&#34;filename&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},&#34;interval&#34;:10,&#34;files&#34;:[],&#34;prof_output&#34;:&#34;/var/folders/f3/t51slq3x2dlfgk3ksp7vddzm0000gq/T//Rtmpg2DXcH/file9357ee4e776.prof&#34;,&#34;highlight&#34;:{&#34;output&#34;:[&#34;^output\\$&#34;],&#34;gc&#34;:[&#34;^&lt;GC&gt;$&#34;],&#34;stacktrace&#34;:[&#34;^\\.\\.stacktraceo(n|ff)\\.\\.$&#34;]},&#34;split&#34;:&#34;h&#34;}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;div id=&#34;htmlwidget-2&#34; style=&#34;width:100%;height:600px;&#34; class=&#34;profvis html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;message&#34;:{&#34;prof&#34;:{&#34;time&#34;:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13],&#34;depth&#34;:[24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1],&#34;label&#34;:[&#34;new.env&#34;,&#34;findCenvVar&#34;,&#34;getInlineInfo&#34;,&#34;isBaseVar&#34;,&#34;getFoldFun&#34;,&#34;constantFoldCall&#34;,&#34;constantFold&#34;,&#34;cmp&#34;,&#34;cmpSymbolAssign&#34;,&#34;h&#34;,&#34;tryInline&#34;,&#34;cmpCall&#34;,&#34;cmp&#34;,&#34;h&#34;,&#34;tryInline&#34;,&#34;cmpCall&#34;,&#34;cmp&#34;,&#34;genCode&#34;,&#34;cmpfun&#34;,&#34;compiler:::tryCmpfun&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;rlang::is_formula&#34;,&#34;sum&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;getOption&#34;,&#34;sum&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;getOption&#34;,&#34;sum&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;],&#34;filenum&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null],&#34;linenum&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null],&#34;memalloc&#34;:[28.3493957519531,28.3493957519531,28.3493957519531,28.3493957519531,28.3493957519531,28.3493957519531,28.3493957519531,28.3493957519531,28.3493957519531,28.3493957519531,28.3493957519531,28.3493957519531,28.3493957519531,28.3493957519531,28.3493957519531,28.3493957519531,28.3493957519531,28.3493957519531,28.3493957519531,28.3493957519531,28.3493957519531,28.3493957519531,28.3493957519531,28.3493957519531,33.0546875,33.0546875,33.0546875,33.0546875,33.0546875,33.0546875,33.0546875,33.0546875,39.3151321411133,39.3151321411133,39.3151321411133,39.3151321411133,39.3151321411133,39.3151321411133,39.3151321411133,39.3151321411133,45.2293395996094,45.2293395996094,45.2293395996094,45.2293395996094,45.2293395996094,45.2293395996094,45.2293395996094,45.2293395996094,52.3137969970703,52.3137969970703,52.3137969970703,52.3137969970703,52.3137969970703,52.3137969970703,52.3137969970703,52.3137969970703,59.8466415405273,59.8466415405273,59.8466415405273,59.8466415405273,59.8466415405273,59.8466415405273,59.8466415405273,59.8466415405273,63.9979248046875,63.9979248046875,63.9979248046875,63.9979248046875,63.9979248046875,63.9979248046875,63.9979248046875,63.9979248046875,63.9979248046875,34.644905090332,34.644905090332,34.644905090332,34.644905090332,34.644905090332,34.644905090332,34.644905090332,34.644905090332,42.9175872802734,42.9175872802734,42.9175872802734,42.9175872802734,42.9175872802734,42.9175872802734,49.0068359375,49.0068359375,49.0068359375,49.0068359375,49.0068359375,49.0068359375,49.0068359375,49.0068359375,59.1649703979492,59.1649703979492,59.1649703979492,59.1649703979492,59.1649703979492,59.1649703979492,59.1649703979492,59.1649703979492,37.5786437988281,37.5786437988281,37.5786437988281,37.5786437988281,37.5786437988281,37.5786437988281,37.5786437988281,37.5786437988281,37.5786437988281,33.1151123046875,33.1151123046875,33.1151123046875,33.1151123046875,33.1151123046875,33.1151123046875,33.1151123046875,33.1151123046875],&#34;meminc&#34;:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4.70529174804688,0,0,0,0,0,0,0,6.26044464111328,0,0,0,0,0,0,0,5.91420745849609,0,0,0,0,0,0,0,7.08445739746094,0,0,0,0,0,0,0,7.53284454345703,0,0,0,0,0,0,0,4.15128326416016,0,0,0,0,0,0,0,0,-29.3530197143555,0,0,0,0,0,0,0,8.27268218994141,0,0,0,0,0,6.08924865722656,0,0,0,0,0,0,0,10.1581344604492,0,0,0,0,0,0,0,-21.5863265991211,0,0,0,0,0,0,0,0,-4.46353149414062,0,0,0,0,0,0,0],&#34;filename&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null]},&#34;interval&#34;:10,&#34;files&#34;:[{&#34;filename&#34;:&#34;&lt;expr&gt;&#34;,&#34;content&#34;:&#34;set.seed(2009)\nprofvis({\n    NullDistFSNDR_aw &lt;- fastSimNullDistRProp(sex ~ time, success=\&#34;Female\&#34;, data=tips)\n})&#34;,&#34;normpath&#34;:&#34;&lt;expr&gt;&#34;}],&#34;prof_output&#34;:&#34;/var/folders/f3/t51slq3x2dlfgk3ksp7vddzm0000gq/T//Rtmpg2DXcH/file9353f43a026.prof&#34;,&#34;highlight&#34;:{&#34;output&#34;:[&#34;^output\\$&#34;],&#34;gc&#34;:[&#34;^&lt;GC&gt;$&#34;],&#34;stacktrace&#34;:[&#34;^\\.\\.stacktraceo(n|ff)\\.\\.$&#34;]},&#34;split&#34;:&#34;h&#34;}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;div id=&#34;htmlwidget-3&#34; style=&#34;width:100%;height:600px;&#34; class=&#34;profvis html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-3&#34;&gt;{&#34;x&#34;:{&#34;message&#34;:{&#34;prof&#34;:{&#34;time&#34;:[1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,15,15,15,15,15,15,16,16,16,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,19,19,19,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,25,25,25,25,25,25,25,26,26,26,26,26,27,27,27,27,27,27,27,28,28,28,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,38,38,38,38,38,39,39,40,40,40,40,40,41,41,41,41,41,41,41,42,42,42,42,43,43,43,43,43,43,43,43,43,43,44,44,44,44,45,45,45,45,45,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,48,48,48,48,48,49,49,49,49,49,49,49,49,50,50,51,51,51,52,52,52,52,52,52,52,53,53,53,53,53,53,53,54,54,55,55,55,55,55,55,56,56,56,56,57,57,57,57,58,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,60,60,60,60,60,61,61,61,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,63,63,64,64,65,65,65,65,66,66,66,66,66,66,66,67,67,67,67,67,67,67,68,68,68,68,68,68,68,69,69,69,69,69,69,69,69,69,69,69,70,70,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,72,73,73,74,74,74,74,74,74,74,74,74,75,75,75,75,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,77,77,77,77,77,78,78,79,79,79,79,79,79,79,80,80,80,80,81,81,81,81,81,81,82,82,82,82,82,82,82,82,83,83,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,84,85,85,85,85,85,86,86,86,86,86,87,87,87,87,87,87,87,88,88,88,88,88,88,88,89,89,89,89,89,90,90,90,90,90,91,91,91,91,91,91,91,91,92,92,92,92,92,92,92,93,93,93,93,93,93,94,94,94,94,94,95,95,95,95,95,95,95,95,96,96,96,96,96,96,96,96,96,97,97,97,97,97,97,97,97,97,97,98,98,99,99,99,99,99,99,99,99,99,100,100,100,100,100,100,100,100,100,101,101,101,101,101,101,101,101,101,101,101,101,102,102,102,102,102,102,102,102,103,103,103,103,104,104,104,104,104,104,104,105,105,105,105,106,106,106,106,106,106,106,106,106,106,107,107,107,107,107,107,107,107,108,108,108,108,108,108,108,108,108,109,109,109,109,109,110,110,111,111,111,111,111,112,112,113,113,113,113,113,114,114,114,114,114,114,114,114,115,115,115,115,115,115,115,115,116,116,116,116,116,116,116,117,117,117,117,117,117,117,117,117,117,118,118,119,119,119,119,119,120,120,120,120,120,121,121,121,121,121,121,121,121,121,122,122,122,122,122,123,123,123,123,123,124,124,124,124,124,124,124,125,125,125,125,125,125,126,126,126,126,126,126,126,127,127,127,127,127,127,127,127,127,128,128,128,128,128,128,128,128,128,128,129,129,129,129,129,130,130,130,130,130,131,131,131,131,131,131,131,131,132,132,132,132,132,132,132,133,133,133,133,133,133,133,133,133,134,134,134,134,134,135,135,135,135,135,135,135,136,136,136,136,136,136,136,136,137,137,138,138,138,138,138,138,138,139,139,139,139,139,140,140,140,140,140,140,140,140,141,141,141,141,141,141,141,142,142,142,142,142,143,143,143,143,143,143,144,144,144,144,144,144,144,145,145,145,145,145,145,145,145,145,145,146,146,146,146,146,146,147,147,147,147,147,147,148,148,148,148,148,148,148,148,148,149,149,149,150,150,150,150,150,150,150,150,151,151,152,152,153,153,153,153,153,153,153,153,153,153,153,154,154,154,154,154,154,154,154,154,154,155,155,155,155,155,155,155,156,156,156,156,156,156,156,156,156,156,156,157,157,157,157,157,157,157,157,158,158,158,158,158,158,158,158,158,158,159,159,159,159,160,160,160,160,160,160,160,161,161,161,161,161,161,161,162,162,162,162,162,162,162,162,162,163,163,163,163,163,164,164,164,164,164,164,164,164,164,165,165,165,165,165,165,165,165,166,166,166,166,166,166,166,166,166,166,167,167,167,167,167,167,168,168,168,168,168,168,168,168,168,169,169,169,169,169,169,169,170,170,170,170,170,170,170,170,171,171,171,171,171,171,171,171,172,172,172,172,172,172,172,172,173,173,173,173,173,173,173,174,174,174,174,174,174,174,175,175,175,175,175,176,176,176,176,176,176,176,176,177,177,177,177,177,177,177,177,177,177,178,178,178,178,178,178,178,178,178,178,178,179,179,179,179,179,179,179,179,180,180,180,180,180,180,181,181,181,181,182,182,182,182,182,182,182,183,183,183,183,183,183,183,184,184,184,184,184,184,185,185,185,185,185,185,185,185,185,185,186,186,187,187,187,187,187,187,187,187,188,188,188,188,188,188,188,188,188,189,189,190,190,190,190,190,191,191,191,191,191,191,191,191,191,191,191,192,192,192,192,192,192,192,192,192,192,193,193,193,193,193,193,194,194,194,194,194,195,195,195,195,195,195,196,196,196,196,196,197,197,197,197,197,197,197,197,197,198,198,198,198,198,198,198,199,199,200,200,200,200,200,200,200,200,200,200,200,200,200,201,201,201,201,201,202,202,202,202,202,203,203,204,204,204,204,204,204,204,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,207,207,207,208,208,209,209,209,209,209,209,209,209,210,210,210,210,210,210,210,211,211,211,211,211,211,211,211,211,211,212,212,212,212,212,213,213,213,214,214,214,214,214,214,214,214,214,214,215,215,215,215,215,215,215,215,216,216,216,216,216,216,216,217,217,217,217,217,217,217,218,218,218,218,218,218,218,219,219,219,219,219,219,219,220,220,220,220,220,220,220,221,221,221,221,221,222,222,222,222,222,223,223,223,223,223,224,224,224,224,224,225,225,226,226,226,226,226,227,227,228,228,228,228,228,228,228,228,229,229,229,229,229,230,230,230,230,230,231,231,231,231,231,231,231,231,231,231,231,231,231,232,232,232,232,232,232,233,233,233,233,233,233,233,234,234,234,234,234,235,235,236,236,237,237,237,237,237,238,238,238,238,238,238,239,239,239,239,239,239,239,239,239,239,240,240,240,240,240,240,240,240,240,240,240,241,241,241,241,241,241,241,241,241,241,241,241,241,242,242,242,242,242,242,242,242,242,242,242,243,243,243,243,243,243,243,244,244,244,244,244,244,244,244,244,245,245,245,245,245,246,246,246,246,246,246,246,246,246,246,247,247,247,247,247,248,248,248,248,248,248,248,249,249,249,249,249,249,249,250,250,250,250,250,250,250,250,251,251,252,252,252,252,252,252,252,252,253,253,253,253,253,253,253,253,253,253,254,254,254,254,254,254,254,254,254,254,254,255,255,255,255,255,255,255,256,256,256,256,256,256,256,257,257,258,258,258,258,258,258,258,258,259,259,259,259,259,259,259,259,260,260,260,260,260,261,261,261,261,261,261,261,261,262,262,262,262,262,263,263,263,263,263,263,263,263,263,264,264,265,265,265,265,265,265,265,265,266,266,266,266,266,267,267,267,267,267,267,267,267,268,268,268,268,268,268,268,268,268,268,269,269,269,269,269,270,270,270,270,270,270,271,271,271,271,271,271,271,271,271,271,271,272,272,272,272,272,272,272,273,273,274,274,274,274,274,274,274,275,275,275,275,275,275,275,275,275,276,276,276,276,276,276,276,276,277,277,277,277,277,277,277,277,277,278,278,278,278,278,278,278,279,279,279,279,279,279,279,279,280,280,280,280,280,281,281,281,281,281,281,282,282,282,282,282,282,282,282,282,283,283,283,283,283,283,283,283,283,283,283,284,284,284,284,284,284,284,285,285,285,285,285,286,286,286,286,286,286,287,287,287,287,287,287,287,288,288,289,289,289,289,289,289,289,289,290,290,290,290,290,290,290,290,290,291,291,291,291,291,292,292,292,292,292,293,293,293,294,294,294,294,294,294,295,295,296,296,296,296,296,296,296,296,297,297,297,297,297,298,298,298,298,298,299,299,299,299,299,299,299,299,299,299,300,300,300,300,301,301,302,302,302,302,302,303,303,303,303,303,303,303,304,304,304,304,305,305,305,305,305,306,306,306,306,306,306,306,307,307,307,307,307,307,307,307,307,308,308,308,308,308,308,309,309,309,309,309,309,309,309,310,310,310,310,310,311,311,311,311,312,312,312,312,312,312,312,313,313,313,313,313,314,314,314,314,314,314,314,314,315,315,315,316,316,317,317,317,317,317,318,318,318,318,318,318,318,319,319,319,319,319,319,319,319,320,320,320,320,320,320,320,320,320,321,321,321,321,321,321,321,322,322,322,322,322,322,322,323,323,323,323,323,323,323,324,324,324,324,324,324,325,325,326,326,326,326,326,326,327,327,327,327,327,327,327,327,328,328,328,328,328,328,328,328,328,328,329,329,329,329,329,329,329,329,330,330,331,331,331,331,331,331,331,331,332,332,332,332,332,333,333,333,333,333,333,333,333,333,333,334,334,334,334,334,334,334,334,335,335,335,335,335,336,336,337,337,337,337,337,337,337,337,338,338,338,338,338,338,338,338,339,339,339,339,339,339,340,340,340,340,340,340,341,341,341,341,341,341,342,342,342,342,342,342,343,343,343,343,343,343,344,344,344,344,344,344,345,345,345,345,345,345,346,346,346,346,346,346,347,347,347,347,347,347,347,348,348,348,348,348,348,348,348,349,349,349,349,350,350,350,350,350,351,351,351,351,351,352,352,352,352,352,352,352,352,353,353,354,354,354,354,354,354,354,355,355,355,355,355,355,355,356,356,357,357,357,357,357,357,357,357,358,358,358,358,358,359,359,359,359,359,359,360,360,360,360,360,360,360,360,361,361,361,361,361,361,361,361,361,362,362,362,362,362,362,362,363,363,363,363,363,363,363,363,363,364,364,364,364,364,364,364,364,365,365,365,365,365,365,365,366,366,366,366,366,366,366,367,367,367,367,367,367,367,368,368,368,368,368,369,369,369,369,369,369,369,370,370,370,370,370,370,370,370,371,371,371,371,371,371,371,372,372,373,373,373,373,373,373,373,374,374,374,374,375,375,375,375,375,375,376,376,376,376,376,376,376,376,376,377,377,377,377,377,377,377,377,378,378,378,378,378,379,379,379,379,379,379,380,380,381,381,381,381,381,381,381,381,381,381,381,381,381,382,382,382,382,383,383,383,383,383,383,383,383,383,383,383,383,384,384,384,384,384,384,384,385,385,385,385,385,385,385,385,385,385,386,386,386,386,386,386,386,387,387,387,387,387,387,387,387,387,388,388,388,388,388,388,388,388,388,388,388,388,389,389,389,389,389,389,389,390,390,390,390,390,390,390,390,390,390,390,390,390,391,391,391,391,391,391,391,391,391,391,392,392,392,392,392,392,392,392,392,393,393,393,393,393,394,394,394,394,394,395,395,395,395,395,395,395,395,396,396,396,396,396,396,396,396,397,397,397,397,397,397,397,398,398,398,399,399,399,399,399,399,399,400,400,400,400,400,400,400,400,401,401,401,401,401,401,401,401,401,402,402,402,402,402,403,403,403,403,403,403,403,403,403,404,404,404,404,404,404,404,404,405,405,405,406,406,406,407,407,407,407,407,407,407,408,408,408,408,408,408,408,409,409,409,409,409,409,409,409,410,410,410,410,410,410,410,410,410,410,411,411,411,411,412,412,412,412,412,412,412,412,413,413,413,413,413,413,413,414,414,414,414,414,414,415,415,415,415,415,415,415,415,416,416,416,416,416,416,416,417,417,417,417,417,417,417,418,418,418,418,418,419,419,419,419,419,419,419,420,420,420,420,420,420,420,421,421,421,421,421,421,421,421,421,421,422,422,422,422,422,423,423,424,424,424,424,424,424,424,424,424,424,425,425,425,425,425,425,425,426,426,426,426,426,426,426,427,427,427,427,427,428,428,428,428,428,428,428,429,429,429,429,429,429,429,430,430,430,430,430,430,430,430,430,430,430,431,431,431,431,431,431,432,432,432,432,433,433,433,433,433,433,433,434,434,434,434,434,434,435,435,435,435,435,435,436,436,436,436,436,436,436,436,436,436,436,437,437,437,437,437,437,437,437,437,437,438,438,438,438,438,438,438,439,439,439,439,440,440,440,440,440,440,440,440,440,441,441,441,441,441,442,442,442,442,442,442,443,443,443,443,443,443,443,443,444,444,444,444,444,444,445,445,446,446,446,446,446,447,447,447,447,447,447,447,447,448,448,448,448,448,448,448,449,449,449,449,449,449,449,450,450,451,451,451,451,451,451,451,451,451,452,452,452,452,452,452,452,452,453,453,453,453,453,454,454,454,454,454,454,454,455,455,455,455,455,455,455,456,456,456,456,456,457,457,457,457,457,457,457,457,458,458,458,458,458,458,459,459,459,459,459,459,459,460,460,461,461,461,461,461,462,462,462,462,462,462,462,462,462,462,463,463,463,463,463,463,463,464,464,464,465,465,465,465,465,465,465,465,466,466,466,466,466,466,466,466,467,467,467,467,467,467,467,468,468,468,468,468,468,468,468,468,468,468,469,469,470,470,470,470,470,470,470,470,470,471,471,471,471,471,472,472,472,473,473,473,473,473,473,473,473,473,474,474,474,474,475,475,475,475,475,475,475,475,475,476,476,476,476,476,476,476,476,477,477,477,477,477,477,477,477,478,478,478,478,478,478,478,478,479,479,479,479,479,479,479,480,480,480,480,480,480,480,481,481,482,482,482,482,482,482,482,482,482,482,482,482,483,483,483,483,483,484,484,484,484,484,485,485,485,485,485,486,486,486,486,486,486,487,487,487,487,487,488,488,488,488,488,488,488,488,489,489,489,489,489,490,490,490,490,490,490,491,491,491,491,491,491,491,491,492,492,492,492,492,492,492,492,492,492,492,492,493,493,493,493,493,493,493,493,494,494,494,494,494,494,494,495,495,495,495,495,495,495,495,495,496,496,496,496,496,496,496,496,496,496,496,496,497,497,497,497,497,497,497,497,498,498,498,498,498,499,499,499,499,499,499,499,499,499,500,500,500,500,500,500,500,500,500,500,500,501,501,501,501,501,501,501,501,502,502,502,502,502,502,502,503,503,503,503,503,503,503,503,503,504,504,504,504,504,504,504,504,505,505,505,505,505,505,505,505,506,506,506,506,506,506,507,507,507,507,507,508,508,508,508,508,508,508,508,508,508,508,508,508,508,509,509,509,509,509,509,510,510,510,510,510,510,510,510,511,511,511,511,511,511,511,512,512,512,512,512,512,512,513,513,513,513,513,513,514,514,514,514,514,514,514,515,515,515,515,515,515,515,515,516,516,516,516,516,516,516,516,517,517,517,517,517,517,517,517,517,517,517,518,518,518,518,518,518,519,519,519,519,519,519,519,519,520,520,520,520,520,520,521,521,521,521,521,522,522,522,522,522,523,523,523,523,523,523,523,524,524,524,524,524,525,525,526,526,526,526,526,526,527,527,527,527,527,528,528,528,528,528,528,528,528,528,528,529,529,529,529,529,529,529,529,530,530,530,530,530,530,530,530,530,531,531,531,531,531,531,531,532,532,532,532,533,533,533,533,533,533,533,533,533,533,533,534,534,534,534,534,534,534,534,534,534,535,535,535,535,535,535,535,535,535,536,536,536,536,536,536,536,536],&#34;depth&#34;:[7,6,5,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,4,3,2,1,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,4,3,2,1,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,2,1,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,10,9,8,7,6,5,4,3,2,1,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,6,5,4,3,2,1,4,3,2,1,4,3,2,1,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,3,2,1,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,2,1,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,2,1,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,2,1,7,6,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,2,1,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,2,1,5,4,3,2,1,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,2,1,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,3,2,1,8,7,6,5,4,3,2,1,2,1,2,1,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,2,1,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,3,2,1,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,2,1,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,2,1,2,1,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,3,2,1,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,4,3,2,1,2,1,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,3,2,1,2,1,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,3,2,1,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,3,2,1,9,8,7,6,5,4,3,2,1,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,12,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,2,1,6,5,4,3,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1],&#34;label&#34;:[&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;alist&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;levels&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs.parsedFormula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;dim&#34;,&#34;ncol&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;lhs&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;split&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sys.frame&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;do.call&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;[[.data.frame&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;joinTwoFrames&#34;,&#34;mosaicCore::joinFrames&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;names&#34;,&#34;local&#34;,&#34;paste0&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;cull&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;list&#34;,&#34;local&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;dim&#34;,&#34;ncol&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;Anonymous&gt;&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;[[.data.frame&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;~&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;alist&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;formals&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;make.unique&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.External2&#34;,&#34;local&#34;,&#34;rlang::is_formula&#34;,&#34;rhs_or_expr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.set_row_names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;grep&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;Anonymous&gt;&#34;,&#34;rhs_or_expr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;paste0&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;is.factor&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[[&lt;-&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;startsWith&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.integer&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;NextMethod&#34;,&#34;[.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;unique&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;attributes&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;local&#34;,&#34;lhs&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;list&#34;,&#34;local&#34;,&#34;enexpr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition.parsedFormula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;do.call&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;alist&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;cull&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;split&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;[[.data.frame&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;lhs&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;unlist&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[[&lt;-&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;do.call&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;is.factor&#34;,&#34;grep&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;list&#34;,&#34;local&#34;,&#34;NextMethod&#34;,&#34;[.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;sum&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rlang::is_formula&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;unique&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;alist&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;NextMethod&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.set_row_names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;enexpr&#34;,&#34;rhs_or_expr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[.data.frame&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sys.frame&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;dim&#34;,&#34;ncol&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition.parsedFormula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;any&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;is.list&#34;,&#34;local&#34;,&#34;mosaicCore::joinFrames&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[.data.frame&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.External&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;unlist&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;paste0&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;any&#34;,&#34;local&#34;,&#34;rhs.parsedFormula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;diff.default&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;alist&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;paste0&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs.parsedFormula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;grep&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sum&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;length&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.row_names_info&#34;,&#34;dim.data.frame&#34;,&#34;ncol&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;paste0&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean.default&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.subset&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;is.na&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.data.frame&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;as.list.default&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;$&#34;,&#34;lhs.parsedFormula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;alist&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;match.fun&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sum&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;alist&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;unique&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;unlist&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;list&#34;,&#34;local&#34;,&#34;NextMethod&#34;,&#34;[.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;attr&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;getOption&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;any&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;diff&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;list&#34;,&#34;local&#34;,&#34;grep&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list.default&#34;,&#34;alist&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;NextMethod&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;alist&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;lhs.parsedFormula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;logical&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;cull&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;as.integer&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;row.names&lt;-.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;dim&#34;,&#34;local&#34;,&#34;unlist&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;paste0&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;paste0&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;paste0&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;paste0&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;paste0&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;paste0&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;paste0&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;paste0&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;startsWith&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.character&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sys.call&#34;,&#34;[[.data.frame&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;names&lt;-&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;is.data.frame&#34;,&#34;rownames&lt;-&#34;,&#34;row.names&lt;-.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;paste0&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;do.call&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rlang::is_formula&#34;,&#34;rhs_or_expr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;any&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;Anonymous&gt;&#34;,&#34;rhs_or_expr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;names&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;is.factor&#34;,&#34;FUN&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[[.data.frame&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;diff.default&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[[.data.frame&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;unlist&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;as.data.frame&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;row.names&lt;-&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list.default&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;alist&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[[&lt;-&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition.parsedFormula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.integer&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs_or_expr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;alist&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition.parsedFormula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;alist&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;Anonymous&gt;&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;enexpr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;alist&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;&lt;Anonymous&gt;&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;[[.data.frame&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs.parsedFormula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list.default&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sys.function&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;attributes&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;force&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;cull&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;Anonymous&gt;&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;is.na&#34;,&#34;local&#34;,&#34;is.factor&#34;,&#34;FUN&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;alist&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;is.factor&#34;,&#34;grep&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;paste0&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rlang::enexpr&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;[.data.frame&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs.parsedFormula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;names&#34;,&#34;local&#34;,&#34;dim&#34;,&#34;ncol&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;levels&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;],&#34;filenum&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],&#34;linenum&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],&#34;memalloc&#34;:[28.6560897827148,28.6560897827148,28.6560897827148,28.6560897827148,28.6560897827148,28.6560897827148,28.6560897827148,29.1422500610352,29.1422500610352,29.1422500610352,29.1422500610352,29.1422500610352,29.1422500610352,29.1422500610352,29.6960678100586,29.6960678100586,29.6960678100586,29.6960678100586,29.6960678100586,29.6960678100586,29.6960678100586,29.6960678100586,29.6960678100586,29.6960678100586,29.6960678100586,30.2203598022461,30.2203598022461,30.2203598022461,30.2203598022461,31.1875228881836,31.1875228881836,31.1875228881836,31.1875228881836,31.6753463745117,31.6753463745117,31.6753463745117,31.6753463745117,31.6753463745117,31.6753463745117,31.6753463745117,31.6753463745117,31.6753463745117,31.6753463745117,31.6753463745117,32.1646499633789,32.1646499633789,32.1646499633789,32.1646499633789,32.6673049926758,32.6673049926758,33.5538330078125,33.5538330078125,33.5538330078125,33.5538330078125,33.5538330078125,33.5538330078125,33.5538330078125,34.4808807373047,34.4808807373047,34.4808807373047,34.4808807373047,34.4808807373047,34.4808807373047,34.4808807373047,34.4808807373047,34.4808807373047,34.4808807373047,34.9461212158203,34.9461212158203,34.9461212158203,34.9461212158203,34.9461212158203,34.9461212158203,34.9461212158203,34.9461212158203,35.7097015380859,35.7097015380859,35.7097015380859,35.7097015380859,35.7097015380859,35.7097015380859,36.1224899291992,36.1224899291992,36.1224899291992,36.1224899291992,36.1224899291992,36.1224899291992,36.1224899291992,36.1224899291992,36.1224899291992,28.2149429321289,28.2149429321289,28.2149429321289,28.2149429321289,28.2149429321289,28.2149429321289,28.2149429321289,28.7031631469727,28.7031631469727,28.7031631469727,28.7031631469727,28.7031631469727,28.7031631469727,29.1965103149414,29.1965103149414,29.1965103149414,29.1965103149414,29.1965103149414,29.1965103149414,29.1965103149414,29.6802368164062,29.6802368164062,29.6802368164062,29.6802368164062,29.6802368164062,29.6802368164062,29.6802368164062,30.6638488769531,30.6638488769531,30.6638488769531,30.6638488769531,30.6638488769531,30.6638488769531,31.1554489135742,31.1554489135742,31.1554489135742,31.6536712646484,31.6536712646484,31.6536712646484,31.6536712646484,31.6536712646484,31.6536712646484,31.6536712646484,32.4934844970703,32.4934844970703,32.4934844970703,32.4934844970703,32.4934844970703,32.4934844970703,32.4934844970703,32.4934844970703,32.4934844970703,33.4800338745117,33.4800338745117,33.4800338745117,33.4800338745117,33.4800338745117,33.980712890625,33.980712890625,33.980712890625,33.980712890625,33.980712890625,33.980712890625,33.980712890625,33.980712890625,33.980712890625,33.980712890625,33.980712890625,34.7866897583008,34.7866897583008,34.7866897583008,34.7866897583008,34.7866897583008,34.7866897583008,35.4560317993164,35.4560317993164,35.4560317993164,35.4560317993164,35.4560317993164,35.4560317993164,35.4560317993164,36.4206390380859,36.4206390380859,36.4206390380859,36.4206390380859,36.4206390380859,28.9474334716797,28.9474334716797,28.9474334716797,28.9474334716797,28.9474334716797,28.9474334716797,28.9474334716797,29.4481048583984,29.4481048583984,29.4481048583984,30.452033996582,30.452033996582,30.452033996582,30.452033996582,30.452033996582,30.452033996582,30.452033996582,31.2621841430664,31.2621841430664,31.2621841430664,31.2621841430664,31.2621841430664,31.2621841430664,31.2621841430664,31.2621841430664,31.9489288330078,31.9489288330078,31.9489288330078,31.9489288330078,31.9489288330078,31.9489288330078,31.9489288330078,31.9489288330078,32.4465103149414,32.4465103149414,32.4465103149414,32.4465103149414,32.4465103149414,32.4465103149414,32.4465103149414,32.4465103149414,32.4465103149414,32.9880142211914,32.9880142211914,32.9880142211914,32.9880142211914,32.9880142211914,32.9880142211914,33.9350662231445,33.9350662231445,33.9350662231445,33.9350662231445,33.9350662231445,33.9350662231445,34.9286575317383,34.9286575317383,34.9286575317383,34.9286575317383,34.9286575317383,34.9286575317383,34.9286575317383,34.9286575317383,34.9286575317383,34.9286575317383,35.9140930175781,35.9140930175781,35.9140930175781,35.9140930175781,35.9140930175781,35.9140930175781,35.9140930175781,28.4345321655273,28.4345321655273,28.4345321655273,28.4345321655273,28.4345321655273,28.4345321655273,28.4345321655273,28.4345321655273,28.9385757446289,28.9385757446289,28.9385757446289,28.9385757446289,28.9385757446289,29.9463500976562,29.9463500976562,30.5105514526367,30.5105514526367,30.5105514526367,30.5105514526367,30.5105514526367,31.189826965332,31.189826965332,31.189826965332,31.189826965332,31.189826965332,31.189826965332,31.189826965332,31.8515243530273,31.8515243530273,31.8515243530273,31.8515243530273,32.4365921020508,32.4365921020508,32.4365921020508,32.4365921020508,32.4365921020508,32.4365921020508,32.4365921020508,32.4365921020508,32.4365921020508,32.4365921020508,33.4290771484375,33.4290771484375,33.4290771484375,33.4290771484375,33.9983978271484,33.9983978271484,33.9983978271484,33.9983978271484,33.9983978271484,34.9106597900391,34.9106597900391,34.9106597900391,34.9106597900391,34.9106597900391,34.9106597900391,34.9106597900391,34.9106597900391,35.9081497192383,35.9081497192383,35.9081497192383,35.9081497192383,35.9081497192383,35.9081497192383,35.9081497192383,35.9081497192383,36.4764251708984,36.4764251708984,36.4764251708984,36.4764251708984,36.4764251708984,28.9295425415039,28.9295425415039,28.9295425415039,28.9295425415039,28.9295425415039,28.9295425415039,28.9295425415039,28.9295425415039,29.9377212524414,29.9377212524414,30.4409942626953,30.4409942626953,30.4409942626953,31.4573593139648,31.4573593139648,31.4573593139648,31.4573593139648,31.4573593139648,31.4573593139648,31.4573593139648,32.4619293212891,32.4619293212891,32.4619293212891,32.4619293212891,32.4619293212891,32.4619293212891,32.4619293212891,33.4338912963867,33.4338912963867,34.2404098510742,34.2404098510742,34.2404098510742,34.2404098510742,34.2404098510742,34.2404098510742,34.9262161254883,34.9262161254883,34.9262161254883,34.9262161254883,35.9165420532227,35.9165420532227,35.9165420532227,35.9165420532227,28.1778793334961,28.1778793334961,28.1778793334961,28.1778793334961,28.1778793334961,28.1778793334961,28.1778793334961,28.1778793334961,28.4976196289062,28.4976196289062,28.4976196289062,28.4976196289062,28.4976196289062,28.4976196289062,28.4976196289062,28.4976196289062,28.4976196289062,28.4976196289062,28.4976196289062,28.4976196289062,28.4976196289062,28.4976196289062,29.5033950805664,29.5033950805664,29.5033950805664,29.5033950805664,29.5033950805664,29.5033950805664,29.5033950805664,29.5033950805664,29.5033950805664,29.5033950805664,29.5033950805664,29.5033950805664,30.0435409545898,30.0435409545898,30.0435409545898,31.0106964111328,31.0106964111328,31.0106964111328,31.0106964111328,31.0106964111328,31.0106964111328,31.0106964111328,31.0106964111328,31.5256423950195,31.5256423950195,31.5256423950195,31.5256423950195,31.5256423950195,31.5256423950195,31.5256423950195,31.5256423950195,31.5256423950195,31.5256423950195,31.5256423950195,32.0129928588867,32.0129928588867,32.9164733886719,32.9164733886719,32.9164733886719,32.9164733886719,33.4502563476562,33.4502563476562,33.4502563476562,33.4502563476562,33.4502563476562,33.4502563476562,33.4502563476562,33.9589996337891,33.9589996337891,33.9589996337891,33.9589996337891,33.9589996337891,33.9589996337891,33.9589996337891,34.5618591308594,34.5618591308594,34.5618591308594,34.5618591308594,34.5618591308594,34.5618591308594,34.5618591308594,35.0705337524414,35.0705337524414,35.0705337524414,35.0705337524414,35.0705337524414,35.0705337524414,35.0705337524414,35.0705337524414,35.0705337524414,35.0705337524414,35.0705337524414,35.5158767700195,35.5158767700195,35.5158767700195,35.5158767700195,35.5158767700195,35.5158767700195,35.5158767700195,35.5158767700195,35.5158767700195,35.5158767700195,35.5158767700195,35.9356842041016,35.9356842041016,35.9356842041016,35.9356842041016,35.9356842041016,35.9356842041016,35.9356842041016,36.3943176269531,36.3943176269531,36.3943176269531,36.3943176269531,36.3943176269531,36.3943176269531,36.3943176269531,36.3943176269531,36.3943176269531,28.4158935546875,28.4158935546875,28.9930877685547,28.9930877685547,28.9930877685547,28.9930877685547,28.9930877685547,28.9930877685547,28.9930877685547,28.9930877685547,28.9930877685547,30.0069885253906,30.0069885253906,30.0069885253906,30.0069885253906,30.0069885253906,30.0069885253906,30.0069885253906,30.0069885253906,30.0069885253906,30.0069885253906,30.0069885253906,30.0069885253906,30.9718322753906,30.9718322753906,30.9718322753906,30.9718322753906,30.9718322753906,30.9718322753906,30.9718322753906,30.9718322753906,31.9689788818359,31.9689788818359,31.9689788818359,31.9689788818359,31.9689788818359,32.9416122436523,32.9416122436523,33.9169998168945,33.9169998168945,33.9169998168945,33.9169998168945,33.9169998168945,33.9169998168945,33.9169998168945,34.4028778076172,34.4028778076172,34.4028778076172,34.4028778076172,34.8893661499023,34.8893661499023,34.8893661499023,34.8893661499023,34.8893661499023,34.8893661499023,35.8654174804688,35.8654174804688,35.8654174804688,35.8654174804688,35.8654174804688,35.8654174804688,35.8654174804688,35.8654174804688,28.4032211303711,28.4032211303711,28.4032211303711,28.4032211303711,28.4032211303711,28.4032211303711,28.4032211303711,28.4032211303711,29.3877639770508,29.3877639770508,29.3877639770508,29.3877639770508,29.3877639770508,29.3877639770508,29.3877639770508,29.3877639770508,29.3877639770508,29.3877639770508,30.2536926269531,30.2536926269531,30.2536926269531,30.2536926269531,30.2536926269531,30.7218627929688,30.7218627929688,30.7218627929688,30.7218627929688,30.7218627929688,31.3300323486328,31.3300323486328,31.3300323486328,31.3300323486328,31.3300323486328,31.3300323486328,31.3300323486328,31.8445739746094,31.8445739746094,31.8445739746094,31.8445739746094,31.8445739746094,31.8445739746094,31.8445739746094,32.2986297607422,32.2986297607422,32.2986297607422,32.2986297607422,32.2986297607422,32.835075378418,32.835075378418,32.835075378418,32.835075378418,32.835075378418,33.2748260498047,33.2748260498047,33.2748260498047,33.2748260498047,33.2748260498047,33.2748260498047,33.2748260498047,33.2748260498047,33.7809066772461,33.7809066772461,33.7809066772461,33.7809066772461,33.7809066772461,33.7809066772461,33.7809066772461,34.2429809570312,34.2429809570312,34.2429809570312,34.2429809570312,34.2429809570312,34.2429809570312,34.8820114135742,34.8820114135742,34.8820114135742,34.8820114135742,34.8820114135742,35.6018905639648,35.6018905639648,35.6018905639648,35.6018905639648,35.6018905639648,35.6018905639648,35.6018905639648,35.6018905639648,36.3449630737305,36.3449630737305,36.3449630737305,36.3449630737305,36.3449630737305,36.3449630737305,36.3449630737305,36.3449630737305,36.3449630737305,28.4204635620117,28.4204635620117,28.4204635620117,28.4204635620117,28.4204635620117,28.4204635620117,28.4204635620117,28.4204635620117,28.4204635620117,28.4204635620117,29.0335922241211,29.0335922241211,29.5146102905273,29.5146102905273,29.5146102905273,29.5146102905273,29.5146102905273,29.5146102905273,29.5146102905273,29.5146102905273,29.5146102905273,30.1955490112305,30.1955490112305,30.1955490112305,30.1955490112305,30.1955490112305,30.1955490112305,30.1955490112305,30.1955490112305,30.1955490112305,30.6870651245117,30.6870651245117,30.6870651245117,30.6870651245117,30.6870651245117,30.6870651245117,30.6870651245117,30.6870651245117,30.6870651245117,30.6870651245117,30.6870651245117,30.6870651245117,31.2451782226562,31.2451782226562,31.2451782226562,31.2451782226562,31.2451782226562,31.2451782226562,31.2451782226562,31.2451782226562,31.8254776000977,31.8254776000977,31.8254776000977,31.8254776000977,32.3596038818359,32.3596038818359,32.3596038818359,32.3596038818359,32.3596038818359,32.3596038818359,32.3596038818359,33.2318115234375,33.2318115234375,33.2318115234375,33.2318115234375,33.6893005371094,33.6893005371094,33.6893005371094,33.6893005371094,33.6893005371094,33.6893005371094,33.6893005371094,33.6893005371094,33.6893005371094,33.6893005371094,34.1544952392578,34.1544952392578,34.1544952392578,34.1544952392578,34.1544952392578,34.1544952392578,34.1544952392578,34.1544952392578,34.6918334960938,34.6918334960938,34.6918334960938,34.6918334960938,34.6918334960938,34.6918334960938,34.6918334960938,34.6918334960938,34.6918334960938,35.1724395751953,35.1724395751953,35.1724395751953,35.1724395751953,35.1724395751953,35.6452865600586,35.6452865600586,36.5170440673828,36.5170440673828,36.5170440673828,36.5170440673828,36.5170440673828,28.6458206176758,28.6458206176758,29.3092880249023,29.3092880249023,29.3092880249023,29.3092880249023,29.3092880249023,29.8049011230469,29.8049011230469,29.8049011230469,29.8049011230469,29.8049011230469,29.8049011230469,29.8049011230469,29.8049011230469,30.7926025390625,30.7926025390625,30.7926025390625,30.7926025390625,30.7926025390625,30.7926025390625,30.7926025390625,30.7926025390625,31.2909698486328,31.2909698486328,31.2909698486328,31.2909698486328,31.2909698486328,31.2909698486328,31.2909698486328,32.2755432128906,32.2755432128906,32.2755432128906,32.2755432128906,32.2755432128906,32.2755432128906,32.2755432128906,32.2755432128906,32.2755432128906,32.2755432128906,32.7629470825195,32.7629470825195,33.7358474731445,33.7358474731445,33.7358474731445,33.7358474731445,33.7358474731445,34.203742980957,34.203742980957,34.203742980957,34.203742980957,34.203742980957,34.6715545654297,34.6715545654297,34.6715545654297,34.6715545654297,34.6715545654297,34.6715545654297,34.6715545654297,34.6715545654297,34.6715545654297,35.1424026489258,35.1424026489258,35.1424026489258,35.1424026489258,35.1424026489258,35.5645065307617,35.5645065307617,35.5645065307617,35.5645065307617,35.5645065307617,36.0335235595703,36.0335235595703,36.0335235595703,36.0335235595703,36.0335235595703,36.0335235595703,36.0335235595703,36.4870758056641,36.4870758056641,36.4870758056641,36.4870758056641,36.4870758056641,36.4870758056641,28.9415817260742,28.9415817260742,28.9415817260742,28.9415817260742,28.9415817260742,28.9415817260742,28.9415817260742,29.4026947021484,29.4026947021484,29.4026947021484,29.4026947021484,29.4026947021484,29.4026947021484,29.4026947021484,29.4026947021484,29.4026947021484,29.9897842407227,29.9897842407227,29.9897842407227,29.9897842407227,29.9897842407227,29.9897842407227,29.9897842407227,29.9897842407227,29.9897842407227,29.9897842407227,30.4856719970703,30.4856719970703,30.4856719970703,30.4856719970703,30.4856719970703,31.0179977416992,31.0179977416992,31.0179977416992,31.0179977416992,31.0179977416992,31.8264846801758,31.8264846801758,31.8264846801758,31.8264846801758,31.8264846801758,31.8264846801758,31.8264846801758,31.8264846801758,32.3041381835938,32.3041381835938,32.3041381835938,32.3041381835938,32.3041381835938,32.3041381835938,32.3041381835938,33.2866439819336,33.2866439819336,33.2866439819336,33.2866439819336,33.2866439819336,33.2866439819336,33.2866439819336,33.2866439819336,33.2866439819336,34.2716674804688,34.2716674804688,34.2716674804688,34.2716674804688,34.2716674804688,34.7503204345703,34.7503204345703,34.7503204345703,34.7503204345703,34.7503204345703,34.7503204345703,34.7503204345703,35.7353820800781,35.7353820800781,35.7353820800781,35.7353820800781,35.7353820800781,35.7353820800781,35.7353820800781,35.7353820800781,36.4226837158203,36.4226837158203,28.4830093383789,28.4830093383789,28.4830093383789,28.4830093383789,28.4830093383789,28.4830093383789,28.4830093383789,28.9512023925781,28.9512023925781,28.9512023925781,28.9512023925781,28.9512023925781,29.8256149291992,29.8256149291992,29.8256149291992,29.8256149291992,29.8256149291992,29.8256149291992,29.8256149291992,29.8256149291992,30.3256454467773,30.3256454467773,30.3256454467773,30.3256454467773,30.3256454467773,30.3256454467773,30.3256454467773,30.8258361816406,30.8258361816406,30.8258361816406,30.8258361816406,30.8258361816406,31.8029327392578,31.8029327392578,31.8029327392578,31.8029327392578,31.8029327392578,31.8029327392578,32.7697906494141,32.7697906494141,32.7697906494141,32.7697906494141,32.7697906494141,32.7697906494141,32.7697906494141,33.7338409423828,33.7338409423828,33.7338409423828,33.7338409423828,33.7338409423828,33.7338409423828,33.7338409423828,33.7338409423828,33.7338409423828,33.7338409423828,34.7145843505859,34.7145843505859,34.7145843505859,34.7145843505859,34.7145843505859,34.7145843505859,35.6886367797852,35.6886367797852,35.6886367797852,35.6886367797852,35.6886367797852,35.6886367797852,36.1737594604492,36.1737594604492,36.1737594604492,36.1737594604492,36.1737594604492,36.1737594604492,36.1737594604492,36.1737594604492,36.1737594604492,33.1514892578125,33.1514892578125,33.1514892578125,29.2191696166992,29.2191696166992,29.2191696166992,29.2191696166992,29.2191696166992,29.2191696166992,29.2191696166992,29.2191696166992,30.2147445678711,30.2147445678711,30.7182388305664,30.7182388305664,31.2210159301758,31.2210159301758,31.2210159301758,31.2210159301758,31.2210159301758,31.2210159301758,31.2210159301758,31.2210159301758,31.2210159301758,31.2210159301758,31.2210159301758,31.723014831543,31.723014831543,31.723014831543,31.723014831543,31.723014831543,31.723014831543,31.723014831543,31.723014831543,31.723014831543,31.723014831543,32.7086944580078,32.7086944580078,32.7086944580078,32.7086944580078,32.7086944580078,32.7086944580078,32.7086944580078,33.633430480957,33.633430480957,33.633430480957,33.633430480957,33.633430480957,33.633430480957,33.633430480957,33.633430480957,33.633430480957,33.633430480957,33.633430480957,34.1718826293945,34.1718826293945,34.1718826293945,34.1718826293945,34.1718826293945,34.1718826293945,34.1718826293945,34.1718826293945,35.0646057128906,35.0646057128906,35.0646057128906,35.0646057128906,35.0646057128906,35.0646057128906,35.0646057128906,35.0646057128906,35.0646057128906,35.0646057128906,35.6293029785156,35.6293029785156,35.6293029785156,35.6293029785156,36.1178131103516,36.1178131103516,36.1178131103516,36.1178131103516,36.1178131103516,36.1178131103516,36.1178131103516,36.5323486328125,36.5323486328125,36.5323486328125,36.5323486328125,36.5323486328125,36.5323486328125,36.5323486328125,28.6518707275391,28.6518707275391,28.6518707275391,28.6518707275391,28.6518707275391,28.6518707275391,28.6518707275391,28.6518707275391,28.6518707275391,29.4133148193359,29.4133148193359,29.4133148193359,29.4133148193359,29.4133148193359,29.8982391357422,29.8982391357422,29.8982391357422,29.8982391357422,29.8982391357422,29.8982391357422,29.8982391357422,29.8982391357422,29.8982391357422,30.3853530883789,30.3853530883789,30.3853530883789,30.3853530883789,30.3853530883789,30.3853530883789,30.3853530883789,30.3853530883789,30.830451965332,30.830451965332,30.830451965332,30.830451965332,30.830451965332,30.830451965332,30.830451965332,30.830451965332,30.830451965332,30.830451965332,31.3834609985352,31.3834609985352,31.3834609985352,31.3834609985352,31.3834609985352,31.3834609985352,32.3734130859375,32.3734130859375,32.3734130859375,32.3734130859375,32.3734130859375,32.3734130859375,32.3734130859375,32.3734130859375,32.3734130859375,33.3542022705078,33.3542022705078,33.3542022705078,33.3542022705078,33.3542022705078,33.3542022705078,33.3542022705078,34.3374404907227,34.3374404907227,34.3374404907227,34.3374404907227,34.3374404907227,34.3374404907227,34.3374404907227,34.3374404907227,35.3128967285156,35.3128967285156,35.3128967285156,35.3128967285156,35.3128967285156,35.3128967285156,35.3128967285156,35.3128967285156,35.7831497192383,35.7831497192383,35.7831497192383,35.7831497192383,35.7831497192383,35.7831497192383,35.7831497192383,35.7831497192383,36.2707443237305,36.2707443237305,36.2707443237305,36.2707443237305,36.2707443237305,36.2707443237305,36.2707443237305,28.3242645263672,28.3242645263672,28.3242645263672,28.3242645263672,28.3242645263672,28.3242645263672,28.3242645263672,29.1455535888672,29.1455535888672,29.1455535888672,29.1455535888672,29.1455535888672,30.1352233886719,30.1352233886719,30.1352233886719,30.1352233886719,30.1352233886719,30.1352233886719,30.1352233886719,30.1352233886719,31.026252746582,31.026252746582,31.026252746582,31.026252746582,31.026252746582,31.026252746582,31.026252746582,31.026252746582,31.026252746582,31.026252746582,31.624153137207,31.624153137207,31.624153137207,31.624153137207,31.624153137207,31.624153137207,31.624153137207,31.624153137207,31.624153137207,31.624153137207,31.624153137207,32.5966033935547,32.5966033935547,32.5966033935547,32.5966033935547,32.5966033935547,32.5966033935547,32.5966033935547,32.5966033935547,33.5704727172852,33.5704727172852,33.5704727172852,33.5704727172852,33.5704727172852,33.5704727172852,34.0569458007812,34.0569458007812,34.0569458007812,34.0569458007812,34.9113464355469,34.9113464355469,34.9113464355469,34.9113464355469,34.9113464355469,34.9113464355469,34.9113464355469,35.514404296875,35.514404296875,35.514404296875,35.514404296875,35.514404296875,35.514404296875,35.514404296875,36.4864807128906,36.4864807128906,36.4864807128906,36.4864807128906,36.4864807128906,36.4864807128906,28.5459976196289,28.5459976196289,28.5459976196289,28.5459976196289,28.5459976196289,28.5459976196289,28.5459976196289,28.5459976196289,28.5459976196289,28.5459976196289,29.043701171875,29.043701171875,30.0346298217773,30.0346298217773,30.0346298217773,30.0346298217773,30.0346298217773,30.0346298217773,30.0346298217773,30.0346298217773,31.0266876220703,31.0266876220703,31.0266876220703,31.0266876220703,31.0266876220703,31.0266876220703,31.0266876220703,31.0266876220703,31.0266876220703,32.0132827758789,32.0132827758789,32.9854202270508,32.9854202270508,32.9854202270508,32.9854202270508,32.9854202270508,33.4734420776367,33.4734420776367,33.4734420776367,33.4734420776367,33.4734420776367,33.4734420776367,33.4734420776367,33.4734420776367,33.4734420776367,33.4734420776367,33.4734420776367,33.9608993530273,33.9608993530273,33.9608993530273,33.9608993530273,33.9608993530273,33.9608993530273,33.9608993530273,33.9608993530273,33.9608993530273,33.9608993530273,34.4438934326172,34.4438934326172,34.4438934326172,34.4438934326172,34.4438934326172,34.4438934326172,34.9296798706055,34.9296798706055,34.9296798706055,34.9296798706055,34.9296798706055,35.9139785766602,35.9139785766602,35.9139785766602,35.9139785766602,35.9139785766602,35.9139785766602,36.4167251586914,36.4167251586914,36.4167251586914,36.4167251586914,36.4167251586914,28.8525772094727,28.8525772094727,28.8525772094727,28.8525772094727,28.8525772094727,28.8525772094727,28.8525772094727,28.8525772094727,28.8525772094727,29.4755477905273,29.4755477905273,29.4755477905273,29.4755477905273,29.4755477905273,29.4755477905273,29.4755477905273,29.9764938354492,29.9764938354492,30.6497039794922,30.6497039794922,30.6497039794922,30.6497039794922,30.6497039794922,30.6497039794922,30.6497039794922,30.6497039794922,30.6497039794922,30.6497039794922,30.6497039794922,30.6497039794922,30.6497039794922,31.1466751098633,31.1466751098633,31.1466751098633,31.1466751098633,31.1466751098633,32.1201095581055,32.1201095581055,32.1201095581055,32.1201095581055,32.1201095581055,32.5949401855469,32.5949401855469,33.1959075927734,33.1959075927734,33.1959075927734,33.1959075927734,33.1959075927734,33.1959075927734,33.1959075927734,33.6678771972656,33.6678771972656,33.6678771972656,33.6678771972656,33.6678771972656,33.6678771972656,33.6678771972656,33.6678771972656,34.3186569213867,34.3186569213867,34.3186569213867,34.3186569213867,34.3186569213867,34.3186569213867,34.3186569213867,34.9364013671875,34.9364013671875,34.9364013671875,35.4257965087891,35.4257965087891,35.8164291381836,35.8164291381836,35.8164291381836,35.8164291381836,35.8164291381836,35.8164291381836,35.8164291381836,35.8164291381836,36.2367706298828,36.2367706298828,36.2367706298828,36.2367706298828,36.2367706298828,36.2367706298828,36.2367706298828,28.3705139160156,28.3705139160156,28.3705139160156,28.3705139160156,28.3705139160156,28.3705139160156,28.3705139160156,28.3705139160156,28.3705139160156,28.3705139160156,28.8602294921875,28.8602294921875,28.8602294921875,28.8602294921875,28.8602294921875,29.3932723999023,29.3932723999023,29.3932723999023,30.3815231323242,30.3815231323242,30.3815231323242,30.3815231323242,30.3815231323242,30.3815231323242,30.3815231323242,30.3815231323242,30.3815231323242,30.3815231323242,31.3732986450195,31.3732986450195,31.3732986450195,31.3732986450195,31.3732986450195,31.3732986450195,31.3732986450195,31.3732986450195,31.8699493408203,31.8699493408203,31.8699493408203,31.8699493408203,31.8699493408203,31.8699493408203,31.8699493408203,32.8421401977539,32.8421401977539,32.8421401977539,32.8421401977539,32.8421401977539,32.8421401977539,32.8421401977539,33.6188659667969,33.6188659667969,33.6188659667969,33.6188659667969,33.6188659667969,33.6188659667969,33.6188659667969,34.2944641113281,34.2944641113281,34.2944641113281,34.2944641113281,34.2944641113281,34.2944641113281,34.2944641113281,35.2666015625,35.2666015625,35.2666015625,35.2666015625,35.2666015625,35.2666015625,35.2666015625,36.2424850463867,36.2424850463867,36.2424850463867,36.2424850463867,36.2424850463867,28.3186721801758,28.3186721801758,28.3186721801758,28.3186721801758,28.3186721801758,28.8335647583008,28.8335647583008,28.8335647583008,28.8335647583008,28.8335647583008,29.3028945922852,29.3028945922852,29.3028945922852,29.3028945922852,29.3028945922852,29.8963928222656,29.8963928222656,30.8676223754883,30.8676223754883,30.8676223754883,30.8676223754883,30.8676223754883,31.3389511108398,31.3389511108398,31.8104782104492,31.8104782104492,31.8104782104492,31.8104782104492,31.8104782104492,31.8104782104492,31.8104782104492,31.8104782104492,32.2792892456055,32.2792892456055,32.2792892456055,32.2792892456055,32.2792892456055,32.8454818725586,32.8454818725586,32.8454818725586,32.8454818725586,32.8454818725586,33.3868865966797,33.3868865966797,33.3868865966797,33.3868865966797,33.3868865966797,33.3868865966797,33.3868865966797,33.3868865966797,33.3868865966797,33.3868865966797,33.3868865966797,33.3868865966797,33.3868865966797,33.9192733764648,33.9192733764648,33.9192733764648,33.9192733764648,33.9192733764648,33.9192733764648,34.4968719482422,34.4968719482422,34.4968719482422,34.4968719482422,34.4968719482422,34.4968719482422,34.4968719482422,34.9898529052734,34.9898529052734,34.9898529052734,34.9898529052734,34.9898529052734,35.5097274780273,35.5097274780273,35.9709167480469,35.9709167480469,36.4362487792969,36.4362487792969,36.4362487792969,36.4362487792969,36.4362487792969,28.4903259277344,28.4903259277344,28.4903259277344,28.4903259277344,28.4903259277344,28.4903259277344,28.9615249633789,28.9615249633789,28.9615249633789,28.9615249633789,28.9615249633789,28.9615249633789,28.9615249633789,28.9615249633789,28.9615249633789,28.9615249633789,29.4326019287109,29.4326019287109,29.4326019287109,29.4326019287109,29.4326019287109,29.4326019287109,29.4326019287109,29.4326019287109,29.4326019287109,29.4326019287109,29.4326019287109,29.9098587036133,29.9098587036133,29.9098587036133,29.9098587036133,29.9098587036133,29.9098587036133,29.9098587036133,29.9098587036133,29.9098587036133,29.9098587036133,29.9098587036133,29.9098587036133,29.9098587036133,30.3824768066406,30.3824768066406,30.3824768066406,30.3824768066406,30.3824768066406,30.3824768066406,30.3824768066406,30.3824768066406,30.3824768066406,30.3824768066406,30.3824768066406,30.8533096313477,30.8533096313477,30.8533096313477,30.8533096313477,30.8533096313477,30.8533096313477,30.8533096313477,31.3263168334961,31.3263168334961,31.3263168334961,31.3263168334961,31.3263168334961,31.3263168334961,31.3263168334961,31.3263168334961,31.3263168334961,31.8041915893555,31.8041915893555,31.8041915893555,31.8041915893555,31.8041915893555,32.2578659057617,32.2578659057617,32.2578659057617,32.2578659057617,32.2578659057617,32.2578659057617,32.2578659057617,32.2578659057617,32.2578659057617,32.2578659057617,32.7069549560547,32.7069549560547,32.7069549560547,32.7069549560547,32.7069549560547,33.1092376708984,33.1092376708984,33.1092376708984,33.1092376708984,33.1092376708984,33.1092376708984,33.1092376708984,33.5137634277344,33.5137634277344,33.5137634277344,33.5137634277344,33.5137634277344,33.5137634277344,33.5137634277344,33.9256286621094,33.9256286621094,33.9256286621094,33.9256286621094,33.9256286621094,33.9256286621094,33.9256286621094,33.9256286621094,34.339958190918,34.339958190918,34.7733535766602,34.7733535766602,34.7733535766602,34.7733535766602,34.7733535766602,34.7733535766602,34.7733535766602,34.7733535766602,35.2411651611328,35.2411651611328,35.2411651611328,35.2411651611328,35.2411651611328,35.2411651611328,35.2411651611328,35.2411651611328,35.2411651611328,35.2411651611328,35.6786956787109,35.6786956787109,35.6786956787109,35.6786956787109,35.6786956787109,35.6786956787109,35.6786956787109,35.6786956787109,35.6786956787109,35.6786956787109,35.6786956787109,36.5264739990234,36.5264739990234,36.5264739990234,36.5264739990234,36.5264739990234,36.5264739990234,36.5264739990234,29.0946273803711,29.0946273803711,29.0946273803711,29.0946273803711,29.0946273803711,29.0946273803711,29.0946273803711,29.5872116088867,29.5872116088867,30.084342956543,30.084342956543,30.084342956543,30.084342956543,30.084342956543,30.084342956543,30.084342956543,30.084342956543,31.0764923095703,31.0764923095703,31.0764923095703,31.0764923095703,31.0764923095703,31.0764923095703,31.0764923095703,31.0764923095703,31.8562774658203,31.8562774658203,31.8562774658203,31.8562774658203,31.8562774658203,32.5513153076172,32.5513153076172,32.5513153076172,32.5513153076172,32.5513153076172,32.5513153076172,32.5513153076172,32.5513153076172,33.4965438842773,33.4965438842773,33.4965438842773,33.4965438842773,33.4965438842773,33.9734191894531,33.9734191894531,33.9734191894531,33.9734191894531,33.9734191894531,33.9734191894531,33.9734191894531,33.9734191894531,33.9734191894531,34.9331970214844,34.9331970214844,35.4007873535156,35.4007873535156,35.4007873535156,35.4007873535156,35.4007873535156,35.4007873535156,35.4007873535156,35.4007873535156,35.9628753662109,35.9628753662109,35.9628753662109,35.9628753662109,35.9628753662109,36.553108215332,36.553108215332,36.553108215332,36.553108215332,36.553108215332,36.553108215332,36.553108215332,36.553108215332,28.8072891235352,28.8072891235352,28.8072891235352,28.8072891235352,28.8072891235352,28.8072891235352,28.8072891235352,28.8072891235352,28.8072891235352,28.8072891235352,29.8061599731445,29.8061599731445,29.8061599731445,29.8061599731445,29.8061599731445,30.442008972168,30.442008972168,30.442008972168,30.442008972168,30.442008972168,30.442008972168,30.93017578125,30.93017578125,30.93017578125,30.93017578125,30.93017578125,30.93017578125,30.93017578125,30.93017578125,30.93017578125,30.93017578125,30.93017578125,31.4158248901367,31.4158248901367,31.4158248901367,31.4158248901367,31.4158248901367,31.4158248901367,31.4158248901367,31.9690475463867,31.9690475463867,32.6540222167969,32.6540222167969,32.6540222167969,32.6540222167969,32.6540222167969,32.6540222167969,32.6540222167969,33.1817092895508,33.1817092895508,33.1817092895508,33.1817092895508,33.1817092895508,33.1817092895508,33.1817092895508,33.1817092895508,33.1817092895508,33.7778778076172,33.7778778076172,33.7778778076172,33.7778778076172,33.7778778076172,33.7778778076172,33.7778778076172,33.7778778076172,34.2502212524414,34.2502212524414,34.2502212524414,34.2502212524414,34.2502212524414,34.2502212524414,34.2502212524414,34.2502212524414,34.2502212524414,34.7669448852539,34.7669448852539,34.7669448852539,34.7669448852539,34.7669448852539,34.7669448852539,34.7669448852539,35.2532424926758,35.2532424926758,35.2532424926758,35.2532424926758,35.2532424926758,35.2532424926758,35.2532424926758,35.2532424926758,35.7930679321289,35.7930679321289,35.7930679321289,35.7930679321289,35.7930679321289,28.3441467285156,28.3441467285156,28.3441467285156,28.3441467285156,28.3441467285156,28.3441467285156,29.0044631958008,29.0044631958008,29.0044631958008,29.0044631958008,29.0044631958008,29.0044631958008,29.0044631958008,29.0044631958008,29.0044631958008,29.6365356445312,29.6365356445312,29.6365356445312,29.6365356445312,29.6365356445312,29.6365356445312,29.6365356445312,29.6365356445312,29.6365356445312,29.6365356445312,29.6365356445312,30.4762420654297,30.4762420654297,30.4762420654297,30.4762420654297,30.4762420654297,30.4762420654297,30.4762420654297,30.9572982788086,30.9572982788086,30.9572982788086,30.9572982788086,30.9572982788086,31.5031356811523,31.5031356811523,31.5031356811523,31.5031356811523,31.5031356811523,31.5031356811523,31.9677658081055,31.9677658081055,31.9677658081055,31.9677658081055,31.9677658081055,31.9677658081055,31.9677658081055,32.5717010498047,32.5717010498047,33.1308822631836,33.1308822631836,33.1308822631836,33.1308822631836,33.1308822631836,33.1308822631836,33.1308822631836,33.1308822631836,33.9573822021484,33.9573822021484,33.9573822021484,33.9573822021484,33.9573822021484,33.9573822021484,33.9573822021484,33.9573822021484,33.9573822021484,34.7670364379883,34.7670364379883,34.7670364379883,34.7670364379883,34.7670364379883,35.24951171875,35.24951171875,35.24951171875,35.24951171875,35.24951171875,35.7612915039062,35.7612915039062,35.7612915039062,36.2505035400391,36.2505035400391,36.2505035400391,36.2505035400391,36.2505035400391,36.2505035400391,28.3153381347656,28.3153381347656,28.8982620239258,28.8982620239258,28.8982620239258,28.8982620239258,28.8982620239258,28.8982620239258,28.8982620239258,28.8982620239258,29.581657409668,29.581657409668,29.581657409668,29.581657409668,29.581657409668,30.3098068237305,30.3098068237305,30.3098068237305,30.3098068237305,30.3098068237305,31.2876205444336,31.2876205444336,31.2876205444336,31.2876205444336,31.2876205444336,31.2876205444336,31.2876205444336,31.2876205444336,31.2876205444336,31.2876205444336,31.7776947021484,31.7776947021484,31.7776947021484,31.7776947021484,32.2605895996094,32.2605895996094,32.7461395263672,32.7461395263672,32.7461395263672,32.7461395263672,32.7461395263672,33.2226791381836,33.2226791381836,33.2226791381836,33.2226791381836,33.2226791381836,33.2226791381836,33.2226791381836,33.7539443969727,33.7539443969727,33.7539443969727,33.7539443969727,34.2546768188477,34.2546768188477,34.2546768188477,34.2546768188477,34.2546768188477,34.775505065918,34.775505065918,34.775505065918,34.775505065918,34.775505065918,34.775505065918,34.775505065918,35.3791046142578,35.3791046142578,35.3791046142578,35.3791046142578,35.3791046142578,35.3791046142578,35.3791046142578,35.3791046142578,35.3791046142578,35.8642425537109,35.8642425537109,35.8642425537109,35.8642425537109,35.8642425537109,35.8642425537109,36.4075393676758,36.4075393676758,36.4075393676758,36.4075393676758,36.4075393676758,36.4075393676758,36.4075393676758,36.4075393676758,28.5483932495117,28.5483932495117,28.5483932495117,28.5483932495117,28.5483932495117,29.4414596557617,29.4414596557617,29.4414596557617,29.4414596557617,29.9315567016602,29.9315567016602,29.9315567016602,29.9315567016602,29.9315567016602,29.9315567016602,29.9315567016602,30.5253448486328,30.5253448486328,30.5253448486328,30.5253448486328,30.5253448486328,31.523323059082,31.523323059082,31.523323059082,31.523323059082,31.523323059082,31.523323059082,31.523323059082,31.523323059082,32.3258361816406,32.3258361816406,32.3258361816406,32.7990112304688,32.7990112304688,33.2631607055664,33.2631607055664,33.2631607055664,33.2631607055664,33.2631607055664,33.7357864379883,33.7357864379883,33.7357864379883,33.7357864379883,33.7357864379883,33.7357864379883,33.7357864379883,34.2422561645508,34.2422561645508,34.2422561645508,34.2422561645508,34.2422561645508,34.2422561645508,34.2422561645508,34.2422561645508,34.7118377685547,34.7118377685547,34.7118377685547,34.7118377685547,34.7118377685547,34.7118377685547,34.7118377685547,34.7118377685547,34.7118377685547,35.1931228637695,35.1931228637695,35.1931228637695,35.1931228637695,35.1931228637695,35.1931228637695,35.1931228637695,35.6713790893555,35.6713790893555,35.6713790893555,35.6713790893555,35.6713790893555,35.6713790893555,35.6713790893555,36.1494827270508,36.1494827270508,36.1494827270508,36.1494827270508,36.1494827270508,36.1494827270508,36.1494827270508,28.5272064208984,28.5272064208984,28.5272064208984,28.5272064208984,28.5272064208984,28.5272064208984,29.3439559936523,29.3439559936523,29.8403625488281,29.8403625488281,29.8403625488281,29.8403625488281,29.8403625488281,29.8403625488281,30.3828887939453,30.3828887939453,30.3828887939453,30.3828887939453,30.3828887939453,30.3828887939453,30.3828887939453,30.3828887939453,30.886100769043,30.886100769043,30.886100769043,30.886100769043,30.886100769043,30.886100769043,30.886100769043,30.886100769043,30.886100769043,30.886100769043,31.4488983154297,31.4488983154297,31.4488983154297,31.4488983154297,31.4488983154297,31.4488983154297,31.4488983154297,31.4488983154297,31.9791793823242,31.9791793823242,32.4573135375977,32.4573135375977,32.4573135375977,32.4573135375977,32.4573135375977,32.4573135375977,32.4573135375977,32.4573135375977,32.9272384643555,32.9272384643555,32.9272384643555,32.9272384643555,32.9272384643555,33.7691192626953,33.7691192626953,33.7691192626953,33.7691192626953,33.7691192626953,33.7691192626953,33.7691192626953,33.7691192626953,33.7691192626953,33.7691192626953,34.4067764282227,34.4067764282227,34.4067764282227,34.4067764282227,34.4067764282227,34.4067764282227,34.4067764282227,34.4067764282227,34.8680191040039,34.8680191040039,34.8680191040039,34.8680191040039,34.8680191040039,35.3238220214844,35.3238220214844,35.7802963256836,35.7802963256836,35.7802963256836,35.7802963256836,35.7802963256836,35.7802963256836,35.7802963256836,35.7802963256836,36.4976196289062,36.4976196289062,36.4976196289062,36.4976196289062,36.4976196289062,36.4976196289062,36.4976196289062,36.4976196289062,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,36.5776519775391,28.2148818969727,28.2148818969727,28.2148818969727,28.2148818969727,28.2148818969727,28.2148818969727,28.6865005493164,28.6865005493164,28.6865005493164,28.6865005493164,28.6865005493164,28.6865005493164,28.6865005493164,29.229133605957,29.229133605957,29.229133605957,29.229133605957,29.229133605957,29.229133605957,29.229133605957,29.229133605957,30.1915435791016,30.1915435791016,30.1915435791016,30.1915435791016,30.6934814453125,30.6934814453125,30.6934814453125,30.6934814453125,30.6934814453125,31.2284927368164,31.2284927368164,31.2284927368164,31.2284927368164,31.2284927368164,31.8533935546875,31.8533935546875,31.8533935546875,31.8533935546875,31.8533935546875,31.8533935546875,31.8533935546875,31.8533935546875,32.4714279174805,32.4714279174805,32.9763641357422,32.9763641357422,32.9763641357422,32.9763641357422,32.9763641357422,32.9763641357422,32.9763641357422,33.4743194580078,33.4743194580078,33.4743194580078,33.4743194580078,33.4743194580078,33.4743194580078,33.4743194580078,33.9961013793945,33.9961013793945,34.5714569091797,34.5714569091797,34.5714569091797,34.5714569091797,34.5714569091797,34.5714569091797,34.5714569091797,34.5714569091797,35.0574951171875,35.0574951171875,35.0574951171875,35.0574951171875,35.0574951171875,35.7102432250977,35.7102432250977,35.7102432250977,35.7102432250977,35.7102432250977,35.7102432250977,36.2356643676758,36.2356643676758,36.2356643676758,36.2356643676758,36.2356643676758,36.2356643676758,36.2356643676758,36.2356643676758,28.4709701538086,28.4709701538086,28.4709701538086,28.4709701538086,28.4709701538086,28.4709701538086,28.4709701538086,28.4709701538086,28.4709701538086,29.0278549194336,29.0278549194336,29.0278549194336,29.0278549194336,29.0278549194336,29.0278549194336,29.0278549194336,30.0032043457031,30.0032043457031,30.0032043457031,30.0032043457031,30.0032043457031,30.0032043457031,30.0032043457031,30.0032043457031,30.0032043457031,30.9883651733398,30.9883651733398,30.9883651733398,30.9883651733398,30.9883651733398,30.9883651733398,30.9883651733398,30.9883651733398,31.9758148193359,31.9758148193359,31.9758148193359,31.9758148193359,31.9758148193359,31.9758148193359,31.9758148193359,32.953971862793,32.953971862793,32.953971862793,32.953971862793,32.953971862793,32.953971862793,32.953971862793,33.4487152099609,33.4487152099609,33.4487152099609,33.4487152099609,33.4487152099609,33.4487152099609,33.4487152099609,33.9514999389648,33.9514999389648,33.9514999389648,33.9514999389648,33.9514999389648,34.4192810058594,34.4192810058594,34.4192810058594,34.4192810058594,34.4192810058594,34.4192810058594,34.4192810058594,35.0087585449219,35.0087585449219,35.0087585449219,35.0087585449219,35.0087585449219,35.0087585449219,35.0087585449219,35.0087585449219,35.4971466064453,35.4971466064453,35.4971466064453,35.4971466064453,35.4971466064453,35.4971466064453,35.4971466064453,36.0153198242188,36.0153198242188,36.4980697631836,36.4980697631836,36.4980697631836,36.4980697631836,36.4980697631836,36.4980697631836,36.4980697631836,28.5772018432617,28.5772018432617,28.5772018432617,28.5772018432617,29.1067047119141,29.1067047119141,29.1067047119141,29.1067047119141,29.1067047119141,29.1067047119141,29.7770614624023,29.7770614624023,29.7770614624023,29.7770614624023,29.7770614624023,29.7770614624023,29.7770614624023,29.7770614624023,29.7770614624023,30.2777938842773,30.2777938842773,30.2777938842773,30.2777938842773,30.2777938842773,30.2777938842773,30.2777938842773,30.2777938842773,30.7729797363281,30.7729797363281,30.7729797363281,30.7729797363281,30.7729797363281,31.3129577636719,31.3129577636719,31.3129577636719,31.3129577636719,31.3129577636719,31.3129577636719,31.8341979980469,31.8341979980469,32.5896377563477,32.5896377563477,32.5896377563477,32.5896377563477,32.5896377563477,32.5896377563477,32.5896377563477,32.5896377563477,32.5896377563477,32.5896377563477,32.5896377563477,32.5896377563477,32.5896377563477,33.0882873535156,33.0882873535156,33.0882873535156,33.0882873535156,34.0783004760742,34.0783004760742,34.0783004760742,34.0783004760742,34.0783004760742,34.0783004760742,34.0783004760742,34.0783004760742,34.0783004760742,34.0783004760742,34.0783004760742,34.0783004760742,34.5710983276367,34.5710983276367,34.5710983276367,34.5710983276367,34.5710983276367,34.5710983276367,34.5710983276367,35.1175231933594,35.1175231933594,35.1175231933594,35.1175231933594,35.1175231933594,35.1175231933594,35.1175231933594,35.1175231933594,35.1175231933594,35.1175231933594,35.9416351318359,35.9416351318359,35.9416351318359,35.9416351318359,35.9416351318359,35.9416351318359,35.9416351318359,36.4132995605469,36.4132995605469,36.4132995605469,36.4132995605469,36.4132995605469,36.4132995605469,36.4132995605469,36.4132995605469,36.4132995605469,28.5962600708008,28.5962600708008,28.5962600708008,28.5962600708008,28.5962600708008,28.5962600708008,28.5962600708008,28.5962600708008,28.5962600708008,28.5962600708008,28.5962600708008,28.5962600708008,29.1363983154297,29.1363983154297,29.1363983154297,29.1363983154297,29.1363983154297,29.1363983154297,29.1363983154297,29.8924179077148,29.8924179077148,29.8924179077148,29.8924179077148,29.8924179077148,29.8924179077148,29.8924179077148,29.8924179077148,29.8924179077148,29.8924179077148,29.8924179077148,29.8924179077148,29.8924179077148,30.4478454589844,30.4478454589844,30.4478454589844,30.4478454589844,30.4478454589844,30.4478454589844,30.4478454589844,30.4478454589844,30.4478454589844,30.4478454589844,31.2012100219727,31.2012100219727,31.2012100219727,31.2012100219727,31.2012100219727,31.2012100219727,31.2012100219727,31.2012100219727,31.2012100219727,31.9028854370117,31.9028854370117,31.9028854370117,31.9028854370117,31.9028854370117,32.4706115722656,32.4706115722656,32.4706115722656,32.4706115722656,32.4706115722656,33.1257095336914,33.1257095336914,33.1257095336914,33.1257095336914,33.1257095336914,33.1257095336914,33.1257095336914,33.1257095336914,33.7274169921875,33.7274169921875,33.7274169921875,33.7274169921875,33.7274169921875,33.7274169921875,33.7274169921875,33.7274169921875,34.3334350585938,34.3334350585938,34.3334350585938,34.3334350585938,34.3334350585938,34.3334350585938,34.3334350585938,34.849479675293,34.849479675293,34.849479675293,35.3391952514648,35.3391952514648,35.3391952514648,35.3391952514648,35.3391952514648,35.3391952514648,35.3391952514648,36.0298843383789,36.0298843383789,36.0298843383789,36.0298843383789,36.0298843383789,36.0298843383789,36.0298843383789,36.0298843383789,36.5072250366211,36.5072250366211,36.5072250366211,36.5072250366211,36.5072250366211,36.5072250366211,36.5072250366211,36.5072250366211,36.5072250366211,28.8296432495117,28.8296432495117,28.8296432495117,28.8296432495117,28.8296432495117,29.6505813598633,29.6505813598633,29.6505813598633,29.6505813598633,29.6505813598633,29.6505813598633,29.6505813598633,29.6505813598633,29.6505813598633,30.6440963745117,30.6440963745117,30.6440963745117,30.6440963745117,30.6440963745117,30.6440963745117,30.6440963745117,30.6440963745117,31.1447296142578,31.1447296142578,31.1447296142578,31.6459655761719,31.6459655761719,31.6459655761719,32.1477737426758,32.1477737426758,32.1477737426758,32.1477737426758,32.1477737426758,32.1477737426758,32.1477737426758,32.7015228271484,32.7015228271484,32.7015228271484,32.7015228271484,32.7015228271484,32.7015228271484,32.7015228271484,33.4596252441406,33.4596252441406,33.4596252441406,33.4596252441406,33.4596252441406,33.4596252441406,33.4596252441406,33.4596252441406,34.3102645874023,34.3102645874023,34.3102645874023,34.3102645874023,34.3102645874023,34.3102645874023,34.3102645874023,34.3102645874023,34.3102645874023,34.3102645874023,34.9296340942383,34.9296340942383,34.9296340942383,34.9296340942383,35.4322280883789,35.4322280883789,35.4322280883789,35.4322280883789,35.4322280883789,35.4322280883789,35.4322280883789,35.4322280883789,35.9210662841797,35.9210662841797,35.9210662841797,35.9210662841797,35.9210662841797,35.9210662841797,35.9210662841797,28.2466354370117,28.2466354370117,28.2466354370117,28.2466354370117,28.2466354370117,28.2466354370117,28.7302017211914,28.7302017211914,28.7302017211914,28.7302017211914,28.7302017211914,28.7302017211914,28.7302017211914,28.7302017211914,29.2234344482422,29.2234344482422,29.2234344482422,29.2234344482422,29.2234344482422,29.2234344482422,29.2234344482422,29.7886123657227,29.7886123657227,29.7886123657227,29.7886123657227,29.7886123657227,29.7886123657227,29.7886123657227,30.2862396240234,30.2862396240234,30.2862396240234,30.2862396240234,30.2862396240234,30.885627746582,30.885627746582,30.885627746582,30.885627746582,30.885627746582,30.885627746582,30.885627746582,31.3790969848633,31.3790969848633,31.3790969848633,31.3790969848633,31.3790969848633,31.3790969848633,31.3790969848633,31.8817825317383,31.8817825317383,31.8817825317383,31.8817825317383,31.8817825317383,31.8817825317383,31.8817825317383,31.8817825317383,31.8817825317383,31.8817825317383,32.6700592041016,32.6700592041016,32.6700592041016,32.6700592041016,32.6700592041016,33.1570281982422,33.1570281982422,33.9991149902344,33.9991149902344,33.9991149902344,33.9991149902344,33.9991149902344,33.9991149902344,33.9991149902344,33.9991149902344,33.9991149902344,33.9991149902344,34.6779174804688,34.6779174804688,34.6779174804688,34.6779174804688,34.6779174804688,34.6779174804688,34.6779174804688,35.1688613891602,35.1688613891602,35.1688613891602,35.1688613891602,35.1688613891602,35.1688613891602,35.1688613891602,35.6521911621094,35.6521911621094,35.6521911621094,35.6521911621094,35.6521911621094,36.2633361816406,36.2633361816406,36.2633361816406,36.2633361816406,36.2633361816406,36.2633361816406,36.2633361816406,28.4021911621094,28.4021911621094,28.4021911621094,28.4021911621094,28.4021911621094,28.4021911621094,28.4021911621094,28.8898773193359,28.8898773193359,28.8898773193359,28.8898773193359,28.8898773193359,28.8898773193359,28.8898773193359,28.8898773193359,28.8898773193359,28.8898773193359,28.8898773193359,29.5777816772461,29.5777816772461,29.5777816772461,29.5777816772461,29.5777816772461,29.5777816772461,30.0773162841797,30.0773162841797,30.0773162841797,30.0773162841797,30.8154830932617,30.8154830932617,30.8154830932617,30.8154830932617,30.8154830932617,30.8154830932617,30.8154830932617,31.2936248779297,31.2936248779297,31.2936248779297,31.2936248779297,31.2936248779297,31.2936248779297,31.7886428833008,31.7886428833008,31.7886428833008,31.7886428833008,31.7886428833008,31.7886428833008,32.6834411621094,32.6834411621094,32.6834411621094,32.6834411621094,32.6834411621094,32.6834411621094,32.6834411621094,32.6834411621094,32.6834411621094,32.6834411621094,32.6834411621094,33.2480163574219,33.2480163574219,33.2480163574219,33.2480163574219,33.2480163574219,33.2480163574219,33.2480163574219,33.2480163574219,33.2480163574219,33.2480163574219,33.7186660766602,33.7186660766602,33.7186660766602,33.7186660766602,33.7186660766602,33.7186660766602,33.7186660766602,34.2374420166016,34.2374420166016,34.2374420166016,34.2374420166016,34.8291549682617,34.8291549682617,34.8291549682617,34.8291549682617,34.8291549682617,34.8291549682617,34.8291549682617,34.8291549682617,34.8291549682617,35.5448608398438,35.5448608398438,35.5448608398438,35.5448608398438,35.5448608398438,36.517204284668,36.517204284668,36.517204284668,36.517204284668,36.517204284668,36.517204284668,28.6152725219727,28.6152725219727,28.6152725219727,28.6152725219727,28.6152725219727,28.6152725219727,28.6152725219727,28.6152725219727,29.2359924316406,29.2359924316406,29.2359924316406,29.2359924316406,29.2359924316406,29.2359924316406,30.0050659179688,30.0050659179688,30.5041580200195,30.5041580200195,30.5041580200195,30.5041580200195,30.5041580200195,31.3441390991211,31.3441390991211,31.3441390991211,31.3441390991211,31.3441390991211,31.3441390991211,31.3441390991211,31.3441390991211,31.8384094238281,31.8384094238281,31.8384094238281,31.8384094238281,31.8384094238281,31.8384094238281,31.8384094238281,32.3320388793945,32.3320388793945,32.3320388793945,32.3320388793945,32.3320388793945,32.3320388793945,32.3320388793945,32.8227386474609,32.8227386474609,33.8065338134766,33.8065338134766,33.8065338134766,33.8065338134766,33.8065338134766,33.8065338134766,33.8065338134766,33.8065338134766,33.8065338134766,34.4784927368164,34.4784927368164,34.4784927368164,34.4784927368164,34.4784927368164,34.4784927368164,34.4784927368164,34.4784927368164,34.9717025756836,34.9717025756836,34.9717025756836,34.9717025756836,34.9717025756836,35.4816207885742,35.4816207885742,35.4816207885742,35.4816207885742,35.4816207885742,35.4816207885742,35.4816207885742,35.9081878662109,35.9081878662109,35.9081878662109,35.9081878662109,35.9081878662109,35.9081878662109,35.9081878662109,36.3725280761719,36.3725280761719,36.3725280761719,36.3725280761719,36.3725280761719,28.6068115234375,28.6068115234375,28.6068115234375,28.6068115234375,28.6068115234375,28.6068115234375,28.6068115234375,28.6068115234375,29.2323837280273,29.2323837280273,29.2323837280273,29.2323837280273,29.2323837280273,29.2323837280273,30.03369140625,30.03369140625,30.03369140625,30.03369140625,30.03369140625,30.03369140625,30.03369140625,30.4856948852539,30.4856948852539,30.9382781982422,30.9382781982422,30.9382781982422,30.9382781982422,30.9382781982422,31.5127258300781,31.5127258300781,31.5127258300781,31.5127258300781,31.5127258300781,31.5127258300781,31.5127258300781,31.5127258300781,31.5127258300781,31.5127258300781,32.1445541381836,32.1445541381836,32.1445541381836,32.1445541381836,32.1445541381836,32.1445541381836,32.1445541381836,32.7490234375,32.7490234375,32.7490234375,33.2876281738281,33.2876281738281,33.2876281738281,33.2876281738281,33.2876281738281,33.2876281738281,33.2876281738281,33.2876281738281,34.2751922607422,34.2751922607422,34.2751922607422,34.2751922607422,34.2751922607422,34.2751922607422,34.2751922607422,34.2751922607422,35.2651290893555,35.2651290893555,35.2651290893555,35.2651290893555,35.2651290893555,35.2651290893555,35.2651290893555,36.2531356811523,36.2531356811523,36.2531356811523,36.2531356811523,36.2531356811523,36.2531356811523,36.2531356811523,36.2531356811523,36.2531356811523,36.2531356811523,36.2531356811523,28.7428588867188,28.7428588867188,29.2330627441406,29.2330627441406,29.2330627441406,29.2330627441406,29.2330627441406,29.2330627441406,29.2330627441406,29.2330627441406,29.2330627441406,29.8726272583008,29.8726272583008,29.8726272583008,29.8726272583008,29.8726272583008,30.5017242431641,30.5017242431641,30.5017242431641,31.0082321166992,31.0082321166992,31.0082321166992,31.0082321166992,31.0082321166992,31.0082321166992,31.0082321166992,31.0082321166992,31.0082321166992,31.6064453125,31.6064453125,31.6064453125,31.6064453125,32.1803588867188,32.1803588867188,32.1803588867188,32.1803588867188,32.1803588867188,32.1803588867188,32.1803588867188,32.1803588867188,32.1803588867188,32.6529769897461,32.6529769897461,32.6529769897461,32.6529769897461,32.6529769897461,32.6529769897461,32.6529769897461,32.6529769897461,33.1483840942383,33.1483840942383,33.1483840942383,33.1483840942383,33.1483840942383,33.1483840942383,33.1483840942383,33.1483840942383,34.1369781494141,34.1369781494141,34.1369781494141,34.1369781494141,34.1369781494141,34.1369781494141,34.1369781494141,34.1369781494141,34.6303024291992,34.6303024291992,34.6303024291992,34.6303024291992,34.6303024291992,34.6303024291992,34.6303024291992,35.124397277832,35.124397277832,35.124397277832,35.124397277832,35.124397277832,35.124397277832,35.124397277832,35.6038131713867,35.6038131713867,36.4852066040039,36.4852066040039,36.4852066040039,36.4852066040039,36.4852066040039,36.4852066040039,36.4852066040039,36.4852066040039,36.4852066040039,36.4852066040039,36.4852066040039,36.4852066040039,28.5890121459961,28.5890121459961,28.5890121459961,28.5890121459961,28.5890121459961,29.5929794311523,29.5929794311523,29.5929794311523,29.5929794311523,29.5929794311523,30.0943908691406,30.0943908691406,30.0943908691406,30.0943908691406,30.0943908691406,31.0984039306641,31.0984039306641,31.0984039306641,31.0984039306641,31.0984039306641,31.0984039306641,32.0383071899414,32.0383071899414,32.0383071899414,32.0383071899414,32.0383071899414,32.6608047485352,32.6608047485352,32.6608047485352,32.6608047485352,32.6608047485352,32.6608047485352,32.6608047485352,32.6608047485352,33.1481323242188,33.1481323242188,33.1481323242188,33.1481323242188,33.1481323242188,34.1490783691406,34.1490783691406,34.1490783691406,34.1490783691406,34.1490783691406,34.1490783691406,35.1422805786133,35.1422805786133,35.1422805786133,35.1422805786133,35.1422805786133,35.1422805786133,35.1422805786133,35.1422805786133,36.1451110839844,36.1451110839844,36.1451110839844,36.1451110839844,36.1451110839844,36.1451110839844,36.1451110839844,36.1451110839844,36.1451110839844,36.1451110839844,36.1451110839844,36.1451110839844,28.7646408081055,28.7646408081055,28.7646408081055,28.7646408081055,28.7646408081055,28.7646408081055,28.7646408081055,28.7646408081055,29.7734298706055,29.7734298706055,29.7734298706055,29.7734298706055,29.7734298706055,29.7734298706055,29.7734298706055,30.755859375,30.755859375,30.755859375,30.755859375,30.755859375,30.755859375,30.755859375,30.755859375,30.755859375,31.7578353881836,31.7578353881836,31.7578353881836,31.7578353881836,31.7578353881836,31.7578353881836,31.7578353881836,31.7578353881836,31.7578353881836,31.7578353881836,31.7578353881836,31.7578353881836,32.7539596557617,32.7539596557617,32.7539596557617,32.7539596557617,32.7539596557617,32.7539596557617,32.7539596557617,32.7539596557617,33.2525863647461,33.2525863647461,33.2525863647461,33.2525863647461,33.2525863647461,34.2438888549805,34.2438888549805,34.2438888549805,34.2438888549805,34.2438888549805,34.2438888549805,34.2438888549805,34.2438888549805,34.2438888549805,35.244873046875,35.244873046875,35.244873046875,35.244873046875,35.244873046875,35.244873046875,35.244873046875,35.244873046875,35.244873046875,35.244873046875,35.244873046875,36.0659790039062,36.0659790039062,36.0659790039062,36.0659790039062,36.0659790039062,36.0659790039062,36.0659790039062,36.0659790039062,28.4010543823242,28.4010543823242,28.4010543823242,28.4010543823242,28.4010543823242,28.4010543823242,28.4010543823242,29.2452774047852,29.2452774047852,29.2452774047852,29.2452774047852,29.2452774047852,29.2452774047852,29.2452774047852,29.2452774047852,29.2452774047852,29.8742065429688,29.8742065429688,29.8742065429688,29.8742065429688,29.8742065429688,29.8742065429688,29.8742065429688,29.8742065429688,30.3593673706055,30.3593673706055,30.3593673706055,30.3593673706055,30.3593673706055,30.3593673706055,30.3593673706055,30.3593673706055,30.8513488769531,30.8513488769531,30.8513488769531,30.8513488769531,30.8513488769531,30.8513488769531,31.8492431640625,31.8492431640625,31.8492431640625,31.8492431640625,31.8492431640625,32.8296966552734,32.8296966552734,32.8296966552734,32.8296966552734,32.8296966552734,32.8296966552734,32.8296966552734,32.8296966552734,32.8296966552734,32.8296966552734,32.8296966552734,32.8296966552734,32.8296966552734,32.8296966552734,33.3230895996094,33.3230895996094,33.3230895996094,33.3230895996094,33.3230895996094,33.3230895996094,33.8057479858398,33.8057479858398,33.8057479858398,33.8057479858398,33.8057479858398,33.8057479858398,33.8057479858398,33.8057479858398,34.8037338256836,34.8037338256836,34.8037338256836,34.8037338256836,34.8037338256836,34.8037338256836,34.8037338256836,35.7946853637695,35.7946853637695,35.7946853637695,35.7946853637695,35.7946853637695,35.7946853637695,35.7946853637695,36.2865982055664,36.2865982055664,36.2865982055664,36.2865982055664,36.2865982055664,36.2865982055664,28.4183044433594,28.4183044433594,28.4183044433594,28.4183044433594,28.4183044433594,28.4183044433594,28.4183044433594,28.9225921630859,28.9225921630859,28.9225921630859,28.9225921630859,28.9225921630859,28.9225921630859,28.9225921630859,28.9225921630859,29.4070434570312,29.4070434570312,29.4070434570312,29.4070434570312,29.4070434570312,29.4070434570312,29.4070434570312,29.4070434570312,29.9073638916016,29.9073638916016,29.9073638916016,29.9073638916016,29.9073638916016,29.9073638916016,29.9073638916016,29.9073638916016,29.9073638916016,29.9073638916016,29.9073638916016,30.8839569091797,30.8839569091797,30.8839569091797,30.8839569091797,30.8839569091797,30.8839569091797,31.4238510131836,31.4238510131836,31.4238510131836,31.4238510131836,31.4238510131836,31.4238510131836,31.4238510131836,31.4238510131836,31.9038925170898,31.9038925170898,31.9038925170898,31.9038925170898,31.9038925170898,31.9038925170898,32.4392623901367,32.4392623901367,32.4392623901367,32.4392623901367,32.4392623901367,33.1062088012695,33.1062088012695,33.1062088012695,33.1062088012695,33.1062088012695,33.609001159668,33.609001159668,33.609001159668,33.609001159668,33.609001159668,33.609001159668,33.609001159668,34.1263198852539,34.1263198852539,34.1263198852539,34.1263198852539,34.1263198852539,34.6506271362305,34.6506271362305,35.1412887573242,35.1412887573242,35.1412887573242,35.1412887573242,35.1412887573242,35.1412887573242,35.5910110473633,35.5910110473633,35.5910110473633,35.5910110473633,35.5910110473633,36.0447998046875,36.0447998046875,36.0447998046875,36.0447998046875,36.0447998046875,36.0447998046875,36.0447998046875,36.0447998046875,36.0447998046875,36.0447998046875,36.4985046386719,36.4985046386719,36.4985046386719,36.4985046386719,36.4985046386719,36.4985046386719,36.4985046386719,36.4985046386719,28.786735534668,28.786735534668,28.786735534668,28.786735534668,28.786735534668,28.786735534668,28.786735534668,28.786735534668,28.786735534668,29.3650360107422,29.3650360107422,29.3650360107422,29.3650360107422,29.3650360107422,29.3650360107422,29.3650360107422,29.8410568237305,29.8410568237305,29.8410568237305,29.8410568237305,30.3815765380859,30.3815765380859,30.3815765380859,30.3815765380859,30.3815765380859,30.3815765380859,30.3815765380859,30.3815765380859,30.3815765380859,30.3815765380859,30.3815765380859,30.9203033447266,30.9203033447266,30.9203033447266,30.9203033447266,30.9203033447266,30.9203033447266,30.9203033447266,30.9203033447266,30.9203033447266,30.9203033447266,31.4002380371094,31.4002380371094,31.4002380371094,31.4002380371094,31.4002380371094,31.4002380371094,31.4002380371094,31.4002380371094,31.4002380371094,31.8753890991211,31.8753890991211,31.8753890991211,31.8753890991211,31.8753890991211,31.8753890991211,31.8753890991211,31.8753890991211],&#34;meminc&#34;:[0,0,0,0,0,0,0,0.486160278320312,0,0,0,0,0,0,0.553817749023438,0,0,0,0,0,0,0,0,0,0,0.5242919921875,0,0,0,0.9671630859375,0,0,0,0.487823486328125,0,0,0,0,0,0,0,0,0,0,0.489303588867188,0,0,0,0.502655029296875,0,0.886528015136719,0,0,0,0,0,0,0.927047729492188,0,0,0,0,0,0,0,0,0,0.465240478515625,0,0,0,0,0,0,0,0.763580322265625,0,0,0,0,0,0.412788391113281,0,0,0,0,0,0,0,0,-7.90754699707031,0,0,0,0,0,0,0.48822021484375,0,0,0,0,0,0.49334716796875,0,0,0,0,0,0,0.483726501464844,0,0,0,0,0,0,0.983612060546875,0,0,0,0,0,0.491600036621094,0,0,0.498222351074219,0,0,0,0,0,0,0.839813232421875,0,0,0,0,0,0,0,0,0.986549377441406,0,0,0,0,0.500679016113281,0,0,0,0,0,0,0,0,0,0,0.805976867675781,0,0,0,0,0,0.669342041015625,0,0,0,0,0,0,0.964607238769531,0,0,0,0,-7.47320556640625,0,0,0,0,0,0,0.50067138671875,0,0,1.00392913818359,0,0,0,0,0,0,0.810150146484375,0,0,0,0,0,0,0,0.686744689941406,0,0,0,0,0,0,0,0.497581481933594,0,0,0,0,0,0,0,0,0.54150390625,0,0,0,0,0,0.947052001953125,0,0,0,0,0,0.99359130859375,0,0,0,0,0,0,0,0,0,0.985435485839844,0,0,0,0,0,0,-7.47956085205078,0,0,0,0,0,0,0,0.504043579101562,0,0,0,0,1.00777435302734,0,0.564201354980469,0,0,0,0,0.679275512695312,0,0,0,0,0,0,0.661697387695312,0,0,0,0.585067749023438,0,0,0,0,0,0,0,0,0,0.992485046386719,0,0,0,0.569320678710938,0,0,0,0,0.912261962890625,0,0,0,0,0,0,0,0.997489929199219,0,0,0,0,0,0,0,0.568275451660156,0,0,0,0,-7.54688262939453,0,0,0,0,0,0,0,1.0081787109375,0,0.503273010253906,0,0,1.01636505126953,0,0,0,0,0,0,1.00457000732422,0,0,0,0,0,0,0.971961975097656,0,0.8065185546875,0,0,0,0,0,0.685806274414062,0,0,0,0.990325927734375,0,0,0,-7.73866271972656,0,0,0,0,0,0,0,0.319740295410156,0,0,0,0,0,0,0,0,0,0,0,0,0,1.00577545166016,0,0,0,0,0,0,0,0,0,0,0,0.540145874023438,0,0,0.967155456542969,0,0,0,0,0,0,0,0.514945983886719,0,0,0,0,0,0,0,0,0,0,0.487350463867188,0,0.903480529785156,0,0,0,0.533782958984375,0,0,0,0,0,0,0.508743286132812,0,0,0,0,0,0,0.602859497070312,0,0,0,0,0,0,0.508674621582031,0,0,0,0,0,0,0,0,0,0,0.445343017578125,0,0,0,0,0,0,0,0,0,0,0.419807434082031,0,0,0,0,0,0,0.458633422851562,0,0,0,0,0,0,0,0,-7.97842407226562,0,0.577194213867188,0,0,0,0,0,0,0,0,1.01390075683594,0,0,0,0,0,0,0,0,0,0,0,0.96484375,0,0,0,0,0,0,0,0.997146606445312,0,0,0,0,0.972633361816406,0,0.975387573242188,0,0,0,0,0,0,0.485877990722656,0,0,0,0.486488342285156,0,0,0,0,0,0.976051330566406,0,0,0,0,0,0,0,-7.46219635009766,0,0,0,0,0,0,0,0.984542846679688,0,0,0,0,0,0,0,0,0,0.865928649902344,0,0,0,0,0.468170166015625,0,0,0,0,0.608169555664062,0,0,0,0,0,0,0.514541625976562,0,0,0,0,0,0,0.454055786132812,0,0,0,0,0.536445617675781,0,0,0,0,0.439750671386719,0,0,0,0,0,0,0,0.506080627441406,0,0,0,0,0,0,0.462074279785156,0,0,0,0,0,0.639030456542969,0,0,0,0,0.719879150390625,0,0,0,0,0,0,0,0.743072509765625,0,0,0,0,0,0,0,0,-7.92449951171875,0,0,0,0,0,0,0,0,0,0.613128662109375,0,0.48101806640625,0,0,0,0,0,0,0,0,0.680938720703125,0,0,0,0,0,0,0,0,0.49151611328125,0,0,0,0,0,0,0,0,0,0,0,0.558113098144531,0,0,0,0,0,0,0,0.580299377441406,0,0,0,0.534126281738281,0,0,0,0,0,0,0.872207641601562,0,0,0,0.457489013671875,0,0,0,0,0,0,0,0,0,0.465194702148438,0,0,0,0,0,0,0,0.537338256835938,0,0,0,0,0,0,0,0,0.480606079101562,0,0,0,0,0.472846984863281,0,0.871757507324219,0,0,0,0,-7.87122344970703,0,0.663467407226562,0,0,0,0,0.495613098144531,0,0,0,0,0,0,0,0.987701416015625,0,0,0,0,0,0,0,0.498367309570312,0,0,0,0,0,0,0.984573364257812,0,0,0,0,0,0,0,0,0,0.487403869628906,0,0.972900390625,0,0,0,0,0.4678955078125,0,0,0,0,0.467811584472656,0,0,0,0,0,0,0,0,0.470848083496094,0,0,0,0,0.422103881835938,0,0,0,0,0.469017028808594,0,0,0,0,0,0,0.45355224609375,0,0,0,0,0,-7.54549407958984,0,0,0,0,0,0,0.461112976074219,0,0,0,0,0,0,0,0,0.587089538574219,0,0,0,0,0,0,0,0,0,0.495887756347656,0,0,0,0,0.532325744628906,0,0,0,0,0.808486938476562,0,0,0,0,0,0,0,0.477653503417969,0,0,0,0,0,0,0.982505798339844,0,0,0,0,0,0,0,0,0.985023498535156,0,0,0,0,0.478652954101562,0,0,0,0,0,0,0.985061645507812,0,0,0,0,0,0,0,0.687301635742188,0,-7.93967437744141,0,0,0,0,0,0,0.468193054199219,0,0,0,0,0.874412536621094,0,0,0,0,0,0,0,0.500030517578125,0,0,0,0,0,0,0.500190734863281,0,0,0,0,0.977096557617188,0,0,0,0,0,0.96685791015625,0,0,0,0,0,0,0.96405029296875,0,0,0,0,0,0,0,0,0,0.980743408203125,0,0,0,0,0,0.974052429199219,0,0,0,0,0,0.485122680664062,0,0,0,0,0,0,0,0,-3.02227020263672,0,0,-3.93231964111328,0,0,0,0,0,0,0,0.995574951171875,0,0.503494262695312,0,0.502777099609375,0,0,0,0,0,0,0,0,0,0,0.501998901367188,0,0,0,0,0,0,0,0,0,0.985679626464844,0,0,0,0,0,0,0.924736022949219,0,0,0,0,0,0,0,0,0,0,0.5384521484375,0,0,0,0,0,0,0,0.892723083496094,0,0,0,0,0,0,0,0,0,0.564697265625,0,0,0,0.488510131835938,0,0,0,0,0,0,0.414535522460938,0,0,0,0,0,0,-7.88047790527344,0,0,0,0,0,0,0,0,0.761444091796875,0,0,0,0,0.48492431640625,0,0,0,0,0,0,0,0,0.487113952636719,0,0,0,0,0,0,0,0.445098876953125,0,0,0,0,0,0,0,0,0,0.553009033203125,0,0,0,0,0,0.989952087402344,0,0,0,0,0,0,0,0,0.980789184570312,0,0,0,0,0,0,0.983238220214844,0,0,0,0,0,0,0,0.975456237792969,0,0,0,0,0,0,0,0.470252990722656,0,0,0,0,0,0,0,0.487594604492188,0,0,0,0,0,0,-7.94647979736328,0,0,0,0,0,0,0.8212890625,0,0,0,0,0.989669799804688,0,0,0,0,0,0,0,0.891029357910156,0,0,0,0,0,0,0,0,0,0.597900390625,0,0,0,0,0,0,0,0,0,0,0.972450256347656,0,0,0,0,0,0,0,0.973869323730469,0,0,0,0,0,0.486473083496094,0,0,0,0.854400634765625,0,0,0,0,0,0,0.603057861328125,0,0,0,0,0,0,0.972076416015625,0,0,0,0,0,-7.94048309326172,0,0,0,0,0,0,0,0,0,0.497703552246094,0,0.990928649902344,0,0,0,0,0,0,0,0.992057800292969,0,0,0,0,0,0,0,0,0.986595153808594,0,0.972137451171875,0,0,0,0,0.488021850585938,0,0,0,0,0,0,0,0,0,0,0.487457275390625,0,0,0,0,0,0,0,0,0,0.482994079589844,0,0,0,0,0,0.485786437988281,0,0,0,0,0.984298706054688,0,0,0,0,0,0.50274658203125,0,0,0,0,-7.56414794921875,0,0,0,0,0,0,0,0,0.622970581054688,0,0,0,0,0,0,0.500946044921875,0,0.673210144042969,0,0,0,0,0,0,0,0,0,0,0,0,0.496971130371094,0,0,0,0,0.973434448242188,0,0,0,0,0.474830627441406,0,0.600967407226562,0,0,0,0,0,0,0.471969604492188,0,0,0,0,0,0,0,0.650779724121094,0,0,0,0,0,0,0.617744445800781,0,0,0.489395141601562,0,0.390632629394531,0,0,0,0,0,0,0,0.420341491699219,0,0,0,0,0,0,-7.86625671386719,0,0,0,0,0,0,0,0,0,0.489715576171875,0,0,0,0,0.533042907714844,0,0,0.988250732421875,0,0,0,0,0,0,0,0,0,0.991775512695312,0,0,0,0,0,0,0,0.496650695800781,0,0,0,0,0,0,0.972190856933594,0,0,0,0,0,0,0.776725769042969,0,0,0,0,0,0,0.67559814453125,0,0,0,0,0,0,0.972137451171875,0,0,0,0,0,0,0.975883483886719,0,0,0,0,-7.92381286621094,0,0,0,0,0.514892578125,0,0,0,0,0.469329833984375,0,0,0,0,0.593498229980469,0,0.971229553222656,0,0,0,0,0.471328735351562,0,0.471527099609375,0,0,0,0,0,0,0,0.46881103515625,0,0,0,0,0.566192626953125,0,0,0,0,0.541404724121094,0,0,0,0,0,0,0,0,0,0,0,0,0.532386779785156,0,0,0,0,0,0.577598571777344,0,0,0,0,0,0,0.49298095703125,0,0,0,0,0.519874572753906,0,0.461189270019531,0,0.46533203125,0,0,0,0,-7.9459228515625,0,0,0,0,0,0.471199035644531,0,0,0,0,0,0,0,0,0,0.471076965332031,0,0,0,0,0,0,0,0,0,0,0.477256774902344,0,0,0,0,0,0,0,0,0,0,0,0,0.472618103027344,0,0,0,0,0,0,0,0,0,0,0.470832824707031,0,0,0,0,0,0,0.473007202148438,0,0,0,0,0,0,0,0,0.477874755859375,0,0,0,0,0.45367431640625,0,0,0,0,0,0,0,0,0,0.449089050292969,0,0,0,0,0.40228271484375,0,0,0,0,0,0,0.404525756835938,0,0,0,0,0,0,0.411865234375,0,0,0,0,0,0,0,0.414329528808594,0,0.433395385742188,0,0,0,0,0,0,0,0.467811584472656,0,0,0,0,0,0,0,0,0,0.437530517578125,0,0,0,0,0,0,0,0,0,0,0.8477783203125,0,0,0,0,0,0,-7.43184661865234,0,0,0,0,0,0,0.492584228515625,0,0.49713134765625,0,0,0,0,0,0,0,0.992149353027344,0,0,0,0,0,0,0,0.77978515625,0,0,0,0,0.695037841796875,0,0,0,0,0,0,0,0.945228576660156,0,0,0,0,0.476875305175781,0,0,0,0,0,0,0,0,0.95977783203125,0,0.46759033203125,0,0,0,0,0,0,0,0.562088012695312,0,0,0,0,0.590232849121094,0,0,0,0,0,0,0,-7.74581909179688,0,0,0,0,0,0,0,0,0,0.998870849609375,0,0,0,0,0.635848999023438,0,0,0,0,0,0.488166809082031,0,0,0,0,0,0,0,0,0,0,0.485649108886719,0,0,0,0,0,0,0.55322265625,0,0.684974670410156,0,0,0,0,0,0,0.527687072753906,0,0,0,0,0,0,0,0,0.596168518066406,0,0,0,0,0,0,0,0.472343444824219,0,0,0,0,0,0,0,0,0.5167236328125,0,0,0,0,0,0,0.486297607421875,0,0,0,0,0,0,0,0.539825439453125,0,0,0,0,-7.44892120361328,0,0,0,0,0,0.660316467285156,0,0,0,0,0,0,0,0,0.632072448730469,0,0,0,0,0,0,0,0,0,0,0.839706420898438,0,0,0,0,0,0,0.481056213378906,0,0,0,0,0.54583740234375,0,0,0,0,0,0.464630126953125,0,0,0,0,0,0,0.603935241699219,0,0.559181213378906,0,0,0,0,0,0,0,0.826499938964844,0,0,0,0,0,0,0,0,0.809654235839844,0,0,0,0,0.482475280761719,0,0,0,0,0.51177978515625,0,0,0.489212036132812,0,0,0,0,0,-7.93516540527344,0,0.582923889160156,0,0,0,0,0,0,0,0.683395385742188,0,0,0,0,0.7281494140625,0,0,0,0,0.977813720703125,0,0,0,0,0,0,0,0,0,0.490074157714844,0,0,0,0.482894897460938,0,0.485549926757812,0,0,0,0,0.476539611816406,0,0,0,0,0,0,0.531265258789062,0,0,0,0.500732421875,0,0,0,0,0.520828247070312,0,0,0,0,0,0,0.603599548339844,0,0,0,0,0,0,0,0,0.485137939453125,0,0,0,0,0,0.543296813964844,0,0,0,0,0,0,0,-7.85914611816406,0,0,0,0,0.89306640625,0,0,0,0.490097045898438,0,0,0,0,0,0,0.593788146972656,0,0,0,0,0.997978210449219,0,0,0,0,0,0,0,0.802513122558594,0,0,0.473175048828125,0,0.464149475097656,0,0,0,0,0.472625732421875,0,0,0,0,0,0,0.5064697265625,0,0,0,0,0,0,0,0.469581604003906,0,0,0,0,0,0,0,0,0.481285095214844,0,0,0,0,0,0,0.478256225585938,0,0,0,0,0,0,0.478103637695312,0,0,0,0,0,0,-7.62227630615234,0,0,0,0,0,0.816749572753906,0,0.496406555175781,0,0,0,0,0,0.542526245117188,0,0,0,0,0,0,0,0.503211975097656,0,0,0,0,0,0,0,0,0,0.562797546386719,0,0,0,0,0,0,0,0.530281066894531,0,0.478134155273438,0,0,0,0,0,0,0,0.469924926757812,0,0,0,0,0.841880798339844,0,0,0,0,0,0,0,0,0,0.637657165527344,0,0,0,0,0,0,0,0.46124267578125,0,0,0,0,0.455802917480469,0,0.456474304199219,0,0,0,0,0,0,0,0.717323303222656,0,0,0,0,0,0,0,0.0800323486328125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-8.36277008056641,0,0,0,0,0,0.47161865234375,0,0,0,0,0,0,0.542633056640625,0,0,0,0,0,0,0,0.962409973144531,0,0,0,0.501937866210938,0,0,0,0,0.535011291503906,0,0,0,0,0.624900817871094,0,0,0,0,0,0,0,0.618034362792969,0,0.504936218261719,0,0,0,0,0,0,0.497955322265625,0,0,0,0,0,0,0.521781921386719,0,0.575355529785156,0,0,0,0,0,0,0,0.486038208007812,0,0,0,0,0.652748107910156,0,0,0,0,0,0.525421142578125,0,0,0,0,0,0,0,-7.76469421386719,0,0,0,0,0,0,0,0,0.556884765625,0,0,0,0,0,0,0.975349426269531,0,0,0,0,0,0,0,0,0.985160827636719,0,0,0,0,0,0,0,0.987449645996094,0,0,0,0,0,0,0.978157043457031,0,0,0,0,0,0,0.494743347167969,0,0,0,0,0,0,0.502784729003906,0,0,0,0,0.467781066894531,0,0,0,0,0,0,0.5894775390625,0,0,0,0,0,0,0,0.488388061523438,0,0,0,0,0,0,0.518173217773438,0,0.482749938964844,0,0,0,0,0,0,-7.92086791992188,0,0,0,0.529502868652344,0,0,0,0,0,0.670356750488281,0,0,0,0,0,0,0,0,0.500732421875,0,0,0,0,0,0,0,0.495185852050781,0,0,0,0,0.53997802734375,0,0,0,0,0,0.521240234375,0,0.755439758300781,0,0,0,0,0,0,0,0,0,0,0,0,0.498649597167969,0,0,0,0.990013122558594,0,0,0,0,0,0,0,0,0,0,0,0.4927978515625,0,0,0,0,0,0,0.546424865722656,0,0,0,0,0,0,0,0,0,0.824111938476562,0,0,0,0,0,0,0.471664428710938,0,0,0,0,0,0,0,0,-7.81703948974609,0,0,0,0,0,0,0,0,0,0,0,0.540138244628906,0,0,0,0,0,0,0.756019592285156,0,0,0,0,0,0,0,0,0,0,0,0,0.555427551269531,0,0,0,0,0,0,0,0,0,0.753364562988281,0,0,0,0,0,0,0,0,0.701675415039062,0,0,0,0,0.567726135253906,0,0,0,0,0.655097961425781,0,0,0,0,0,0,0,0.601707458496094,0,0,0,0,0,0,0,0.60601806640625,0,0,0,0,0,0,0.516044616699219,0,0,0.489715576171875,0,0,0,0,0,0,0.690689086914062,0,0,0,0,0,0,0,0.477340698242188,0,0,0,0,0,0,0,0,-7.67758178710938,0,0,0,0,0.820938110351562,0,0,0,0,0,0,0,0,0.993515014648438,0,0,0,0,0,0,0,0.500633239746094,0,0,0.501235961914062,0,0,0.501808166503906,0,0,0,0,0,0,0.553749084472656,0,0,0,0,0,0,0.758102416992188,0,0,0,0,0,0,0,0.850639343261719,0,0,0,0,0,0,0,0,0,0.619369506835938,0,0,0,0.502593994140625,0,0,0,0,0,0,0,0.488838195800781,0,0,0,0,0,0,-7.67443084716797,0,0,0,0,0,0.483566284179688,0,0,0,0,0,0,0,0.493232727050781,0,0,0,0,0,0,0.565177917480469,0,0,0,0,0,0,0.497627258300781,0,0,0,0,0.599388122558594,0,0,0,0,0,0,0.49346923828125,0,0,0,0,0,0,0.502685546875,0,0,0,0,0,0,0,0,0,0.788276672363281,0,0,0,0,0.486968994140625,0,0.842086791992188,0,0,0,0,0,0,0,0,0,0.678802490234375,0,0,0,0,0,0,0.490943908691406,0,0,0,0,0,0,0.483329772949219,0,0,0,0,0.61114501953125,0,0,0,0,0,0,-7.86114501953125,0,0,0,0,0,0,0.487686157226562,0,0,0,0,0,0,0,0,0,0,0.687904357910156,0,0,0,0,0,0.499534606933594,0,0,0,0.738166809082031,0,0,0,0,0,0,0.478141784667969,0,0,0,0,0,0.495018005371094,0,0,0,0,0,0.894798278808594,0,0,0,0,0,0,0,0,0,0,0.5645751953125,0,0,0,0,0,0,0,0,0,0.470649719238281,0,0,0,0,0,0,0.518775939941406,0,0,0,0.591712951660156,0,0,0,0,0,0,0,0,0.715705871582031,0,0,0,0,0.972343444824219,0,0,0,0,0,-7.90193176269531,0,0,0,0,0,0,0,0.620719909667969,0,0,0,0,0,0.769073486328125,0,0.499092102050781,0,0,0,0,0.839981079101562,0,0,0,0,0,0,0,0.494270324707031,0,0,0,0,0,0,0.493629455566406,0,0,0,0,0,0,0.490699768066406,0,0.983795166015625,0,0,0,0,0,0,0,0,0.671958923339844,0,0,0,0,0,0,0,0.493209838867188,0,0,0,0,0.509918212890625,0,0,0,0,0,0,0.426567077636719,0,0,0,0,0,0,0.464340209960938,0,0,0,0,-7.76571655273438,0,0,0,0,0,0,0,0.625572204589844,0,0,0,0,0,0.801307678222656,0,0,0,0,0,0,0.452003479003906,0,0.452583312988281,0,0,0,0,0.574447631835938,0,0,0,0,0,0,0,0,0,0.631828308105469,0,0,0,0,0,0,0.604469299316406,0,0,0.538604736328125,0,0,0,0,0,0,0,0.987564086914062,0,0,0,0,0,0,0,0.989936828613281,0,0,0,0,0,0,0.988006591796875,0,0,0,0,0,0,0,0,0,0,-7.51027679443359,0,0.490203857421875,0,0,0,0,0,0,0,0,0.639564514160156,0,0,0,0,0.629096984863281,0,0,0.506507873535156,0,0,0,0,0,0,0,0,0.598213195800781,0,0,0,0.57391357421875,0,0,0,0,0,0,0,0,0.472618103027344,0,0,0,0,0,0,0,0.495407104492188,0,0,0,0,0,0,0,0.988594055175781,0,0,0,0,0,0,0,0.493324279785156,0,0,0,0,0,0,0.494094848632812,0,0,0,0,0,0,0.479415893554688,0,0.881393432617188,0,0,0,0,0,0,0,0,0,0,0,-7.89619445800781,0,0,0,0,1.00396728515625,0,0,0,0,0.501411437988281,0,0,0,0,1.00401306152344,0,0,0,0,0,0.939903259277344,0,0,0,0,0.62249755859375,0,0,0,0,0,0,0,0.487327575683594,0,0,0,0,1.00094604492188,0,0,0,0,0,0.993202209472656,0,0,0,0,0,0,0,1.00283050537109,0,0,0,0,0,0,0,0,0,0,0,-7.38047027587891,0,0,0,0,0,0,0,1.0087890625,0,0,0,0,0,0,0.982429504394531,0,0,0,0,0,0,0,0,1.00197601318359,0,0,0,0,0,0,0,0,0,0,0,0.996124267578125,0,0,0,0,0,0,0,0.498626708984375,0,0,0,0,0.991302490234375,0,0,0,0,0,0,0,0,1.00098419189453,0,0,0,0,0,0,0,0,0,0,0.82110595703125,0,0,0,0,0,0,0,-7.66492462158203,0,0,0,0,0,0,0.844223022460938,0,0,0,0,0,0,0,0,0.628929138183594,0,0,0,0,0,0,0,0.485160827636719,0,0,0,0,0,0,0,0.491981506347656,0,0,0,0,0,0.997894287109375,0,0,0,0,0.980453491210938,0,0,0,0,0,0,0,0,0,0,0,0,0,0.493392944335938,0,0,0,0,0,0.482658386230469,0,0,0,0,0,0,0,0.99798583984375,0,0,0,0,0,0,0.990951538085938,0,0,0,0,0,0,0.491912841796875,0,0,0,0,0,-7.86829376220703,0,0,0,0,0,0,0.504287719726562,0,0,0,0,0,0,0,0.484451293945312,0,0,0,0,0,0,0,0.500320434570312,0,0,0,0,0,0,0,0,0,0,0.976593017578125,0,0,0,0,0,0.539894104003906,0,0,0,0,0,0,0,0.48004150390625,0,0,0,0,0,0.535369873046875,0,0,0,0,0.666946411132812,0,0,0,0,0.502792358398438,0,0,0,0,0,0,0.517318725585938,0,0,0,0,0.524307250976562,0,0.49066162109375,0,0,0,0,0,0.449722290039062,0,0,0,0,0.453788757324219,0,0,0,0,0,0,0,0,0,0.453704833984375,0,0,0,0,0,0,0,-7.71176910400391,0,0,0,0,0,0,0,0,0.578300476074219,0,0,0,0,0,0,0.476020812988281,0,0,0,0.540519714355469,0,0,0,0,0,0,0,0,0,0,0.538726806640625,0,0,0,0,0,0,0,0,0,0.479934692382812,0,0,0,0,0,0,0,0,0.475151062011719,0,0,0,0,0,0,0],&#34;filename&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},&#34;interval&#34;:10,&#34;files&#34;:[],&#34;prof_output&#34;:&#34;/var/folders/f3/t51slq3x2dlfgk3ksp7vddzm0000gq/T//Rtmpg2DXcH/file9352908b5fc.prof&#34;,&#34;highlight&#34;:{&#34;output&#34;:[&#34;^output\\$&#34;],&#34;gc&#34;:[&#34;^&lt;GC&gt;$&#34;],&#34;stacktrace&#34;:[&#34;^\\.\\.stacktraceo(n|ff)\\.\\.$&#34;]},&#34;split&#34;:&#34;h&#34;}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;div id=&#34;htmlwidget-4&#34; style=&#34;width:100%;height:600px;&#34; class=&#34;profvis html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-4&#34;&gt;{&#34;x&#34;:{&#34;message&#34;:{&#34;prof&#34;:{&#34;time&#34;:[1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,12,12,12,12,12,12],&#34;depth&#34;:[7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1],&#34;label&#34;:[&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;],&#34;filenum&#34;:[null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,1,null,null,null,null],&#34;linenum&#34;:[null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,3,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,3,null,null,null,null],&#34;memalloc&#34;:[30.7717666625977,30.7717666625977,30.7717666625977,30.7717666625977,30.7717666625977,30.7717666625977,30.7717666625977,41.0988006591797,41.0988006591797,41.0988006591797,41.0988006591797,41.0988006591797,41.0988006591797,41.0988006591797,41.0988006591797,46.8303909301758,46.8303909301758,46.8303909301758,46.8303909301758,46.8303909301758,46.8303909301758,46.8303909301758,54.6565704345703,54.6565704345703,54.6565704345703,54.6565704345703,54.6565704345703,54.6565704345703,54.6565704345703,54.6565704345703,63.9997177124023,63.9997177124023,63.9997177124023,63.9997177124023,63.9997177124023,63.9997177124023,63.9997177124023,63.9997177124023,63.9997177124023,31.6989898681641,31.6989898681641,31.6989898681641,31.6989898681641,31.6989898681641,31.6989898681641,31.6989898681641,31.6989898681641,41.2001113891602,41.2001113891602,41.2001113891602,41.2001113891602,41.2001113891602,41.2001113891602,41.2001113891602,47.8602523803711,47.8602523803711,47.8602523803711,47.8602523803711,47.8602523803711,47.8602523803711,54.1505279541016,54.1505279541016,54.1505279541016,54.1505279541016,54.1505279541016,54.1505279541016,54.1505279541016,54.1505279541016,63.3177032470703,63.3177032470703,63.3177032470703,63.3177032470703,63.3177032470703,63.3177032470703,63.3177032470703,63.3177032470703,30.2406616210938,30.2406616210938,30.2406616210938,30.2406616210938,30.2406616210938,30.2406616210938,30.2406616210938,30.2406616210938,37.2891616821289,37.2891616821289,37.2891616821289,37.2891616821289,37.2891616821289,37.2891616821289],&#34;meminc&#34;:[0,0,0,0,0,0,0,10.327033996582,0,0,0,0,0,0,0,5.73159027099609,0,0,0,0,0,0,7.82617950439453,0,0,0,0,0,0,0,9.34314727783203,0,0,0,0,0,0,0,0,-32.3007278442383,0,0,0,0,0,0,0,9.50112152099609,0,0,0,0,0,0,6.66014099121094,0,0,0,0,0,6.29027557373047,0,0,0,0,0,0,0,9.16717529296875,0,0,0,0,0,0,0,-33.0770416259766,0,0,0,0,0,0,0,7.04850006103516,0,0,0,0,0],&#34;filename&#34;:[null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null]},&#34;interval&#34;:10,&#34;files&#34;:[{&#34;filename&#34;:&#34;&lt;expr&gt;&#34;,&#34;content&#34;:&#34;set.seed(2009)\nprofvis({\n    NullDistFSNDR_mw &lt;- fastSimNullDistRMean(total_bill ~ time, data=tips)\n})&#34;,&#34;normpath&#34;:&#34;&lt;expr&gt;&#34;}],&#34;prof_output&#34;:&#34;/var/folders/f3/t51slq3x2dlfgk3ksp7vddzm0000gq/T//Rtmpg2DXcH/file9357c2e71.prof&#34;,&#34;highlight&#34;:{&#34;output&#34;:[&#34;^output\\$&#34;],&#34;gc&#34;:[&#34;^&lt;GC&gt;$&#34;],&#34;stacktrace&#34;:[&#34;^\\.\\.stacktraceo(n|ff)\\.\\.$&#34;]},&#34;split&#34;:&#34;h&#34;}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Das mit den beiden Routinen aus FastSimNullDistR die gleichen Ergebnisse zu erwarten sind, sie also ein “(quasi-)drop-in-replacements” der Mosaic Routinen darstellen, kann man an den folgenden QQ-Plots erkennen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df.diffprop &amp;lt;- data_frame(diffprop = c(NullDistFSNDR_aw$diffprop,
    NullDistMosaic_aw$diffprop), type = c(rep(&amp;quot;FSNDR&amp;quot;, 10000),
    rep(&amp;quot;mosaic&amp;quot;, 10000)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: `data_frame()` was deprecated in tibble 1.1.0.
## Please use `tibble()` instead.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_qq(~diffprop, color = ~type, data = df.diffprop)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-05-02-ein-wenig-schneller-zur-simulierten-nullverteilung_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df.diffmean &amp;lt;- data_frame(diffmean = c(NullDistFSNDR_mw$diffmean,
    NullDistMosaic_mw$diffmean), type = c(rep(&amp;quot;FSNDR&amp;quot;, 10000),
    rep(&amp;quot;mosaic&amp;quot;, 10000)))
gf_qq(~diffmean, color = ~type, data = df.diffmean)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-05-02-ein-wenig-schneller-zur-simulierten-nullverteilung_files/figure-html/unnamed-chunk-15-2.png&#34; width=&#34;672&#34; /&gt;
# qqplot(NullDistFSNDR_aw&lt;span class=&#34;math inline&#34;&gt;\(diffprop, NullDistMosaic_aw\)&lt;/span&gt;diffprop)
gf_qq(FSNDR ~ Mosaic, data=df)
# qqplot(NullDistFSNDR_mw&lt;span class=&#34;math inline&#34;&gt;\(diffmean, NullDistMosaic_mw\)&lt;/span&gt;diffmean)
gf_qq(NullDistFSNDR_mw&lt;span class=&#34;math inline&#34;&gt;\(diffmean ~ NullDistMosaic_mw\)&lt;/span&gt;diffmean)
```&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;woher-kommt-die-geschwindigkeit&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Woher kommt die Geschwindigkeit?&lt;/h2&gt;
&lt;p&gt;Schaut man sich den Quellcode von Mosaic an, wird einem schnell klar, dass es zwar didaktisch sinnvoll ist die unabhängige Variable mit &lt;code&gt;shuffle()&lt;/code&gt; zu bearbeiten, nicht aber programmiertechnisch. Und wenn, dann nicht in dem man die ganze Datenzeile für die Berechnung kopiert. Statt also &lt;span class=&#34;math inline&#34;&gt;\(10\,000\)&lt;/span&gt; mal die ganzen Daten im Speicher zu kopieren wäre es doch sinnvoller mit Hilfe eines Index auf die unveränderten Daten zuzugreifen. Und genau das machen die zwei Routinen. Es wird also nur dieser Zugriffsindex wird &lt;em&gt;geshuffelt&lt;/em&gt; und das spart Speicherplatz und deutlich auch Rechenzeit.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Nur ein wenig lineare Regression</title>
      <link>https://sefiroth.net/nab/post/nur-ein-wenig-lineare-regression/</link>
      <pubDate>Mon, 08 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/nur-ein-wenig-lineare-regression/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Der &lt;em&gt;tipping&lt;/em&gt; Datensatz wird oft analysiert. Das Verhältnis von Trinkgeld (&lt;em&gt;tip&lt;/em&gt;) und Rechnungsbetrag (&lt;em&gt;total_bill&lt;/em&gt;) steht dabei im Vordergrund einer lineare Regressionsanalyse.
So auch hier. Wir wollen die einzelnen Angaben von &lt;strong&gt;R&lt;/strong&gt; dabei in den Fokus rücken und einmal Hinterfragen, was wir bei der Ausgabe von &lt;strong&gt;R&lt;/strong&gt; eigentlich genau sehen, woher es kommt und wie man es interpretieren kann.&lt;/p&gt;
&lt;p&gt;Zunächst laden wir dazu die &lt;strong&gt;tipping&lt;/strong&gt; Daten mittels&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mosaic)
download.file(&amp;quot;https://goo.gl/whKjnl&amp;quot;, destfile = &amp;quot;tips.csv&amp;quot;)
tips &amp;lt;- read.csv2(&amp;quot;tips.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in den Arbeitsspeicher.&lt;/p&gt;
&lt;p&gt;Eine lineares Modell wird schnell mit&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;linMod &amp;lt;- lm(tip ~ total_bill, data = tips)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;erstellt.
Betrachten wir die Zusammenfassung:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(linMod)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = tip ~ total_bill, data = tips)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -3.1982 -0.5652 -0.0974  0.4863  3.7434 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept) 0.920270   0.159735   5.761 2.53e-08 ***
## total_bill  0.105025   0.007365  14.260  &amp;lt; 2e-16 ***
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 1.022 on 242 degrees of freedom
## Multiple R-squared:  0.4566, Adjusted R-squared:  0.4544 
## F-statistic: 203.4 on 1 and 242 DF,  p-value: &amp;lt; 2.2e-16&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Die zentrale Frage bei einer linearen Regression ist, finden wir einen linearen Zusammenhang in unserer Stichprobe, den wir auf die Population (als die Grundgesamtheit) übertragen können.&lt;/p&gt;
&lt;p&gt;Die Spalte &lt;strong&gt;Estimate&lt;/strong&gt; im Abschnitt &lt;strong&gt;Coefficients&lt;/strong&gt; liefert uns in unser Stichprobe einen möglichen linearen Zusammenhang gemäß&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\hat{y}_{\text{tip}} = \hat{\beta}_{\text{0}} + \hat{\beta}_{\text{total_bill}} \cdot x_{\text{total_bill}},\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;mit den &lt;em&gt;Regressionskoeffizienten&lt;/em&gt; &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}_0=0.9202696\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}_{\text{total_bill}}=0.1050245\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Graphisch ergibt sich damit das Modell wie folgt:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Statt plotModel(linMod) besser:
mypanel &amp;lt;- function(x, y) {
    # Scatterplot:
    panel.xyplot(x, y, col = &amp;quot;darkgreen&amp;quot;) 
    # Regressionsgerade:
    panel.abline(linMod, col = &amp;quot;red&amp;quot;, lwd = 1.2, lty = 2)
}
xyplot(
    tip ~ total_bill, data = tips, 
    panel = mypanel,
    main  = &amp;quot;Streudiagramm der Trinkgelder&amp;quot;,
    ylab  = &amp;quot;Trinkgeld&amp;quot;,
    xlab  = &amp;quot;Rechnungsbetrag&amp;quot;,
    key = list(
            space = &amp;quot;bottom&amp;quot;, padding.text = 8,
            lines = list(col = c(&amp;quot;red&amp;quot;), lty = c(2), lwd = 1.2),
            text = list(c(&amp;quot;Regressionsgerade&amp;quot;))
          )
     )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-01-08-nur-ein-wenig-lineare-regression_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Was hat es mit dem y-Achsenabschnitt &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}_0\)&lt;/span&gt; auf sich?&lt;/p&gt;
&lt;p&gt;Ist es etwa eine Art &lt;em&gt;Grundtrinkgeld&lt;/em&gt;, mit dem der Kellern rechnen kann, auch wenn der Kunde gar nichts bestellt?&lt;/p&gt;
&lt;p&gt;Nun ja, es so etwas in der Art, aber eben ein rein fiktiver Wert, der durch die Konstruktion der Parameter entsteht.
Eine (affin-)lineare Gerade geht nun einmal irgendwann durch die y-Achse (wenn sie nicht parallel dazu ist) und es kann passieren, dass eine sinnvolle Interpretation nicht so ohne weiteres möglich ist.&lt;/p&gt;
&lt;p&gt;Wir können aber dieses &lt;em&gt;Grundtrinkgeld&lt;/em&gt; heraus nehmen und den y-Achsenabschnitt auf Null setzen. Dazu ziehen wir &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}_0\)&lt;/span&gt; einfach von alle Trinkgeldern ab. Wir erhalten quasi nur noch den &lt;em&gt;Trinkgeldzuwach&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;beta_0 &amp;lt;- coef(linMod)[&amp;quot;(Intercept)&amp;quot;]  # Grundtrinkgeld
tips$delta_tip &amp;lt;- tips$tip - beta_0    # wird abgezogen&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vergleichen wir das alte lineare Modell mit dem neuen Modell (&lt;em&gt;linModDelta&lt;/em&gt;):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;linModDelta &amp;lt;- lm(delta_tip ~ total_bill, data = tips)
summary(linModDelta)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = delta_tip ~ total_bill, data = tips)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -3.1982 -0.5652 -0.0974  0.4863  3.7434 
## 
## Coefficients:
##               Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept) -4.549e-15  1.597e-01    0.00        1    
## total_bill   1.050e-01  7.365e-03   14.26   &amp;lt;2e-16 ***
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 1.022 on 242 degrees of freedom
## Multiple R-squared:  0.4566, Adjusted R-squared:  0.4544 
## F-statistic: 203.4 on 1 and 242 DF,  p-value: &amp;lt; 2.2e-16&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In diesem Modell ist der Wert für den y-Achsenabschnitt numerisch gleich 0. – Ja, da mag zwar &lt;span class=&#34;math inline&#34;&gt;\(-4.5487837\times 10^{-15}\)&lt;/span&gt; stehen, jedoch sind so kleine Werte der jedem Rechner inne wohnenden Ungenauigkeit in der Gleitkomma-Arithmetik geschuldet und ist faktisch gleich 0.&lt;/p&gt;
&lt;p&gt;Der Wert für die Steigung lautet weiterhin &lt;span class=&#34;math inline&#34;&gt;\(0.1050245\)&lt;/span&gt;.
Das war auch zu erwarten, denn wir haben unsere Regressionsgerade eigentlich nur um &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}_0\)&lt;/span&gt; nach unten verschoben. (Der Fachmann spricht von einer Translation (Parallelverschiebung)&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; um &lt;span class=&#34;math inline&#34;&gt;\(-\hat{\beta}_0\)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Statt plotModel(linModDelta) besser:
mypanel &amp;lt;- function(x, y) {
    # Scatterplot:
    panel.xyplot(x, y, col = &amp;quot;darkgreen&amp;quot;) 
    # Regressionsgerade:
    panel.abline(linModDelta, col = &amp;quot;red&amp;quot;, lwd = 1.2, lty = 2)
}
xyplot(
    delta_tip ~ total_bill, data=tips, 
    panel = mypanel,
    main  = &amp;quot;Streudiagramm der Delta Trinkgelder&amp;quot;,
    ylab  = &amp;quot;Delta Trinkgeld&amp;quot;,
    xlab  = &amp;quot;Rechnungsbetrag&amp;quot;,
    key = list(
            space=&amp;quot;bottom&amp;quot;, padding.text=8,
            lines=list(col=c(&amp;quot;red&amp;quot;), lty=c(2), lwd=1.2),
            text=list(c(&amp;quot;Regressionsgerade&amp;quot;)))
     )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-01-08-nur-ein-wenig-lineare-regression_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Vergleichen wir die beiden Zusammenfassungen, so stellen wir fest das sich mit Ausnahme der &lt;em&gt;[Intercept]&lt;/em&gt; Zeile praktisch nichts geändert hat. Das ist kein Wunder, sondern Absicht!&lt;/p&gt;
&lt;p&gt;Die Regressionsgerade stellt für unsere Stichprobe die Gerade mit dem geringsten Fehler an den Datenpunkten dar. Mathematisch heißt das folgendes:&lt;/p&gt;
&lt;p&gt;An den &lt;span class=&#34;math inline&#34;&gt;\(n=244\)&lt;/span&gt; Datenpunkten unserer Stichprobe &lt;span class=&#34;math inline&#34;&gt;\((x_i, y_i)=(tips\$total\_bill[i], tips\$tip[i])\)&lt;/span&gt; [für &lt;span class=&#34;math inline&#34;&gt;\((i=1, \dots, n)\)&lt;/span&gt;] sind die &lt;em&gt;Residuen&lt;/em&gt;, also die &lt;em&gt;Fehlerterme&lt;/em&gt;,&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
 \hat{e}_i =\hat{y}_i - y_i = \left[\hat{\beta}_{\text{0}} + \hat{\beta}_{\text{total_bill}} \cdot x_i\right] - y_i
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;durch die verwendete &lt;em&gt;Methode der kleinsten Quadrate&lt;/em&gt;&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; &lt;em&gt;quadratisch minimal&lt;/em&gt;. Kurz:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    \sum_{i=1}^n (\hat{e}_i)^2 \text{ ist minimal!}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir können diese Fehlerterme graphisch ansehen um die Varianz der Residuen zu sehen.
Dazu ziehen wir von allen Datenpunkten &lt;span class=&#34;math inline&#34;&gt;\(y_i\)&lt;/span&gt; den geschätzten Wert &lt;span class=&#34;math inline&#34;&gt;\(\hat{y}_i\)&lt;/span&gt; ab und erstellen ein neues lineares Modell:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;beta_total_bill &amp;lt;- coef(linModDelta)[&amp;quot;total_bill&amp;quot;]
tips$error_tip &amp;lt;- (tips$tip - beta_0 - beta_total_bill * tips$total_bill)
linModError &amp;lt;- lm(error_tip ~ total_bill, data = tips)
summary(linModError)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = error_tip ~ total_bill, data = tips)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -3.1982 -0.5652 -0.0974  0.4863  3.7434 
## 
## Coefficients:
##               Estimate Std. Error t value Pr(&amp;gt;|t|)
## (Intercept)  1.900e-15  1.597e-01       0        1
## total_bill  -8.740e-17  7.365e-03       0        1
## 
## Residual standard error: 1.022 on 242 degrees of freedom
## Multiple R-squared:  6.665e-31,  Adjusted R-squared:  -0.004132 
## F-statistic: 1.613e-28 on 1 and 242 DF,  p-value: 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also Diagramm sieht es dann so aus:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Statt plotModel(linModError) besser:
mypanel &amp;lt;- function(x, y) {
    # Scatterplot:
    panel.xyplot(x, y, col = &amp;quot;darkgreen&amp;quot;) 
    # Regressionsgerade:
    panel.abline(linModError, col = &amp;quot;red&amp;quot;, lwd = 1.2, lty = 2)
}
xyplot(
    error_tip ~ total_bill, data = tips, 
    panel = mypanel,
    main  = &amp;quot;Streudiagramm der Residuen&amp;quot;,
    ylab  = &amp;quot;Residuen&amp;quot;,
    xlab  = &amp;quot;Rechnungsbetrag&amp;quot;,
    key = list(
            space = &amp;quot;bottom&amp;quot;, rows = 3, padding.text = 8,
            lines = list(col=c(&amp;quot;red&amp;quot;), lty = c(2), lwd = 1.2),
            text = list(c(&amp;quot;Regressionsgerade / x-Achse&amp;quot;))
          )
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-01-08-nur-ein-wenig-lineare-regression_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Wir können die Graphik im wesentlichen auch einfacher über den Befehl&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;xyplot(residuals(linMod) ~ fitted(linMod))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-01-08-nur-ein-wenig-lineare-regression_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;erhalten.&lt;/p&gt;
&lt;p&gt;Betrachten wir kurz nur die Residuen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;favstats(~residuals(linMod))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        min         Q1      median        Q3      max          mean       sd   n
##  -3.198225 -0.5651615 -0.09744499 0.4863111 3.743435 -2.022281e-17 1.019943 244
##  missing
##        0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wir sehe, dass wir in der Zusammenfassung immer genau diese Werte unter dem Abschnitt &lt;em&gt;Residuals&lt;/em&gt; gefunden haben. Minimum, das 1. Quantil, der Median, das 3. Quantil und das Maximum stimmen überein.&lt;/p&gt;
&lt;p&gt;Der erwartungstreue und unverzerrte Schätzer für den Standardfehler der Residuen, lautet&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{align*}
    SE_{\text{Residuen}} &amp;amp;= \sqrt{\frac{1}{n-2} \cdot \sum_{i=1}^n (\hat{e_i})^2} = \sqrt{\frac{n-1}{n-2} \cdot \frac{1}{n-1} \cdot \sum_{i=1}^n (\hat{e_i})^2} \\
                         &amp;amp;= \sqrt{\frac{n-1}{n-2}} \cdot \sqrt{\frac{1}{n-1} \cdot \sum_{i=1}^n (\hat{e_i})^2} \\
                         &amp;amp;= \sqrt{\frac{n-1}{n-2}} \cdot s_{\text{Residuen}}
\end{align*}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Also finden wir den Wert &lt;em&gt;Residual standard error&lt;/em&gt; aus der Zeile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Residual standard error: 1.022 on 242 degrees of freedom&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in dem wir den in den &lt;em&gt;favstats&lt;/em&gt; gefundenen Wert für die Standardabweichung entsprechen korrigieren:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    SE_{\text{Residuen}} = \sqrt{\frac{n-1}{n-2}} \cdot s_{\text{Residuen}} = \sqrt{\frac{243}{242}} \cdot 1.0199426 = 1.0220477
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Der Median der Residuen ist nicht gleich Null, wie der Mittelwert. (Welcher auch hier als numerisch Null interpretiert werden muss!)
Es könnte also eine linkssteile, rechtsschiefe Verteilung der Residuen vorliegen.
Betrachten wir dazu das Histogramm:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;histogram(~residuals(linMod), nint = 19)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-01-08-nur-ein-wenig-lineare-regression_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Schon beim ersten Blick auf das Histogramm kann an eine Normalverteilung der Residuen nicht mehr so ganz geglaubt werden.&lt;/p&gt;
&lt;p&gt;Ein Shapiro-Wilk-Test&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; hat als Nullhypothese die Annahme, dass die Daten normalverteilt sind!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;shapiro.test(residuals(linMod))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Shapiro-Wilk normality test
## 
## data:  residuals(linMod)
## W = 0.96728, p-value = 2.171e-05&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Davon ist nach dem Ergebnis eben sowenig auszugehen, wie nach einem Blick auf das QQ-Normal-Diagramm:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qqnorm(residuals(linMod), col = &amp;quot;darkgreen&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-01-08-nur-ein-wenig-lineare-regression_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Ein K.O.-Kriterium für gute Prognosen.&lt;/p&gt;
&lt;p&gt;Wie gut aber beschreibt unsere Regressionsgerade die Daten?&lt;/p&gt;
&lt;p&gt;Als Maß dafür können wir das Bestimmtheitsmaß nehmen.&lt;/p&gt;
&lt;p&gt;Ein kurzer Blick auf die Situation, der Mittelwert der Trinkgelder ist&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    \bar{y} =  \frac{1}{n} \cdot \sum_{i=1}^n y_i = 2.9982787.
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir erhalten so folgendes Diagramm:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mypanel &amp;lt;- function(x, y) {
    panel.xyplot(x, y)
    panel.abline(h = mean(y), lwd = 1.2, lty = 2, col = &amp;quot;darkgreen&amp;quot;)
    panel.lmline(x, y, col = &amp;quot;red&amp;quot;, lwd = 1.2, lty = 2)
}
xyplot(
    tip ~ total_bill, data = tips, 
    panel = mypanel,
    main  = &amp;quot;Streudiagramm der Trinkgelder&amp;quot;,
    ylab  = &amp;quot;Trinkgeld&amp;quot;,
    xlab  = &amp;quot;Rechnungsbetrag&amp;quot;,
    key = list(
            space = &amp;quot;bottom&amp;quot;,
            padding.text = 8,
            columns = 2,
            just = c(&amp;quot;center&amp;quot;, &amp;quot;bottom&amp;quot;),
            lines = list(col = c(&amp;quot;darkgreen&amp;quot;, &amp;quot;red&amp;quot;), lty = c(2, 2), lwd = 1.2),
            text = list(c(expression(bar(y)), expression(hat(beta)[0]+hat(beta)[total_bill] * x[total_bill]))),
            text = list(c(&amp;quot;Mittelwert Trinkgeld&amp;quot;, &amp;quot;Regressionsgerade&amp;quot;))
    )
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-01-08-nur-ein-wenig-lineare-regression_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Die Varianz &lt;span class=&#34;math inline&#34;&gt;\(s^2_{y_i}=1.9144546\)&lt;/span&gt; beschreibt die mittlere quadratische Abweichung der Datenpunkte &lt;span class=&#34;math inline&#34;&gt;\(y_i\)&lt;/span&gt; vom Mittelwert &lt;span class=&#34;math inline&#34;&gt;\(\bar{y}\)&lt;/span&gt;.
Diese Varianz lässt sich Zerlegen in einen Anteil, der durch die Regressionsgerade &lt;em&gt;erklärt&lt;/em&gt; wird und in einen Anteil, der durch die Regressionsgerade &lt;em&gt;nicht erklärt&lt;/em&gt; wird.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    s^2_{y_i} = s^2_{\hat{y}_i} + s^2_{\hat{e}_i}
\]&lt;/span&gt;
Dividiert man beider Seiten durch die Varianz &lt;span class=&#34;math inline&#34;&gt;\(s^2_{y_i}\)&lt;/span&gt;, so normiert man den Ausdruck und kann den Faktor &lt;span class=&#34;math inline&#34;&gt;\(\frac{1}{n-1}\)&lt;/span&gt; (bzw. &lt;span class=&#34;math inline&#34;&gt;\(\frac{1}{n}\)&lt;/span&gt;) herauskürzen. Es bleibt dann:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    1 = \frac{\sum_{i=1}^n (\bar{y}- \hat{y_i})^2}{\sum_{i=1}^n (\bar{y}-y_i)^2} + \frac{\sum_{i=1}^n (\hat{e_i})^2}{\sum_{i=1}^n (\bar{y}-y_i)^2}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Multipliziert man beide Seiten mit &lt;span class=&#34;math inline&#34;&gt;\(\sum_{i=1}^n (y_i)^2\)&lt;/span&gt;, so erhält man:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    \sum_{i=1}^n (\bar{y}- y_i)^2 = \sum_{i=1}^n (\bar{y}- \hat{y_i})^2+ \sum_{i=1}^n (\hat{e_i})^2 
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Zur Vereinfachung nennt man die einzelnen Summen in dem Ausdruck wie folgt:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Der erste Ausdruck heißt &lt;strong&gt;Gesamtvarianz&lt;/strong&gt; oder &lt;strong&gt;total sum of squares&lt;/strong&gt; oder kurz &lt;strong&gt;&lt;span class=&#34;math inline&#34;&gt;\(SS_T\)&lt;/span&gt;&lt;/strong&gt;, (oder &lt;strong&gt;TSS&lt;/strong&gt;) er ist die Summe der quadrierten Differenzen&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    SS_T = \sum_{i=1}^n (\bar{y}-y_i)^2
\]&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Der zweite Ausdruck heißt &lt;strong&gt;Modellvarianz&lt;/strong&gt; oder &lt;strong&gt;model sum of squares&lt;/strong&gt; oder kurz &lt;strong&gt;&lt;span class=&#34;math inline&#34;&gt;\(SS_M\)&lt;/span&gt;&lt;/strong&gt; (oder &lt;strong&gt;RSS&lt;/strong&gt;), er ist die Summe der quadrierten Differenzen aus dem Mittelwert &lt;span class=&#34;math inline&#34;&gt;\(\bar{y}\)&lt;/span&gt; und der Punkte auf der Regressionsgeraden &lt;span class=&#34;math inline&#34;&gt;\(\hat{y}_i\)&lt;/span&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    SS_M = \sum_{i=1}^n (\bar{y}-\hat{y}_i)^2
\]&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Der dritte Ausdruck heißt &lt;strong&gt;Gesamt-Verhersage-Fehler&lt;/strong&gt;, &lt;strong&gt;Fehlersteuung der Regression&lt;/strong&gt; oder &lt;strong&gt;error sum of squares&lt;/strong&gt; oder kurz &lt;span class=&#34;math inline&#34;&gt;\(SS_E\)&lt;/span&gt; (oder &lt;strong&gt;ESS&lt;/strong&gt;), er ist die Summe der quadratischen Differenz aus den Datenpunkten &lt;span class=&#34;math inline&#34;&gt;\(y_i\)&lt;/span&gt; und den Punkten der Regressionsgeraden &lt;span class=&#34;math inline&#34;&gt;\(\hat{y}_i\)&lt;/span&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    SS_E = \sum_{i=1}^n (\hat{y}_i-y_i)^2 = \sum_{i=1}^n (\hat{e}_i)^2
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir können daher auch kurz&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    SS_T = SS_M + SS_E
\]&lt;/span&gt;
schreiben und sparen uns die ganzen Summenzeichen.&lt;/p&gt;
&lt;p&gt;Die Güte einer Regression wollen wir durch den Anteil der durch das Model erklärten Varianz (also der &lt;span class=&#34;math inline&#34;&gt;\(SS_M\)&lt;/span&gt;) ausdrücken und stellen daher nach &lt;span class=&#34;math inline&#34;&gt;\(SS_M\)&lt;/span&gt; um:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    SS_M = SS_T - SS_E
\]&lt;/span&gt;
Teilen wir beide Seiten durch &lt;span class=&#34;math inline&#34;&gt;\(SS_T\)&lt;/span&gt; also der maximalen (weil totalen) Quadratsumme, so erhalten wir:
&lt;span class=&#34;math display&#34;&gt;\[
    \frac{SS_M}{SS_T} = \frac{SS_T}{SS_T} - \frac{SS_E}{SS_T} = 1 - \frac{SS_E}{SS_T}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Den Ausdruck &lt;span class=&#34;math inline&#34;&gt;\(\frac{SS_M}{SS_T}\)&lt;/span&gt; nennen wir &lt;strong&gt;Bestimmtheitsmaß&lt;/strong&gt; und schreiben dafür &lt;span class=&#34;math inline&#34;&gt;\(R^2\)&lt;/span&gt;. Es ist ein Wert zwischen 0 und 1, der den Anteil der durch das Modell beschriebenen Varianz in Bezug auf die Gesamtvarianz angibt. Kraft Definition ist &lt;span class=&#34;math inline&#34;&gt;\(R^2\)&lt;/span&gt; im eindimensionalen Fall tatsächlich das Quadrat des (Pearson-)Korrelationskoeffizienten &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt;. (M.a.W.: &lt;span class=&#34;math inline&#34;&gt;\(R^2= r^2\)&lt;/span&gt;.)&lt;/p&gt;
&lt;p&gt;In unserer Zusammenfassung des linearen Models findet sich dieser Wert auch. Und zwar unter dem Begriff:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Multiple R-squared:  0.4566, &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Es gilt ja:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    R^2 = 1 - \frac{SS_E}{SS_T} = 1 - \frac{s^2_{\hat{e}_i}}{s^2_{y_i}} = 1 - \frac{1.0402829}{1.9144546} = 0.4566166
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Der Wert&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## ..., Adjusted R-squared:  0.4544&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;erklärt sich daraus&lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;, dass das Bestimmheitsmaß um so größer wird je größer die Zahl der unabhängigen Variablen wird.
Und zwar &lt;em&gt;unabhöngig&lt;/em&gt; davon, ob weitere unabhängige Variablen wirklich einen Beitrag zur Erklärungskraft liefern.
Daher nutzt man besser das &lt;strong&gt;korrigierte Bestimmtheitsmaß&lt;/strong&gt; (engl.: &lt;em&gt;adjusted R-squared&lt;/em&gt;) &lt;span class=&#34;math inline&#34;&gt;\(\bar{R}^2\)&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    \begin{align*}
        \bar{R}^2 &amp;amp;= 1- (1-R^2) \cdot \frac{n-1}{n-p-1}\\ 
                  &amp;amp;= R^2 - (1-R^2)  \cdot \frac{p}{n-p-1}
    \end{align*}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wobei &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; die Anzahl der unabhängigen Variablen im Modell darstellt.
In unserem Beispiel gilt daher:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    \begin{align*}
        \bar{R}^2 &amp;amp;= 1 - (1-R^2)  \cdot \frac{n-1}{n-p-1} \\
                  &amp;amp;= 1 - (1- 0.4566166)  \cdot \frac{244-1}{244- 1- 1} \\
                  &amp;amp;= 0.4543712
    \end{align*}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vorsicht:&lt;/strong&gt; Das &lt;em&gt;korrigierte Bestimmtheitsmaß&lt;/em&gt; ist nicht mehr an das Intervall &lt;span class=&#34;math inline&#34;&gt;\([0; 1]\)&lt;/span&gt; gebunden!
Es kann negative Werte annehmen, ist in der Regel kleiner als das (unkorrigierte) Bestimmtheitsmaß und erreicht die obere Grenze (&lt;span class=&#34;math inline&#34;&gt;\(\bar{R}^2=1\)&lt;/span&gt;) genau dann, wenn &lt;span class=&#34;math inline&#34;&gt;\(R^2 = 1\)&lt;/span&gt; ist.&lt;/p&gt;
&lt;p&gt;Bei der &lt;strong&gt;Gesamtsignifikanz des Modells&lt;/strong&gt; (auch &lt;strong&gt;Overall-F-Test&lt;/strong&gt; genannt) wird geprüft, ob mindestens eine Variable einen Erklärungsgehalt für das Modell liefert.&lt;/p&gt;
&lt;p&gt;Falls diese Hypothese verworfen wird ist somit das Modell nutzlos.
Dieser Test lässt sich so interpretieren als würde man die gesamte Güte des Modells, also das &lt;span class=&#34;math inline&#34;&gt;\(R^2\)&lt;/span&gt; des Modells, testen.
Aus diesem Grund wird der F-Test der Gesamtsignifikanz des Modells auch als Anpassungsgüte-Test bezeichnet.
Die Nullhypothese des F-Test der Gesamtsignifikanz des Modells sagt aus, dass alle erklärenden Variablen keinen Einfluss auf die abhängige Variable haben.
Sowohl die abhängige Variable als auch die unabhängigen Variablen können binär (kategoriell) oder metrisch sein.
Der &lt;em&gt;Wald-Test&lt;/em&gt; kann dann die Hypothesen testen (ohne Einbezug des Achsenabschnittes):&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    H_{0}\colon \beta _{1}=\beta _{2}=\ldots =\beta _{k}\;=\;0\Rightarrow R^{2}=0
\]&lt;/span&gt;
gegen&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    H_{1}:\beta _{j}\;\neq \;0\;\mathrm {f{\ddot {u}}r\;mindestens\;ein} \;j\in \{1,\ldots ,k\}\Rightarrow R^{2}\neq 0
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Die Teststatistik dieses Tests lautet&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
    F\;\;{\stackrel {H_{0}}{=}}{\frac {R^{2}}{1-R^{2}}} \cdot {\frac {n-p-1}{p}}\;\;{\stackrel {H_{0}}{\sim }}\;\;F(p,n-p)
\end{aligned}.
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;mit &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(\displaystyle (n-p-1)\)&lt;/span&gt; Freiheitsgraden.
Überschreitet der empirische F-Wert einen kritischen F-Wert, der zu einem a priori festgelegten Signifikanzniveau &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt;, so verwirft man die Nullhypothese &lt;span class=&#34;math inline&#34;&gt;\(H_{0}\)&lt;/span&gt;.
Das &lt;span class=&#34;math inline&#34;&gt;\(R^{2}\)&lt;/span&gt; ist dann ausreichend groß und mindestens ein Regressor trägt also vermutlich genügend viel Information zur Erklärung von &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; bei.
Es ist naheliegend bei hohen F-Werten die Nullhypothese zu verwerfen, da ein hohes Bestimmtheitsmaß zu einem hohen F-Wert führt.
Wenn der &lt;em&gt;Wald-Test&lt;/em&gt; für eine oder mehrere unabhängige Variablen die Nullhypothese ablehnt, dann kann man davon ausgehen, dass die zugehörigen Parameter ungleich Null sind, so dass die Variable(n) in das Modell mit einbezogen werden sollten.&lt;/p&gt;
&lt;p&gt;In unserem Beispiel ist&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    F={\frac {R^{2}}{1-R^{2}}} \cdot {\frac {n-p-1}{p}} = \frac{0.4566166}{1-0.4566166} \cdot \frac{244-1-1}{1} = 203.3577233
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;der Wert in der Zeile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## F-statistic: 203.4 on 1 and 242 DF,  p-value: &amp;lt; 2.2e-16&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mit Parametern &lt;span class=&#34;math inline&#34;&gt;\(p=1\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(n-p-1=242\)&lt;/span&gt; Freiheitsgraden.&lt;/p&gt;
&lt;p&gt;Der p-Wert von (numerisch) 0, liefert also ein hinreichendes Indiz dafür, dass der Rechnungsbetrag einen echten Beitrag liefert.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;vgl.: &lt;a href=&#34;https://de.wikipedia.org/wiki/Parallelverschiebung&#34; class=&#34;uri&#34;&gt;https://de.wikipedia.org/wiki/Parallelverschiebung&lt;/a&gt;&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;vgl.: &lt;a href=&#34;https://de.wikipedia.org/wiki/Methode_der_kleinsten_Quadrate&#34; class=&#34;uri&#34;&gt;https://de.wikipedia.org/wiki/Methode_der_kleinsten_Quadrate&lt;/a&gt;&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;vgl.: &lt;a href=&#34;https://de.wikipedia.org/wiki/Shapiro-Wilk-Test&#34; class=&#34;uri&#34;&gt;https://de.wikipedia.org/wiki/Shapiro-Wilk-Test&lt;/a&gt;&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;vgl.: &lt;a href=&#34;https://de.wikipedia.org/wiki/Bestimmtheitsmaß#Das_korrigierte_Bestimmtheitsmaß&#34; class=&#34;uri&#34;&gt;https://de.wikipedia.org/wiki/Bestimmtheitsmaß#Das_korrigierte_Bestimmtheitsmaß&lt;/a&gt;&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Prognose-, Konfidenz- und Fiduzialintervalle</title>
      <link>https://sefiroth.net/nab/post/prognose-konfidenz-und-fiduzialintervalle/</link>
      <pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/prognose-konfidenz-und-fiduzialintervalle/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;*&lt;strong&gt;WORK IN PROGRESS&lt;/strong&gt;
Dieser Eintrag ist noch nicht fertig und wird in der Zukunft erweitert!&lt;/p&gt;
&lt;div id=&#34;konfidenzintervalle&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Konfidenzintervalle&lt;/h2&gt;
&lt;div id=&#34;definition-von-konfidenzintervallen&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Definition von Konfidenzintervallen&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Für unabhängig identisch verteilte Zufallsvariablen &lt;span class=&#34;math inline&#34;&gt;\(X_1,\dotsc, X_n\)&lt;/span&gt; mit unbekanntem reellen Verteilungsparameter &lt;span class=&#34;math inline&#34;&gt;\(\vartheta\)&lt;/span&gt; kann unter bestimmten Umständen zwei Stichprobenfunktionen &lt;span class=&#34;math inline&#34;&gt;\(U\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(V\)&lt;/span&gt; angeben, so dass&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[P(U &amp;lt; \vartheta &amp;lt; V) \geq \gamma\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;gilt, mit &lt;span class=&#34;math inline&#34;&gt;\(\gamma \in (0,1)\)&lt;/span&gt;.
Dann heißt das (stochastische) Intervall &lt;span class=&#34;math inline&#34;&gt;\([U, V]\)&lt;/span&gt; ein &lt;strong&gt;Konfidenzintervall&lt;/strong&gt; für &lt;span class=&#34;math inline&#34;&gt;\(\vartheta\)&lt;/span&gt; zum Konfidenzniveau &lt;span class=&#34;math inline&#34;&gt;\(\gamma\)&lt;/span&gt; (auch: ein &lt;strong&gt;&lt;span class=&#34;math inline&#34;&gt;\(\gamma\)&lt;/span&gt;-Konfidenzintervall&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;Die Realisationen &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; von &lt;span class=&#34;math inline&#34;&gt;\(U\)&lt;/span&gt; bzw. &lt;span class=&#34;math inline&#34;&gt;\(V\)&lt;/span&gt; bilden das &lt;strong&gt;Schätzintervall&lt;/strong&gt; &lt;span class=&#34;math inline&#34;&gt;\([u, v]\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Da die Realisationen &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; der Grenzen &lt;span class=&#34;math inline&#34;&gt;\(U\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(V\)&lt;/span&gt; keine Zufallsvariablen sind und &lt;span class=&#34;math inline&#34;&gt;\(\vartheta\)&lt;/span&gt; ein fixer Wert ist, kann man &lt;strong&gt;nicht&lt;/strong&gt; sagen, dass das Schätzintervall &lt;span class=&#34;math inline&#34;&gt;\([u, v]\)&lt;/span&gt; mit einer Wahrscheinlichkeit von &lt;span class=&#34;math inline&#34;&gt;\(\gamma\)&lt;/span&gt; den unbekannten Parameter &lt;span class=&#34;math inline&#34;&gt;\(\vartheta\)&lt;/span&gt; enthält. Es bedeutet vielmehr, dass im Mittel ein Anteil von &lt;span class=&#34;math inline&#34;&gt;\(\gamma\)&lt;/span&gt; aller so berechneten Schätzintervalle den unbekannten Parameter überdecken. Dem nicht widersprechend, kann –- wie bereits von Ronald Fisher festgestellt – in manchen Modellen die Qualität des Schätzintervalls von den Daten abhängen und sogar zu Antworten führen, die mit Blick auf die Daten unsinnig sind. Probleme mit solcher Post-Data-Inkohärenz führen zur Theorie der bedingten Inferenz. Ein weiteres Problem sind die Stichprobenfunktionen U und V an sich. Um diese zu finden werden oft Vereinfachungen getroffen, dadurch können systematische Fehler entstehen, oft es gibt mehrere Konfidenzintervalle (bei der Binomialverteilung z.B. nach Clopper-Pearson, Agresti-Coull oder Wald), welche oft unterschiedliche Werte liefern.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ein-beispiel&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Ein Beispiel&lt;/h3&gt;
&lt;p&gt;Wir nehmen zunächst als Population &lt;span class=&#34;math inline&#34;&gt;\(N=1000\)&lt;/span&gt; normalverteilte Zufallszahlen mit dem Mittelwert &lt;span class=&#34;math inline&#34;&gt;\(\mu= 0\)&lt;/span&gt; und der Standardabweichung &lt;span class=&#34;math inline&#34;&gt;\(\sigma=2.0088\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Dazu das Histogramm der Population:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;histogram(pop, xlab=&amp;quot;Population&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-01-04-prognose-konfidenz-und-fiduzialintervalle_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Aus dieser Population ziehen wir eine Stichprobe &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; vom Umfang $n=$40 und erhalten die folgenden statistischen Daten:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;favstats(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    min      Q1 median    Q3   max   mean    sd  n missing
##  -3.38 -0.9781 0.2042 1.546 4.002 0.1877 1.901 40       0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wir wollen nun den wahren Mittelwert &lt;span class=&#34;math inline&#34;&gt;\(\vartheta=\mu\)&lt;/span&gt; mit Hilfe der Stichprobe &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; schätzen. So ist es ja in der Realität auch, denn normalerweise haben wir die Daten über die Population nicht.&lt;/p&gt;
&lt;p&gt;Die Schätzfunktion für den Mittelwert lautet nun
&lt;span class=&#34;math display&#34;&gt;\[\bar{X} = \frac1n \sum_{i=1}^n X_i\]&lt;/span&gt;,
und damit die konkrete Punktschätzung
&lt;span class=&#34;math display&#34;&gt;\[\hat{\mu}=\bar{x}= \sum_{i=1}^n x_i\]&lt;/span&gt;
liefert den Wert &lt;span class=&#34;math inline&#34;&gt;\(\hat{\mu}=\)&lt;/span&gt; 0.1877.&lt;/p&gt;
&lt;p&gt;In unserem Beispiel unterscheiden sich die beiden Werte um &lt;span class=&#34;math inline&#34;&gt;\(\mu - \hat{\mu}=\)&lt;/span&gt; -0.1877.&lt;/p&gt;
&lt;p&gt;Ein 95%-Konfidenzintervall nimmt nun den geschätzen Wert &lt;span class=&#34;math inline&#34;&gt;\(\hat{\mu}\)&lt;/span&gt; als Grundlage und gibt liefert ein Intervall mit der Eigentschaft, ausgehend von den konkreten Stichproben in 95% der Fälle den tatsächlichen Wert &lt;span class=&#34;math inline&#34;&gt;\(\mu\)&lt;/span&gt; zu umfassen. Es ist also
&lt;span class=&#34;math display&#34;&gt;\[\gamma = 0.95 = 1 - \alpha = 1 - 0.05, \quad \alpha = 0.05\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Dazu werden die beiden Stichprobenfunktionen&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[U=U(X_1, \dots, X_n)=\bar{X}-z_{\left(1-\frac{\alpha}{2}\right)}\cdot\frac{\sigma}{\sqrt{n}}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;und&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[V=V(X_1, \dots, X_n)=\bar{X}-z_{\left(1-\frac{\alpha}{2}\right)}\cdot\frac{\sigma}{\sqrt{n}}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;mit der &lt;em&gt;bekannten&lt;/em&gt; Standardabweichung &lt;span class=&#34;math inline&#34;&gt;\(\sigma\)&lt;/span&gt; der &lt;em&gt;Population&lt;/em&gt; und der Stichprobengröße &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; nun mit der konkreten Realisation &lt;span class=&#34;math inline&#34;&gt;\(x_1, \dots, x_n\)&lt;/span&gt; der Stichprobe gefüttert und wir erhalten damit&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[u = \bar{x}-z_{\left(1-\frac{\alpha}{2}\right)}\cdot\frac{\sigma}{\sqrt{n}} = 0.1877-z_{\left(0.975\right)}\cdot\frac{2.0088}{\sqrt{40}}=-0.4348\]&lt;/span&gt;
und&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[v = \bar{x}+z_{\left(1-\frac{\alpha}{2}\right)}\cdot\frac{\sigma}{\sqrt{n}} = 0.1877+z_{\left(0.975\right)}\cdot\frac{2.0088}{\sqrt{40}}=0.8102.\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Die Realisation unseres 95%-Konfidenzintervall lautet nun also:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[[-0.4348; 0.8102]\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Was hat es nun mit den ominösen 95% auf sich?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Das Konfidenzintervall ist ein stochastisches Intervall, d.h. die hier angegebenen Werte für &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; sind abhängig von der Realisation &lt;span class=&#34;math inline&#34;&gt;\(x_1, \dots, x_n\)&lt;/span&gt;, also der konkreten Stichprobe.&lt;/p&gt;
&lt;p&gt;Nehmen wir nun also einmal eine neue Stichprobe und berechnen erneut die Realisation unseres 95%-Konfidenzintervalls, so erhalten wir:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[[-0.7033; 0.5418]\]&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Interval coverage:&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     cover
## n     Low  Yes High
##   40 0.00 0.98 0.02&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-01-04-prognose-konfidenz-und-fiduzialintervalle_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;prognoseintervalle&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Prognoseintervalle&lt;/h2&gt;
&lt;/div&gt;
&lt;div id=&#34;fuduzialintervalle&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Fuduzialintervalle&lt;/h2&gt;
&lt;p&gt;Quellen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Logik in der Statistik; Andrea Wiencierz, 7.10.2007 Link: &lt;a href=&#34;https://static.aminer.org/pdf/PDF/000/230/772/induktive_inferenz_und_mehrwertige_logik.pdf&#34; class=&#34;uri&#34;&gt;https://static.aminer.org/pdf/PDF/000/230/772/induktive_inferenz_und_mehrwertige_logik.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;vgl: &lt;a href=&#34;https://de.wikipedia.org/wiki/Konfidenzintervall&#34; class=&#34;uri&#34;&gt;https://de.wikipedia.org/wiki/Konfidenzintervall&lt;/a&gt;&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Konfidenzintervalle</title>
      <link>https://sefiroth.net/nab/post/konfidenzintervalle/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/konfidenzintervalle/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Stub!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zentrales Schwankungsintervall</title>
      <link>https://sefiroth.net/nab/post/zentrales-schwankungsintervall/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/zentrales-schwankungsintervall/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Das &lt;strong&gt;zentrale Schwankungsintervall&lt;/strong&gt; sagt etwas über die Präzision der Lageschätzung eines Parameters (zum Beispiel eines Mittelwertes) aus. Das Schwankungsintervall schließt einen Bereich um den wahren Wert des Parameters in der Grundgesamtheit ein, der – vereinfacht gesprochen – mit einer zuvor festgelegten Sicherheitswahrscheinlichkeit den aus der Stichprobe geschätzten Parameter enthält.&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;vgl: &lt;a href=&#34;https://de.wikipedia.org/wiki/Zentrales_Schwankungsintervall&#34; class=&#34;uri&#34;&gt;https://de.wikipedia.org/wiki/Zentrales_Schwankungsintervall&lt;/a&gt;&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Quartile, Quantile, Perzentile etc.</title>
      <link>https://sefiroth.net/nab/post/quartile-quantile-perzentile-etc/</link>
      <pubDate>Tue, 19 Dec 2017 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/quartile-quantile-perzentile-etc/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;“Was hat das eigentlich mit den Quartilen, Quantilen und so weiter auf sich?”
Diese Frage kommt ab und zu in Vorlesungen zur Statistik vor. Dabei ist die Antwort recht einfach.&lt;/p&gt;
&lt;div id=&#34;quantile&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Quantile&lt;/h2&gt;
&lt;div id=&#34;definitorische-antwort&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Definitorische Antwort&lt;/h3&gt;
&lt;p&gt;Für eine gegebene reelle Zufallsvariable &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; heißt eine reelle Zahl &lt;span class=&#34;math inline&#34;&gt;\(x_p\)&lt;/span&gt; ein &lt;strong&gt;p-Quantil&lt;/strong&gt; (von &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt;), falls gilt:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[P(X \leq x_p) \leq p \quad \text{ und }\quad P(x_p \leq X) \geq 1-p.\]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;was-bedeutet-das-denn-nun-konkret&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Was bedeutet das denn nun konkret?&lt;/h3&gt;
&lt;p&gt;Nun, ein Quantil ist ein Schwellenwert.
Ein bestimmter Anteil der Werte ist kleiner als das Quantil, der Rest ist größer.
Das 25-%-Quantil beispielsweise ist der Wert, für den gilt, dass 25 % aller Werte kleiner sind als dieser Wert.
Quantile formalisieren praktische Aussagen wie „25 % aller Frauen sind kleiner als 1,62 m“ –- wobei 1,62 m hier das 25-%-Quantil ist.&lt;/p&gt;
&lt;p&gt;Spezielle Quantile sind der &lt;em&gt;Median&lt;/em&gt;, die &lt;em&gt;Quartile&lt;/em&gt;, die &lt;em&gt;Quintile&lt;/em&gt;, die &lt;em&gt;Dezile&lt;/em&gt; und die &lt;em&gt;Perzentile&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;Wir betrachten dazu in den Bespielen die Datenreihe &lt;code&gt;dr&lt;/code&gt; an:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Die Zahlen von 0 bis 600 
dr &amp;lt;- 0:600&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;median&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Median&lt;/h3&gt;
&lt;p&gt;Der &lt;strong&gt;Median&lt;/strong&gt; (von lat. &lt;em&gt;Medium&lt;/em&gt; für „Mitte, Mittelpunkt“ abgeleiteter Begriff mit der Bedeutung “in der Mitte gelegen”) die das 50-%-Quantil. Der Wert, welcher die Datenreihe (bestenfalls) in zwei (etwa) gleich große Abschnitte trennt. Sehr oft schreibt man &lt;span class=&#34;math inline&#34;&gt;\(x_{med}\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(x_{50\%}\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(x_{Med}\)&lt;/span&gt; oder &lt;span class=&#34;math inline&#34;&gt;\(Q_2\)&lt;/span&gt; für den Median&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;median(dr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 300&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;terzile&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Terzile&lt;/h3&gt;
&lt;p&gt;Als &lt;strong&gt;Terile&lt;/strong&gt; (von lat. &lt;em&gt;tertius&lt;/em&gt; “der Dritte”) werden die beiden Quantile mit &lt;span class=&#34;math inline&#34;&gt;\(p=1/3\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(p=2/3\)&lt;/span&gt; bezeichnet.
Sie teilen die Datenreihe in drei Abschnitte.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quantile(dr, probs = seq(0, 1, 1/3))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        0% 33.33333% 66.66667%      100% 
##         0       200       400       600&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;quartile&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Quartile&lt;/h3&gt;
&lt;p&gt;Die &lt;strong&gt;Quartile&lt;/strong&gt; (von lat. &lt;em&gt;quartus&lt;/em&gt; „der Vierte“) werden die Quantile mit &lt;span class=&#34;math inline&#34;&gt;\(p=25\%\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(p=50\%\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(p=75\%\)&lt;/span&gt; bezeichnet.
Sie teilen die Datenreihe in vier Abschnitte.
Dabei schreibt man oft: &lt;span class=&#34;math inline&#34;&gt;\(Q_1 = x_{0{,}25}\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(x_{Med} = Q_2 = x_{0{,}50}\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(Q_3 = x_{0{,}75}\)&lt;/span&gt; für die drei Quantile.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quantile(dr) # oder auch: quantile(dr, probs=seq(0, 1, 1/4))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   0%  25%  50%  75% 100% 
##    0  150  300  450  600&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;quintile&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Quintile&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Quintile&lt;/strong&gt; (von lat. &lt;em&gt;quintus&lt;/em&gt; “der Fünfte”) werden die Quantile mit &lt;span class=&#34;math inline&#34;&gt;\(p=20\%\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(p=40\%\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(p=60\%\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(p=80\%\)&lt;/span&gt; bezeichnet.
Sie teilen die Datenreihe in fünf Abschnitte.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quantile(dr, probs = seq(0, 1, 1/5))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   0%  20%  40%  60%  80% 100% 
##    0  120  240  360  480  600&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;dezile&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Dezile&lt;/h3&gt;
&lt;p&gt;Die Quantile für vielfache von &lt;span class=&#34;math inline&#34;&gt;\(0{,}1\)&lt;/span&gt; also für &lt;span class=&#34;math inline&#34;&gt;\(p=0{,}1;0{,}2;\dots ;0{,}9\)&lt;/span&gt; werden &lt;strong&gt;Dezile&lt;/strong&gt; (von mittellateinisch &lt;em&gt;decimalis&lt;/em&gt;, zu lat. &lt;em&gt;decem&lt;/em&gt; „zehn“) genannt.
Dabei heißt das &lt;span class=&#34;math inline&#34;&gt;\(0{,}1\)&lt;/span&gt;-Quantil das erste Dezil, das &lt;span class=&#34;math inline&#34;&gt;\(0{,}2\)&lt;/span&gt;-Quantil das zweite Dezil usw.
Unterhalb des ersten Dezils liegen 10 % der Stichprobe, oberhalb entsprechend 90 % der Stichprobe.
Ebenso liegen 40 % der Stichprobe unterhalb des vierten Dezils und 60 % oberhalb.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quantile(dr, probs = seq(0, 1, 1/10))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   0%  10%  20%  30%  40%  50%  60%  70%  80%  90% 100% 
##    0   60  120  180  240  300  360  420  480  540  600&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;perzentile&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Perzentile&lt;/h3&gt;
&lt;p&gt;Als &lt;strong&gt;Perzentile&lt;/strong&gt; (von lat.-ital. &lt;em&gt;per centum&lt;/em&gt; “von Hundert, Hundertstel”) werden die Quantile von &lt;span class=&#34;math inline&#34;&gt;\(\displaystyle 0{,}01\)&lt;/span&gt; bis $ 0{,}99$ in Schritten von &lt;span class=&#34;math inline&#34;&gt;\(0{,}01\)&lt;/span&gt; bezeichnet.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quantile(dr, probs = seq(0, 1, 1/100))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   0%   1%   2%   3%   4%   5%   6%   7%   8%   9%  10%  11%  12%  13%  14%  15% 
##    0    6   12   18   24   30   36   42   48   54   60   66   72   78   84   90 
##  16%  17%  18%  19%  20%  21%  22%  23%  24%  25%  26%  27%  28%  29%  30%  31% 
##   96  102  108  114  120  126  132  138  144  150  156  162  168  174  180  186 
##  32%  33%  34%  35%  36%  37%  38%  39%  40%  41%  42%  43%  44%  45%  46%  47% 
##  192  198  204  210  216  222  228  234  240  246  252  258  264  270  276  282 
##  48%  49%  50%  51%  52%  53%  54%  55%  56%  57%  58%  59%  60%  61%  62%  63% 
##  288  294  300  306  312  318  324  330  336  342  348  354  360  366  372  378 
##  64%  65%  66%  67%  68%  69%  70%  71%  72%  73%  74%  75%  76%  77%  78%  79% 
##  384  390  396  402  408  414  420  426  432  438  444  450  456  462  468  474 
##  80%  81%  82%  83%  84%  85%  86%  87%  88%  89%  90%  91%  92%  93%  94%  95% 
##  480  486  492  498  504  510  516  522  528  534  540  546  552  558  564  570 
##  96%  97%  98%  99% 100% 
##  576  582  588  594  600&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>10 Dinge die kein Talent benötigen!</title>
      <link>https://sefiroth.net/nab/post/10-dinge-die-kein-talent-benotigen/</link>
      <pubDate>Thu, 13 Jul 2017 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/10-dinge-die-kein-talent-benotigen/</guid>
      <description>&lt;p&gt;Gerade im Internet gefunden:&lt;/p&gt;
&lt;h3 id=&#34;10-dinge-die-kein-talent-benötigen&#34;&gt;10 Dinge die kein Talent benötigen!&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Pünktlichkeit&lt;/li&gt;
&lt;li&gt;Arbeitsmoral&lt;/li&gt;
&lt;li&gt;Anstrengung&lt;/li&gt;
&lt;li&gt;Körpersprache&lt;/li&gt;
&lt;li&gt;Energie&lt;/li&gt;
&lt;li&gt;Haltung&lt;/li&gt;
&lt;li&gt;Leidenschaft&lt;/li&gt;
&lt;li&gt;Lernwillig sein&lt;/li&gt;
&lt;li&gt;Etwas mehr als das Minimum tun&lt;/li&gt;
&lt;li&gt;Vorbereitet sein&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Etwas R am Abend</title>
      <link>https://sefiroth.net/nab/project/etwas-r-am-abend/</link>
      <pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/project/etwas-r-am-abend/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
