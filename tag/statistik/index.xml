<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Statistik | Norman&#39;s Academic Blog</title>
    <link>https://sefiroth.net/nab/tag/statistik/</link>
      <atom:link href="https://sefiroth.net/nab/tag/statistik/index.xml" rel="self" type="application/rss+xml" />
    <description>Statistik</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>de-de</language><copyright>© in 2017-2021 by Norman Markgraf</copyright><lastBuildDate>Thu, 24 Jun 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://sefiroth.net/nab/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Statistik</title>
      <link>https://sefiroth.net/nab/tag/statistik/</link>
    </image>
    
    <item>
      <title>Dinge die man in zwei Dimensionen machen kann - Multiple lineare Regression</title>
      <link>https://sefiroth.net/nab/post/dinge-die-man-in-zwei-dimensionen-machen-kann-multiple-lineare-regression/</link>
      <pubDate>Thu, 24 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/dinge-die-man-in-zwei-dimensionen-machen-kann-multiple-lineare-regression/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/post/dinge-die-man-in-zwei-dimensionen-machen-kann-multiple-lineare-regression/index.de_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Wir wollen den Fall unterschen bei dem wir mit zwei statistischen Variabeln (&lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt;) eine dritte Variable (&lt;span class=&#34;math inline&#34;&gt;\(Z\)&lt;/span&gt;) mittels einer multiplen linearen Regression modellieren.&lt;/p&gt;
&lt;p&gt;Es seien die Datenpunkte &lt;span class=&#34;math inline&#34;&gt;\((x_1, y_1, z_1), \dots, (x_n, y_n, z_n)\)&lt;/span&gt; gegeben und wir wollen eine lineare Funktion &lt;span class=&#34;math inline&#34;&gt;\(g(x,y)\)&lt;/span&gt; finden, so dass&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
z_i = g(x_i,y_i)+ \epsilon_i =\beta_0 + \beta_1 \cdot x_i + \beta_2 \cdot y_i + \epsilon_i
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;gilt und der Abweichungsterm &lt;span class=&#34;math inline&#34;&gt;\(\epsilon_i\)&lt;/span&gt; möglichst klein ist.&lt;/p&gt;
&lt;p&gt;Auf Grundlage unserer Datenpunkt wollen wir die Koeffizienten so schätzen, dass die Summe der quadratische Abweichungen minimal ist.
&lt;span class=&#34;math display&#34;&gt;\[
  QS = QS(\hat\beta_0, \hat\beta_1, \hat\beta_2) 
  = \sum\limits_{i=1}^n (z_i - \hat\beta_0 - \hat\beta_1 \cdot x_i - \hat\beta_2 \cdot y_i )^2
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Das führt zu der folgenden, notwendigen Bedingen (für stationäre Punkte):&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\nabla QS(\hat\beta_0, \hat\beta_1, \hat\beta_2) = \begin{pmatrix} 0\\ 0\\ 0\end{pmatrix}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Im einzelnen heißt das:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
\frac{\partial}{\partial \hat\beta_0} QS(\hat\beta_0, \hat\beta_1, \hat\beta_2) &amp;amp;= -2 \cdot\sum\limits_{i=1}^n \left(z_i - \hat\beta_0 - \hat\beta_1 \cdot x_i - \hat\beta_2 \cdot y_i \right) \\
&amp;amp;= -2 \cdot n \cdot \left(\bar{z} - \hat\beta_0 - \hat\beta_1 \cdot\bar{x} - \hat\beta_2 \cdot\bar{y} \right) \\
\\
\frac{\partial}{\partial \hat\beta_1} QS(\hat\beta_0, \hat\beta_1, \hat\beta_2) &amp;amp;= -2 \cdot \sum\limits_{i=1}^n \left( z_i\cdot x_i - \hat\beta_0 \cdot x_i - \hat\beta_1 \cdot x_i\cdot x_i - \hat\beta_2 \cdot y_i\cdot x_i \right) \\
&amp;amp;= -2 \cdot \left(\sum\limits_{i=1}^n  z_i\cdot x_i -  \hat\beta_0 \cdot n \cdot \bar{x}- \hat\beta_1 \cdot \sum\limits_{i=1}^n x_i^2 - \hat\beta_2 \cdot \sum\limits_{i=1}^n y_i\cdot x_i \right) \\
\\
\frac{\partial}{\partial \hat\beta_2} QS(\hat\beta_0, \hat\beta_1, \hat\beta_2) &amp;amp;= -2 \cdot \sum\limits_{i=1}^n \left( z_i\cdot y_i - \hat\beta_0 \cdot y_i - \hat\beta_1 \cdot x_i\cdot y_i - \hat\beta_2 \cdot y_i\cdot y_i \right) \\
&amp;amp;= -2 \cdot \left(\sum\limits_{i=1}^n  z_i\cdot y_i -  \hat\beta_0 \cdot n \cdot \bar{y}- \hat\beta_1 \cdot \sum\limits_{i=1}^n x_i\cdot y_i - \hat\beta_2 \cdot \sum\limits_{i=1}^n y_i^2 \right) \\
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir setzen die 1. Gleichung gleich Null und stellen nach &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_0\)&lt;/span&gt; um:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
  \hat\beta_0 = \bar{z}  - \hat\beta_1 \cdot \bar{x} - \hat\beta_2 \cdot \bar{y}
\]&lt;/span&gt;
Nun ersetzen wir &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_0\)&lt;/span&gt; in den verbleibenden Gleichungen durch &lt;span class=&#34;math inline&#34;&gt;\(z_i - \hat\beta_1 \cdot x_i - \hat\beta_2 \cdot y_i\)&lt;/span&gt; und nutzen den Verschiebesatz:
&lt;!--
% &amp;= -2 \cdot \left(\sum\limits_{i=1}^n  z_i\cdot x_i - n \cdot \bar{z}\cdot \bar{x} + \hat\beta_1 \cdot n \cdot \bar{x}^2 + \hat\beta_2 \cdot n \cdot \bar{y}\cdot \bar{x}- \hat\beta_1 \cdot \sum\limits_{i=1}^n x_i^2 - \hat\beta_2 \cdot \sum\limits_{i=1}^n y_i\cdot x_i \right) \\
--&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
\frac{\partial}{\partial \hat\beta_1} QS
&amp;amp;= -2 \cdot \left(\sum\limits_{i=1}^n  z_i\cdot x_i - (\bar{z}  - \hat\beta_1 \cdot \bar{x} - \hat\beta_2 \cdot \bar{y}) \cdot n \cdot \bar{x}- \hat\beta_1 \cdot \sum\limits_{i=1}^n x_i^2 - \hat\beta_2 \cdot \sum\limits_{i=1}^n y_i\cdot x_i \right) \\
&amp;amp;= -2 \cdot \left(\sum\limits_{i=1}^n (z_i-\bar{z})(x_i - \bar{x}) - \hat\beta_1 \cdot \sum\limits_{i=1}^n (x_i -\bar{x})^2 - \hat\beta_2 \cdot \sum\limits_{i=1}^n (y_i-\bar{y})(x_i- \bar{x}) \right) \\
\\
\frac{\partial}{\partial \hat\beta_2} QS 
&amp;amp;= -2 \cdot \left(\sum\limits_{i=1}^n  z_i\cdot y_i - (\bar{z}  - \hat\beta_1 \cdot \bar{x} - \hat\beta_2 \cdot \bar{y}) \cdot n \cdot \bar{y}- \hat\beta_1 \cdot \sum\limits_{i=1}^n x_i\cdot y_i - \hat\beta_2 \cdot \sum\limits_{i=1}^n y_i^2 \right) \\
&amp;amp;= -2 \cdot \left(\sum\limits_{i=1}^n (z_i-\bar{z})(y_i - \bar{y}) - \hat\beta_2 \cdot \sum\limits_{i=1}^n (y_i -\bar{y})^2 - \hat\beta_1 \cdot \sum\limits_{i=1}^n (y_i-\bar{y})(x_i- \bar{x}) \right) \\
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir setzen die beiden Gleichungen nun gleich Null und formen nach &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_1\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_2\)&lt;/span&gt; um:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
  \hat\beta_1 
  &amp;amp;= \frac{\sum\limits_{i=1}^n (z_i-\bar{z})(x_i - \bar{x}) - \hat\beta_2 \cdot \sum\limits_{i=1}^n (y_i-\bar{y})(x_i- \bar{x})}{\sum\limits_{i=1}^n (x_i -\bar{x})^2} \\
  \\
  \hat\beta_2 
  &amp;amp;= \frac{\sum\limits_{i=1}^n (z_i-\bar{z})(y_i - \bar{y}) - \hat\beta_1 \cdot \sum\limits_{i=1}^n (y_i-\bar{y})(x_i- \bar{x})}{\sum\limits_{i=1}^n (y_i -\bar{y})^2}
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Durch Erweiterung von Zähler nun Nenner mit &lt;span class=&#34;math inline&#34;&gt;\(\frac{1}{n-1}\)&lt;/span&gt; erhalten wir:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
  \hat\beta_1 
  &amp;amp;= \frac{\frac{1}{n-1}\cdot\sum\limits_{i=1}^n (z_i-\bar{z})(x_i - \bar{x}) - \hat\beta_2 \cdot \frac{1}{n-1}\cdot\sum\limits_{i=1}^n (y_i-\bar{y})(x_i- \bar{x})}{\frac{1}{n-1}\cdot\sum\limits_{i=1}^n (x_i -\bar{x})^2} \\
  &amp;amp;= \frac{s_{x,z}-\hat\beta_2\cdot s_{x,y}}{s^2_{x}} = \frac{s_{x,z}}{s^2_x}-\hat\beta_2 \frac{s_{x,y}}{s^2_{x}} \\
  \\
  \hat\beta_2 
  &amp;amp;= \frac{\frac{1}{n-1}\cdot\sum\limits_{i=1}^n (z_i-\bar{z})(y_i - \bar{y}) - \hat\beta_1 \cdot \frac{1}{n-1}\cdot\sum\limits_{i=1}^n (y_i-\bar{y})(x_i - \bar{x})}{\frac{1}{n-1}\cdot\sum\limits_{i=1}^n (y_i -\bar{y})^2} \\
  &amp;amp;= \frac{s_{y,z}-\hat\beta_1\cdot s_{x,y}}{s^2_{y}} = \frac{s_{y,z}}{s^2_y}-\hat\beta_1 \frac{s_{x,y}}{s^2_{y}} \\
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;wir setzen nun die erste in die zweite Gleichung ein und erhalten:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
\hat\beta_2 
  &amp;amp;= \frac{s_{y,z}}{s^2_y} - \left(\frac{s_{x,z}}{s^2_x}-\hat\beta_2 \frac{s_{x,y}}{s^2_{x}}\right) \frac{s_{x,y}}{s^2_{y}} \\
  &amp;amp;= \frac{s_{y,z}}{s^2_y} - \frac{s_{x,z}}{s^2_x}\frac{s_{x,y}}{s^2_{y}} + \hat\beta_2 \frac{s_{x,y}}{s^2_{x}}\frac{s_{x,y}}{s^2_{y}} \\
  &amp;amp;= \frac{\frac{s_{y,z}}{s^2_y} - \frac{s_{x,z}}{s^2_x}\frac{s_{x,y}}{s^2_{y}}}{1-\frac{s_{x,y}}{s^2_{x}}\frac{s_{x,y}}{s^2_{y}}} \\
  &amp;amp;= \frac{\frac{s_{y,z}\cdot s^2_x - s_{x,z} s_{x,y}}{s^2_x\cdot s^2_y}}{\frac{s^2_x s^2_y-(s_{x,y})^2}{s^2_x \cdot s^2_y}}
  = \frac{s_{y,z}\cdot s^2_x - s_{x,z} s_{x,y}}{s^2_x s^2_y-(s_{x,y})^2}
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Und damit weiter:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
\hat\beta_1  
  &amp;amp;= \frac{s_{x,z}}{s^2_x}-\hat\beta_2 \frac{s_{x,y}}{s^2_{x}} \\
  &amp;amp;= \frac{s_{x,z}}{s^2_x} - \frac{s_{y,z}\cdot s^2_x - s_{x,z} s_{x,y}}{s^2_x s^2_y-(s_{x,y})^2} \frac{s_{x,y}}{s^2_{x}} \\
  &amp;amp;= \frac{s_{x,z} (s^2_x s^2_y - (s_{x,y})^2) - s_{y,z}s_{x,y}s^2_x + s_{x,z}s_{x,y}s_{x,y}}{s^2_x (s^2_x s^2_y - (s_{x,y})^2)} \\
    &amp;amp;= \frac{s_{x,z}s^2_x s^2_y - s_{x,z}(s_{x,y})^2 - s_{y,z}s_{x,y}s^2_x + s_{x,z}(s_{x,y})^2}{s^2_x s^2_x s^2_y- s^2_x(s_{x,y})^2} \\
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mosaic)

mtcars %&amp;gt;%
  select(mpg, hp, wt) -&amp;gt; dt

# Von R berechnete Koeffizienten:
coef(lm(mpg ~ hp + wt, data = dt))
#&amp;gt; (Intercept)          hp          wt 
#&amp;gt; 37.22727012 -0.03177295 -3.87783074

mean_x = mean( ~ hp, data = dt)
mean_y = mean( ~ wt, data = dt)
mean_z = mean( ~ mpg, data = dt)

s_xy &amp;lt;- cov(hp ~ wt, data = dt)
s_xz &amp;lt;- cov(hp ~ mpg, data = dt)
s_yz &amp;lt;- cov(wt ~ mpg, data = dt)

var_x &amp;lt;- var(~ hp, data = dt)
var_y &amp;lt;- var(~ wt, data = dt)

b1 &amp;lt;- (s_xz*var_x*var_y - s_xz*(s_xy)**2 - s_yz*s_xy*var_x + s_xz*s_xy**2) / (var_x*var_x*var_y - var_x*s_xy**2)
b2 &amp;lt;- (s_yz*var_x - s_xz*s_xy) / (var_x * var_y- s_xy*s_xy)
b0 &amp;lt;- mean_z - b1 * mean_x - b2 * mean_y

# Koeffizienten zur Ausgabe aufbereiten:
my_coef &amp;lt;- c(b0, b1, b2)
names(my_coef) &amp;lt;- c(&amp;quot;(Intercept)&amp;quot;, &amp;quot;hp&amp;quot;, &amp;quot;wt&amp;quot;)

# Von Hand berechnete Koeffizienten:
my_coef
#&amp;gt; (Intercept)          hp          wt 
#&amp;gt; 37.22727012 -0.03177295 -3.87783074&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;was-passiert-wenn-wir-alle-datenpunkte-studentisieren&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Was passiert, wenn wir alle Datenpunkte studentisieren?&lt;/h2&gt;
&lt;p&gt;Wir rechnen um in:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
x_i^{\text{stud}} = \frac{x_i-\bar{x}}{s_x}; \quad y_i^{\text{stud}} = \frac{y_i-\bar{y}}{s_y}; \quad z_i^{\text{stud}} = \frac{z_i-\bar{z}}{s_z}
\]&lt;/span&gt;
Damit ist
&lt;span class=&#34;math display&#34;&gt;\[
\bar{x_i}^\text{stud} = 0; \quad \bar{y_i}^\text{stud} = 0;\quad \bar{z_i}^\text{stud} = 0
\]&lt;/span&gt;
und&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
s_{{x_i}^\text{stud}} = 1; \quad s_{{y_i}^\text{stud}} = 1;\quad s_{{z_i}^\text{stud}} = 1
\]&lt;/span&gt;
Zur Vereinfachung lassen wir die Kennzeichnung “stud” weg.
Damit ist dann:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
\hat\beta_0
  &amp;amp;= 0\\
\\
\hat\beta_1
  &amp;amp;= \frac{s_{x,z} \cdot s^2_x \cdot s^2_y - s_{x,z} \cdot (s_{x,y})^2 - s_{y,z} \cdot s_{x,y}s^2_x + s_{x,z} \cdot (s_{x,y})^2}{s^2_x \cdot s^2_x s^2_y- s^2_x \cdot (s_{x,y})^2} \\ 
  &amp;amp;= \frac{s_{x,z} \cdot 1 \cdot 1 -  s_{x,z} \cdot (s_{x,y})^2 - s_{y,z} \cdot s_{x,y} \cdot 1 + s_{x,z} \cdot (s_{x,y})^2}{1 \cdot 1 \cdot 1 - 1 \cdot (s_{x,y})^2}\\
  &amp;amp;= \frac{s_{x,z} -  s_{x,z} \cdot (s_{x,y})^2 - s_{y,z} \cdot s_{x,y} + s_{x,z} \cdot (s_{x,y})^2}{1 - (s_{x,y})^2} \\
  &amp;amp;= \frac{s_{x,z} - s_{y,z} \cdot s_{x,y} }{1 - (s_{x,y})^2} \\
\\
\hat\beta_2
  &amp;amp;= \frac{s_{y,z} \cdot s^2_x - s_{x,z} \cdot s_{x,y}}{s^2_x \cdot s^2_y - (s_{x,y})^2} \\ 
  &amp;amp;= \frac{s_{y,z} \cdot 1 - s_{x,z} \cdot s_{x,y}}{1 \cdot 1 - (s_{x,y})^2} \\
  &amp;amp;= \frac{s_{y,z} - s_{x,z} \cdot s_{x,y}}{1 - (s_{x,y})^2} \\
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir schauen uns ein paar Fälle genauer an:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Fall: &lt;strong&gt;&lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; sind unabhängig.&lt;/strong&gt; Dann ist &lt;span class=&#34;math inline&#34;&gt;\(s_{x,y}=0\)&lt;/span&gt; und wir erhalten &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_1=s_{x,z}\in[-1;1]\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_2=s_{y,z}\in[-1;1]\)&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fall: &lt;strong&gt;&lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; sind abhängig.&lt;/strong&gt; Dann ist &lt;span class=&#34;math inline&#34;&gt;\(|s_{x,y}|=1\)&lt;/span&gt; und es gibt keine Lösung für &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_1\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(\hat\beta_2\)&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fall: &lt;strong&gt;&lt;span class=&#34;math inline&#34;&gt;\(0 &amp;lt; |s_{x,y}| &amp;lt; 1\)&lt;/span&gt;.&lt;/strong&gt; …&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Interaktionseffekte leichter interpretieren durch Transformationen</title>
      <link>https://sefiroth.net/nab/post/interaktionseffekte-leichter-interpretieren-durch-transformationen/</link>
      <pubDate>Wed, 23 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/interaktionseffekte-leichter-interpretieren-durch-transformationen/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/post/interaktionseffekte-leichter-interpretieren-durch-transformationen/index.de_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;einleitung&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Einleitung&lt;/h3&gt;
&lt;p&gt;Bei einer multiplen linearen Regression kann man den Einfluss einer unabhägigen Variable auf das Verhalten einer anderen unabhägigen Variable in Bezug auf die abhägige Variable mit modellieren.&lt;/p&gt;
&lt;p&gt;Wir wollen das einmal an dem Beispiel der folgenden Datentabelle &lt;a href=&#34;https://vincentarelbundock.github.io/Rdatasets/doc/AER/TeachingRatings.html&#34;&gt;&lt;em&gt;Impact of Beauty on Instructor’s Teaching Ratings&lt;/em&gt;&lt;/a&gt; und der Fragestellung in wie weit das Alter und das Geschlecht einen Einfluss auf das Evaluationsergebnis haben.&lt;/p&gt;
&lt;p&gt;Dazu stellen laden wir die Daten aus dem Internet:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mosaic)
url &amp;lt;- paste0(&amp;quot;https://vincentarelbundock.github.io/Rdatasets/csv/AER/&amp;quot;,
              &amp;quot;TeachingRatings.csv&amp;quot;)
teacherratings &amp;lt;- read.csv(url)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;und betrachten das Streudiagramm:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_point(eval ~ age, color = ~gender, data = teacherratings)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/interaktionseffekte-leichter-interpretieren-durch-transformationen/index.de_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;90%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ein-lineares-modell&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Ein lineares Modell&lt;/h3&gt;
&lt;p&gt;Ein klassisches lineares Modell sieht wie folgt aus:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;erglm &amp;lt;- lm(eval ~ age + gender + age:gender, data = teacherratings)
coef(erglm)
#&amp;gt;    (Intercept)            age     gendermale age:gendermale 
#&amp;gt;     4.49018892    -0.01306572    -0.32104348     0.01109285&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Doch was bedeuten diese Werte konkret:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;(Intercept) = 4.4901889: Gibt das (theoretische) Evaluationsergebnis für einer Frau im Alter von 0 Jahren an.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;age = -0.0130657: Gibt an, um wie viele Punkte im Schnitt sich eine Frau pro Lebensjahr mehr verändert. (Da der Wert negativ ist, also verschlechtert.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;gendermale = -0.3210435: Gibt an, um wie viel sich das Startwert bei 0 Jahren verändert, wenn es ein Mann gewesen wäre. Wir kommen damit auf einen Startwert bei 0 Jahren für Männer von 4.1691454&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;age:gendermale = 0.0110928: Gibt an um wie viel sich die Steigung ändert, wenn statt einer Frau ein Mann betrachtet wird. Statt einer Änderung um -0.0130657 bei Frauen beträgt sie bei Männern &lt;span class=&#34;math inline&#34;&gt;\(-0.0130657-0.0110928 = -0.0019729\)&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;coef_female = c(coef(erglm)[1], coef(erglm)[2])
coef_male = c(
  coef(erglm)[1] + coef(erglm)[3],
  coef(erglm)[2] + coef(erglm)[4]
)
gf_point(eval ~ age, color = ~gender, data = teacherratings) %&amp;gt;%
  gf_coefline(coef = coef_female, color = ~&amp;quot;female&amp;quot;) %&amp;gt;%
  gf_coefline(coef = coef_male, color = ~&amp;quot;male&amp;quot;) 
  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/interaktionseffekte-leichter-interpretieren-durch-transformationen/index.de_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;90%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Wir können so die folgenden Modellgleichungen aufstellen:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Für Frauen:
&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
  \widehat{eval}_{\text{female}} 
  &amp;amp; = 4.4901889 - 0.0130657 \cdot age \\
  &amp;amp;\approx 4.49 - 0.013 \cdot age
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Für Männer:
&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
\widehat{eval}_{\text{male}} 
  &amp;amp;= 4.1691454 - 0.0019729 \cdot age\\
  &amp;amp;\approx 4.169 - 0.002 \cdot age
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;besserer-blick-durch-gute-transformation-der-daten&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Besserer Blick durch gute Transformation der Daten&lt;/h3&gt;
&lt;p&gt;Spannender wäre es aber, wenn die y-Achenabschnitte nicht so weit ausserhalb unseres Betrachungsbereichs (29; 73) liegen würde.&lt;/p&gt;
&lt;p&gt;Wir zentrieren daher einmal unsere Altersangaben mit der Transformation:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[age_i^\text{center} =  age_i - \overline{age}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;R&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Mittelwert bestimmen und speichern:
mean_age = mean( ~ age, data = teacherratings)

# Transformation durchführen:
teacherratings %&amp;gt;%
  mutate(
    age_center = age - mean_age
  ) -&amp;gt; teacherratings

# Das Ergebnis kurz zusammenfassen:
df_stats(~ age + age_center, min, mean, sd, max, 
         data = teacherratings)
#&amp;gt;     response       min         mean       sd      max
#&amp;gt; 1        age  29.00000 4.836501e+01 9.802742 73.00000
#&amp;gt; 2 age_center -19.36501 3.514033e-15 9.802742 24.63499&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Das der Mittelwert bei den zentrierten Daten nicht exakt Null ist liegt an den numerischen Besonderheiten des Rechners. Kurz: Computer können gar nicht richitg rechnen und haben daher hier einen kleinen Rundungsfehler!&lt;/p&gt;
&lt;p&gt;Betrachten wir die gerundeten Werte, so ergibt sich das folgende, etwas übersichtlichere Bild:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Wir bauen uns gerundete Funktionen:
round_digits &amp;lt;- 3  # Anzahl der Nachkommastellen

mean_r &amp;lt;- function(x) round(mean(x), round_digits)
sd_r &amp;lt;- function(x) round(sd(x), round_digits)
min_r &amp;lt;- function(x) round(min(x), round_digits)
max_r &amp;lt;- function(x) round(max(x), round_digits)

# Wir benutzen nun die gerundeten Werte:
df_stats(~ age + age_center, min_r, mean_r, sd_r, max_r, 
         data = teacherratings)
#&amp;gt;     response   min_r mean_r  sd_r  max_r
#&amp;gt; 1        age  29.000 48.365 9.803 73.000
#&amp;gt; 2 age_center -19.365  0.000 9.803 24.635&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Im Mittel sind unsere Lehrer:innen also &lt;span class=&#34;math inline&#34;&gt;\(48.365\)&lt;/span&gt; alt, die Jüngsten mit 29 etwa &lt;span class=&#34;math inline&#34;&gt;\(19.365\)&lt;/span&gt; jünger und die Ältesten mit 73 etwa &lt;span class=&#34;math inline&#34;&gt;\(24.635\)&lt;/span&gt; älter als der Altersdurchschnitt.&lt;/p&gt;
&lt;p&gt;Ein Blick auf die Koeffizenten des linearen Modells bzgl. der zentrierten Daten:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;erglm_c &amp;lt;- lm(eval ~ age_center + gender + age_center:gender, 
              data = teacherratings)
coef(erglm_c)
#&amp;gt;           (Intercept)            age_center            gendermale 
#&amp;gt;            3.85826543           -0.01306572            0.21546232 
#&amp;gt; age_center:gendermale 
#&amp;gt;            0.01109285&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Das dazu passende Streudiagramm mit den Regressionsgeraden:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;coef_c_female = c(coef(erglm_c)[1], coef(erglm_c)[2])
coef_c_male = c(
  coef(erglm_c)[1] + coef(erglm_c)[3],
  coef(erglm_c)[2] + coef(erglm_c)[4]
)
gf_point(eval ~ age_center, color = ~gender, 
         data = teacherratings) %&amp;gt;%
  gf_coefline(coef = coef_c_female, color = ~&amp;quot;female&amp;quot;) %&amp;gt;%
  gf_coefline(coef = coef_c_male, color = ~&amp;quot;male&amp;quot;) 
  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/post/interaktionseffekte-leichter-interpretieren-durch-transformationen/index.de_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;90%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Was bedeuten nun diese Werte konkret:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;(Intercept) = 3.8582654: Gibt das Evaluationsergebnis für einer Frau mit Durchschnittsalter (48) an.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;age = -0.0130657: Gibt an, um wie viele Punkte im Schnitt sich eine Frau pro Lebensjahr mehr verändert.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;gendermale = -0.3210435: Gibt an, um wie viel sich das Evaluationsergebnis eines Mannes im Durchschnittsalter ändert gegenüber dem einer Frau. Für das Durchschnittalter liegen Männer im Schnitt bei 4.0737278&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;age:gendermale = 0.0110928: Gibt an, um wie viel sich die Steigung ändert, wenn statt einer Frau ein Mann betrachtet wird. Statt einer Änderung um -0.0130657 bei Frauen beträgt sie bei Männern &lt;span class=&#34;math inline&#34;&gt;\(-0.0130657-0.0110928 = -0.0019729\)&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wir können daher die folgenden Modellgleichungen aufstellen:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Für Frauen:
&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
  \widehat{eval}_{\text{female}} 
  &amp;amp; = 3.8582654 - 0.0130657 \cdot (age - 48.3650108) \\
  &amp;amp;\approx 3.858 - 0.013 \cdot (age - 48.365) 
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Für Männer:
&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
\widehat{eval}_{\text{male}} 
  &amp;amp;= 4.0737278 - 0.0019729 \cdot (age - 48.3650108) \\
  &amp;amp;\approx 4.074 - 0.002 \cdot (age - 48.365)
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;zur-interpretation&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Zur Interpretation&lt;/h3&gt;
&lt;p&gt;Im durchschnittlichen Alter ist das erwartete Evaluationsergebnis bei Frauen (&lt;span class=&#34;math inline&#34;&gt;\(3.8582654\)&lt;/span&gt;) um rund &lt;span class=&#34;math inline&#34;&gt;\(0.215\)&lt;/span&gt; Punkte schlechter als bei Männern (&lt;span class=&#34;math inline&#34;&gt;\(4.0737278\)&lt;/span&gt;).
Mit jedem Lebensjahr sinkt dabei in beiden Fällen, also sowohl bei Frauen als auch bei Männern, das Evaluationsergbnis.
Bei den Frauen aber mit ca. &lt;span class=&#34;math inline&#34;&gt;\(-0.013\)&lt;/span&gt; deutlich stärker als mit ca. &lt;span class=&#34;math inline&#34;&gt;\(-0.002\)&lt;/span&gt; bei den Männern .&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;fazit&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Fazit&lt;/h3&gt;
&lt;p&gt;Eine gute Transformation einiger Daten kann, dank der angepassten
Modellgleichungen, die Interpretation der Ergebnisse deutlich
vereinfachen!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;nachtrag-und-danksagung&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Nachtrag und Danksagung&lt;/h2&gt;
&lt;p&gt;Die Idee zu diesem Blog-Post verdanke ich dem Blog von &lt;em&gt;Prof. Dr. Sebastian Sauer&lt;/em&gt;. Hier der Link zum Orginal-Blog: &lt;a href=&#34;https://data-se.netlify.app/2021/06/17/beispiel-zur-interpretation-des-interaktionseffekts/&#34;&gt;https://data-se.netlify.app/2021/06/17/beispiel-zur-interpretation-des-interaktionseffekts/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Danke auch für die kritische Durchsicht und die hilfreichen Anmerkungen.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;reproduzierbarkeitsinformationen&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Reproduzierbarkeitsinformationen&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; R version 4.1.0 (2021-05-18)
#&amp;gt; Platform: x86_64-apple-darwin17.0 (64-bit)
#&amp;gt; Running under: macOS Catalina 10.15.7
#&amp;gt; 
#&amp;gt; Locale: de_DE.UTF-8 / de_DE.UTF-8 / de_DE.UTF-8 / C / de_DE.UTF-8 / de_DE.UTF-8
#&amp;gt; 
#&amp;gt; Package version:
#&amp;gt;   mosaic_1.8.3 xfun_0.24&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Eine typische Frage von Studierenden</title>
      <link>https://sefiroth.net/nab/post/eine-typische-frage-von-studierenden/</link>
      <pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/eine-typische-frage-von-studierenden/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Vor kurzem fand ich mal wieder eine Anfrage einer Studierenden in meinem Email Postfach. Die Frage lautete in etwa wie folgt:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Guten Tag Herr Markgraf,&lt;/p&gt;
&lt;p&gt;ich würde gerne die Hypothese untersuchen: Die reduzierte Abhängigkeit des Iphones tagsüber liegt am schönen Wetter.
Dazu habe ich eine Variable “iphones.tagsüber.unbeachtet” mit 1x, 2x und 3x täglich als Ausprägungen und eine andere Variable “wetter.ist.gut”, die als Ausprägung “Ja” und “Nein” hat.
Welchen Test kann ich dazu zur Überprüfung einer Abhängigkeit nehmen?&lt;/p&gt;
&lt;p&gt;Vielen Dank im Voraus.&lt;/p&gt;
&lt;p&gt;MfG Monika Mustermann&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Natürlich ist diese Frage im Prinzip einfach zu beantworten, sogar von Leuten, die Statistik an einer Hochschule gehört haben. – Aber da ich ja auch sonst nichts zu tun habe, gebe ich gerne statistische Hilfestellung für Studierende.
Sicher, ich verdiene damit eigentlich mein Geld.
Also ist es nur natürlich, dass ich so etwas vollkommen unentgeldlich mache.
Und wieso sollten Studierende einfach mal ein Buch in die Hand nehmen und
selber nachdenken?
Es gibt vermutlich keine Bücher zu diesem Thema, denn es ist ganz sicher eine Geheimwissenschaft.
Und wieso sollte man dann also seine Betreuungsperson zu diesem Probem fragen?
Die hat ja auch so viel zu tun… – Egal.&lt;/p&gt;
&lt;p&gt;Was haben wir hier vorliegen? – Im einfachsten Fall sind es zwei kategoriale Variablen, und wir wollen sehen ob diese von einander (un-)abhängig sind.&lt;/p&gt;
&lt;p&gt;Mangels tatsächlicher Daten basteln wir uns einfach mal ein Beispiel:&lt;/p&gt;
&lt;div id=&#34;wir-bastlen-uns-ein-beispiel&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Wir bastlen uns ein Beispiel&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Wie immer zuerst das Paket &amp;#39;mosaic&amp;#39; laden
library(mosaic)

# Einen beliebigen Startwert für den Zufallszahlengenerator
# für die Reproduzierbarkeit
set.seed(123)

# Anzahl der Vorfälle insgesamt
n &amp;lt;- 176

# Anzahl der Wiederholungen für die SBI-Methoden
loops &amp;lt;- 10000

# Erfinden eines Beispieldatensatzes
daten &amp;lt;- data.frame(
  iphones.tagsüber.unbeachtet = sample(rep(c(&amp;quot;1xtäglich&amp;quot;,&amp;quot;2xtäglich&amp;quot;,&amp;quot;3xtäglich&amp;quot;),n),n),
  wetter.ist.gut = sample(rep(c(&amp;quot;Ja&amp;quot;,&amp;quot;Nein&amp;quot;),n),n)
)

# Ausgabe der ersten Zeilen des Datensatzes
head(daten)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   iphones.tagsüber.unbeachtet wetter.ist.gut
## 1                   1xtäglich             Ja
## 2                   1xtäglich           Nein
## 3                   2xtäglich             Ja
## 4                   3xtäglich           Nein
## 5                   1xtäglich             Ja
## 6                   2xtäglich             Ja&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;ein-blick-auf-kennzahlen-und-visualisierungsmöglichkeiten&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Ein Blick auf Kennzahlen und Visualisierungsmöglichkeiten&lt;/h3&gt;
&lt;p&gt;Man kann diese Daten als Kreuztabelle zusammenfassen und diese dann mit Hilfe eines Mosaikplots darstellen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tally(iphones.tagsüber.unbeachtet ~ wetter.ist.gut, data = daten)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                            wetter.ist.gut
## iphones.tagsüber.unbeachtet Ja Nein
##                   1xtäglich 29   33
##                   2xtäglich 34   26
##                   3xtäglich 27   27&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mosaicplot(wetter.ist.gut ~ iphones.tagsüber.unbeachtet, data = daten)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2020-02-12-eine-typische-frage-von-studierenden_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Für später speichern wir die Kreuztabelle in obs.tab
obs.tab &amp;lt;- tally(iphones.tagsüber.unbeachtet ~ wetter.ist.gut, data = daten)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;von-der-forschungsthese-zur-hypothese&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Von der Forschungsthese zur Hypothese&lt;/h3&gt;
&lt;p&gt;Um nun zwischen abhängig und unabhängig statistisch zu unterscheiden, sollte man sich die Null- und Alternativhypothese genau überlegen und &lt;em&gt;operationalisieren&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Ein Blick auf die (orginale) Forschungsthese: “Die reduzierte Abhängigkeit des Iphones tagsüber liegt am schönen Wetter.”&lt;/p&gt;
&lt;p&gt;Oh je, eine kausale Forschungsthese. Ein dezenter Hinweis auf das Werk von Judea Pearl und Dana Mackenzie &lt;a href=&#34;https://www.amazon.de/Book-Why-Science-Cause-Effect/dp/046509760X/ref=sr_1_1?adgrpid=70747374853&amp;amp;dchild=1&amp;amp;gclid=EAIaIQobChMIio7A5a-57gIVBKOyCh1zPAemEAAYAyAAEgKbXPD_BwE&amp;amp;hvadid=352621590167&amp;amp;hvdev=c&amp;amp;hvlocphy=9043910&amp;amp;hvnetw=g&amp;amp;hvqmt=b&amp;amp;hvrand=4305248996988708271&amp;amp;hvtargid=kwd-422343395170&amp;amp;hydadcr=16871_1724817&amp;amp;keywords=the+book+of+why+judea+pearl&amp;amp;qid=1611656438&amp;amp;sr=8-1&amp;amp;tag=googhydr08-21&#34;&gt;“The Book of Why!”&lt;/a&gt; muss an dieser Stelle sein. – Aber da wir keine kausale Modellierung machen wollen, müssen wir das Problem sinngetreu umformulieren:&lt;/p&gt;
&lt;p&gt;“Es besteht ein Zusammenhang zwischen ‘schönem Wetter’ und dem ‘Iphone tagsüber unbeachtet’ lassen.”&lt;/p&gt;
&lt;p&gt;Warum diese neue Formulierung? – Nun, in der orginal Forschungsthese wird ein &lt;strong&gt;kausal&lt;/strong&gt; Zusammenhang geprüft. Da es sich vermutlich um eine Beobachtungstudie handelt können wir einen solchen Ursache-Wirkungs-Zusammenhang aber hier nicht so einfach prüfen. Wie das gehen könnte, dazu schaut man mal bei J.Pearl und D.Mackenzie (s.o.) nach.
Zwar kann man von außen sagen: “Wenn es einen Zusammenhang gibt, dann führt das schöne Wetter zur Nichtbeachtung.” mit klassischer Statistik können wir hier aber nur den Zusammenhang (und zwar ungerichtet!) testen.
Liegt dieser &lt;strong&gt;nicht&lt;/strong&gt; vor, so spricht erstmal auch nichts für einen kausalen Zusammenhang, aber ein Zusammenhang an sich spricht noch nicht für einen kausalen Zusammenhang!
(Korrelation ist ebeb &lt;strong&gt;nicht&lt;/strong&gt; Kausalität!)&lt;/p&gt;
&lt;p&gt;Aus der umformulierten Forschungsfrage können wir die Alternativ- und auch die Nullhypothese ableiten:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Alternativhypothese:&lt;/strong&gt; Es besteht ein Zusammenhang zwischen ‘schönem Wetter’ und dem ‘Iphone tagsüber unbeachtet’ lassen.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nullhypothese:&lt;/strong&gt; Es besteht &lt;strong&gt;kein&lt;/strong&gt; Zusammenhang zwischen ‘schönem Wetter’ und dem ‘Iphone tagsüber unbeachtet’ lassen.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;wie-kann-man-nun-den-zusammenhang-messen-und-wie-sieht-kein-zusammenhang-dabei-aus&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Wie kann man nun den Zusammenhang &lt;em&gt;messen&lt;/em&gt; und wie sieht &lt;em&gt;kein Zusammenhang&lt;/em&gt; dabei aus?&lt;/h2&gt;
&lt;p&gt;Um zu sehen ob unsere Werte keinen Zusammenhang haben, also rein zufällig sind, oder es einen inneren Zusammenhang gibt müssen wir die äußeren von den inneren Häufigkeiten trennen.&lt;/p&gt;
&lt;p&gt;Konkret heißt das, wir schauen uns an wie die Häufigkeiten oder auch Verteilung der einzelnen Variabeln ausssehen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tally(~ wetter.ist.gut, data = daten)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## wetter.ist.gut
##   Ja Nein 
##   90   86&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tally(~ iphones.tagsüber.unbeachtet, data = daten)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## iphones.tagsüber.unbeachtet
## 1xtäglich 2xtäglich 3xtäglich 
##        62        60        54&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;freiheitsgrade&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Freiheitsgrade&lt;/h4&gt;
&lt;p&gt;Die Werte innerhalb der Kreuztabelle oben werden im wesendlichen durch diese Werte bestimmt. Die außeren Werte sind also unsere Rahmenbedingungen. Dabei ist der Einfluss der sogenannten &lt;em&gt;Randhäufigkeiten&lt;/em&gt; (&lt;em&gt;Marginale Häufigkeit&lt;/em&gt;) nicht zu unterschätzen. Denn wenn wir diese als &lt;em&gt;fix&lt;/em&gt;/&lt;em&gt;gegeben&lt;/em&gt; ansehen, können wir nur mit den sechs Werten in der Mitte unserer Kreuztabelle &lt;em&gt;spielen&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Doch sind nicht alle sechs Werte wirklich frei wählbar. Denn um zum Beispiel die Summe 62 in der ersten Zeile zu erhalten haben wir ja die Summe von 29 und 33 gebildet.&lt;/p&gt;
&lt;p&gt;Ist nun der Rand, also 62, fest, so kann ich nicht &lt;em&gt;beide&lt;/em&gt; Summanden frei wählen, denn&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[62 = 29 + 33\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;impliziert ja, dass allgemein&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[62 = x + y\]&lt;/span&gt;
gelten muss und somit durch&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[x = 62 - y \qquad\text{ bzw. }\qquad y = 62 - x\]&lt;/span&gt;
immer maximal eine der Variabeln – &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; oder &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; – wirklich frei wählen kann.&lt;/p&gt;
&lt;p&gt;Da dies für jede Zeile, aber auch für jede Spalte gilt, denn z.B. ist die Summe der ersten Spalte gegeben durch&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[90 = 29 + 34 + 27,\]&lt;/span&gt;
sind von den sechs Werten in der Kreuztabelle in der Tat nur 2 Werte wirklich frei zu wählen.
Wir haben also ein Problem mit &lt;em&gt;2 Freiheitsgraden&lt;/em&gt;, man schreibt das kurz mit &lt;span class=&#34;math inline&#34;&gt;\(df=2\)&lt;/span&gt; (&lt;em&gt;df&lt;/em&gt; steht dabei für &lt;em&gt;degree of freedom&lt;/em&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;unabhängigkeit-in-der-statistik&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Unabhängigkeit in der Statistik&lt;/h3&gt;
&lt;p&gt;Wir sagen, in der Statistik, dass ein gemeinsames Ereignis unabhängig ist wenn sich das Ereignis als Produkt der beiden Einzelereignisse berechnen lässt.
Seien &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; also zwei Ereignisse, dann gilt im Falle der Unabhängigkeit:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[P(A \cap B) = P(A) \cdot P(B)\]&lt;/span&gt;
Oder etwas informeller: &lt;em&gt;Die Wahrscheinlichkeit das beide Ereignisse eintreffen ist das Produkt der Wahrscheinlichkeiten, dass jeweils eines der beiden Ereignisse eintrifft.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Wir können diese Definition aus der Wahrscheinlichkeitstheorie an unser Problem adaptieren, in dem wir die Wahrscheinlichkeiten durch die relativen Häufigkeiten ersetzen.&lt;/p&gt;
&lt;p&gt;Der Wert für das gemeinsame Ereignis &lt;code&gt;iphone.tagsüber.unbeachtet = 1xtäglich&lt;/code&gt; und das &lt;code&gt;wetter.ist.gut=ja&lt;/code&gt; wird im Falle der Unabhägigkeit durch die beiden Randhäufigkeiten bestimmt:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[62 \cdot 90 = 31.7045455\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir können nun mit eine Kreuztabelle erstellen, wie sie seien müsste, falls wir tatsächlich &lt;em&gt;statitische Unabhängigkeit&lt;/em&gt; hätten. Wir nutzen dafür eine sehr allgemein gehaltene, aber selbst programmierte, Funktion &lt;code&gt;expectation.tab()&lt;/code&gt;, der wir eine Tabelle mit den Häufigkeiten der Beobachtungen geben und die uns dann die Tabelle liefert, wie sie aussehen würde, falls tatsächlich &lt;em&gt;statitische Unabhängigkeit&lt;/em&gt; herrschen würde.&lt;/p&gt;
&lt;p&gt;Die Tabelle mit den beobchteten Werten speichern wir in &lt;code&gt;obs.tab&lt;/code&gt;, die der erwarteten Werte in &lt;code&gt;exp.tab&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;expectation.tab &amp;lt;- function(tab.obs) {
  ret &amp;lt;- tab.obs
  max.i &amp;lt;- dim(tab.obs)[1]
  max.j &amp;lt;- dim(tab.obs)[2]
  
  # Randhäufigkeiten 
  x &amp;lt;- rep(0, max.i)
  for (i in 0:max.i) x[i] = sum(tab.obs[i,])

  y &amp;lt;- rep(0, max.j)
  for (j in 0:max.j) y[j] = sum(tab.obs[,j])

  # Anzahl aller Beobachtungen
  n = sum(tab.obs)
  
  for (i in 0:max.i) {
    for (j in 0:max.j) {
       ret[i,j] &amp;lt;- (x[i] * y[j] / n)
    }
  }

  ret
}

# Kreuztabelle der beobachtete Werte
obs.tab &amp;lt;- tally(iphones.tagsüber.unbeachtet ~ wetter.ist.gut, data = daten)

# Kreuztabelle der erwarteten Werte auf Grundlage der beobachteten Werte
exp.tab &amp;lt;- expectation.tab(obs.tab)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Schauen wir uns die beiden Tabellen kurz an. Zuerst die der beobachteten Werte:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;obs.tab&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                            wetter.ist.gut
## iphones.tagsüber.unbeachtet Ja Nein
##                   1xtäglich 29   33
##                   2xtäglich 34   26
##                   3xtäglich 27   27&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dann die der erwarteten Werte:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;exp.tab&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                            wetter.ist.gut
## iphones.tagsüber.unbeachtet       Ja     Nein
##                   1xtäglich 31.70455 30.29545
##                   2xtäglich 30.68182 29.31818
##                   3xtäglich 27.61364 26.38636&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;was-können-wir-nun-messen&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Was können wir nun messen?&lt;/h3&gt;
&lt;p&gt;Unsicherheit und Zufall spielen eine große Rolle. Wir können also nicht erwarten, dass die Werte für die Kreuztabelle in der Realität genau getroffen werden. (Vorallem, weil wir hier ja mit Nachkommastellen arbeiten!) Aber wir können versuchen den Abstand zu diesen Werten zu messen. Je weiter weg die Werte in der Kreuztabelle von den theoretischen Werten liegen, um so unwarscheinlicher ist es, dass die Werte zufällig aus einer unabhängigen Population gezogen wurden. D.h. wir könnten uns für eine Abhägigkeit aussprechen.&lt;/p&gt;
&lt;div id=&#34;messen-mit-dem-absolutabstand&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Messen mit dem Absolutabstand?&lt;/h4&gt;
&lt;p&gt;Man könnte nun auf die Idee kommen die Abstände an jeder Stelle zu messen und den absoluten Abstand zu summieren:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum(abs(obs.tab - exp.tab))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 13.27273&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nur was sagt dieser Wert aus? – Ist das ein kleiner Abstand oder ein großer?&lt;/p&gt;
&lt;p&gt;Wir brauchen Referenzwerte zur Orientierung. Eine Idee lautet: &lt;strong&gt;Permutationstest&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sind die Werte unabhängig von einander, dann spielt die konkrete Zuordnung keine Rolle, sondern nur die Anzahl der Ereignisse an sich. Ordnen wir nun zufällig einem &lt;code&gt;iphones.tagsüber.unbeachtet&lt;/code&gt;-Wert einen beliebigen &lt;code&gt;wetter.ist.gut&lt;/code&gt;-Wert zu, dann besteht kein Zusammenhang mehr zwischen den Werten. Dies machen wir mittels &lt;code&gt;iphones.tagsüber.unbeachtet ~ shuffle(wetter.ist.gut)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Wir simulieren so den Zustand, dass es keine Abhängigkeit zwischen den Werten gibt.&lt;/p&gt;
&lt;p&gt;Dabei messen wir den Abstand zwischen den Abstand zwischen den beobachteten Werten und den Werten, die wir erwarten würden, falls Unabhägigkeit vorliegen würde. Dafür nutzen wir die selbsterstellte Funktioen &lt;code&gt;diffabsobsexp&lt;/code&gt;, welche die Summe der absoluten Abweichungen berechnet:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\text{diffabsobsexp}(obs, exp) = \sum\limits_i \left|obs_i - exp_i\right|\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir Wiederholen das ganze mit Hilfe von &lt;code&gt;do(loops)&lt;/code&gt; genau &lt;code&gt;loops&lt;/code&gt;&lt;span class=&#34;math inline&#34;&gt;\(=10^{4}\)&lt;/span&gt; mal, geben dann das Histogramm aus und tragen als rote Linie den Wert ein, die wir bei unseren beobachteten Daten tatsächliche gemessen haben:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Funktion zur Berechnung der absoluten Differenz zwischen
# beobachteten und erwarteten Werte
diffabsobsexp &amp;lt;- function(obs, exp) {
  sum(abs(obs - exp))
}

# Absolute Abweichung der gemessenen Werte
obs.abs &amp;lt;- diffabsobsexp(obs.tab, exp.tab)

# Erzeugen der Nullverteilung
NullVert  &amp;lt;- do(loops) * diffabsobsexp(tally(iphones.tagsüber.unbeachtet ~ shuffle(wetter.ist.gut), data = daten), exp.tab)
gf_histogram(~ diffabsobsexp, data = NullVert) %&amp;gt;%
  gf_vline(xintercept = ~ obs.abs, color = &amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2020-02-12-eine-typische-frage-von-studierenden_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Wir können nun den p-Wert, also die relative Fläche rechts von der roten Linie in unseren Histogramm, abschätzen mit:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;prop( ~ diffabsobsexp &amp;gt;= obs.abs, data = NullVert)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## prop_TRUE 
##    0.5714&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Absolute Abweichungen (oder auch &lt;em&gt;absolute Fehler&lt;/em&gt;) haben die Tendenz bei großen Zahlen auch große Abweichungswerte zu liefern und bei kleinen Werten eher kleine Abweichungswerte.
Das kann man als Markel ansehen.
Daher arbeitet man vielleicht lieber mit relativen Abweichungen (oder auch &lt;em&gt;relativen Fehlern&lt;/em&gt;).
Dabei setzt man die absolute Abweichung jedesmal in Bezug auf den erwarteten Wert.
Die dazu passenden Funktion haben wir unten mit &lt;code&gt;diffabsobsexprel&lt;/code&gt; implementiert.
Dabei ist:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\text{diffabsobsexprel}(obs, exp) = \sum\limits_i \frac{\left|obs_i - exp_i\right|}{exp_i}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir Wiederholen das ganze mit Hilfe von &lt;code&gt;do(loops)&lt;/code&gt; genau &lt;code&gt;loops&lt;/code&gt;&lt;span class=&#34;math inline&#34;&gt;\(=10^{4}\)&lt;/span&gt; mal, geben dann das Histogramm aus und tragen als rote Linie den Wert ein, den wir bei unseren beobachteten Daten tatsächliche gemessen haben:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Funktion zur Berechnung der korrigierten absoluten 
# Differenz zwischen beobachteten und erwarteten Werten
diffabsobsexprel &amp;lt;- function(obs, exp) {
  sum((abs(obs - exp))/exp)
}

# Absolute Abweichung der gemessenen Werte -- korrigiert
obs.abs &amp;lt;- diffabsobsexprel(obs.tab, exp.tab)

# Erzeugen der Nullverteilung
NullVert  &amp;lt;- do(loops) * diffabsobsexprel(tally(iphones.tagsüber.unbeachtet ~ shuffle(wetter.ist.gut), data = daten), exp.tab)
gf_dhistogram(~ diffabsobsexprel, data = NullVert) %&amp;gt;%
  gf_vline(xintercept = ~ obs.abs, color = &amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2020-02-12-eine-typische-frage-von-studierenden_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Auch hier können wir den p-Wert abschätzen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;prop( ~ diffabsobsexprel &amp;gt;= obs.abs, data = NullVert)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## prop_TRUE 
##    0.5983&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Ist der absolute Abstand überhaupt gut gewählt? – Wäre nicht eher der quadratische Abstand angebracht?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ein Vorteil des quadratischen Abstand ist es, dass er kleine Abstände kleiner und große Abstände größer bewertet, als der absolute Abstand. Außerdem hat er mathematisch einige Vorteile. Wir messen nun den quadratischen Abstande mit der Funktion
&lt;code&gt;diffquad&lt;/code&gt;, die wie folgt arbeitet:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\text{diffquad}(obs, exp) = \sum\limits_i \left(obs_i - exp_i\right)^2\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir Wiederholen dies nun mit Hilfe von &lt;code&gt;do(loops)&lt;/code&gt; genau &lt;code&gt;loops&lt;/code&gt;&lt;span class=&#34;math inline&#34;&gt;\(=10^{4}\)&lt;/span&gt; mal, geben dann das Histogramm aus und tragen als rote Linie den Wert ein, den wir bei unseren beobachteten Daten tatsächliche gemessen haben:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Funktion zur Berechnung der quadratischen 
# Differenz zwischen beobachteten und erwarteten Werten
diffquad &amp;lt;- function(obs, exp) {
  sum((obs - exp)^2)
}

# Quadratische Abweichung der gemessenen Werte
obs.abs &amp;lt;- diffquad(obs.tab, exp.tab)

# Erzeugen der Nullverteilung
NullVert  &amp;lt;- do(loops) * diffquad(tally(iphones.tagsüber.unbeachtet ~ shuffle(wetter.ist.gut), data = daten), exp.tab)
gf_dhistogram(~ diffquad, data = NullVert) %&amp;gt;%
  gf_vline(xintercept = ~ obs.abs, color = &amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2020-02-12-eine-typische-frage-von-studierenden_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Wir können nun den p-Wert abschätzen mit:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;prop( ~ diffquad &amp;gt;= obs.abs, data = NullVert)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## prop_TRUE 
##    0.5389&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wie beim absoluten Abstand werden hier die Größe der Werte ausser acht gelassen und vielleicht fühlen wir uns etwas wohler, wenn wir statt des quadratischen Abstands den relativen quadratischen Abstand benutzen:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\text{diffquadrel}(obs, exp) = \sum\limits_i \frac{\left(obs_i - exp_i\right)^2}{exp_i}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Dies wiederholen wir nun mit Hilfe von &lt;code&gt;do(loops)&lt;/code&gt; genau &lt;code&gt;loops&lt;/code&gt;&lt;span class=&#34;math inline&#34;&gt;\(=10^{4}\)&lt;/span&gt; mal, geben dann das Histogramm aus und tragen als rote Linie den Wert ein, den wir bei unseren beobachteten Daten tatsächliche gemessen haben:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Funktion zur Berechnung der korrigierten quadratischen 
# Differenz zwischen beobachteten und erwarteten Werten
diffquadrel &amp;lt;- function(obs, exp) {
  sum(((obs - exp)^2)/exp)
}

# Quadratische Abweichung der gemessenen Werte -- korrigiert
obs.abs &amp;lt;- diffquadrel(obs.tab, exp.tab)

# Erzeugen der Nullverteilung
NullVert  &amp;lt;- do(loops) * diffquadrel(tally(iphones.tagsüber.unbeachtet ~ shuffle(wetter.ist.gut), data = daten), exp.tab)
gf_histogram(~ diffquadrel, binwidth = 0.5, center = 0.25, data = NullVert) %&amp;gt;%
  gf_vline(xintercept = ~ obs.abs, color = &amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2020-02-12-eine-typische-frage-von-studierenden_files/figure-html/unnamed-chunk-20-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Den Wert 1.2344597, den wir mit Hilfe der relativen quadratischen Abweichung berechnet haben, nennen wir auch &lt;span class=&#34;math inline&#34;&gt;\(\chi^2\)&lt;/span&gt; Wert.&lt;/p&gt;
&lt;p&gt;Wir können nun den p-Wert abschätzen mit:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;prop( ~ diffquadrel &amp;gt;= obs.abs, data = NullVert)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## prop_TRUE 
##    0.5599&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An Hand der p-Werte können wir nun über die Nullhypothese entscheiden:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;was-sagt-die-klassische-statistik&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Was sagt die klassische Statistik?&lt;/h3&gt;
&lt;p&gt;In der klassischen Statistik könnte man hier den &lt;span class=&#34;math inline&#34;&gt;\(\chi^2\)&lt;/span&gt;-Unabhängigkeitstest anwenden:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;xchisq.test(iphones.tagsüber.unbeachtet ~ wetter.ist.gut, data = daten)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Pearson&amp;#39;s Chi-squared test
## 
## data:  x
## X-squared = 1.2345, df = 2, p-value = 0.5394
## 
##    29       33   
## (31.70)  (30.30) 
## [0.231]  [0.241] 
## &amp;lt;-0.48&amp;gt;  &amp;lt; 0.49&amp;gt; 
##    
##    34       26   
## (30.68)  (29.32) 
## [0.359]  [0.376] 
## &amp;lt; 0.60&amp;gt;  &amp;lt;-0.61&amp;gt; 
##    
##    27       27   
## (27.61)  (26.39) 
## [0.014]  [0.014] 
## &amp;lt;-0.12&amp;gt;  &amp;lt; 0.12&amp;gt; 
##    
## key:
##  observed
##  (expected)
##  [contribution to X-squared]
##  &amp;lt;Pearson residual&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vergleichen wir nun die beiden Ansätze, SBI auf der einen und der klassische Ansatz auf der anderern Seite, einmal in einem Diagramm. Das (Dichte-)Histogramm sind die Daten aus der Nullverteilung für die quadratische, korrigierte Differenz. Die rote Linie ist der gemessene Abweichungswert. Die schwarze Linie ist der Graph der &lt;span class=&#34;math inline&#34;&gt;\(\chi^2\)&lt;/span&gt;-Verteilung mit zwei Freiheitsgraden:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_dhistogram(~ diffquadrel, binwidth = 0.5, center = 0.25, data = NullVert) %&amp;gt;%
  gf_fun(dchisq(x, df=2) ~ x, xlim = c(0:20), color = &amp;quot;blue&amp;quot;) %&amp;gt;% 
  gf_vline(xintercept = ~ obs.abs, color = &amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2020-02-12-eine-typische-frage-von-studierenden_files/figure-html/unnamed-chunk-26-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Aber es gibt auch den (exakten) Fisher-Test:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fisher.test(obs.tab, alternative = &amp;quot;greater&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Fisher&amp;#39;s Exact Test for Count Data
## 
## data:  obs.tab
## p-value = 0.5609
## alternative hypothesis: greater&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;fazit&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Fazit&lt;/h3&gt;
&lt;p&gt;Wir können die p-Werte der einzelnen Tests nun gegenüber stellen:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Scale for &amp;#39;y&amp;#39; is already present. Adding another scale for &amp;#39;y&amp;#39;, which will
## replace the existing scale.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2020-02-12-eine-typische-frage-von-studierenden_files/figure-html/unnamed-chunk-29-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Gewöhnlich haben wir ein Signifikanznivau von &lt;span class=&#34;math inline&#34;&gt;\(5\% = 0{,}05\)&lt;/span&gt; angenommen.
Die rote Linie zeigt diese Grenze.
Liegt der Balken links vor dieser Linie, so sprechen wir davon, dass der
gemessene Wert selten bei unabhänigen Daten vorliegt und würden uns gegen die
Nullhypothese und damit quasi für die Alternativhypothese entscheiden.
Liegt der Balken recht der roten Linie, so haben wir übliche Werte für
unabhängige Daten und keinen Grund gefunden, der gegen die Nullhypothese
spricht.
Warum wir sie dann, auf Grundlage unserer Daten, auch nicht ablehnen können.&lt;/p&gt;
&lt;p&gt;Bleibt Sie Frage, gibt es Situationen in denen die Entscheidung über die
Nullhypothese bei den einzelen betrachteten Verfahren unterschiedlichen ist?
Und wenn ja, wann und wieoft?&lt;/p&gt;
&lt;p&gt;Diese Fragen sind nicht Thema dieses Beitrags, aber vielleicht habe ich Zeit
und betrachte das später einmal.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Warum das Nachrechnen von Veröffentlichungen so wichtig ist</title>
      <link>https://sefiroth.net/nab/post/warum-das-nachrechnen-von-veroeffentlichungen-so-wichtig-ist/</link>
      <pubDate>Mon, 27 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/warum-das-nachrechnen-von-veroeffentlichungen-so-wichtig-ist/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Im Internet fand ich vor kurzem einen sehr interessanten &lt;a href=&#34;http://www.stefanbartz.de/dateien/Vorsicht-bei-der-sigma-Regel.pdf&#34;&gt;Text&lt;/a&gt; von &lt;a href=&#34;http://www.stefanbartz.de&#34;&gt;Stefan Bart&lt;/a&gt;. Eine Aufgabe daraus fand meine besondere Aufmerksamkeit.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;HSB gesucht (Grundgesamtheit mit &lt;span class=&#34;math inline&#34;&gt;\(H_0 \rightarrow\)&lt;/span&gt; Stichprobe)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Es soll die Nullhypothese, dass die 500 Mädchen und 500 Jungen der Schule gleich intelligent sind, getestet werden.
Dazu werden 200 zufällige Junge-Mädchen-Paare gebildet.
Bei 112 davon hatte der Junge einen höheren IQ. Ist die Abweichung vom Mittelwert signifikant?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Als Lösungen wurden vorgeschlagen:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: lower-alpha&#34;&gt;
&lt;li&gt;&lt;em&gt;grobe Näherung&lt;/em&gt;:
&lt;span class=&#34;math display&#34;&gt;\[x \in [n \cdot p_0 \pm \sqrt{n}\,] = [200 \cdot 0{,}5 \pm \sqrt{200}\,] \approx [85{,}85786; 114{,}1421] \approx [85; 115]\]&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;bessere Näherung&lt;/em&gt;:
&lt;span class=&#34;math display&#34;&gt;\[\begin{aligned}x \in \left[n \cdot p_0 \pm \Phi(0{,}975) \sqrt{n \cdot p_0 (1-p_0)}\,\right] &amp;amp;\approx \left[n \cdot p_0 \pm 1{,}96 \cdot \sqrt{n \cdot p_0 \cdot(1-p_0)} \,\right] \\ &amp;amp;\approx \left[200 \cdot 0{,}5 \pm 1.959964 \cdot \sqrt{200 \cdot 0{,}5 \cdot (1-0{,}5)}\,\right] \\ &amp;amp;\approx \left[86{,}14096; 113{,}859\right] \\&amp;amp;\approx \left[86; 114\right]\end{aligned}\]&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;exakte Lösung&lt;/em&gt;:
&lt;span class=&#34;math display&#34;&gt;\[x \in [89; 111]\]&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Auf Grundlage dieser drei Lösungen wurde dann entschieden, ob die Abweichung signifikant ist, also 112 im oder eben nicht im berechneten Intervall liegt. &lt;em&gt;Ergebnis:&lt;/em&gt; a), b) liefern nicht signifikante und c) ein signifikantes Ergebnis.&lt;/p&gt;
&lt;p&gt;Die Frage bleibt, was in der Aufgabenstellung mit “200 zufällige Junge-Mädchen-Paaren” gemeint ist.&lt;/p&gt;
&lt;p&gt;Bekannterweise kann man diesen Satz interpretieren:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Eine &lt;em&gt;uneingeschränkte Zufallsstichprobe&lt;/em&gt; erhält man z. B. bei einem &lt;em&gt;Ziehen ohne Zurücklegen&lt;/em&gt; (&lt;span class=&#34;math inline&#34;&gt;\(\rightarrow\)&lt;/span&gt; Hypergeometrische Verteilung).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Eine &lt;em&gt;einfache Zufallsstichprobe&lt;/em&gt; z. B. bei einem &lt;em&gt;Ziehen mit Zurücklegen&lt;/em&gt; (&lt;span class=&#34;math inline&#34;&gt;\(\rightarrow\)&lt;/span&gt; Binomialverteilung).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rechnet man mit Hilfe von &lt;em&gt;R&lt;/em&gt; die exakte Lösung nach, so erhält man:&lt;/p&gt;
&lt;p&gt;Für die Binomialverteilung (die “bessere Näherung”):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pl &amp;lt;- 0.025 # 2,5% als untere Grenze
pr &amp;lt;- 0.975 # 97,5% als obere Grenze

iu &amp;lt;- qbinom(pl, 200, prob=0.5)
io &amp;lt;- qbinom(pr, 200, prob=0.5)
c(iu, io) # Ausgabe des (HSB-)Intervalls&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  86 114&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Für die Hypergeometischeverteilung (hier “exakte Lösung” genannt) müssen wir die zwei Gruppen (500 Jungen und 500 Mädchen) jeweils als ein mögliches Paar ansehen. Es gibt somit insgesamt 500 solcher Paare, da jeder Junge und jedes Mädchen in nur einem Paar vorkommen können. – Sehr wohl aber 500! solcher Möglichen Paar-Reihen.&lt;/p&gt;
&lt;p&gt;Betrachten wir nun jedes Paar nur einmal, dann ziehen wir aus der Menge der Paare also eine &lt;em&gt;Stichprobe ohne Zurücklegen&lt;/em&gt;, also eine &lt;em&gt;uneingeschränkte Zufallsstichprobe&lt;/em&gt;.
Zum bestimmen der Quantiele und damit des HSB benötigen wir dann die &lt;em&gt;hypergeometrische Verteilung&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Oh ja, diese Annahme ist sehr verwirrend, logisch nicht ganz einzusehen und einfach von Mathematik-Lehrenden gemacht worden, damit man die Hypergeometrischeverteilung hier anwenden kann. Alleine schon die Annahme, dass zwei Personen immer einen unterschiedlichen IQ haben müssen … – Egal!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;m &amp;lt;- 250 # Anzahl der Paare mit besseren Mädchen
n &amp;lt;- 250 # Anzahl der Paare mit besseren Jungen
k &amp;lt;- 200 # Umfang des Stichprobe
pl &amp;lt;- 0.025 # 2,5% als untere Grenze
pr &amp;lt;- 0.975 # 97,5% als obere Grenze

iu &amp;lt;- qhyper(pl, m, n, k) # Linke/untere Intervallgrenze
io &amp;lt;- qhyper(pr, m, n, k) # Rechte/obere Intervallgrenze
c(iu, io) # Ausgabe des (HSB-)Intervalls&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  89 111&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;R&lt;/strong&gt; liefert aus &lt;em&gt;exakte Lösung&lt;/em&gt; das Intervall &lt;span class=&#34;math inline&#34;&gt;\([89; 111]\)&lt;/span&gt;. Schauen wir einmal genauer hin:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;m &amp;lt;- 250 # Anzahl der Paare mit besseren Mädchen
n &amp;lt;- 250 # Anzahl der Paare mit besseren Jungen
k &amp;lt;- 200 # Umfang des Stichprobe

p &amp;lt;- dhyper(0:k, m, n, k)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Werte für die linke/untere Intervallgrenzen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Werte für die linke/untere Intervallgrenzen:
sum(p[0:89])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.01782071&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum(p[0:90])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.02755396&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Werte für die rechte/untere Intervallgrenzen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Werte für die rechte/untere Intervallgrenzen:
sum(p[0:111])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.972446&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum(p[0:112])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.9821793&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wie wird nun gerundet? – Im Text heißt es:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Werden 2,5% und 97,5% nicht genau getroffen, wird hier nicht […] nach außen / .  , sondern in beiden Fällen nach rechts . gerundet;
d.h. man nimmt diejenigen Werte in das zu bestimmende Intervall auf, bei denen 2,5% bzw. 97,5% zum ersten Mal
übertroffen werden. Somit verbleiben weniger als 2,5% der Histogrammfläche am linken bzw. rechten Rand.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id=&#34;ein-paar-überlegungen-zum-lösen-der-aufgabe-mit-sbi&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Ein paar Überlegungen zum Lösen der Aufgabe mit SBI&lt;/h3&gt;
&lt;p&gt;Eigentlich haben wir es mit drei Fällen je Paar zu tun:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(IQ_{Junge} &amp;gt; IQ_{Mädchen}\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(IQ_{Junge} &amp;lt; IQ_{Mädchen}\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;math inline&#34;&gt;\(IQ_{Junge} = IQ_{Mädchen}\)&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Tatsächlich spielt hier welches Mädchen und welcher Junge im Paar sind eine entscheidende Rolle.&lt;/p&gt;
&lt;p&gt;Simulieren wir nun einmal, dass unsere beiden Gruppe im wesendlichen (und im Mittel) gleich intelligent sind, was wir durch einen gleich mittlenem IQ von 100 und einer Standardabweichung von 15 modellieren wollen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Wir laden zuerst das Paket `mosaic`
library(mosaic)

# Zur Reproduzierbarkeit
set.seed(2009)

# IQs für Jungen und Mädchen normalverteilt mit den Parametern mu=100 und sigma=15

# 1. Fassung, aber hier ist F_iq_junger = F_iq_maedchen
#iq_jungen &amp;lt;- rnorm(500, mean=100, sd=15)
#iq_maedchen &amp;lt;- rnorm(500, mean=100, sd=15)

# 2. Fassung
#iq &amp;lt;- rnorm(500, mean=100, sd=15)
#iq_jungen &amp;lt;- iq
#iq_maedchen &amp;lt;- iq

# 3. Fassung
iq_jungen &amp;lt;- rnorm(500, mean=100, sd=15)
iq_maedchen &amp;lt;- rnorm(499, mean=100, sd=15)
iq_maedchen &amp;lt;- c(iq_maedchen, mean(iq_jungen)+499*(mean(iq_jungen)-mean(iq_maedchen)))

# Ein Blick auf die beinden Datenreihen
length(iq_maedchen)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 500&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;length(iq_jungen)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 500&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mean(iq_maedchen)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 99.22318&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mean(iq_jungen)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 99.22318&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bilden wir nun die Paare:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;paare &amp;lt;- data.frame(jungen = iq_jungen, maedchen = iq_maedchen)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Und schauen uns nun einmal an, wie oft – bei zufälliger Auswahl von 200 Paarungen – es vorkommen kann, dass Jungen in den Paarungen einen höheren IQ haben als Mädchen. Das wäre dann dem Zufall geschuldet und nicht der übermässigen Intelligenz der Jungen. (Da nach Vereinbarung beide Gruppen gleich intelligent waren!)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NullVerteilung &amp;lt;- do(5000) * count( ~ sample(jungen, 200) - sample(maedchen, 200) &amp;gt; 0, data=paare)
gf_bar( ~ n_TRUE, data=NullVerteilung)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2020-01-27-warum-das-nachrechnen-von-veroeffentlichungen-so-wichtig-ist_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Das HSB für diesen Fall wäre dann:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(hsb &amp;lt;- quantile( ~ n_TRUE, prob=c(0.025, 0.975), data=NullVerteilung))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  2.5% 97.5% 
##    83   107&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Anders formuliert, der zu erwartende Hauptstreubereich ist das Intervall &lt;span class=&#34;math inline&#34;&gt;\([83, 107]\)&lt;/span&gt;!&lt;/p&gt;
&lt;p&gt;Die 112 Paare in denen die Jungen einen höheren IQ haben, sind also nicht zu erwarten. (Also &lt;em&gt;signifikant!&lt;/em&gt;)&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Der Standardfehler aus klassischer Sicht - Ein kleiner Überblick</title>
      <link>https://sefiroth.net/nab/post/der-standardfehler-aus-klassischer-sicht-ein-kleiner-uberblick/</link>
      <pubDate>Wed, 22 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/der-standardfehler-aus-klassischer-sicht-ein-kleiner-uberblick/</guid>
      <description>
&lt;script src=&#34;2020-01-22-der-standardfehler-aus-klassischer-sicht-ein-kleiner-überblick_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Der &lt;strong&gt;Standardfehler&lt;/strong&gt; ist ein &lt;em&gt;Streuungsmaß&lt;/em&gt; für eine Schätzfunktion &lt;span class=&#34;math inline&#34;&gt;\(\hat{\vartheta}\)&lt;/span&gt; für einen unbekannten Parameter &lt;span class=&#34;math inline&#34;&gt;\(\vartheta\)&lt;/span&gt; der Grundgesamtheit. Er ist definiert als
&lt;span class=&#34;math display&#34;&gt;\[\sigma(\hat{\vartheta}) = + \sqrt{\operatorname{Var}(\hat{\vartheta})}.\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Bei einem erwartungstreuen Schätzer ist daher der Standardfehler ein Maß für die durchschnittliche Abweichung des geschätzten Parameterwertes vom wahren Parameterwert. Je kleiner der Standardfehler ist, desto genauer kann der unbekannte Parameter mit Hilfe der Schätzfunktion geschätzt werden.&lt;/p&gt;
&lt;p&gt;Für eine Stichprobe vom Umfang &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; mit Standardabweichung &lt;span class=&#34;math inline&#34;&gt;\(\sigma\)&lt;/span&gt; gilt für den Standardfehler:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;des &lt;strong&gt;Stichprobenmittel&lt;/strong&gt;: &lt;span class=&#34;math inline&#34;&gt;\(\sigma(\overline{X}) = \frac{\sigma}{\sqrt{n}}\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unterstellt man eine Stichprobenverteilung, so kann der Standardfehler anhand der Varianz der Stichprobenverteilung berechnet werden:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Binomialverteilung&lt;/strong&gt; mit Parametern &lt;span class=&#34;math inline&#34;&gt;\(N,\, p\)&lt;/span&gt;: &lt;span class=&#34;math inline&#34;&gt;\(\sigma_{\bar x,\mathrm{binom}} = \frac{\sqrt{ N \cdot p \cdot (1-p)}}{\sqrt n}\)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Exponentialverteilung&lt;/strong&gt; mit Parameter &lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt; (Erwartungswert = Standardabweichung = &lt;span class=&#34;math inline&#34;&gt;\(1/\lambda\)&lt;/span&gt;): &lt;span class=&#34;math inline&#34;&gt;\(\sigma_{\bar x,\mathrm{exp}} = \frac{1}{\lambda\sqrt n}\)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Poisson-Verteilung&lt;/strong&gt; mit Parameter &lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt; (Erwartungswert = Varianz = &lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt;): &lt;span class=&#34;math inline&#34;&gt;\(\sigma_{\bar x,\mathrm{poisson}} = \sqrt{\frac{\lambda}{n}}\)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;beispiel-binomialverteile-stichprobe&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Beispiel: Binomialverteile Stichprobe&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;printAllSE.binom &amp;lt;- function(n, N, prob, bootstrapN=1000, theta=mean) {
  stipro &amp;lt;- rbinom(n, N, prob)
  bootvert &amp;lt;- do(bootstrapN) * theta(resample(stipro))
  se.boot &amp;lt;- sd(bootvert$theta)
  se.exakt &amp;lt;- sqrt(N*prop*(1-prop))/sqrt(n)
  se &amp;lt;- list(se.exakt, se.boot)
  names(se) &amp;lt;- c(&amp;quot;exakt&amp;quot;, &amp;quot;boot&amp;quot;)
  return(se)
}

printAllSE.poision &amp;lt;- function(n, lambda, bootstrapN=1000, theta=mean) {
  stipro &amp;lt;- rpois(n, lambda)
  bootvert &amp;lt;- do(bootstrapN) * theta(resample(stipro))
  se.boot &amp;lt;- sd(bootvert$theta)
  se.exakt &amp;lt;- sqrt(lambda/n)
  se &amp;lt;- list(se.exakt, se.boot)
  names(se) &amp;lt;- c(&amp;quot;exakt&amp;quot;, &amp;quot;boot&amp;quot;)
  return(se)
}

printAllSE.normal &amp;lt;- function(n, mu=0, sigma=1, bootstrapN=1000, theta=mean) {
  stipro &amp;lt;- rnorm(n, mu, sigma)
  bootvert &amp;lt;- do(bootstrapN) * theta(resample(stipro))
  se.boot &amp;lt;- sd(bootvert$theta)
  se.exakt &amp;lt;- sqrt(sigma^2/n)
  se.geschaetzt &amp;lt;- sqrt(var(stipro)/n)
  se &amp;lt;- list(se.exakt, se.boot, se.geschaetzt)
  names(se) &amp;lt;- c(&amp;quot;exakt&amp;quot;, &amp;quot;boot&amp;quot;, &amp;quot;geschaetzt&amp;quot;)
  return(se)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n &amp;lt;- 100
N &amp;lt;- 70
prop &amp;lt;- 0.9

# Binomialverteilte:
for(n in c(30, 50, 100, 200, 500, 1000, 3000)) {
  cat(&amp;quot;\nn=&amp;quot;, n, &amp;quot;\n&amp;quot;)
  for(prob in c(1/2, 1/3, 1/4, 1/5, 1/6)) {
    N &amp;lt;- floor(prob*n)
    cat(&amp;quot;N=&amp;quot;,N, &amp;quot;\n&amp;quot;)    
    tmp &amp;lt;- printAllSE.binom(n , N, prob)
    cat(prob,&amp;quot;: &amp;quot;, tmp$exakt, &amp;quot; (exakt), &amp;quot;, tmp$boot, &amp;quot; (boot), &amp;quot;, abs(tmp$exakt-tmp$boot), &amp;quot; (abs. Fehler) \n&amp;quot;)
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## n= 30 
## N= 15 
## 0.5 :  0.212132  (exakt),  0.2996921  (boot),  0.08756008  (abs. Fehler) 
## N= 10 
## 0.3333333 :  0.1732051  (exakt),  0.2309855  (boot),  0.0577804  (abs. Fehler) 
## N= 7 
## 0.25 :  0.1449138  (exakt),  0.230028  (boot),  0.08511424  (abs. Fehler) 
## N= 6 
## 0.2 :  0.1341641  (exakt),  0.1914001  (boot),  0.05723599  (abs. Fehler) 
## N= 5 
## 0.1666667 :  0.1224745  (exakt),  0.1436041  (boot),  0.02112966  (abs. Fehler) 
## 
## n= 50 
## N= 25 
## 0.5 :  0.212132  (exakt),  0.3525394  (boot),  0.1404073  (abs. Fehler) 
## N= 16 
## 0.3333333 :  0.1697056  (exakt),  0.273315  (boot),  0.1036094  (abs. Fehler) 
## N= 12 
## 0.25 :  0.1469694  (exakt),  0.2005751  (boot),  0.05360569  (abs. Fehler) 
## N= 10 
## 0.2 :  0.1341641  (exakt),  0.1867858  (boot),  0.0526217  (abs. Fehler) 
## N= 8 
## 0.1666667 :  0.12  (exakt),  0.1343281  (boot),  0.01432808  (abs. Fehler) 
## 
## n= 100 
## N= 50 
## 0.5 :  0.212132  (exakt),  0.349122  (boot),  0.13699  (abs. Fehler) 
## N= 33 
## 0.3333333 :  0.1723369  (exakt),  0.2724159  (boot),  0.100079  (abs. Fehler) 
## N= 25 
## 0.25 :  0.15  (exakt),  0.2371899  (boot),  0.0871899  (abs. Fehler) 
## N= 20 
## 0.2 :  0.1341641  (exakt),  0.1927453  (boot),  0.05858118  (abs. Fehler) 
## N= 16 
## 0.1666667 :  0.12  (exakt),  0.1463126  (boot),  0.02631257  (abs. Fehler) 
## 
## n= 200 
## N= 100 
## 0.5 :  0.212132  (exakt),  0.3311697  (boot),  0.1190377  (abs. Fehler) 
## N= 66 
## 0.3333333 :  0.1723369  (exakt),  0.2952654  (boot),  0.1229285  (abs. Fehler) 
## N= 50 
## 0.25 :  0.15  (exakt),  0.2033503  (boot),  0.05335033  (abs. Fehler) 
## N= 40 
## 0.2 :  0.1341641  (exakt),  0.1563642  (boot),  0.02220012  (abs. Fehler) 
## N= 33 
## 0.1666667 :  0.1218606  (exakt),  0.1407523  (boot),  0.01889169  (abs. Fehler) 
## 
## n= 500 
## N= 250 
## 0.5 :  0.212132  (exakt),  0.3497107  (boot),  0.1375787  (abs. Fehler) 
## N= 166 
## 0.3333333 :  0.1728583  (exakt),  0.2574557  (boot),  0.08459734  (abs. Fehler) 
## N= 125 
## 0.25 :  0.15  (exakt),  0.2186492  (boot),  0.06864923  (abs. Fehler) 
## N= 100 
## 0.2 :  0.1341641  (exakt),  0.185649  (boot),  0.05148495  (abs. Fehler) 
## N= 83 
## 0.1666667 :  0.1222293  (exakt),  0.146211  (boot),  0.02398172  (abs. Fehler) 
## 
## n= 1000 
## N= 500 
## 0.5 :  0.212132  (exakt),  0.345063  (boot),  0.132931  (abs. Fehler) 
## N= 333 
## 0.3333333 :  0.1731185  (exakt),  0.2646252  (boot),  0.09150675  (abs. Fehler) 
## N= 250 
## 0.25 :  0.15  (exakt),  0.2231931  (boot),  0.07319309  (abs. Fehler) 
## N= 200 
## 0.2 :  0.1341641  (exakt),  0.1833904  (boot),  0.04922629  (abs. Fehler) 
## N= 166 
## 0.1666667 :  0.1222293  (exakt),  0.1528499  (boot),  0.03062058  (abs. Fehler) 
## 
## n= 3000 
## N= 1500 
## 0.5 :  0.212132  (exakt),  0.3525232  (boot),  0.1403911  (abs. Fehler) 
## N= 1000 
## 0.3333333 :  0.1732051  (exakt),  0.2702559  (boot),  0.09705078  (abs. Fehler) 
## N= 750 
## 0.25 :  0.15  (exakt),  0.2196364  (boot),  0.0696364  (abs. Fehler) 
## N= 600 
## 0.2 :  0.1341641  (exakt),  0.1791849  (boot),  0.04502081  (abs. Fehler) 
## N= 500 
## 0.1666667 :  0.1224745  (exakt),  0.1466177  (boot),  0.02414318  (abs. Fehler)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# 
# Poisionverteilte:
for(n in c(30, 50, 100, 200, 500, 1000, 3000)) {
  cat(&amp;quot;\nn=&amp;quot;, n, &amp;quot;\n&amp;quot;)
  for(lambda in c(1/2,1/3, 1/4, 1/5, 1/6)) {
    tmp &amp;lt;- printAllSE.poision(n, lambda)
    cat(lambda,&amp;quot;: &amp;quot;, tmp$exakt, &amp;quot; (exakt), &amp;quot;, tmp$boot, &amp;quot; (boot), &amp;quot;, abs(tmp$exakt-tmp$boot), &amp;quot; (abs. Fehler) \n&amp;quot;)
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## n= 30 
## 0.5 :  0.1290994  (exakt),  0.1243969  (boot),  0.004702575  (abs. Fehler) 
## 0.3333333 :  0.1054093  (exakt),  0.1002588  (boot),  0.005150442  (abs. Fehler) 
## 0.25 :  0.09128709  (exakt),  0.08302049  (boot),  0.008266599  (abs. Fehler) 
## 0.2 :  0.08164966  (exakt),  0.07318089  (boot),  0.008468764  (abs. Fehler) 
## 0.1666667 :  0.0745356  (exakt),  0.04481507  (boot),  0.02972053  (abs. Fehler) 
## 
## n= 50 
## 0.5 :  0.1  (exakt),  0.09339713  (boot),  0.006602873  (abs. Fehler) 
## 0.3333333 :  0.08164966  (exakt),  0.06811893  (boot),  0.01353073  (abs. Fehler) 
## 0.25 :  0.07071068  (exakt),  0.06970471  (boot),  0.00100597  (abs. Fehler) 
## 0.2 :  0.06324555  (exakt),  0.05739908  (boot),  0.005846471  (abs. Fehler) 
## 0.1666667 :  0.05773503  (exakt),  0.06721628  (boot),  0.009481251  (abs. Fehler) 
## 
## n= 100 
## 0.5 :  0.07071068  (exakt),  0.07809672  (boot),  0.007386041  (abs. Fehler) 
## 0.3333333 :  0.05773503  (exakt),  0.05174337  (boot),  0.005991656  (abs. Fehler) 
## 0.25 :  0.05  (exakt),  0.04781868  (boot),  0.002181325  (abs. Fehler) 
## 0.2 :  0.04472136  (exakt),  0.04141606  (boot),  0.003305295  (abs. Fehler) 
## 0.1666667 :  0.04082483  (exakt),  0.04997504  (boot),  0.009150211  (abs. Fehler) 
## 
## n= 200 
## 0.5 :  0.05  (exakt),  0.04892444  (boot),  0.001075565  (abs. Fehler) 
## 0.3333333 :  0.04082483  (exakt),  0.03717077  (boot),  0.00365406  (abs. Fehler) 
## 0.25 :  0.03535534  (exakt),  0.03747469  (boot),  0.002119349  (abs. Fehler) 
## 0.2 :  0.03162278  (exakt),  0.02947104  (boot),  0.002151735  (abs. Fehler) 
## 0.1666667 :  0.02886751  (exakt),  0.0281555  (boot),  0.0007120108  (abs. Fehler) 
## 
## n= 500 
## 0.5 :  0.03162278  (exakt),  0.03392637  (boot),  0.002303597  (abs. Fehler) 
## 0.3333333 :  0.02581989  (exakt),  0.02539741  (boot),  0.0004224743  (abs. Fehler) 
## 0.25 :  0.02236068  (exakt),  0.0223629  (boot),  2.223781e-06  (abs. Fehler) 
## 0.2 :  0.02  (exakt),  0.01972995  (boot),  0.0002700514  (abs. Fehler) 
## 0.1666667 :  0.01825742  (exakt),  0.0197222  (boot),  0.001464778  (abs. Fehler) 
## 
## n= 1000 
## 0.5 :  0.02236068  (exakt),  0.02245352  (boot),  9.283735e-05  (abs. Fehler) 
## 0.3333333 :  0.01825742  (exakt),  0.0185596  (boot),  0.0003021789  (abs. Fehler) 
## 0.25 :  0.01581139  (exakt),  0.01669539  (boot),  0.0008840021  (abs. Fehler) 
## 0.2 :  0.01414214  (exakt),  0.0150454  (boot),  0.0009032662  (abs. Fehler) 
## 0.1666667 :  0.01290994  (exakt),  0.01366569  (boot),  0.0007557503  (abs. Fehler) 
## 
## n= 3000 
## 0.5 :  0.01290994  (exakt),  0.01333761  (boot),  0.0004276694  (abs. Fehler) 
## 0.3333333 :  0.01054093  (exakt),  0.01085993  (boot),  0.000319002  (abs. Fehler) 
## 0.25 :  0.009128709  (exakt),  0.008925436  (boot),  0.0002032728  (abs. Fehler) 
## 0.2 :  0.008164966  (exakt),  0.008679877  (boot),  0.0005149115  (abs. Fehler) 
## 0.1666667 :  0.00745356  (exakt),  0.007160364  (boot),  0.0002931957  (abs. Fehler)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;for(n in c(30, 50, 100, 200, 500, 1000, 3000)) {
  tmp &amp;lt;- printAllSE.normal(n)
  cat(&amp;quot;\nn=&amp;quot;, n, &amp;quot;: &amp;quot;, tmp$exakt, &amp;quot; (exakt), &amp;quot;, tmp$boot, &amp;quot; (boot), &amp;quot;, tmp$geschaetzt, &amp;quot;(geschätzt), &amp;quot;, abs(tmp$exakt-tmp$boot), &amp;quot; (abs. Fehler (boot))&amp;quot;, abs(tmp$exakt-tmp$geschaetzt),&amp;quot;(abs. Fehler (geschätzt)) \n&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## n= 30 :  0.1825742  (exakt),  0.1835327  (boot),  0.1860335 (geschätzt),  0.0009585326  (abs. Fehler (boot)) 0.003459307 (abs. Fehler (geschätzt)) 
## 
## n= 50 :  0.1414214  (exakt),  0.1371073  (boot),  0.1374232 (geschätzt),  0.004314035  (abs. Fehler (boot)) 0.003998187 (abs. Fehler (geschätzt)) 
## 
## n= 100 :  0.1  (exakt),  0.1026103  (boot),  0.1027873 (geschätzt),  0.002610263  (abs. Fehler (boot)) 0.002787325 (abs. Fehler (geschätzt)) 
## 
## n= 200 :  0.07071068  (exakt),  0.06443724  (boot),  0.06457342 (geschätzt),  0.006273439  (abs. Fehler (boot)) 0.006137256 (abs. Fehler (geschätzt)) 
## 
## n= 500 :  0.04472136  (exakt),  0.04366336  (boot),  0.04297065 (geschätzt),  0.001057998  (abs. Fehler (boot)) 0.00175071 (abs. Fehler (geschätzt)) 
## 
## n= 1000 :  0.03162278  (exakt),  0.03126506  (boot),  0.03133075 (geschätzt),  0.000357721  (abs. Fehler (boot)) 0.0002920245 (abs. Fehler (geschätzt)) 
## 
## n= 3000 :  0.01825742  (exakt),  0.01858404  (boot),  0.01852834 (geschätzt),  0.0003266222  (abs. Fehler (boot)) 0.0002709226 (abs. Fehler (geschätzt))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Moderator und Mediation - Formen der Interaktion bei Analyse von Zusammenhängen</title>
      <link>https://sefiroth.net/nab/post/moderator-und-mediation-formen-der-interaktion-bei-analyse-von-zusammenhaengen/</link>
      <pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/moderator-und-mediation-formen-der-interaktion-bei-analyse-von-zusammenhaengen/</guid>
      <description>
&lt;script src=&#34;2019-12-31-moderator-und-mediation-formen-der-interaktion-bei-analyse-von-zusammenhängen_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Bei der Analyse von Zusammenhängen tauchen sowohl &lt;em&gt;Moderation&lt;/em&gt; als auch &lt;em&gt;Mediation&lt;/em&gt; auf. Es geht um Zusammenhänge zwischen drei Variablen &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt;.
Untersucht wird der Effekt einer unabhägigen Variable &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; (&lt;em&gt;Prädiktor&lt;/em&gt;, &lt;em&gt;UV&lt;/em&gt;) auf ein abhängige Variable &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; (&lt;em&gt;AV&lt;/em&gt;).
Wir untersuchen dies mit einem Regressionsmodell &lt;span class=&#34;math inline&#34;&gt;\(Y \sim X\)&lt;/span&gt;.
Dabei wird zusätzlich eine dritte Variable &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; berücksichtigt, die man entweder der &lt;em&gt;Moderator&lt;/em&gt; oder &lt;em&gt;Mediator&lt;/em&gt; nennt.&lt;/p&gt;
&lt;p&gt;Ist die abhängige Variable metrisch, so können wir mittels eine linearer Regression vorgehen, ist die AB dagegen dichotom, so nutzen wir eine logistische Regression.&lt;/p&gt;
&lt;div id=&#34;moderation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Moderation&lt;/h2&gt;
&lt;p&gt;Bei einer &lt;em&gt;Moderation&lt;/em&gt; wirkt die dritte Variable &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; (&lt;em&gt;Moderator&lt;/em&gt;) auf die Beziehung zwischen &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2019-12-31-moderator-und-mediation-formen-der-interaktion-bei-analyse-von-zusammenha%CC%88ngen_files/figure-html/Moderation-1.png&#34; width=&#34;30%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Der Einfluss von &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; ändert also den Effekt von &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; auf &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt;. Der Zusammenhang zwischen &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; ist also je nach &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; unterschiedlich.&lt;/p&gt;
&lt;p&gt;Statistisch gesehen liegt eine &lt;em&gt;Interaktion&lt;/em&gt; zwischen &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; vor.&lt;/p&gt;
&lt;div id=&#34;wie-untersucht-man-einen-zusammenhang-auf-eine-moderation&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Wie untersucht man einen Zusammenhang auf eine Moderation?&lt;/h3&gt;
&lt;p&gt;Dazu stellen wir ein Regressionsmodell mit den drei Faktoren &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; und der Interaktion zwischen &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; auf.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lm(Y ~ X * M, data=daten)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oder alternativ:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lm(Y ~ X + M + M:X, data=daten)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Diese drei Faktoren wirken auf &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt;. Ist in diesem Modell die Interaktion &lt;span class=&#34;math inline&#34;&gt;\(M:X\)&lt;/span&gt; &lt;em&gt;signifikant&lt;/em&gt;, so liegt eine (signifikante) &lt;em&gt;Moderation&lt;/em&gt; vor.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;mediation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Mediation&lt;/h2&gt;
&lt;p&gt;Bei der &lt;em&gt;Mediation&lt;/em&gt; steht die Variable &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; (der &lt;em&gt;Mediator&lt;/em&gt;) sowohl zu &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; als auch zu &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; in Beziehung.
Der direkte Effekt zwischen &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; wird durch den indirekten Effekt über &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; erklärt, also durch
&lt;span class=&#34;math inline&#34;&gt;\(X \to M \to Y\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2019-12-31-moderator-und-mediation-formen-der-interaktion-bei-analyse-von-zusammenha%CC%88ngen_files/figure-html/Mediator-1.png&#34; width=&#34;30%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;wie-untersucht-man-auf-eine-mediation&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Wie untersucht man auf eine Mediation?&lt;/h3&gt;
&lt;p&gt;In diesem Fall stellen wir mehrere Regressionsmodelle auf. Eine (signifikante) Mediation liegt dann vor, wenn die folgenden Bedinungen erfüllt sind:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;erstesModell &amp;lt;- lm(Y ~ X, data=daten)
zweitesModell &amp;lt;- lm(M ~ X, data=daten)
drittesModell &amp;lt;- lm(Y ~ X + M, data=daten)&lt;/code&gt;&lt;/pre&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Im ersten Modell (&lt;span class=&#34;math inline&#34;&gt;\(X \to Y\)&lt;/span&gt;) ist der Regressionskoeffizient von &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; signifikant.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Im zweiten Modell (&lt;span class=&#34;math inline&#34;&gt;\(X \to M\)&lt;/span&gt;) ist der Regressionskoeffizient von &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; signifikant.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Im dritten Modell (&lt;span class=&#34;math inline&#34;&gt;\(X,M \to Y\)&lt;/span&gt;) ist der Regressionskoeffizient von &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; signifikant und&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;der Regressionskoeffizient von &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; im dritten Modell kleiner als im ersten Modell.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Die ersten Schritte zur Prognose mitteles linearer Regression</title>
      <link>https://sefiroth.net/nab/post/die-ersten-schritte-zur-prognose-mitteles-linearer-regression/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/die-ersten-schritte-zur-prognose-mitteles-linearer-regression/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Prognosen sind ein wichtiger Bestandteil von Data Science und ist durchaus nicht nur auf moderne Ansätze, wie Neuronale Netze, deep lerning etc. begrenzt. Auch die gute, alte Regression kann ein sehr sinnvolles Mittel sein solche Prognosen zu erstellen.&lt;/p&gt;
&lt;p&gt;Um ein wenig die Ideen hinter Prognosen zu beleuchten wollen wir uns an Prognosen mit dem &lt;strong&gt;tipping&lt;/strong&gt;-Daten heranwagen.&lt;/p&gt;
&lt;div id=&#34;einlesen-der-tipping-daten&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Einlesen der tipping-Daten&lt;/h2&gt;
&lt;p&gt;Zuerst laden wir die notwenidgen Pakete:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mosaic)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Falls die &lt;strong&gt;tipping&lt;/strong&gt;-Daten noch nicht im Verzeichnis liegen, laden wir sie aus dem Internet nach:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!file.exists(&amp;quot;tips.csv&amp;quot;)) {
  download.file(&amp;quot;https://goo.gl/whKjnl&amp;quot;, destfile = &amp;quot;tips.csv&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nun laden wir die &lt;strong&gt;tipping&lt;/strong&gt;-Daten in den Speicher in den Datenrahmen &lt;code&gt;tips&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tips &amp;lt;- read.csv2(&amp;quot;tips.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wir werfen einen ersten Blick auf die &lt;strong&gt;tipping&lt;/strong&gt;-Daten:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;inspect(tips)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## categorical variables:  
##     name     class levels   n missing
## 1    sex character      2 244       0
## 2 smoker character      2 244       0
## 3    day character      4 244       0
## 4   time character      2 244       0
##                                    distribution
## 1 Male (64.3%), Female (35.7%)                 
## 2 No (61.9%), Yes (38.1%)                      
## 3 Sat (35.7%), Sun (31.1%), Thur (25.4%) ...   
## 4 Dinner (72.1%), Lunch (27.9%)                
## 
## quantitative variables:  
##            name   class  min      Q1 median      Q3   max      mean        sd
## ...1 total_bill numeric 3.07 13.3475 17.795 24.1275 50.81 19.785943 8.9024120
## ...2        tip numeric 1.00  2.0000  2.900  3.5625 10.00  2.998279 1.3836382
## ...3       size integer 1.00  2.0000  2.000  3.0000  6.00  2.569672 0.9510998
##        n missing
## ...1 244       0
## ...2 244       0
## ...3 244       0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;vorbereiten-der-test-trainings--und-auswertungesdaten&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Vorbereiten der Test-/Trainings- und Auswertungesdaten&lt;/h2&gt;
&lt;p&gt;Zunächst schränken wir die &lt;strong&gt;tipping&lt;/strong&gt;-Daten auf die Variabeln “total_bill”, “sex”, “smoker”, “day”, “time”, “size” ein und speichern das Ergebnis wieder in &lt;code&gt;tips&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tips %&amp;gt;%
    select(c(&amp;quot;total_bill&amp;quot;, &amp;quot;sex&amp;quot;, &amp;quot;smoker&amp;quot;, &amp;quot;day&amp;quot;, &amp;quot;time&amp;quot;, &amp;quot;size&amp;quot;)) -&amp;gt; tips&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ziel ist es, den Rechnungsbetrag (“total_bill”) auf Grundlage der Variabeln “sex”, “smoker”, “day”, “time” und/oder “size” vorherzusagen.&lt;/p&gt;
&lt;p&gt;Wir teilen den tipping-Datensatz auf in eine Trainingsdatensatz (“tipstrain”), einem Testdatensatz (“tipstest”) und einem Prüfdatensatz (“tipspruef”).
Der Trainingsdatensatz sollte rund zweidrittel der Daten die wir haben umfassen.
Der Testdatensatz die restlich ca. eindrittel.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;trainings_anteil = 2/3

# n.train ist ein Index für alle Werte, 
# die wir im Trainingsdatensatz haben wollen:
x.train &amp;lt;- sample(1:nrow(tips), floor(trainings_anteil*nrow(tips)))

# Trainingsdatensatz erstellen:
tipstrain &amp;lt;- slice(tips, x.train)

# Prüfdatensatz erstellen, also alles was 
# nicht in den Trainingsdatensatz gekommen ist:
tipspruef &amp;lt;- slice(tips, -(x.train))

# Der Testdatensatz ist der Prüfdatensatz 
# ohne die Variable total_bill:
tipspruef %&amp;gt;% 
    select(-total_bill) -&amp;gt; tipstest&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mit dem Tainingsdatensatz versuchen wir nun ein Prognosemodell zu erstellen, um aus den Testdatensatz eine Prognose für “total_bill” zu erstellen.&lt;/p&gt;
&lt;p&gt;Das Prognose-Modell wird ausschließlich auf Grundlage des Trainingsdatensatzes erstellt. Am Ende wollen wir unser Modell dann aber mit Hilfe des Prüfdatensatzes bewertet.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;die-datenlage&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Die Datenlage&lt;/h2&gt;
&lt;p&gt;Ein (paar) Blick(e) auf unsere Trainingsdaten:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_point(total_bill ~ jitter(size), color=~time, data=tipstrain)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2019-12-18-die-ersten-schritte-zur-prognose-mitteles-linearer-regression_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_point(total_bill ~ day | time, color = ~ sex, data=tipstrain)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2019-12-18-die-ersten-schritte-zur-prognose-mitteles-linearer-regression_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;prognosemodel-nullmodell&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Prognosemodel: Nullmodell&lt;/h2&gt;
&lt;div id=&#34;aufstellen-des-nullmodel-aka-regression-mit-der-achse&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Aufstellen des Nullmodel aka Regression mit der Achse&lt;/h3&gt;
&lt;p&gt;Wir erstellen das Nullmodell wie folgt:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lm.null &amp;lt;- lm( total_bill ~ 1, data=tipstrain)
summary(lm.null)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = total_bill ~ 1, data = tipstrain)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -13.159  -6.989  -2.429   4.171  30.401 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept)  20.4086     0.7311   27.91   &amp;lt;2e-16 ***
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 9.306 on 161 degrees of freedom&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Das Nullmodell sagt in jedem Fall den Rechnungsbetrag vorher als den Mittelwert der Trainingsdaten!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mean(~ total_bill, data=tipstrain)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 20.40864&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nun bestimmten wir mit Hilfe des Nullmodells “lm.null” eine Vorhersage für die Testdaten:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;predict.null &amp;lt;- predict(lm.null, newdata=tipstest)
head(predict.null)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        1        2        3        4        5        6 
## 20.40864 20.40864 20.40864 20.40864 20.40864 20.40864&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wie gesagt, das Nullmodell liefert als Prognose immer den Mittelwert der Trainingsdaten zurück,
das mathematische Nullmodell lautet also:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\widehat{total\_bill_i} = 20.408642  \]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;auswertung-des-nullmodells&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Auswertung des Nullmodells&lt;/h3&gt;
&lt;p&gt;Zur Auswertung Nutzen wir den &lt;em&gt;mittleren Absolutabstand&lt;/em&gt; zwischen der Vorhersage und den Prüfdaten:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;maa.null &amp;lt;-sum( abs( tipspruef$total_bill - predict.null))
maa.null&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 544.772&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;prognosemodell-lineare-regression-gegen-size-als-metrischer-wert&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Prognosemodell: Lineare Regression gegen “size” als metrischer Wert&lt;/h2&gt;
&lt;div id=&#34;aufstellen-des-modells&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Aufstellen des Modells&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;auswertung-des-regressionsmodell&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Auswertung des Regressionsmodell&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Statistik21</title>
      <link>https://sefiroth.net/nab/publication/statistik21/</link>
      <pubDate>Wed, 25 Sep 2019 00:00:00 +0200</pubDate>
      <guid>https://sefiroth.net/nab/publication/statistik21/</guid>
      <description></description>
    </item>
    
    <item>
      <title>SBI - Simulation Based Inference</title>
      <link>https://sefiroth.net/nab/post/sbi-simulation-based-inference/</link>
      <pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/sbi-simulation-based-inference/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Wenn meine Tochter &lt;em&gt;SBI&lt;/em&gt; hört, denkt sie an &lt;em&gt;Sally Bollywood Investigation&lt;/em&gt;. – Und ich oft auch. – Mit &lt;em&gt;SBI&lt;/em&gt; ist hier aber nicht der Trickfilm für Kinder, sondern &lt;em&gt;&lt;strong&gt;S&lt;/strong&gt;imulation &lt;strong&gt;B&lt;/strong&gt;ased &lt;strong&gt;I&lt;/strong&gt;nference&lt;/em&gt;, gemeint.&lt;/p&gt;
&lt;p&gt;Angestachelt von Prof. Dr. Karsten Lübke und im Schlepptau von Prof. Dr. Oliver Gansser, Prof. Dr. Matthias Gehrke und Prof. Dr. Bianca Krol haben ein paar kluge Köpfe bei der &lt;a href=&#34;http://www.fom.de&#34;&gt;FOM&lt;/a&gt; den Unterricht für Statistik auf eine neue Grundlage gestellt.
Und ich habe das Glück gehabt,dabei mitwirken zu dürfen.&lt;/p&gt;
&lt;p&gt;Unser Mastermind, Karsten Lübke, hat dazu einen sehr schönen und lesenswerten Blog-Eintrag geschrieben: &lt;a href=&#34;https://www.causeweb.org/sbi/?p=1559&#34; class=&#34;uri&#34;&gt;https://www.causeweb.org/sbi/?p=1559&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ein wenig schneller zur simulierten Nullverteilung</title>
      <link>https://sefiroth.net/nab/post/ein-wenig-schneller-zur-simulierten-nullverteilung/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/ein-wenig-schneller-zur-simulierten-nullverteilung/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/d3/d3.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/profvis/profvis.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/profvis/profvis.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/profvis/scroll.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/highlight/textmate.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/highlight/highlight.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/profvis-binding/profvis.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Ein Nullhypothesentest ist schnell geschrieben.
Will man den approximativen Weg gehen, so hilft &lt;strong&gt;R&lt;/strong&gt; einem mit entsprechenden Tests mit einfachen Befehlen.
Nimmt man &lt;strong&gt;MOSAIC&lt;/strong&gt; dazu, so bekommt man u.a. für den Test auf Anteils- oder Mittelwerte sogar einen sehr einfachen, weil einheitlichen, Syntax.&lt;/p&gt;
&lt;div id=&#34;zwei-beispiele-für-approximative-hypothesentests-mit-mosaic&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Zwei Beispiele für approximative Hypothesentests mit MOSAIC&lt;/h3&gt;
&lt;p&gt;Laden wir unsere Testdaten, die &lt;strong&gt;tipping&lt;/strong&gt; Daten wie folgt:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mosaic)
download.file(&amp;quot;https://goo.gl/whKjnl&amp;quot;, destfile = &amp;quot;tips.csv&amp;quot;)
tips &amp;lt;- read.csv2(&amp;quot;tips.csv&amp;quot;)
set.seed(2009)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dann erstellen wir zwei Forschungsfragen:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Ist der mittlere Frauenanteil unter der Bezahler*innen zu den Zeitpunkten Lunch und Dinner gleich?&lt;/li&gt;
&lt;li&gt;Ist der mittlere Rechnungsbetrag zu den Zeitpunkten Lunch und Dinner gleich?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Im ersten Fall ist die Hypothese schnell geschrieben:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
H_0 : \pi_{\text{Lunch}} = \pi_{\text{Dinner}} \quad\text{vs.}\quad H_1 : \pi_{\text{Lunch}} \neq \pi_{\text{Dinner}}
\]&lt;/span&gt;
Der approximative Test mit R und MOSAIC lautet nun:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;prop.test(sex ~ time, success = &amp;quot;Female&amp;quot;, data = tips)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  2-sample test for equality of proportions with continuity correction
## 
## data:  tally(sex ~ time)
## X-squared = 9.3438, df = 1, p-value = 0.002237
## alternative hypothesis: two.sided
## 95 percent confidence interval:
##  -0.36602563 -0.07247705
## sample estimates:
##    prop 1    prop 2 
## 0.2954545 0.5147059&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ähnlich sieht es für den zweiten Fall aus. Die Hypothese lautet hier:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
H_0 : \mu_{Lunch} = \mu_{Dinner} \quad\text{vs.}\quad H_1 : \mu_{Lunch} \neq \mu_{Dinner}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Der dazugehörige Test lautet dann:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;t.test(total_bill ~ time, data = tips)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Welch Two Sample t-test
## 
## data:  total_bill by time
## t = 3.123, df = 143.29, p-value = 0.002167
## alternative hypothesis: true difference in means between group Dinner and group Lunch is not equal to 0
## 95 percent confidence interval:
##  1.331877 5.925088
## sample estimates:
## mean in group Dinner  mean in group Lunch 
##             20.79716             17.16868&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;simulation-der-nullverteilung-mit-mosaic&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Simulation der Nullverteilung mit MOSAIC&lt;/h2&gt;
&lt;p&gt;Ein anderer Weg ist es die Stichprobe selber zu nutzen um daraus eine Verteilung der Nullhypothese (die Nullverteilung) ableiten zu können.
Im ersten Fall schaut man sich die Anteilsunterschiede an, wenn man die (potentielle) Abhängigkeit von der Tageszeit (Lunch und Dinner) künstlich “abschaltet”:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(2009)
NullVtlgAntwert &amp;lt;- do(10000) * diffprop(sex ~ shuffle(time),
    success = &amp;quot;Female&amp;quot;, data = tips)
gf_histogram(~diffprop, nint = 25, data = NullVtlgAntwert)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-05-02-ein-wenig-schneller-zur-simulierten-nullverteilung_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Schaut man sich nun die Lage der Anteilsdifferenz der Stichprobe &lt;span class=&#34;math inline&#34;&gt;\(\hat\pi=0.2192513\)&lt;/span&gt; in Bezug auf diese Nullverteilung geometrisch an, so kann man schon einen ersten Eindruck erlangen, ob die Nullhypothese abzulehnen ist oder nicht:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;diffpropdach &amp;lt;- diffprop(sex ~ time, success = &amp;quot;Female&amp;quot;, data = tips)
gf_histogram(~diffprop, nint = 25, data = NullVtlgAntwert) +
    geom_vline(xintercept = diffpropdach, color = &amp;quot;blue&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-05-02-ein-wenig-schneller-zur-simulierten-nullverteilung_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Offenbar ist &lt;span class=&#34;math inline&#34;&gt;\(\hat\pi\)&lt;/span&gt; kein sehr häufiges Ereignis.&lt;/p&gt;
&lt;p&gt;Der &lt;em&gt;p-Wert&lt;/em&gt; ist ebenfalls leicht zu ermitteln:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pvalue_aw &amp;lt;- prop(~abs(diffprop) &amp;gt;= abs(diffpropdach), data = NullVtlgAntwert)
pvalue_aw&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## prop_TRUE 
##    0.0018&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mit einem Anteilswert (p-Wert) von 0.0018 zweigen wir wie selten das Ereignis unter der &lt;span class=&#34;math inline&#34;&gt;\(H_0\)&lt;/span&gt; ist.&lt;/p&gt;
&lt;p&gt;Ähnlich sieht die Situation im zweien Fall aus. Mit Hilfe weniger Befehle erzeugen wir die Nullverteilung:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(2009)
NullVtlgMittelwert &amp;lt;- do(10000) * diffmean(total_bill ~ shuffle(time),
    data = tips)
gf_histogram(~diffmean, nint = 25, data = NullVtlgMittelwert)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-05-02-ein-wenig-schneller-zur-simulierten-nullverteilung_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Und können im Anschluss die Mittelwertsdifferenz der Stichprobe geometrisch einordnen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;diffmeandach &amp;lt;- diffmean(total_bill ~ time, data = tips)
gf_histogram(~diffmean, nint = 25, data = NullVtlgMittelwert) +
    geom_vline(xintercept = diffmeandach, color = &amp;quot;blue&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-05-02-ein-wenig-schneller-zur-simulierten-nullverteilung_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Auch den &lt;em&gt;p-Wert&lt;/em&gt; können wir wieder leicht bestimmen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pvalue_mw &amp;lt;- prop(~abs(diffmean) &amp;gt;= abs(diffmeandach), data = NullVtlgMittelwert)
pvalue_mw&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## prop_TRUE 
##    0.0047&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;das-problem-zeit&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Das Problem – Zeit&lt;/h2&gt;
&lt;p&gt;Das Problem bei der Simulation ist die Zeit, die &lt;strong&gt;R&lt;/strong&gt; braucht um die Nullverteilungen zu generieren.
Das liegt im wesentlichen an Mosaic.
Mit den Routinen aus &lt;a href=&#34;https://github.com/NMarkgraf/FastSimNullDistR&#34;&gt;FastSimNullDistR&lt;/a&gt; lassen sich die Nullverteilungen deutlich schneller berechnen.
Ein Vergleich:&lt;/p&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:600px;&#34; class=&#34;profvis html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;message&#34;:{&#34;prof&#34;:{&#34;time&#34;:[1,1,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,10,10,10,10,10,11,11,11,11,11,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,14,14,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,21,21,22,22,22,22,22,23,23,23,23,23,23,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,39,39,39,39,39,39,39,40,40,40,40,40,40,40,41,41,41,41,41,42,42,42,42,42,43,43,43,43,43,44,44,44,44,44,45,45,45,45,45,45,45,45,46,46,46,46,46,47,47,47,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,49,50,50,50,50,50,50,51,51,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,55,55,55,55,56,56,57,57,57,57,57,58,58,58,58,58,58,58,59,59,59,59,59,59,60,60,60,60,60,60,61,61,61,61,61,61,61,62,62,62,62,62,62,62,63,63,63,63,63,63,63,64,64,64,64,64,64,64,65,65,65,65,65,65,65,66,66,66,66,66,66,66,67,67,67,67,67,68,68,68,68,68,69,69,69,69,69,70,70,70,70,70,71,71,71,71,71,72,72,72,72,72,73,73,73,73,73,73,73,73,74,74,74,74,74,74,75,75,76,76,76,76,76,76,76,77,77,78,78,78,78,78,78,78,78,78,78,78,79,79,79,79,79,79,79,80,80,80,80,80,80,80,80,81,81,81,81,81,81,81,82,82,83,83,83,83,83,83,83,83,83,83,83,84,84,84,84,84,85,85,85,85,85,85,85,85,85,86,86,86,87,87,87,87,87,87,88,88,88,88,88,88,88,89,89,89,89,89,89,89,89,89,89,89,89,89,90,90,91,91,91,91,91,92,92,92,92,92,92,92,92,93,93,94,94,94,94,94,94,94,94,95,95,95,95,95,95,95,96,96,96,96,96,96,96,97,97,97,97,97,97,98,98,98,98,98,98,98,98,98,99,99,100,100,100,100,100,100,100,100,100,100,101,101,102,102,102,102,102,102,102,103,103,103,103,103,103,103,103,103,104,104,104,104,104,105,105,105,105,105,105,105,105,105,106,106,106,106,106,106,106,106,106,106,107,107,108,108,108,108,108,108,109,109,109,109,109,109,109,110,110,110,110,110,110,110,110,111,111,111,111,111,111,111,111,112,112,112,112,112,112,112,112,113,113,113,113,113,113,113,113,114,114,115,115,115,115,115,115,115,115,115,115,115,116,116,116,116,116,116,116,116,116,117,117,117,117,117,117,117,118,118,118,118,118,118,118,118,119,119,119,119,119,120,120,120,120,120,121,121,121,121,121,121,121,121,121,121,121,122,122,122,122,122,122,122,122,122,122,122,122,122,123,123,123,123,123,123,123,123,123,123,123,124,124,124,124,124,125,125,125,125,125,126,126,126,126,126,126,126,127,127,127,127,127,127,127,127,127,127,128,128,128,128,128,128,128,128,129,129,129,129,129,129,130,130,130,130,130,130,130,131,131,131,131,131,131,131,131,132,132,132,132,132,132,132,132,133,133,133,133,133,133,133,133,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,135,136,136,137,137,137,137,137,138,138,138,138,138,138,138,138,139,139,139,139,139,139,139,139,139,140,140,140,140,140,140,141,141,141,141,141,141,142,142,142,142,142,143,143,143,143,143,144,144,144,144,144,144,144,144,145,145,145,145,145,146,146,146,146,146,146,146,146,147,147,148,148,149,149,149,149,149,150,150,150,150,150,150,150,150,150,150,151,151,151,151,151,151,152,152,152,152,152,152,152,152,152,153,153,153,153,153,153,153,154,154,154,154,154,154,155,155,156,156,156,156,156,156,156,157,157,157,157,157,157,157,157,158,158,158,158,158,158,158,158,159,159,159,159,159,159,159,159,159,159,159,160,160,160,160,160,160,160,160,160,160,160,161,161,161,161,161,161,161,161,162,162,162,162,162,162,162,163,163,163,163,163,163,163,164,164,164,164,164,164,165,165,165,165,165,165,165,165,165,166,166,166,166,166,166,166,167,167,167,167,167,167,167,168,168,168,168,168,168,168,169,169,170,170,170,170,170,170,170,170,171,171,171,171,171,171,171,171,172,172,172,173,173,173,173,173,173,173,173,174,174,174,175,175,175,175,175,175,175,175,176,176,176,176,176,176,176,176,176,176,176,177,177,177,177,177,177,177,177,177,177,177,177,178,178,178,178,178,178,178,179,179,179,179,179,179,179,179,179,179,180,180,180,180,180,181,181,181,181,181,182,182,182,182,182,182,182,182,182,182,183,183,184,184,184,184,184,185,185,185,185,185,185,185,185,185,185,185,185,185,186,186,186,186,186,186,186,186,186,187,187,187,187,187,187,188,188,189,189,189,189,189,189,189,189,190,190,190,190,190,190,190,190,191,191,191,191,191,191,191,191,192,192,193,193,193,193,193,193,193,194,194,194,194,194,195,195,195,195,195,196,196,196,196,196,197,197,197,197,197,197,197,198,198,198,198,198,199,199,199,199,199,199,199,200,200,201,201,202,202,202,202,202,202,202,202,202,202,203,203,204,204,204,204,204,204,204,204,205,205,205,205,205,205,206,206,206,206,206,207,207,207,207,207,207,207,208,208,208,208,208,208,208,209,209,209,209,209,209,209,210,210,210,210,210,210,210,211,211,211,211,211,212,212,212,212,212,212,212,212,212,213,213,213,213,213,213,213,213,214,214,214,214,214,214,215,215,215,216,216,216,216,216,216,217,217,217,217,217,217,217,218,218,218,218,218,218,218,219,219,219,219,219,219,219,219,219,220,220,220,220,220,220,220,221,221,221,221,221,221,221,221,221,221,222,222,222,222,222,222,222,223,223,223,223,223,223,223,223,223,223,224,224,224,224,224,224,224,225,225,226,226,226,226,226,226,226,227,227,227,227,227,227,227,227,228,228,228,228,228,228,228,228,228,228,229,229,229,229,229,230,230,230,230,230,231,231,231,231,231,231,231,232,232,233,233,233,233,233,233,234,234,234,234,234,234,234,234,234,234,234,235,235,235,235,235,236,236,236,236,236,236,236,236,236,236,236,236,237,237,237,237,237,237,237,237,237,237,237,238,238,238,238,238,239,239,239,239,239,239,239,239,239,239,239,240,240,240,240,240,240,240,241,241,241,241,241,241,241,241,242,242,242,242,242,243,243,243,243,243,243,243,243,244,244,244,244,244,244,244,245,245,245,245,245,245,245,245,245,245,246,246,246,246,246,246,246,246,246,246,247,247,247,247,247,248,248,249,249,250,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,251,251,252,252,252,252,253,253,253,253,253,253,253,254,254,254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,256,256,256,256,256,256,256,257,257,257,257,257,257,258,258,258,258,258,258,258,259,259,259,259,259,260,260,260,260,260,260,260,260,261,261,261,261,261,261,261,262,262,262,262,262,262,262,262,262,263,263,263,263,263,263,263,263,264,264,264,264,264,264,264,265,265,265,265,265,265,265,265,265,265,266,266,266,266,266,267,267,268,268,268,268,268,269,269,270,270,270,270,270,270,270,270,270,270,270,271,271,271,271,272,272,272,273,273,273,273,273,273,273,273,273,273,273,274,274,274,274,274,274,274,274,275,275,275,275,275,275,275,275,275,275,275,275,275,276,276,276,276,276,276,276,276,277,277,277,277,277,277,277,278,278,278,278,278,278,278,278,278,279,279,279,280,280,280,280,280,280,280,281,281,281,281,281,281,281,281,281,281,282,282,282,282,282,282,282,283,283,283,283,283,283,283,283,283,283,283,283,283,283,284,284,284,285,285,285,285,285,285,285,285,286,286,286,286,286,286,286,287,287,287,287,287,287,287,287,288,288,289,289,289,289,289,289,289,289,289,289,289,290,290,290,290,290,290,291,291,291,291,291,291,291,291,291,291,292,292,292,292,292,292,292,292,292,292,293,293,293,293,293,293,293,294,294,295,295,295,295,295,295,295,295,295,295,296,296,296,296,296,296,296,297,297,297,297,297,298,298,298,298,298,298,298,299,299,299,299,299,300,300,300,300,300,300,300,300,301,301,301,301,301,301,301,301,301,301,301,302,302,302,303,303,303,303,303,303,303,303,304,304,304,304,304,304,304,304,304,304,305,305,305,305,305,305,305,305,305,306,306,307,307,307,307,307,307,307,308,308,308,308,308,308,308,308,308,309,309,309,309,309,309,309,309,309,309,310,310,310,310,310,310,310,310,310,310,311,311,311,311,311,311,311,312,312,312,312,312,313,313,313,313,313,313,314,314,314,314,314,314,314,315,315,316,316,316,316,316,316,316,317,317,317,317,317,317,317,317,318,318,318,318,318,318,318,318,318,318,318,318,318,319,319,319,319,319,319,319,319,319,319,320,320,320,320,320,320,321,321,322,322,322,322,322,322,322,322,322,322,323,323,323,323,323,323,323,324,324,325,325,325,325,325,325,325,326,326,327,327,327,327,327,327,327,327,327,328,328,328,328,328,328,328,328,328,328,328,328,329,329,329,329,330,330,330,330,330,330,331,331,331,331,331,332,332,332,332,332,332,332,332,333,333,333,334,334,334,334,334,335,335,335,335,335,335,335,336,336,336,336,336,336,337,337,338,338,338,338,339,339,339,339,339,340,340,340,340,340,340,341,341,341,341,341,341,341,341,341,341,341,342,342,343,343,343,343,343,343,343,343,344,344,344,344,344,344,344,344,345,345,345,345,345,345,345,345,346,346,346,346,346,346,346,346,346,347,347,347,347,347,347,348,348,348,348,348,348,349,349,350,350,350,350,350,350,350,350,351,351,351,351,351,351,351,351,352,352,352,353,353,353,353,353,353,353,354,354,354,354,354,354,354,355,355,355,355,355,355,355,356,356,356,356,356,356,356,356,356,356,357,357,357,357,357,358,358,358,358,358,358,358,358,359,359,359,359,359,359,359,359,360,360,360,360,360,360,360,360,360,360,361,361,362,362,362,362,362,362,362,362,362,362,362,363,363,363,363,363,363,363,364,364,364,364,364,364,364,364,364,365,365,365,365,365,365,365,365,365,365,365,366,366,366,366,366,366,366,366,366,366,367,367,367,367,367,368,368,368,368,368,368,368,368,368,369,369,369,369,369,369,369,369,369,369,370,370,370,370,370,370,371,371,371,371,371,371,371,372,372,372,372,372,373,373,373,373,373,373,373,374,374,374,374,374,374,374,374,374,374,374,375,375,375,375,375,375,375,375,376,376,377,377,377,377,377,377,377,377,378,378,378,378,378,378,378,379,379,379,379,379,379,379,379,379,380,380,380,380,380,380,380,380,381,381,381,381,381,381,381,381,381,381,381,382,382,382,382,382,382,382,382,383,383,383,383,383,383,384,384,384,384,384,385,385,385,385,385,385,385,386,386,386,386,386,386,386,386,386,386,386,386,386,387,387,387,387,387,387,387,387,388,388,388,388,388,388,388,388,388,388,388,388,389,389,389,389,389,389,389,389,390,390,391,391,391,391,391,391,392,392,392,392,392,393,393,393,393,393,394,394,395,395,395,396,396,397,397,397,397,397,397,397,398,398,398,398,398,398,398,398,398,398,399,399,399,399,399,399,399,399,399,399,399,399,400,400,400,400,400,400,400,401,401,401,401,401,401,401,402,402,402,402,402,402,402,403,403,403,403,403,403,403,404,404,405,405,405,405,405,405,405,406,406,406,406,407,407,407,407,407,407,407,407,408,408,408,408,408,408,408,408,408,408,409,409,409,409,409,410,410,410,410,410,410,410,410,411,411,411,411,411,411,411,412,412,412,412,412,412,412,412,412,412,413,413,413,413,413,413,413,413,414,414,414,414,414,414,414,415,415,415,415,415,415,415,416,416,416,416,416,416,416,416,417,417,417,417,418,418,419,419,419,419,419,419,419,419,420,420,420,420,420,420,420,420,421,421,422,422,422,423,423,423,423,423,423,423,424,424,424,424,424,424,424,425,425,426,426,426,426,426,426,426,427,427,427,427,427,427,428,428,429,429,429,429,429,429,430,430,430,430,430,431,431,431,431,431,431,431,432,432,432,432,432,432,432,432,433,433,433,433,433,433,433,434,434,434,434,435,435,435,435,435,435,435,435,436,436,436,436,436,436,436,436,437,437,437,437,437,437,438,438,438,438,438,438,438,438,438,438,438,439,439,439,439,439,439,439,440,440,440,440,440,440,441,441,441,441,441,442,442,442,442,442,442,442,442,442,443,443,443,443,443,443,443,443,444,444,444,444,444,444,444,444,444,444,444,444,445,445,445,445,445,445,446,446,446,446,446,446,447,447,447,447,447,447,447,447,447,448,448,448,448,448,448,448,448,448,448,449,449,449,449,449,449,449,449,450,450,450,450,450,450,451,451,451,451,451,451,451,451,451,452,452,453,453,453,453,453,453,453,453,453,454,454,454,454,454,454,454,454,454,454,454,454,454,454,455,455,455,455,455,456,456,456,456,456,456,456,456,457,457,457,457,457,457,457,457,457,458,458,458,458,458,458,458,459,459,459,459,459,459,460,460,460,460,460,460,460,461,461,461,461,461,461,461,462,462,463,463,463,463,463,464,464,464,464,464,464,464,464,464,464,465,465,465,465,465,465,465,465,465,465,465,465,465,466,466,466,466,466,466,466,466,467,467,467,467,467,467,467,467,468,468,468,468,468,468,468,469,469,469,469,469,469,469,469,470,470,470,470,470,470,470,471,471,471,471,471,472,472,472,473,473,473,473,473,473,473,473,474,474,475,475,475,475,475,475,475,475,476,476,476,476,476,476,476,476,477,477,477,477,477,477,478,478,478,478,478,478,479,479,479,479,479,480,480,480,480,480,480,480,480,480,481,481,481,481,481,482,482,482,482,482,482,483,483,483,483,483,484,484,484,484,484,484,484,485,485,485,485,485,485,486,486,486,486,486,486,486,486,486,486,487,487,487,487,487,487,487,488,488,488,488,488,488,488,489,489,489,489,489,489,489,489,490,490,490,491,491,491,491,491,491,491,492,492,492,492,492,493,493,493,493,493,493,493,493,494,494,495,495,495,495,495,495,496,496,496,496,496,496,496,496,496,496,497,497,497,497,497,497,497,497,498,498,499,499,499,499,499,499,499,499,500,500,500,500,500,500,500,501,501,501,501,501,501,501,501,502,502,502,502,502,502,502,502,502,503,503,504,504,504,504,504,504,504,504,505,505,505,505,505,505,505,506,506,506,506,506,506,506,506,506,507,507,508,508,508,508,508,508,508,508,508,508,509,509,510,510,510,510,510,510,511,511,511,511,511,511,511,511,511,512,512,512,512,512,512,513,513,513,513,513,513,513,513,513,513,514,514,514,514,514,515,515,515,515,515,515,515,515,516,516,516,516,516,516,516,516,517,517,517,517,517,517,518,518,518,518,518,518,518,518,518,518,519,519,520,520,520,520,520,520,521,521,521,521,521,521,521,522,522,522,522,522,522,522,523,523,523,524,524,524,524,524,524,524,525,525,525,525,525,525,525,525,526,526,526,526,526,526,526,527,527,527,527,528,528,529,529,529,529,529,529,530,530,530,531,531,531,531,531,532,532,532,532,532,532,532,532,533,533,533,533,533,533,533,533,534,534,534,534,534,534,534,535,535,535,536,536,536,536,536,536,536,536,536,536,536,536,537,537,537,537,537,538,538,538,538,538,539,539,539,539,539,539,539,539,539,539,540,540,540,540,540,540,540,540,541,541,542,542,543,543,543,543,543,543,543,543,544,544,544,544,544,545,545,545,545,545,545,545,545,546,546,546,546,546,546,547,547,547,547,547,547,547,548,548,548,548,548,548,549,549,549,549,549,549,549,549,549,550,550,550,550,550,550,551,551,552,552,552,552,552,552,552,552,553,553,553,553,553,553,553,554,554,554,554,554,554,555,555,555,555,555,555,555,555,556,556,557,557,558,558,559,559,559,559,559,559,559,559,560,560,560,560,560,560,560,560,560,561,561,561,561,561,561,561,562,562,562,562,562,562,562,563,563,563,563,563,563,563,563,564,564,564,564,564,564,564,565,565,565,565,565,565,565,565,565,566,566,566,566,566,566,566,567,567,567,567,567,567,567,567,568,568,568,568,568,568,568,568,569,569,570,570,570,570,571,571,571,571,571,571,571,571,572,572,572,572,572,572,573,573,573,573,573,574,574,574,574,574,574,575,575,575,575,575,575,575,576,576,576,576,576,576,576,576,576,576,576,577,577,577,577,577,577,578,578,578,578,578,578,578,578,578,579,579,579,579,579,579,579,579,579,579,579,579,579,580,580,580,580,580,580,580,581,581,581,581,581,581,581,581,581,581,582,582,582,582,582,582,582,582,582,582,582,583,583,583,583,583,583,583,583,583,583,584,584,584,584,584,585,585,585,585,585,585,586,586,586,586,586,586,586,587,587,588,588,588,588,588,589,589,589,589,589,589,589],&#34;depth&#34;:[9,8,7,6,5,4,3,2,1,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,3,2,1,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,2,1,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,2,1,10,9,8,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,11,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,3,2,1,8,7,6,5,4,3,2,1,3,2,1,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,2,1,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,2,1,2,1,10,9,8,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,2,1,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,2,1,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,2,1,5,4,3,2,1,2,1,11,10,9,8,7,6,5,4,3,2,1,4,3,2,1,3,2,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,2,1,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,2,1,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,2,1,3,2,1,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,4,3,2,1,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,2,1,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,2,1,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,3,2,1,8,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,2,1,10,9,8,7,6,5,4,3,2,1,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,2,1,6,5,4,3,2,1,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,2,1,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,5,4,3,2,1,7,6,5,4,3,2,1],&#34;label&#34;:[&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaicCore::tally&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list.default&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;names&lt;-&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.integer&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.character&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;dim&#34;,&#34;colSums&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;[.data.frame&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;any&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;lhs&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;any&#34;,&#34;local&#34;,&#34;unlist&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.frame&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;dim&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;levels&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;unlist&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;checkHT&#34;,&#34;tail.default&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;=&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;lhs.parsedFormula&#34;,&#34;lhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;list&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diff.default&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;is.na&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;enexpr&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;is.call&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.fun&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;is.na&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;logical&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;NextMethod&#34;,&#34;[.table&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;utils::tail&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;vapply&#34;,&#34;list.names&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;names&lt;-&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;rlang::eval_tidy&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;length&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;formals&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;seq.int&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list.default&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.fun&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[[&lt;-&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;logical2factor&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;tail.default&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;dim&#34;,&#34;local&#34;,&#34;attributes&#34;,&#34;local&#34;,&#34;logical2factor&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;lhs&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;formals&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;rhs_or_expr&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;is.numeric&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.function&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.fun&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;array&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.function&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list.default&#34;,&#34;alist&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.integer&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;enexpr&#34;,&#34;rhs_or_expr&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;NextMethod&#34;,&#34;[.table&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;logical2factor&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;logical&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;attributes&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;formals&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;lhs&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list.default&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;formals&#34;,&#34;match.arg&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;list&#34;,&#34;local&#34;,&#34;attributes&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;environment&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;rhs.parsedFormula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;lhs&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;names&lt;-&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;condition.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;attr&#34;,&#34;local&#34;,&#34;unique&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;[.data.frame&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.function&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;all&#34;,&#34;local&#34;,&#34;unlist&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[.data.frame&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list.default&#34;,&#34;alist&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;is.na&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diff&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;lhs&#34;,&#34;lhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.External&#34;,&#34;local&#34;,&#34;formals&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;logical&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;list.names&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sum&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;as.data.frame.data.frame&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.function&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;as.data.frame.data.frame&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;=&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;list.names&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;enexpr&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;enexpr&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sum&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.External&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;make.unique&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;dim.data.frame&#34;,&#34;ncol&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[.data.frame&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;is.na&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.parent&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[[&lt;-&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;logical&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;utils::tail&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;any&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;any&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.fun&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list.default&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unlist&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;utils::tail&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;diff.default&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prod&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;unlist&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.frame&#34;,&#34;match.arg&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.External2&#34;,&#34;local&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sum&#34;,&#34;local&#34;,&#34;sample&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;lhs&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;is.pairlist&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;levels&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;checkHT&#34;,&#34;tail.default&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.fun&#34;,&#34;vapply&#34;,&#34;list.names&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;colSums&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;checkHT&#34;,&#34;tail.default&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unlist&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;lhs&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;sys.parent&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.call&#34;,&#34;alist&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;[.data.frame&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;logical&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list.default&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;logical&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.call&#34;,&#34;~&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;$&#34;,&#34;lhs.parsedFormula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;levels&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;utils::tail&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;rhs.parsedFormula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;logical&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;seq.int&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;$&#34;,&#34;lhs.parsedFormula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;names&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;list&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;levels&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;is.null&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;rhs&#34;,&#34;rhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;condition.parsedFormula&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list.default&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;formals&#34;,&#34;match.arg&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;dimnames&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.External&#34;,&#34;local&#34;,&#34;names&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.call&#34;,&#34;alist&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.call&#34;,&#34;~&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;sum&#34;,&#34;local&#34;,&#34;unlist&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;joinTwoFrames&#34;,&#34;&lt;Anonymous&gt;&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.integer&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;any&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;.set_row_names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.fun&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.list.default&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;min&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;cull&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;sys.parent&#34;,&#34;match.arg&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;rhs&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.fun&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;lhs&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sys.frame&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;length&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;logical2factor&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;],&#34;filenum&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],&#34;linenum&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],&#34;memalloc&#34;:[27.7805709838867,27.7805709838867,27.7805709838867,27.7805709838867,27.7805709838867,27.7805709838867,27.7805709838867,27.7805709838867,27.7805709838867,28.3874588012695,28.3874588012695,28.3874588012695,28.3874588012695,28.9589157104492,28.9589157104492,28.9589157104492,28.9589157104492,28.9589157104492,28.9589157104492,28.9589157104492,28.9589157104492,29.673095703125,29.673095703125,29.673095703125,29.673095703125,29.673095703125,29.673095703125,29.673095703125,29.673095703125,29.673095703125,30.3136291503906,30.3136291503906,30.3136291503906,30.3136291503906,30.3136291503906,30.3136291503906,30.3136291503906,30.3136291503906,31.0767364501953,31.0767364501953,31.0767364501953,31.0767364501953,31.0767364501953,31.0767364501953,31.0767364501953,31.6766662597656,31.6766662597656,31.6766662597656,32.3892211914062,32.3892211914062,32.3892211914062,32.3892211914062,32.3892211914062,32.3892211914062,32.3892211914062,32.3892211914062,32.3892211914062,32.3892211914062,32.3892211914062,32.9736709594727,32.9736709594727,32.9736709594727,32.9736709594727,32.9736709594727,32.9736709594727,33.6134338378906,33.6134338378906,33.6134338378906,33.6134338378906,33.6134338378906,34.4901885986328,34.4901885986328,34.4901885986328,34.4901885986328,34.4901885986328,35.3649826049805,35.3649826049805,35.3649826049805,35.3649826049805,35.3649826049805,35.3649826049805,35.3649826049805,35.3649826049805,36.1131973266602,36.1131973266602,36.1131973266602,36.1131973266602,36.1131973266602,36.1131973266602,36.1131973266602,36.9279556274414,36.9279556274414,27.2034301757812,27.2034301757812,27.2034301757812,27.2034301757812,27.2034301757812,27.2034301757812,27.2034301757812,27.2034301757812,27.2034301757812,27.2034301757812,28.3361358642578,28.3361358642578,28.3361358642578,28.3361358642578,28.3361358642578,28.3361358642578,28.3361358642578,29.0114212036133,29.0114212036133,29.0114212036133,29.0114212036133,29.0114212036133,29.0114212036133,29.0114212036133,29.0114212036133,29.0114212036133,30.2216262817383,30.2216262817383,30.2216262817383,30.2216262817383,30.2216262817383,30.2216262817383,30.2216262817383,30.2216262817383,30.2216262817383,30.2216262817383,30.8097534179688,30.8097534179688,30.8097534179688,30.8097534179688,30.8097534179688,30.8097534179688,30.8097534179688,30.8097534179688,31.4588012695312,31.4588012695312,31.4588012695312,31.4588012695312,31.4588012695312,31.4588012695312,31.4588012695312,31.4588012695312,32.1905517578125,32.1905517578125,33.1924667358398,33.1924667358398,33.1924667358398,33.1924667358398,33.1924667358398,34.1846542358398,34.1846542358398,34.1846542358398,34.1846542358398,34.1846542358398,34.1846542358398,34.7411346435547,34.7411346435547,34.7411346435547,34.7411346435547,34.7411346435547,34.7411346435547,34.7411346435547,34.7411346435547,35.3837203979492,35.3837203979492,35.3837203979492,35.3837203979492,35.3837203979492,35.3837203979492,35.3837203979492,35.3837203979492,35.9701385498047,35.9701385498047,35.9701385498047,35.9701385498047,35.9701385498047,35.9701385498047,35.9701385498047,36.5658264160156,36.5658264160156,36.5658264160156,36.5658264160156,36.5658264160156,36.5658264160156,36.5658264160156,36.5658264160156,36.5658264160156,36.5658264160156,36.5658264160156,36.5658264160156,36.5658264160156,36.5658264160156,37.1768035888672,37.1768035888672,37.7760543823242,37.7760543823242,37.7760543823242,37.7760543823242,37.7760543823242,37.7760543823242,37.7760543823242,27.5875701904297,27.5875701904297,27.5875701904297,27.5875701904297,27.5875701904297,27.5875701904297,27.5875701904297,27.5875701904297,27.5875701904297,27.5875701904297,27.5875701904297,27.5875701904297,27.5875701904297,27.5875701904297,28.6407241821289,28.6407241821289,28.6407241821289,28.6407241821289,28.6407241821289,28.6407241821289,28.6407241821289,28.6407241821289,28.6407241821289,28.6407241821289,29.4275054931641,29.4275054931641,29.4275054931641,29.4275054931641,29.4275054931641,29.4275054931641,29.4275054931641,29.4275054931641,29.4275054931641,29.4275054931641,30.6539154052734,30.6539154052734,30.6539154052734,30.6539154052734,30.6539154052734,30.6539154052734,30.6539154052734,30.6539154052734,31.8022079467773,31.8022079467773,31.8022079467773,31.8022079467773,31.8022079467773,31.8022079467773,31.8022079467773,31.8022079467773,31.8022079467773,31.8022079467773,31.8022079467773,32.4189605712891,32.4189605712891,32.4189605712891,32.4189605712891,32.4189605712891,32.4189605712891,32.4189605712891,33.0316314697266,33.0316314697266,33.0316314697266,33.0316314697266,33.0316314697266,33.0316314697266,33.0316314697266,33.6384582519531,33.6384582519531,33.6384582519531,33.6384582519531,33.6384582519531,33.6384582519531,33.6384582519531,33.6384582519531,33.6384582519531,33.6384582519531,34.2805099487305,34.2805099487305,34.2805099487305,34.2805099487305,34.2805099487305,34.2805099487305,34.9846801757812,34.9846801757812,34.9846801757812,34.9846801757812,34.9846801757812,34.9846801757812,34.9846801757812,35.5951538085938,35.5951538085938,35.5951538085938,35.5951538085938,35.5951538085938,35.5951538085938,35.5951538085938,36.1692657470703,36.1692657470703,36.1692657470703,36.1692657470703,36.1692657470703,36.7828674316406,36.7828674316406,36.7828674316406,36.7828674316406,36.7828674316406,37.3964767456055,37.3964767456055,37.3964767456055,37.3964767456055,37.3964767456055,27.5428695678711,27.5428695678711,27.5428695678711,27.5428695678711,27.5428695678711,28.3362045288086,28.3362045288086,28.3362045288086,28.3362045288086,28.3362045288086,28.3362045288086,28.3362045288086,28.3362045288086,28.9825744628906,28.9825744628906,28.9825744628906,28.9825744628906,28.9825744628906,29.9959335327148,29.9959335327148,29.9959335327148,29.9959335327148,29.9959335327148,29.9959335327148,29.9959335327148,29.9959335327148,29.9959335327148,29.9959335327148,29.9959335327148,29.9959335327148,30.6982727050781,30.6982727050781,30.6982727050781,30.6982727050781,30.6982727050781,30.6982727050781,31.3637161254883,31.3637161254883,31.3637161254883,31.3637161254883,31.3637161254883,31.3637161254883,31.3637161254883,31.3637161254883,31.3637161254883,31.3637161254883,32.4448547363281,32.4448547363281,32.4448547363281,32.4448547363281,32.4448547363281,32.4448547363281,33.6714172363281,33.6714172363281,34.4176406860352,34.4176406860352,34.4176406860352,34.4176406860352,34.4176406860352,34.4176406860352,34.4176406860352,34.4176406860352,35.2163696289062,35.2163696289062,35.2163696289062,35.2163696289062,35.2163696289062,35.2163696289062,35.2163696289062,35.2163696289062,35.2163696289062,35.2163696289062,35.8289260864258,35.8289260864258,35.8289260864258,35.8289260864258,35.8289260864258,35.8289260864258,35.8289260864258,35.8289260864258,35.8289260864258,35.8289260864258,35.8289260864258,36.4721984863281,36.4721984863281,36.4721984863281,36.4721984863281,36.4721984863281,36.4721984863281,36.4721984863281,36.4721984863281,36.4721984863281,36.4721984863281,36.4721984863281,36.4721984863281,36.4721984863281,37.2122421264648,37.2122421264648,27.4598846435547,27.4598846435547,27.4598846435547,27.4598846435547,27.4598846435547,28.0758285522461,28.0758285522461,28.0758285522461,28.0758285522461,28.0758285522461,28.0758285522461,28.0758285522461,28.6935577392578,28.6935577392578,28.6935577392578,28.6935577392578,28.6935577392578,28.6935577392578,29.9251861572266,29.9251861572266,29.9251861572266,29.9251861572266,29.9251861572266,29.9251861572266,30.5644226074219,30.5644226074219,30.5644226074219,30.5644226074219,30.5644226074219,30.5644226074219,30.5644226074219,31.7151260375977,31.7151260375977,31.7151260375977,31.7151260375977,31.7151260375977,31.7151260375977,31.7151260375977,32.3195190429688,32.3195190429688,32.3195190429688,32.3195190429688,32.3195190429688,32.3195190429688,32.3195190429688,32.9321899414062,32.9321899414062,32.9321899414062,32.9321899414062,32.9321899414062,32.9321899414062,32.9321899414062,33.5457916259766,33.5457916259766,33.5457916259766,33.5457916259766,33.5457916259766,33.5457916259766,33.5457916259766,34.1542053222656,34.1542053222656,34.1542053222656,34.1542053222656,34.1542053222656,34.1542053222656,34.1542053222656,34.7568740844727,34.7568740844727,34.7568740844727,34.7568740844727,34.7568740844727,35.3686065673828,35.3686065673828,35.3686065673828,35.3686065673828,35.3686065673828,35.9822158813477,35.9822158813477,35.9822158813477,35.9822158813477,35.9822158813477,36.5972747802734,36.5972747802734,36.5972747802734,36.5972747802734,36.5972747802734,37.2056884765625,37.2056884765625,37.2056884765625,37.2056884765625,37.2056884765625,37.8192901611328,37.8192901611328,37.8192901611328,37.8192901611328,37.8192901611328,27.6670227050781,27.6670227050781,27.6670227050781,27.6670227050781,27.6670227050781,27.6670227050781,27.6670227050781,27.6670227050781,28.4045181274414,28.4045181274414,28.4045181274414,28.4045181274414,28.4045181274414,28.4045181274414,29.3753662109375,29.3753662109375,29.988037109375,29.988037109375,29.988037109375,29.988037109375,29.988037109375,29.988037109375,29.988037109375,30.600830078125,30.600830078125,31.3517913818359,31.3517913818359,31.3517913818359,31.3517913818359,31.3517913818359,31.3517913818359,31.3517913818359,31.3517913818359,31.3517913818359,31.3517913818359,31.3517913818359,31.9527053833008,31.9527053833008,31.9527053833008,31.9527053833008,31.9527053833008,31.9527053833008,31.9527053833008,32.6229705810547,32.6229705810547,32.6229705810547,32.6229705810547,32.6229705810547,32.6229705810547,32.6229705810547,32.6229705810547,33.2656784057617,33.2656784057617,33.2656784057617,33.2656784057617,33.2656784057617,33.2656784057617,33.2656784057617,33.9217987060547,33.9217987060547,34.5804061889648,34.5804061889648,34.5804061889648,34.5804061889648,34.5804061889648,34.5804061889648,34.5804061889648,34.5804061889648,34.5804061889648,34.5804061889648,34.5804061889648,35.2948150634766,35.2948150634766,35.2948150634766,35.2948150634766,35.2948150634766,35.9560394287109,35.9560394287109,35.9560394287109,35.9560394287109,35.9560394287109,35.9560394287109,35.9560394287109,35.9560394287109,35.9560394287109,36.9386596679688,36.9386596679688,36.9386596679688,37.5314025878906,37.5314025878906,37.5314025878906,37.5314025878906,37.5314025878906,37.5314025878906,27.2070541381836,27.2070541381836,27.2070541381836,27.2070541381836,27.2070541381836,27.2070541381836,27.2070541381836,27.428840637207,27.428840637207,27.428840637207,27.428840637207,27.428840637207,27.428840637207,27.428840637207,27.428840637207,27.428840637207,27.428840637207,27.428840637207,27.428840637207,27.428840637207,28.1190414428711,28.1190414428711,28.7913589477539,28.7913589477539,28.7913589477539,28.7913589477539,28.7913589477539,29.6809997558594,29.6809997558594,29.6809997558594,29.6809997558594,29.6809997558594,29.6809997558594,29.6809997558594,29.6809997558594,30.8897094726562,30.8897094726562,31.4704818725586,31.4704818725586,31.4704818725586,31.4704818725586,31.4704818725586,31.4704818725586,31.4704818725586,31.4704818725586,32.2887725830078,32.2887725830078,32.2887725830078,32.2887725830078,32.2887725830078,32.2887725830078,32.2887725830078,32.8262023925781,32.8262023925781,32.8262023925781,32.8262023925781,32.8262023925781,32.8262023925781,32.8262023925781,33.3791732788086,33.3791732788086,33.3791732788086,33.3791732788086,33.3791732788086,33.3791732788086,34.2759857177734,34.2759857177734,34.2759857177734,34.2759857177734,34.2759857177734,34.2759857177734,34.2759857177734,34.2759857177734,34.2759857177734,34.8647155761719,34.8647155761719,35.4099731445312,35.4099731445312,35.4099731445312,35.4099731445312,35.4099731445312,35.4099731445312,35.4099731445312,35.4099731445312,35.4099731445312,35.4099731445312,35.9742965698242,35.9742965698242,36.5022888183594,36.5022888183594,36.5022888183594,36.5022888183594,36.5022888183594,36.5022888183594,36.5022888183594,37.2040710449219,37.2040710449219,37.2040710449219,37.2040710449219,37.2040710449219,37.2040710449219,37.2040710449219,37.2040710449219,37.2040710449219,27.2999877929688,27.2999877929688,27.2999877929688,27.2999877929688,27.2999877929688,28.3296661376953,28.3296661376953,28.3296661376953,28.3296661376953,28.3296661376953,28.3296661376953,28.3296661376953,28.3296661376953,28.3296661376953,28.9351806640625,28.9351806640625,28.9351806640625,28.9351806640625,28.9351806640625,28.9351806640625,28.9351806640625,28.9351806640625,28.9351806640625,28.9351806640625,29.8823776245117,29.8823776245117,31.0951309204102,31.0951309204102,31.0951309204102,31.0951309204102,31.0951309204102,31.0951309204102,32.0054702758789,32.0054702758789,32.0054702758789,32.0054702758789,32.0054702758789,32.0054702758789,32.0054702758789,32.9037246704102,32.9037246704102,32.9037246704102,32.9037246704102,32.9037246704102,32.9037246704102,32.9037246704102,32.9037246704102,33.519157409668,33.519157409668,33.519157409668,33.519157409668,33.519157409668,33.519157409668,33.519157409668,33.519157409668,34.696159362793,34.696159362793,34.696159362793,34.696159362793,34.696159362793,34.696159362793,34.696159362793,34.696159362793,35.633415222168,35.633415222168,35.633415222168,35.633415222168,35.633415222168,35.633415222168,35.633415222168,35.633415222168,36.2071304321289,36.2071304321289,37.1081085205078,37.1081085205078,37.1081085205078,37.1081085205078,37.1081085205078,37.1081085205078,37.1081085205078,37.1081085205078,37.1081085205078,37.1081085205078,37.1081085205078,27.223258972168,27.223258972168,27.223258972168,27.223258972168,27.223258972168,27.223258972168,27.223258972168,27.223258972168,27.223258972168,27.8945693969727,27.8945693969727,27.8945693969727,27.8945693969727,27.8945693969727,27.8945693969727,27.8945693969727,28.5991744995117,28.5991744995117,28.5991744995117,28.5991744995117,28.5991744995117,28.5991744995117,28.5991744995117,28.5991744995117,29.4938430786133,29.4938430786133,29.4938430786133,29.4938430786133,29.4938430786133,30.1062469482422,30.1062469482422,30.1062469482422,30.1062469482422,30.1062469482422,30.9966430664062,30.9966430664062,30.9966430664062,30.9966430664062,30.9966430664062,30.9966430664062,30.9966430664062,30.9966430664062,30.9966430664062,30.9966430664062,30.9966430664062,31.7293319702148,31.7293319702148,31.7293319702148,31.7293319702148,31.7293319702148,31.7293319702148,31.7293319702148,31.7293319702148,31.7293319702148,31.7293319702148,31.7293319702148,31.7293319702148,31.7293319702148,32.5734939575195,32.5734939575195,32.5734939575195,32.5734939575195,32.5734939575195,32.5734939575195,32.5734939575195,32.5734939575195,32.5734939575195,32.5734939575195,32.5734939575195,33.4080657958984,33.4080657958984,33.4080657958984,33.4080657958984,33.4080657958984,34.3054122924805,34.3054122924805,34.3054122924805,34.3054122924805,34.3054122924805,34.7659225463867,34.7659225463867,34.7659225463867,34.7659225463867,34.7659225463867,34.7659225463867,34.7659225463867,35.5063934326172,35.5063934326172,35.5063934326172,35.5063934326172,35.5063934326172,35.5063934326172,35.5063934326172,35.5063934326172,35.5063934326172,35.5063934326172,36.0793075561523,36.0793075561523,36.0793075561523,36.0793075561523,36.0793075561523,36.0793075561523,36.0793075561523,36.0793075561523,36.646240234375,36.646240234375,36.646240234375,36.646240234375,36.646240234375,36.646240234375,37.5646743774414,37.5646743774414,37.5646743774414,37.5646743774414,37.5646743774414,37.5646743774414,37.5646743774414,27.6211013793945,27.6211013793945,27.6211013793945,27.6211013793945,27.6211013793945,27.6211013793945,27.6211013793945,27.6211013793945,28.4282302856445,28.4282302856445,28.4282302856445,28.4282302856445,28.4282302856445,28.4282302856445,28.4282302856445,28.4282302856445,29.1147766113281,29.1147766113281,29.1147766113281,29.1147766113281,29.1147766113281,29.1147766113281,29.1147766113281,29.1147766113281,29.9477233886719,29.9477233886719,29.9477233886719,29.9477233886719,29.9477233886719,29.9477233886719,29.9477233886719,30.5728607177734,30.5728607177734,30.5728607177734,30.5728607177734,30.5728607177734,30.5728607177734,30.5728607177734,30.5728607177734,30.5728607177734,30.5728607177734,30.5728607177734,31.208869934082,31.208869934082,32.0680770874023,32.0680770874023,32.0680770874023,32.0680770874023,32.0680770874023,32.7877883911133,32.7877883911133,32.7877883911133,32.7877883911133,32.7877883911133,32.7877883911133,32.7877883911133,32.7877883911133,33.3422775268555,33.3422775268555,33.3422775268555,33.3422775268555,33.3422775268555,33.3422775268555,33.3422775268555,33.3422775268555,33.3422775268555,33.9688339233398,33.9688339233398,33.9688339233398,33.9688339233398,33.9688339233398,33.9688339233398,34.8883285522461,34.8883285522461,34.8883285522461,34.8883285522461,34.8883285522461,34.8883285522461,35.5621643066406,35.5621643066406,35.5621643066406,35.5621643066406,35.5621643066406,36.1539993286133,36.1539993286133,36.1539993286133,36.1539993286133,36.1539993286133,36.7246780395508,36.7246780395508,36.7246780395508,36.7246780395508,36.7246780395508,36.7246780395508,36.7246780395508,36.7246780395508,37.3018646240234,37.3018646240234,37.3018646240234,37.3018646240234,37.3018646240234,37.8377456665039,37.8377456665039,37.8377456665039,37.8377456665039,37.8377456665039,37.8377456665039,37.8377456665039,37.8377456665039,27.6940765380859,27.6940765380859,28.2678604125977,28.2678604125977,28.8524703979492,28.8524703979492,28.8524703979492,28.8524703979492,28.8524703979492,29.8150329589844,29.8150329589844,29.8150329589844,29.8150329589844,29.8150329589844,29.8150329589844,29.8150329589844,29.8150329589844,29.8150329589844,29.8150329589844,30.4964828491211,30.4964828491211,30.4964828491211,30.4964828491211,30.4964828491211,30.4964828491211,31.0961532592773,31.0961532592773,31.0961532592773,31.0961532592773,31.0961532592773,31.0961532592773,31.0961532592773,31.0961532592773,31.0961532592773,31.7005310058594,31.7005310058594,31.7005310058594,31.7005310058594,31.7005310058594,31.7005310058594,31.7005310058594,32.4230117797852,32.4230117797852,32.4230117797852,32.4230117797852,32.4230117797852,32.4230117797852,33.4593048095703,33.4593048095703,34.6663360595703,34.6663360595703,34.6663360595703,34.6663360595703,34.6663360595703,34.6663360595703,34.6663360595703,35.2682647705078,35.2682647705078,35.2682647705078,35.2682647705078,35.2682647705078,35.2682647705078,35.2682647705078,35.2682647705078,35.9101486206055,35.9101486206055,35.9101486206055,35.9101486206055,35.9101486206055,35.9101486206055,35.9101486206055,35.9101486206055,37.0654754638672,37.0654754638672,37.0654754638672,37.0654754638672,37.0654754638672,37.0654754638672,37.0654754638672,37.0654754638672,37.0654754638672,37.0654754638672,37.0654754638672,27.247802734375,27.247802734375,27.247802734375,27.247802734375,27.247802734375,27.247802734375,27.247802734375,27.247802734375,27.247802734375,27.247802734375,27.247802734375,28.0778961181641,28.0778961181641,28.0778961181641,28.0778961181641,28.0778961181641,28.0778961181641,28.0778961181641,28.0778961181641,28.6901397705078,28.6901397705078,28.6901397705078,28.6901397705078,28.6901397705078,28.6901397705078,28.6901397705078,29.349250793457,29.349250793457,29.349250793457,29.349250793457,29.349250793457,29.349250793457,29.349250793457,29.9841156005859,29.9841156005859,29.9841156005859,29.9841156005859,29.9841156005859,29.9841156005859,30.577522277832,30.577522277832,30.577522277832,30.577522277832,30.577522277832,30.577522277832,30.577522277832,30.577522277832,30.577522277832,31.5790328979492,31.5790328979492,31.5790328979492,31.5790328979492,31.5790328979492,31.5790328979492,31.5790328979492,32.2174987792969,32.2174987792969,32.2174987792969,32.2174987792969,32.2174987792969,32.2174987792969,32.2174987792969,33.108512878418,33.108512878418,33.108512878418,33.108512878418,33.108512878418,33.108512878418,33.108512878418,33.7755355834961,33.7755355834961,34.552619934082,34.552619934082,34.552619934082,34.552619934082,34.552619934082,34.552619934082,34.552619934082,34.552619934082,35.7342071533203,35.7342071533203,35.7342071533203,35.7342071533203,35.7342071533203,35.7342071533203,35.7342071533203,35.7342071533203,36.4174575805664,36.4174575805664,36.4174575805664,37.3837432861328,37.3837432861328,37.3837432861328,37.3837432861328,37.3837432861328,37.3837432861328,37.3837432861328,37.3837432861328,37.8622360229492,37.8622360229492,37.8622360229492,28.039665222168,28.039665222168,28.039665222168,28.039665222168,28.039665222168,28.039665222168,28.039665222168,28.039665222168,28.6511154174805,28.6511154174805,28.6511154174805,28.6511154174805,28.6511154174805,28.6511154174805,28.6511154174805,28.6511154174805,28.6511154174805,28.6511154174805,28.6511154174805,29.8754577636719,29.8754577636719,29.8754577636719,29.8754577636719,29.8754577636719,29.8754577636719,29.8754577636719,29.8754577636719,29.8754577636719,29.8754577636719,29.8754577636719,29.8754577636719,30.661735534668,30.661735534668,30.661735534668,30.661735534668,30.661735534668,30.661735534668,30.661735534668,31.6265029907227,31.6265029907227,31.6265029907227,31.6265029907227,31.6265029907227,31.6265029907227,31.6265029907227,31.6265029907227,31.6265029907227,31.6265029907227,32.3220367431641,32.3220367431641,32.3220367431641,32.3220367431641,32.3220367431641,32.9119033813477,32.9119033813477,32.9119033813477,32.9119033813477,32.9119033813477,33.5208969116211,33.5208969116211,33.5208969116211,33.5208969116211,33.5208969116211,33.5208969116211,33.5208969116211,33.5208969116211,33.5208969116211,33.5208969116211,34.7305755615234,34.7305755615234,35.7129440307617,35.7129440307617,35.7129440307617,35.7129440307617,35.7129440307617,36.3522033691406,36.3522033691406,36.3522033691406,36.3522033691406,36.3522033691406,36.3522033691406,36.3522033691406,36.3522033691406,36.3522033691406,36.3522033691406,36.3522033691406,36.3522033691406,36.3522033691406,37.1163101196289,37.1163101196289,37.1163101196289,37.1163101196289,37.1163101196289,37.1163101196289,37.1163101196289,37.1163101196289,37.1163101196289,37.7075805664062,37.7075805664062,37.7075805664062,37.7075805664062,37.7075805664062,37.7075805664062,27.917350769043,27.917350769043,29.1367263793945,29.1367263793945,29.1367263793945,29.1367263793945,29.1367263793945,29.1367263793945,29.1367263793945,29.1367263793945,29.7766189575195,29.7766189575195,29.7766189575195,29.7766189575195,29.7766189575195,29.7766189575195,29.7766189575195,29.7766189575195,30.4505310058594,30.4505310058594,30.4505310058594,30.4505310058594,30.4505310058594,30.4505310058594,30.4505310058594,30.4505310058594,31.2214202880859,31.2214202880859,31.8943023681641,31.8943023681641,31.8943023681641,31.8943023681641,31.8943023681641,31.8943023681641,31.8943023681641,32.4967575073242,32.4967575073242,32.4967575073242,32.4967575073242,32.4967575073242,33.1103668212891,33.1103668212891,33.1103668212891,33.1103668212891,33.1103668212891,33.7230377197266,33.7230377197266,33.7230377197266,33.7230377197266,33.7230377197266,34.3145217895508,34.3145217895508,34.3145217895508,34.3145217895508,34.3145217895508,34.3145217895508,34.3145217895508,34.8943405151367,34.8943405151367,34.8943405151367,34.8943405151367,34.8943405151367,35.4868545532227,35.4868545532227,35.4868545532227,35.4868545532227,35.4868545532227,35.4868545532227,35.4868545532227,36.4014663696289,36.4014663696289,37.0416488647461,37.0416488647461,37.7011337280273,37.7011337280273,37.7011337280273,37.7011337280273,37.7011337280273,37.7011337280273,37.7011337280273,37.7011337280273,37.7011337280273,37.7011337280273,28.0588989257812,28.0588989257812,29.2649688720703,29.2649688720703,29.2649688720703,29.2649688720703,29.2649688720703,29.2649688720703,29.2649688720703,29.2649688720703,30.1630325317383,30.1630325317383,30.1630325317383,30.1630325317383,30.1630325317383,30.1630325317383,30.774040222168,30.774040222168,30.774040222168,30.774040222168,30.774040222168,31.9726486206055,31.9726486206055,31.9726486206055,31.9726486206055,31.9726486206055,31.9726486206055,31.9726486206055,32.5727767944336,32.5727767944336,32.5727767944336,32.5727767944336,32.5727767944336,32.5727767944336,32.5727767944336,33.2247009277344,33.2247009277344,33.2247009277344,33.2247009277344,33.2247009277344,33.2247009277344,33.2247009277344,34.3685531616211,34.3685531616211,34.3685531616211,34.3685531616211,34.3685531616211,34.3685531616211,34.3685531616211,35.494514465332,35.494514465332,35.494514465332,35.494514465332,35.494514465332,36.083366394043,36.083366394043,36.083366394043,36.083366394043,36.083366394043,36.083366394043,36.083366394043,36.083366394043,36.083366394043,36.6835098266602,36.6835098266602,36.6835098266602,36.6835098266602,36.6835098266602,36.6835098266602,36.6835098266602,36.6835098266602,37.2766799926758,37.2766799926758,37.2766799926758,37.2766799926758,37.2766799926758,37.2766799926758,27.4386138916016,27.4386138916016,27.4386138916016,28.4461441040039,28.4461441040039,28.4461441040039,28.4461441040039,28.4461441040039,28.4461441040039,29.1199340820312,29.1199340820312,29.1199340820312,29.1199340820312,29.1199340820312,29.1199340820312,29.1199340820312,29.8916931152344,29.8916931152344,29.8916931152344,29.8916931152344,29.8916931152344,29.8916931152344,29.8916931152344,30.4904479980469,30.4904479980469,30.4904479980469,30.4904479980469,30.4904479980469,30.4904479980469,30.4904479980469,30.4904479980469,30.4904479980469,31.1794281005859,31.1794281005859,31.1794281005859,31.1794281005859,31.1794281005859,31.1794281005859,31.1794281005859,32.1380615234375,32.1380615234375,32.1380615234375,32.1380615234375,32.1380615234375,32.1380615234375,32.1380615234375,32.1380615234375,32.1380615234375,32.1380615234375,32.954704284668,32.954704284668,32.954704284668,32.954704284668,32.954704284668,32.954704284668,32.954704284668,33.5805358886719,33.5805358886719,33.5805358886719,33.5805358886719,33.5805358886719,33.5805358886719,33.5805358886719,33.5805358886719,33.5805358886719,33.5805358886719,34.415153503418,34.415153503418,34.415153503418,34.415153503418,34.415153503418,34.415153503418,34.415153503418,35.08056640625,35.08056640625,35.7306976318359,35.7306976318359,35.7306976318359,35.7306976318359,35.7306976318359,35.7306976318359,35.7306976318359,36.5482177734375,36.5482177734375,36.5482177734375,36.5482177734375,36.5482177734375,36.5482177734375,36.5482177734375,36.5482177734375,37.1690063476562,37.1690063476562,37.1690063476562,37.1690063476562,37.1690063476562,37.1690063476562,37.1690063476562,37.1690063476562,37.1690063476562,37.1690063476562,27.374137878418,27.374137878418,27.374137878418,27.374137878418,27.374137878418,28.0043487548828,28.0043487548828,28.0043487548828,28.0043487548828,28.0043487548828,28.7742538452148,28.7742538452148,28.7742538452148,28.7742538452148,28.7742538452148,28.7742538452148,28.7742538452148,29.4284515380859,29.4284515380859,30.0419464111328,30.0419464111328,30.0419464111328,30.0419464111328,30.0419464111328,30.0419464111328,30.6511383056641,30.6511383056641,30.6511383056641,30.6511383056641,30.6511383056641,30.6511383056641,30.6511383056641,30.6511383056641,30.6511383056641,30.6511383056641,30.6511383056641,31.3125534057617,31.3125534057617,31.3125534057617,31.3125534057617,31.3125534057617,32.3036804199219,32.3036804199219,32.3036804199219,32.3036804199219,32.3036804199219,32.3036804199219,32.3036804199219,32.3036804199219,32.3036804199219,32.3036804199219,32.3036804199219,32.3036804199219,33.0580215454102,33.0580215454102,33.0580215454102,33.0580215454102,33.0580215454102,33.0580215454102,33.0580215454102,33.0580215454102,33.0580215454102,33.0580215454102,33.0580215454102,33.805419921875,33.805419921875,33.805419921875,33.805419921875,33.805419921875,34.7690582275391,34.7690582275391,34.7690582275391,34.7690582275391,34.7690582275391,34.7690582275391,34.7690582275391,34.7690582275391,34.7690582275391,34.7690582275391,34.7690582275391,35.4999847412109,35.4999847412109,35.4999847412109,35.4999847412109,35.4999847412109,35.4999847412109,35.4999847412109,36.181884765625,36.181884765625,36.181884765625,36.181884765625,36.181884765625,36.181884765625,36.181884765625,36.181884765625,37.3685302734375,37.3685302734375,37.3685302734375,37.3685302734375,37.3685302734375,27.373664855957,27.373664855957,27.373664855957,27.373664855957,27.373664855957,27.373664855957,27.373664855957,27.373664855957,28.5984420776367,28.5984420776367,28.5984420776367,28.5984420776367,28.5984420776367,28.5984420776367,28.5984420776367,29.8196792602539,29.8196792602539,29.8196792602539,29.8196792602539,29.8196792602539,29.8196792602539,29.8196792602539,29.8196792602539,29.8196792602539,29.8196792602539,30.4233169555664,30.4233169555664,30.4233169555664,30.4233169555664,30.4233169555664,30.4233169555664,30.4233169555664,30.4233169555664,30.4233169555664,30.4233169555664,31.6448822021484,31.6448822021484,31.6448822021484,31.6448822021484,31.6448822021484,32.2553405761719,32.2553405761719,32.8445129394531,32.8445129394531,33.4972229003906,33.4972229003906,33.4972229003906,33.4972229003906,33.4972229003906,33.4972229003906,33.4972229003906,33.4972229003906,34.5354385375977,34.5354385375977,34.5354385375977,34.5354385375977,34.5354385375977,34.5354385375977,34.5354385375977,34.5354385375977,34.5354385375977,34.5354385375977,35.1428527832031,35.1428527832031,35.1428527832031,35.1428527832031,35.671257019043,35.671257019043,35.671257019043,35.671257019043,35.671257019043,35.671257019043,35.671257019043,36.4330139160156,36.4330139160156,36.4330139160156,36.4330139160156,36.4330139160156,36.4330139160156,37.0397872924805,37.0397872924805,37.0397872924805,37.0397872924805,37.0397872924805,37.0397872924805,37.0397872924805,37.0397872924805,37.0397872924805,37.0397872924805,37.0397872924805,37.6566162109375,37.6566162109375,37.6566162109375,37.6566162109375,37.6566162109375,37.6566162109375,37.6566162109375,27.5243072509766,27.5243072509766,27.5243072509766,27.5243072509766,27.5243072509766,27.5243072509766,28.1102294921875,28.1102294921875,28.1102294921875,28.1102294921875,28.1102294921875,28.1102294921875,28.1102294921875,28.9872894287109,28.9872894287109,28.9872894287109,28.9872894287109,28.9872894287109,29.5941848754883,29.5941848754883,29.5941848754883,29.5941848754883,29.5941848754883,29.5941848754883,29.5941848754883,29.5941848754883,30.8184967041016,30.8184967041016,30.8184967041016,30.8184967041016,30.8184967041016,30.8184967041016,30.8184967041016,31.8442611694336,31.8442611694336,31.8442611694336,31.8442611694336,31.8442611694336,31.8442611694336,31.8442611694336,31.8442611694336,31.8442611694336,32.6359558105469,32.6359558105469,32.6359558105469,32.6359558105469,32.6359558105469,32.6359558105469,32.6359558105469,32.6359558105469,33.2416534423828,33.2416534423828,33.2416534423828,33.2416534423828,33.2416534423828,33.2416534423828,33.2416534423828,34.1137390136719,34.1137390136719,34.1137390136719,34.1137390136719,34.1137390136719,34.1137390136719,34.1137390136719,34.1137390136719,34.1137390136719,34.1137390136719,34.7210693359375,34.7210693359375,34.7210693359375,34.7210693359375,34.7210693359375,35.3197250366211,35.3197250366211,35.9035873413086,35.9035873413086,35.9035873413086,35.9035873413086,35.9035873413086,36.5238265991211,36.5238265991211,37.1256408691406,37.1256408691406,37.1256408691406,37.1256408691406,37.1256408691406,37.1256408691406,37.1256408691406,37.1256408691406,37.1256408691406,37.1256408691406,37.1256408691406,37.7757110595703,37.7757110595703,37.7757110595703,37.7757110595703,27.8114013671875,27.8114013671875,27.8114013671875,28.5694046020508,28.5694046020508,28.5694046020508,28.5694046020508,28.5694046020508,28.5694046020508,28.5694046020508,28.5694046020508,28.5694046020508,28.5694046020508,28.5694046020508,29.1706848144531,29.1706848144531,29.1706848144531,29.1706848144531,29.1706848144531,29.1706848144531,29.1706848144531,29.1706848144531,29.7942810058594,29.7942810058594,29.7942810058594,29.7942810058594,29.7942810058594,29.7942810058594,29.7942810058594,29.7942810058594,29.7942810058594,29.7942810058594,29.7942810058594,29.7942810058594,29.7942810058594,30.5407409667969,30.5407409667969,30.5407409667969,30.5407409667969,30.5407409667969,30.5407409667969,30.5407409667969,30.5407409667969,31.1550674438477,31.1550674438477,31.1550674438477,31.1550674438477,31.1550674438477,31.1550674438477,31.1550674438477,32.116569519043,32.116569519043,32.116569519043,32.116569519043,32.116569519043,32.116569519043,32.116569519043,32.116569519043,32.116569519043,32.9747848510742,32.9747848510742,32.9747848510742,33.8948974609375,33.8948974609375,33.8948974609375,33.8948974609375,33.8948974609375,33.8948974609375,33.8948974609375,34.482666015625,34.482666015625,34.482666015625,34.482666015625,34.482666015625,34.482666015625,34.482666015625,34.482666015625,34.482666015625,34.482666015625,35.6767120361328,35.6767120361328,35.6767120361328,35.6767120361328,35.6767120361328,35.6767120361328,35.6767120361328,36.2713928222656,36.2713928222656,36.2713928222656,36.2713928222656,36.2713928222656,36.2713928222656,36.2713928222656,36.2713928222656,36.2713928222656,36.2713928222656,36.2713928222656,36.2713928222656,36.2713928222656,36.2713928222656,36.8334732055664,36.8334732055664,36.8334732055664,37.8791198730469,37.8791198730469,37.8791198730469,37.8791198730469,37.8791198730469,37.8791198730469,37.8791198730469,37.8791198730469,28.0858459472656,28.0858459472656,28.0858459472656,28.0858459472656,28.0858459472656,28.0858459472656,28.0858459472656,28.747673034668,28.747673034668,28.747673034668,28.747673034668,28.747673034668,28.747673034668,28.747673034668,28.747673034668,29.3557815551758,29.3557815551758,30.0735931396484,30.0735931396484,30.0735931396484,30.0735931396484,30.0735931396484,30.0735931396484,30.0735931396484,30.0735931396484,30.0735931396484,30.0735931396484,30.0735931396484,30.9040985107422,30.9040985107422,30.9040985107422,30.9040985107422,30.9040985107422,30.9040985107422,31.514762878418,31.514762878418,31.514762878418,31.514762878418,31.514762878418,31.514762878418,31.514762878418,31.514762878418,31.514762878418,31.514762878418,32.7274856567383,32.7274856567383,32.7274856567383,32.7274856567383,32.7274856567383,32.7274856567383,32.7274856567383,32.7274856567383,32.7274856567383,32.7274856567383,33.6628189086914,33.6628189086914,33.6628189086914,33.6628189086914,33.6628189086914,33.6628189086914,33.6628189086914,34.5350952148438,34.5350952148438,35.1470260620117,35.1470260620117,35.1470260620117,35.1470260620117,35.1470260620117,35.1470260620117,35.1470260620117,35.1470260620117,35.1470260620117,35.1470260620117,35.9246978759766,35.9246978759766,35.9246978759766,35.9246978759766,35.9246978759766,35.9246978759766,35.9246978759766,36.5390777587891,36.5390777587891,36.5390777587891,36.5390777587891,36.5390777587891,37.1305313110352,37.1305313110352,37.1305313110352,37.1305313110352,37.1305313110352,37.1305313110352,37.1305313110352,37.7206573486328,37.7206573486328,37.7206573486328,37.7206573486328,37.7206573486328,27.9091796875,27.9091796875,27.9091796875,27.9091796875,27.9091796875,27.9091796875,27.9091796875,27.9091796875,28.5521469116211,28.5521469116211,28.5521469116211,28.5521469116211,28.5521469116211,28.5521469116211,28.5521469116211,28.5521469116211,28.5521469116211,28.5521469116211,28.5521469116211,29.2976226806641,29.2976226806641,29.2976226806641,29.9223480224609,29.9223480224609,29.9223480224609,29.9223480224609,29.9223480224609,29.9223480224609,29.9223480224609,29.9223480224609,30.5321960449219,30.5321960449219,30.5321960449219,30.5321960449219,30.5321960449219,30.5321960449219,30.5321960449219,30.5321960449219,30.5321960449219,30.5321960449219,31.3533935546875,31.3533935546875,31.3533935546875,31.3533935546875,31.3533935546875,31.3533935546875,31.3533935546875,31.3533935546875,31.3533935546875,32.0110015869141,32.0110015869141,33.030632019043,33.030632019043,33.030632019043,33.030632019043,33.030632019043,33.030632019043,33.030632019043,33.7719192504883,33.7719192504883,33.7719192504883,33.7719192504883,33.7719192504883,33.7719192504883,33.7719192504883,33.7719192504883,33.7719192504883,34.3717727661133,34.3717727661133,34.3717727661133,34.3717727661133,34.3717727661133,34.3717727661133,34.3717727661133,34.3717727661133,34.3717727661133,34.3717727661133,35.0382080078125,35.0382080078125,35.0382080078125,35.0382080078125,35.0382080078125,35.0382080078125,35.0382080078125,35.0382080078125,35.0382080078125,35.0382080078125,35.6386337280273,35.6386337280273,35.6386337280273,35.6386337280273,35.6386337280273,35.6386337280273,35.6386337280273,36.2336502075195,36.2336502075195,36.2336502075195,36.2336502075195,36.2336502075195,37.4321823120117,37.4321823120117,37.4321823120117,37.4321823120117,37.4321823120117,37.4321823120117,27.8897018432617,27.8897018432617,27.8897018432617,27.8897018432617,27.8897018432617,27.8897018432617,27.8897018432617,28.6325225830078,28.6325225830078,29.8545761108398,29.8545761108398,29.8545761108398,29.8545761108398,29.8545761108398,29.8545761108398,29.8545761108398,30.4717407226562,30.4717407226562,30.4717407226562,30.4717407226562,30.4717407226562,30.4717407226562,30.4717407226562,30.4717407226562,31.1680603027344,31.1680603027344,31.1680603027344,31.1680603027344,31.1680603027344,31.1680603027344,31.1680603027344,31.1680603027344,31.1680603027344,31.1680603027344,31.1680603027344,31.1680603027344,31.1680603027344,32.002311706543,32.002311706543,32.002311706543,32.002311706543,32.002311706543,32.002311706543,32.002311706543,32.002311706543,32.002311706543,32.002311706543,33.2127838134766,33.2127838134766,33.2127838134766,33.2127838134766,33.2127838134766,33.2127838134766,34.0569839477539,34.0569839477539,34.6592025756836,34.6592025756836,34.6592025756836,34.6592025756836,34.6592025756836,34.6592025756836,34.6592025756836,34.6592025756836,34.6592025756836,34.6592025756836,35.8556594848633,35.8556594848633,35.8556594848633,35.8556594848633,35.8556594848633,35.8556594848633,35.8556594848633,36.4949188232422,36.4949188232422,37.654411315918,37.654411315918,37.654411315918,37.654411315918,37.654411315918,37.654411315918,37.654411315918,28.1306610107422,28.1306610107422,28.7432327270508,28.7432327270508,28.7432327270508,28.7432327270508,28.7432327270508,28.7432327270508,28.7432327270508,28.7432327270508,28.7432327270508,29.4707489013672,29.4707489013672,29.4707489013672,29.4707489013672,29.4707489013672,29.4707489013672,29.4707489013672,29.4707489013672,29.4707489013672,29.4707489013672,29.4707489013672,29.4707489013672,30.6922378540039,30.6922378540039,30.6922378540039,30.6922378540039,31.3044204711914,31.3044204711914,31.3044204711914,31.3044204711914,31.3044204711914,31.3044204711914,32.1199111938477,32.1199111938477,32.1199111938477,32.1199111938477,32.1199111938477,32.7123413085938,32.7123413085938,32.7123413085938,32.7123413085938,32.7123413085938,32.7123413085938,32.7123413085938,32.7123413085938,33.5364608764648,33.5364608764648,33.5364608764648,34.1339492797852,34.1339492797852,34.1339492797852,34.1339492797852,34.1339492797852,34.8119430541992,34.8119430541992,34.8119430541992,34.8119430541992,34.8119430541992,34.8119430541992,34.8119430541992,35.4392242431641,35.4392242431641,35.4392242431641,35.4392242431641,35.4392242431641,35.4392242431641,36.0385665893555,36.0385665893555,36.7502822875977,36.7502822875977,36.7502822875977,36.7502822875977,37.3099517822266,37.3099517822266,37.3099517822266,37.3099517822266,37.3099517822266,27.3527297973633,27.3527297973633,27.3527297973633,27.3527297973633,27.3527297973633,27.3527297973633,27.9964752197266,27.9964752197266,27.9964752197266,27.9964752197266,27.9964752197266,27.9964752197266,27.9964752197266,27.9964752197266,27.9964752197266,27.9964752197266,27.9964752197266,28.9571533203125,28.9571533203125,29.7071380615234,29.7071380615234,29.7071380615234,29.7071380615234,29.7071380615234,29.7071380615234,29.7071380615234,29.7071380615234,30.3098831176758,30.3098831176758,30.3098831176758,30.3098831176758,30.3098831176758,30.3098831176758,30.3098831176758,30.3098831176758,30.8888854980469,30.8888854980469,30.8888854980469,30.8888854980469,30.8888854980469,30.8888854980469,30.8888854980469,30.8888854980469,31.5413513183594,31.5413513183594,31.5413513183594,31.5413513183594,31.5413513183594,31.5413513183594,31.5413513183594,31.5413513183594,31.5413513183594,32.2288665771484,32.2288665771484,32.2288665771484,32.2288665771484,32.2288665771484,32.2288665771484,32.8803405761719,32.8803405761719,32.8803405761719,32.8803405761719,32.8803405761719,32.8803405761719,33.9422302246094,33.9422302246094,34.5433578491211,34.5433578491211,34.5433578491211,34.5433578491211,34.5433578491211,34.5433578491211,34.5433578491211,34.5433578491211,35.1549377441406,35.1549377441406,35.1549377441406,35.1549377441406,35.1549377441406,35.1549377441406,35.1549377441406,35.1549377441406,35.8175811767578,35.8175811767578,35.8175811767578,36.7023391723633,36.7023391723633,36.7023391723633,36.7023391723633,36.7023391723633,36.7023391723633,36.7023391723633,37.3161468505859,37.3161468505859,37.3161468505859,37.3161468505859,37.3161468505859,37.3161468505859,37.3161468505859,37.8859405517578,37.8859405517578,37.8859405517578,37.8859405517578,37.8859405517578,37.8859405517578,37.8859405517578,27.8910369873047,27.8910369873047,27.8910369873047,27.8910369873047,27.8910369873047,27.8910369873047,27.8910369873047,27.8910369873047,27.8910369873047,27.8910369873047,28.496940612793,28.496940612793,28.496940612793,28.496940612793,28.496940612793,29.1113510131836,29.1113510131836,29.1113510131836,29.1113510131836,29.1113510131836,29.1113510131836,29.1113510131836,29.1113510131836,29.8601455688477,29.8601455688477,29.8601455688477,29.8601455688477,29.8601455688477,29.8601455688477,29.8601455688477,29.8601455688477,30.5713424682617,30.5713424682617,30.5713424682617,30.5713424682617,30.5713424682617,30.5713424682617,30.5713424682617,30.5713424682617,30.5713424682617,30.5713424682617,31.2261657714844,31.2261657714844,31.7943725585938,31.7943725585938,31.7943725585938,31.7943725585938,31.7943725585938,31.7943725585938,31.7943725585938,31.7943725585938,31.7943725585938,31.7943725585938,31.7943725585938,32.7178726196289,32.7178726196289,32.7178726196289,32.7178726196289,32.7178726196289,32.7178726196289,32.7178726196289,33.361457824707,33.361457824707,33.361457824707,33.361457824707,33.361457824707,33.361457824707,33.361457824707,33.361457824707,33.361457824707,33.9386749267578,33.9386749267578,33.9386749267578,33.9386749267578,33.9386749267578,33.9386749267578,33.9386749267578,33.9386749267578,33.9386749267578,33.9386749267578,33.9386749267578,34.6727523803711,34.6727523803711,34.6727523803711,34.6727523803711,34.6727523803711,34.6727523803711,34.6727523803711,34.6727523803711,34.6727523803711,34.6727523803711,35.3536071777344,35.3536071777344,35.3536071777344,35.3536071777344,35.3536071777344,35.9569854736328,35.9569854736328,35.9569854736328,35.9569854736328,35.9569854736328,35.9569854736328,35.9569854736328,35.9569854736328,35.9569854736328,36.6872253417969,36.6872253417969,36.6872253417969,36.6872253417969,36.6872253417969,36.6872253417969,36.6872253417969,36.6872253417969,36.6872253417969,36.6872253417969,37.3564453125,37.3564453125,37.3564453125,37.3564453125,37.3564453125,37.3564453125,37.8918228149414,37.8918228149414,37.8918228149414,37.8918228149414,37.8918228149414,37.8918228149414,37.8918228149414,27.8430023193359,27.8430023193359,27.8430023193359,27.8430023193359,27.8430023193359,28.6574630737305,28.6574630737305,28.6574630737305,28.6574630737305,28.6574630737305,28.6574630737305,28.6574630737305,29.3333435058594,29.3333435058594,29.3333435058594,29.3333435058594,29.3333435058594,29.3333435058594,29.3333435058594,29.3333435058594,29.3333435058594,29.3333435058594,29.3333435058594,29.9734191894531,29.9734191894531,29.9734191894531,29.9734191894531,29.9734191894531,29.9734191894531,29.9734191894531,29.9734191894531,30.8157348632812,30.8157348632812,31.4051666259766,31.4051666259766,31.4051666259766,31.4051666259766,31.4051666259766,31.4051666259766,31.4051666259766,31.4051666259766,32.0118789672852,32.0118789672852,32.0118789672852,32.0118789672852,32.0118789672852,32.0118789672852,32.0118789672852,32.8033828735352,32.8033828735352,32.8033828735352,32.8033828735352,32.8033828735352,32.8033828735352,32.8033828735352,32.8033828735352,32.8033828735352,33.6180648803711,33.6180648803711,33.6180648803711,33.6180648803711,33.6180648803711,33.6180648803711,33.6180648803711,33.6180648803711,34.3235168457031,34.3235168457031,34.3235168457031,34.3235168457031,34.3235168457031,34.3235168457031,34.3235168457031,34.3235168457031,34.3235168457031,34.3235168457031,34.3235168457031,35.1626815795898,35.1626815795898,35.1626815795898,35.1626815795898,35.1626815795898,35.1626815795898,35.1626815795898,35.1626815795898,35.738639831543,35.738639831543,35.738639831543,35.738639831543,35.738639831543,35.738639831543,36.6375732421875,36.6375732421875,36.6375732421875,36.6375732421875,36.6375732421875,37.6183471679688,37.6183471679688,37.6183471679688,37.6183471679688,37.6183471679688,37.6183471679688,37.6183471679688,27.5996246337891,27.5996246337891,27.5996246337891,27.5996246337891,27.5996246337891,27.5996246337891,27.5996246337891,27.5996246337891,27.5996246337891,27.5996246337891,27.5996246337891,27.5996246337891,27.5996246337891,28.184928894043,28.184928894043,28.184928894043,28.184928894043,28.184928894043,28.184928894043,28.184928894043,28.184928894043,29.0441741943359,29.0441741943359,29.0441741943359,29.0441741943359,29.0441741943359,29.0441741943359,29.0441741943359,29.0441741943359,29.0441741943359,29.0441741943359,29.0441741943359,29.0441741943359,29.9667663574219,29.9667663574219,29.9667663574219,29.9667663574219,29.9667663574219,29.9667663574219,29.9667663574219,29.9667663574219,30.5728378295898,30.5728378295898,31.392204284668,31.392204284668,31.392204284668,31.392204284668,31.392204284668,31.392204284668,32.1031723022461,32.1031723022461,32.1031723022461,32.1031723022461,32.1031723022461,32.9447860717773,32.9447860717773,32.9447860717773,32.9447860717773,32.9447860717773,33.6087875366211,33.6087875366211,34.3793716430664,34.3793716430664,34.3793716430664,35.0805358886719,35.0805358886719,35.8720092773438,35.8720092773438,35.8720092773438,35.8720092773438,35.8720092773438,35.8720092773438,35.8720092773438,36.4852676391602,36.4852676391602,36.4852676391602,36.4852676391602,36.4852676391602,36.4852676391602,36.4852676391602,36.4852676391602,36.4852676391602,36.4852676391602,37.3166580200195,37.3166580200195,37.3166580200195,37.3166580200195,37.3166580200195,37.3166580200195,37.3166580200195,37.3166580200195,37.3166580200195,37.3166580200195,37.3166580200195,37.3166580200195,37.8120193481445,37.8120193481445,37.8120193481445,37.8120193481445,37.8120193481445,37.8120193481445,37.8120193481445,28.2017593383789,28.2017593383789,28.2017593383789,28.2017593383789,28.2017593383789,28.2017593383789,28.2017593383789,28.8581771850586,28.8581771850586,28.8581771850586,28.8581771850586,28.8581771850586,28.8581771850586,28.8581771850586,29.5107192993164,29.5107192993164,29.5107192993164,29.5107192993164,29.5107192993164,29.5107192993164,29.5107192993164,30.2087707519531,30.2087707519531,31.1910629272461,31.1910629272461,31.1910629272461,31.1910629272461,31.1910629272461,31.1910629272461,31.1910629272461,31.835807800293,31.835807800293,31.835807800293,31.835807800293,32.5450897216797,32.5450897216797,32.5450897216797,32.5450897216797,32.5450897216797,32.5450897216797,32.5450897216797,32.5450897216797,33.5112380981445,33.5112380981445,33.5112380981445,33.5112380981445,33.5112380981445,33.5112380981445,33.5112380981445,33.5112380981445,33.5112380981445,33.5112380981445,34.3230361938477,34.3230361938477,34.3230361938477,34.3230361938477,34.3230361938477,34.9941558837891,34.9941558837891,34.9941558837891,34.9941558837891,34.9941558837891,34.9941558837891,34.9941558837891,34.9941558837891,35.6155624389648,35.6155624389648,35.6155624389648,35.6155624389648,35.6155624389648,35.6155624389648,35.6155624389648,36.2963638305664,36.2963638305664,36.2963638305664,36.2963638305664,36.2963638305664,36.2963638305664,36.2963638305664,36.2963638305664,36.2963638305664,36.2963638305664,36.9508666992188,36.9508666992188,36.9508666992188,36.9508666992188,36.9508666992188,36.9508666992188,36.9508666992188,36.9508666992188,37.61865234375,37.61865234375,37.61865234375,37.61865234375,37.61865234375,37.61865234375,37.61865234375,27.5054168701172,27.5054168701172,27.5054168701172,27.5054168701172,27.5054168701172,27.5054168701172,27.5054168701172,28.0884780883789,28.0884780883789,28.0884780883789,28.0884780883789,28.0884780883789,28.0884780883789,28.0884780883789,28.0884780883789,28.6982345581055,28.6982345581055,28.6982345581055,28.6982345581055,29.5740814208984,29.5740814208984,30.1576156616211,30.1576156616211,30.1576156616211,30.1576156616211,30.1576156616211,30.1576156616211,30.1576156616211,30.1576156616211,30.775032043457,30.775032043457,30.775032043457,30.775032043457,30.775032043457,30.775032043457,30.775032043457,30.775032043457,31.4698638916016,31.4698638916016,32.0755844116211,32.0755844116211,32.0755844116211,33.0321426391602,33.0321426391602,33.0321426391602,33.0321426391602,33.0321426391602,33.0321426391602,33.0321426391602,33.6225662231445,33.6225662231445,33.6225662231445,33.6225662231445,33.6225662231445,33.6225662231445,33.6225662231445,34.3237915039062,34.3237915039062,35.0950164794922,35.0950164794922,35.0950164794922,35.0950164794922,35.0950164794922,35.0950164794922,35.0950164794922,35.683723449707,35.683723449707,35.683723449707,35.683723449707,35.683723449707,35.683723449707,36.2754898071289,36.2754898071289,37.0125579833984,37.0125579833984,37.0125579833984,37.0125579833984,37.0125579833984,37.0125579833984,37.5889587402344,37.5889587402344,37.5889587402344,37.5889587402344,37.5889587402344,27.4236221313477,27.4236221313477,27.4236221313477,27.4236221313477,27.4236221313477,27.4236221313477,27.4236221313477,28.0117721557617,28.0117721557617,28.0117721557617,28.0117721557617,28.0117721557617,28.0117721557617,28.0117721557617,28.0117721557617,28.6669235229492,28.6669235229492,28.6669235229492,28.6669235229492,28.6669235229492,28.6669235229492,28.6669235229492,29.5662307739258,29.5662307739258,29.5662307739258,29.5662307739258,30.4052658081055,30.4052658081055,30.4052658081055,30.4052658081055,30.4052658081055,30.4052658081055,30.4052658081055,30.4052658081055,31.06982421875,31.06982421875,31.06982421875,31.06982421875,31.06982421875,31.06982421875,31.06982421875,31.06982421875,31.6420059204102,31.6420059204102,31.6420059204102,31.6420059204102,31.6420059204102,31.6420059204102,32.2965240478516,32.2965240478516,32.2965240478516,32.2965240478516,32.2965240478516,32.2965240478516,32.2965240478516,32.2965240478516,32.2965240478516,32.2965240478516,32.2965240478516,32.9391784667969,32.9391784667969,32.9391784667969,32.9391784667969,32.9391784667969,32.9391784667969,32.9391784667969,33.5482330322266,33.5482330322266,33.5482330322266,33.5482330322266,33.5482330322266,33.5482330322266,34.3389663696289,34.3389663696289,34.3389663696289,34.3389663696289,34.3389663696289,35.0506820678711,35.0506820678711,35.0506820678711,35.0506820678711,35.0506820678711,35.0506820678711,35.0506820678711,35.0506820678711,35.0506820678711,35.7006225585938,35.7006225585938,35.7006225585938,35.7006225585938,35.7006225585938,35.7006225585938,35.7006225585938,35.7006225585938,36.6159439086914,36.6159439086914,36.6159439086914,36.6159439086914,36.6159439086914,36.6159439086914,36.6159439086914,36.6159439086914,36.6159439086914,36.6159439086914,36.6159439086914,36.6159439086914,37.2254028320312,37.2254028320312,37.2254028320312,37.2254028320312,37.2254028320312,37.2254028320312,37.8399505615234,37.8399505615234,37.8399505615234,37.8399505615234,37.8399505615234,37.8399505615234,28.1073303222656,28.1073303222656,28.1073303222656,28.1073303222656,28.1073303222656,28.1073303222656,28.1073303222656,28.1073303222656,28.1073303222656,28.9843673706055,28.9843673706055,28.9843673706055,28.9843673706055,28.9843673706055,28.9843673706055,28.9843673706055,28.9843673706055,28.9843673706055,28.9843673706055,29.6106033325195,29.6106033325195,29.6106033325195,29.6106033325195,29.6106033325195,29.6106033325195,29.6106033325195,29.6106033325195,30.5122985839844,30.5122985839844,30.5122985839844,30.5122985839844,30.5122985839844,30.5122985839844,31.0952072143555,31.0952072143555,31.0952072143555,31.0952072143555,31.0952072143555,31.0952072143555,31.0952072143555,31.0952072143555,31.0952072143555,31.727897644043,31.727897644043,32.5112686157227,32.5112686157227,32.5112686157227,32.5112686157227,32.5112686157227,32.5112686157227,32.5112686157227,32.5112686157227,32.5112686157227,33.0955123901367,33.0955123901367,33.0955123901367,33.0955123901367,33.0955123901367,33.0955123901367,33.0955123901367,33.0955123901367,33.0955123901367,33.0955123901367,33.0955123901367,33.0955123901367,33.0955123901367,33.0955123901367,33.733642578125,33.733642578125,33.733642578125,33.733642578125,33.733642578125,34.4516067504883,34.4516067504883,34.4516067504883,34.4516067504883,34.4516067504883,34.4516067504883,34.4516067504883,34.4516067504883,35.0762481689453,35.0762481689453,35.0762481689453,35.0762481689453,35.0762481689453,35.0762481689453,35.0762481689453,35.0762481689453,35.0762481689453,35.6746139526367,35.6746139526367,35.6746139526367,35.6746139526367,35.6746139526367,35.6746139526367,35.6746139526367,36.3484649658203,36.3484649658203,36.3484649658203,36.3484649658203,36.3484649658203,36.3484649658203,36.9195785522461,36.9195785522461,36.9195785522461,36.9195785522461,36.9195785522461,36.9195785522461,36.9195785522461,37.5619125366211,37.5619125366211,37.5619125366211,37.5619125366211,37.5619125366211,37.5619125366211,37.5619125366211,27.7499084472656,27.7499084472656,28.6186294555664,28.6186294555664,28.6186294555664,28.6186294555664,28.6186294555664,29.2545852661133,29.2545852661133,29.2545852661133,29.2545852661133,29.2545852661133,29.2545852661133,29.2545852661133,29.2545852661133,29.2545852661133,29.2545852661133,30.1711196899414,30.1711196899414,30.1711196899414,30.1711196899414,30.1711196899414,30.1711196899414,30.1711196899414,30.1711196899414,30.1711196899414,30.1711196899414,30.1711196899414,30.1711196899414,30.1711196899414,30.8162536621094,30.8162536621094,30.8162536621094,30.8162536621094,30.8162536621094,30.8162536621094,30.8162536621094,30.8162536621094,31.4332275390625,31.4332275390625,31.4332275390625,31.4332275390625,31.4332275390625,31.4332275390625,31.4332275390625,31.4332275390625,32.0896911621094,32.0896911621094,32.0896911621094,32.0896911621094,32.0896911621094,32.0896911621094,32.0896911621094,32.6750946044922,32.6750946044922,32.6750946044922,32.6750946044922,32.6750946044922,32.6750946044922,32.6750946044922,32.6750946044922,33.3269424438477,33.3269424438477,33.3269424438477,33.3269424438477,33.3269424438477,33.3269424438477,33.3269424438477,33.9226226806641,33.9226226806641,33.9226226806641,33.9226226806641,33.9226226806641,34.6209030151367,34.6209030151367,34.6209030151367,35.3398208618164,35.3398208618164,35.3398208618164,35.3398208618164,35.3398208618164,35.3398208618164,35.3398208618164,35.3398208618164,36.1987075805664,36.1987075805664,37.028678894043,37.028678894043,37.028678894043,37.028678894043,37.028678894043,37.028678894043,37.028678894043,37.028678894043,37.6145248413086,37.6145248413086,37.6145248413086,37.6145248413086,37.6145248413086,37.6145248413086,37.6145248413086,37.6145248413086,27.6121978759766,27.6121978759766,27.6121978759766,27.6121978759766,27.6121978759766,27.6121978759766,28.2574157714844,28.2574157714844,28.2574157714844,28.2574157714844,28.2574157714844,28.2574157714844,29.4439086914062,29.4439086914062,29.4439086914062,29.4439086914062,29.4439086914062,30.0476150512695,30.0476150512695,30.0476150512695,30.0476150512695,30.0476150512695,30.0476150512695,30.0476150512695,30.0476150512695,30.0476150512695,30.7269973754883,30.7269973754883,30.7269973754883,30.7269973754883,30.7269973754883,31.3289947509766,31.3289947509766,31.3289947509766,31.3289947509766,31.3289947509766,31.3289947509766,31.9299926757812,31.9299926757812,31.9299926757812,31.9299926757812,31.9299926757812,32.5401153564453,32.5401153564453,32.5401153564453,32.5401153564453,32.5401153564453,32.5401153564453,32.5401153564453,33.3097915649414,33.3097915649414,33.3097915649414,33.3097915649414,33.3097915649414,33.3097915649414,34.1142807006836,34.1142807006836,34.1142807006836,34.1142807006836,34.1142807006836,34.1142807006836,34.1142807006836,34.1142807006836,34.1142807006836,34.1142807006836,35.0674362182617,35.0674362182617,35.0674362182617,35.0674362182617,35.0674362182617,35.0674362182617,35.0674362182617,36.2587432861328,36.2587432861328,36.2587432861328,36.2587432861328,36.2587432861328,36.2587432861328,36.2587432861328,37.4554977416992,37.4554977416992,37.4554977416992,37.4554977416992,37.4554977416992,37.4554977416992,37.4554977416992,37.4554977416992,27.4069900512695,27.4069900512695,27.4069900512695,28.0386352539062,28.0386352539062,28.0386352539062,28.0386352539062,28.0386352539062,28.0386352539062,28.0386352539062,28.9763336181641,28.9763336181641,28.9763336181641,28.9763336181641,28.9763336181641,29.6011734008789,29.6011734008789,29.6011734008789,29.6011734008789,29.6011734008789,29.6011734008789,29.6011734008789,29.6011734008789,30.20751953125,30.20751953125,30.8236236572266,30.8236236572266,30.8236236572266,30.8236236572266,30.8236236572266,30.8236236572266,31.4487380981445,31.4487380981445,31.4487380981445,31.4487380981445,31.4487380981445,31.4487380981445,31.4487380981445,31.4487380981445,31.4487380981445,31.4487380981445,32.2389297485352,32.2389297485352,32.2389297485352,32.2389297485352,32.2389297485352,32.2389297485352,32.2389297485352,32.2389297485352,33.2437210083008,33.2437210083008,34.4540481567383,34.4540481567383,34.4540481567383,34.4540481567383,34.4540481567383,34.4540481567383,34.4540481567383,34.4540481567383,35.0459899902344,35.0459899902344,35.0459899902344,35.0459899902344,35.0459899902344,35.0459899902344,35.0459899902344,35.8984756469727,35.8984756469727,35.8984756469727,35.8984756469727,35.8984756469727,35.8984756469727,35.8984756469727,35.8984756469727,37.0963897705078,37.0963897705078,37.0963897705078,37.0963897705078,37.0963897705078,37.0963897705078,37.0963897705078,37.0963897705078,37.0963897705078,37.8395309448242,37.8395309448242,28.0529174804688,28.0529174804688,28.0529174804688,28.0529174804688,28.0529174804688,28.0529174804688,28.0529174804688,28.0529174804688,28.6618118286133,28.6618118286133,28.6618118286133,28.6618118286133,28.6618118286133,28.6618118286133,28.6618118286133,29.3150100708008,29.3150100708008,29.3150100708008,29.3150100708008,29.3150100708008,29.3150100708008,29.3150100708008,29.3150100708008,29.3150100708008,30.1310501098633,30.1310501098633,30.8446960449219,30.8446960449219,30.8446960449219,30.8446960449219,30.8446960449219,30.8446960449219,30.8446960449219,30.8446960449219,30.8446960449219,30.8446960449219,31.5913772583008,31.5913772583008,32.2591857910156,32.2591857910156,32.2591857910156,32.2591857910156,32.2591857910156,32.2591857910156,33.1084365844727,33.1084365844727,33.1084365844727,33.1084365844727,33.1084365844727,33.1084365844727,33.1084365844727,33.1084365844727,33.1084365844727,33.8316650390625,33.8316650390625,33.8316650390625,33.8316650390625,33.8316650390625,33.8316650390625,34.4332046508789,34.4332046508789,34.4332046508789,34.4332046508789,34.4332046508789,34.4332046508789,34.4332046508789,34.4332046508789,34.4332046508789,34.4332046508789,35.033203125,35.033203125,35.033203125,35.033203125,35.033203125,35.6902923583984,35.6902923583984,35.6902923583984,35.6902923583984,35.6902923583984,35.6902923583984,35.6902923583984,35.6902923583984,36.7844467163086,36.7844467163086,36.7844467163086,36.7844467163086,36.7844467163086,36.7844467163086,36.7844467163086,36.7844467163086,37.5169525146484,37.5169525146484,37.5169525146484,37.5169525146484,37.5169525146484,37.5169525146484,27.6176452636719,27.6176452636719,27.6176452636719,27.6176452636719,27.6176452636719,27.6176452636719,27.6176452636719,27.6176452636719,27.6176452636719,27.6176452636719,28.2225341796875,28.2225341796875,28.8020401000977,28.8020401000977,28.8020401000977,28.8020401000977,28.8020401000977,28.8020401000977,29.3978424072266,29.3978424072266,29.3978424072266,29.3978424072266,29.3978424072266,29.3978424072266,29.3978424072266,30.2904205322266,30.2904205322266,30.2904205322266,30.2904205322266,30.2904205322266,30.2904205322266,30.2904205322266,31.0593185424805,31.0593185424805,31.0593185424805,31.6918029785156,31.6918029785156,31.6918029785156,31.6918029785156,31.6918029785156,31.6918029785156,31.6918029785156,32.2878723144531,32.2878723144531,32.2878723144531,32.2878723144531,32.2878723144531,32.2878723144531,32.2878723144531,32.2878723144531,32.8725051879883,32.8725051879883,32.8725051879883,32.8725051879883,32.8725051879883,32.8725051879883,32.8725051879883,33.7722549438477,33.7722549438477,33.7722549438477,33.7722549438477,34.7815399169922,34.7815399169922,35.3684539794922,35.3684539794922,35.3684539794922,35.3684539794922,35.3684539794922,35.3684539794922,36.0041275024414,36.0041275024414,36.0041275024414,36.6196441650391,36.6196441650391,36.6196441650391,36.6196441650391,36.6196441650391,37.2015991210938,37.2015991210938,37.2015991210938,37.2015991210938,37.2015991210938,37.2015991210938,37.2015991210938,37.2015991210938,27.6818008422852,27.6818008422852,27.6818008422852,27.6818008422852,27.6818008422852,27.6818008422852,27.6818008422852,27.6818008422852,28.4501342773438,28.4501342773438,28.4501342773438,28.4501342773438,28.4501342773438,28.4501342773438,28.4501342773438,29.1500091552734,29.1500091552734,29.1500091552734,29.8200225830078,29.8200225830078,29.8200225830078,29.8200225830078,29.8200225830078,29.8200225830078,29.8200225830078,29.8200225830078,29.8200225830078,29.8200225830078,29.8200225830078,29.8200225830078,30.6907196044922,30.6907196044922,30.6907196044922,30.6907196044922,30.6907196044922,31.3007507324219,31.3007507324219,31.3007507324219,31.3007507324219,31.3007507324219,31.9126968383789,31.9126968383789,31.9126968383789,31.9126968383789,31.9126968383789,31.9126968383789,31.9126968383789,31.9126968383789,31.9126968383789,31.9126968383789,32.5213088989258,32.5213088989258,32.5213088989258,32.5213088989258,32.5213088989258,32.5213088989258,32.5213088989258,32.5213088989258,33.7180252075195,33.7180252075195,34.5473098754883,34.5473098754883,35.2522811889648,35.2522811889648,35.2522811889648,35.2522811889648,35.2522811889648,35.2522811889648,35.2522811889648,35.2522811889648,35.8546600341797,35.8546600341797,35.8546600341797,35.8546600341797,35.8546600341797,36.430778503418,36.430778503418,36.430778503418,36.430778503418,36.430778503418,36.430778503418,36.430778503418,36.430778503418,37.0011825561523,37.0011825561523,37.0011825561523,37.0011825561523,37.0011825561523,37.0011825561523,37.6151504516602,37.6151504516602,37.6151504516602,37.6151504516602,37.6151504516602,37.6151504516602,37.6151504516602,27.5621795654297,27.5621795654297,27.5621795654297,27.5621795654297,27.5621795654297,27.5621795654297,28.1611175537109,28.1611175537109,28.1611175537109,28.1611175537109,28.1611175537109,28.1611175537109,28.1611175537109,28.1611175537109,28.1611175537109,28.9061279296875,28.9061279296875,28.9061279296875,28.9061279296875,28.9061279296875,28.9061279296875,29.7794494628906,29.7794494628906,30.4769897460938,30.4769897460938,30.4769897460938,30.4769897460938,30.4769897460938,30.4769897460938,30.4769897460938,30.4769897460938,31.1945724487305,31.1945724487305,31.1945724487305,31.1945724487305,31.1945724487305,31.1945724487305,31.1945724487305,32.1216278076172,32.1216278076172,32.1216278076172,32.1216278076172,32.1216278076172,32.1216278076172,33.3267135620117,33.3267135620117,33.3267135620117,33.3267135620117,33.3267135620117,33.3267135620117,33.3267135620117,33.3267135620117,34.5336380004883,34.5336380004883,35.7320556640625,35.7320556640625,36.4781799316406,36.4781799316406,37.5272598266602,37.5272598266602,37.5272598266602,37.5272598266602,37.5272598266602,37.5272598266602,37.5272598266602,37.5272598266602,28.0461044311523,28.0461044311523,28.0461044311523,28.0461044311523,28.0461044311523,28.0461044311523,28.0461044311523,28.0461044311523,28.0461044311523,29.1261291503906,29.1261291503906,29.1261291503906,29.1261291503906,29.1261291503906,29.1261291503906,29.1261291503906,29.8713912963867,29.8713912963867,29.8713912963867,29.8713912963867,29.8713912963867,29.8713912963867,29.8713912963867,30.9096145629883,30.9096145629883,30.9096145629883,30.9096145629883,30.9096145629883,30.9096145629883,30.9096145629883,30.9096145629883,31.8013687133789,31.8013687133789,31.8013687133789,31.8013687133789,31.8013687133789,31.8013687133789,31.8013687133789,32.3963775634766,32.3963775634766,32.3963775634766,32.3963775634766,32.3963775634766,32.3963775634766,32.3963775634766,32.3963775634766,32.3963775634766,33.1223297119141,33.1223297119141,33.1223297119141,33.1223297119141,33.1223297119141,33.1223297119141,33.1223297119141,33.8401947021484,33.8401947021484,33.8401947021484,33.8401947021484,33.8401947021484,33.8401947021484,33.8401947021484,33.8401947021484,34.4634628295898,34.4634628295898,34.4634628295898,34.4634628295898,34.4634628295898,34.4634628295898,34.4634628295898,34.4634628295898,35.6717071533203,35.6717071533203,36.2844619750977,36.2844619750977,36.2844619750977,36.2844619750977,37.466667175293,37.466667175293,37.466667175293,37.466667175293,37.466667175293,37.466667175293,37.466667175293,37.466667175293,27.8402709960938,27.8402709960938,27.8402709960938,27.8402709960938,27.8402709960938,27.8402709960938,28.5718460083008,28.5718460083008,28.5718460083008,28.5718460083008,28.5718460083008,29.2606506347656,29.2606506347656,29.2606506347656,29.2606506347656,29.2606506347656,29.2606506347656,30.4052810668945,30.4052810668945,30.4052810668945,30.4052810668945,30.4052810668945,30.4052810668945,30.4052810668945,31.0168151855469,31.0168151855469,31.0168151855469,31.0168151855469,31.0168151855469,31.0168151855469,31.0168151855469,31.0168151855469,31.0168151855469,31.0168151855469,31.0168151855469,32.238395690918,32.238395690918,32.238395690918,32.238395690918,32.238395690918,32.238395690918,33.1433563232422,33.1433563232422,33.1433563232422,33.1433563232422,33.1433563232422,33.1433563232422,33.1433563232422,33.1433563232422,33.1433563232422,34.0446701049805,34.0446701049805,34.0446701049805,34.0446701049805,34.0446701049805,34.0446701049805,34.0446701049805,34.0446701049805,34.0446701049805,34.0446701049805,34.0446701049805,34.0446701049805,34.0446701049805,34.7350845336914,34.7350845336914,34.7350845336914,34.7350845336914,34.7350845336914,34.7350845336914,34.7350845336914,35.3193588256836,35.3193588256836,35.3193588256836,35.3193588256836,35.3193588256836,35.3193588256836,35.3193588256836,35.3193588256836,35.3193588256836,35.3193588256836,35.9756622314453,35.9756622314453,35.9756622314453,35.9756622314453,35.9756622314453,35.9756622314453,35.9756622314453,35.9756622314453,35.9756622314453,35.9756622314453,35.9756622314453,36.5845947265625,36.5845947265625,36.5845947265625,36.5845947265625,36.5845947265625,36.5845947265625,36.5845947265625,36.5845947265625,36.5845947265625,36.5845947265625,37.1887435913086,37.1887435913086,37.1887435913086,37.1887435913086,37.1887435913086,27.7025146484375,27.7025146484375,27.7025146484375,27.7025146484375,27.7025146484375,27.7025146484375,28.4496459960938,28.4496459960938,28.4496459960938,28.4496459960938,28.4496459960938,28.4496459960938,28.4496459960938,29.5219421386719,29.5219421386719,30.2827224731445,30.2827224731445,30.2827224731445,30.2827224731445,30.2827224731445,30.8838729858398,30.8838729858398,30.8838729858398,30.8838729858398,30.8838729858398,30.8838729858398,30.8838729858398],&#34;meminc&#34;:[0,0,0,0,0,0,0,0,0,0.606887817382812,0,0,0,0.571456909179688,0,0,0,0,0,0,0,0.714179992675781,0,0,0,0,0,0,0,0,0.640533447265625,0,0,0,0,0,0,0,0.763107299804688,0,0,0,0,0,0,0.599929809570312,0,0,0.712554931640625,0,0,0,0,0,0,0,0,0,0,0.584449768066406,0,0,0,0,0,0.639762878417969,0,0,0,0,0.876754760742188,0,0,0,0,0.874794006347656,0,0,0,0,0,0,0,0.748214721679688,0,0,0,0,0,0,0.81475830078125,0,-9.72452545166016,0,0,0,0,0,0,0,0,0,1.13270568847656,0,0,0,0,0,0,0.675285339355469,0,0,0,0,0,0,0,0,1.210205078125,0,0,0,0,0,0,0,0,0,0.588127136230469,0,0,0,0,0,0,0,0.6490478515625,0,0,0,0,0,0,0,0.73175048828125,0,1.00191497802734,0,0,0,0,0.9921875,0,0,0,0,0,0.556480407714844,0,0,0,0,0,0,0,0.642585754394531,0,0,0,0,0,0,0,0.586418151855469,0,0,0,0,0,0,0.595687866210938,0,0,0,0,0,0,0,0,0,0,0,0,0,0.610977172851562,0,0.599250793457031,0,0,0,0,0,0,-10.1884841918945,0,0,0,0,0,0,0,0,0,0,0,0,0,1.05315399169922,0,0,0,0,0,0,0,0,0,0.786781311035156,0,0,0,0,0,0,0,0,0,1.22640991210938,0,0,0,0,0,0,0,1.14829254150391,0,0,0,0,0,0,0,0,0,0,0.616752624511719,0,0,0,0,0,0,0.6126708984375,0,0,0,0,0,0,0.606826782226562,0,0,0,0,0,0,0,0,0,0.642051696777344,0,0,0,0,0,0.704170227050781,0,0,0,0,0,0,0.6104736328125,0,0,0,0,0,0,0.574111938476562,0,0,0,0,0.613601684570312,0,0,0,0,0.613609313964844,0,0,0,0,-9.85360717773438,0,0,0,0,0.7933349609375,0,0,0,0,0,0,0,0.646369934082031,0,0,0,0,1.01335906982422,0,0,0,0,0,0,0,0,0,0,0,0.702339172363281,0,0,0,0,0,0.665443420410156,0,0,0,0,0,0,0,0,0,1.08113861083984,0,0,0,0,0,1.2265625,0,0.746223449707031,0,0,0,0,0,0,0,0.798728942871094,0,0,0,0,0,0,0,0,0,0.612556457519531,0,0,0,0,0,0,0,0,0,0,0.643272399902344,0,0,0,0,0,0,0,0,0,0,0,0,0.740043640136719,0,-9.75235748291016,0,0,0,0,0.615943908691406,0,0,0,0,0,0,0.617729187011719,0,0,0,0,0,1.23162841796875,0,0,0,0,0,0.639236450195312,0,0,0,0,0,0,1.15070343017578,0,0,0,0,0,0,0.604393005371094,0,0,0,0,0,0,0.6126708984375,0,0,0,0,0,0,0.613601684570312,0,0,0,0,0,0,0.608413696289062,0,0,0,0,0,0,0.602668762207031,0,0,0,0,0.611732482910156,0,0,0,0,0.613609313964844,0,0,0,0,0.615058898925781,0,0,0,0,0.608413696289062,0,0,0,0,0.613601684570312,0,0,0,0,-10.1522674560547,0,0,0,0,0,0,0,0.737495422363281,0,0,0,0,0,0.970848083496094,0,0.6126708984375,0,0,0,0,0,0,0.61279296875,0,0.750961303710938,0,0,0,0,0,0,0,0,0,0,0.600914001464844,0,0,0,0,0,0,0.670265197753906,0,0,0,0,0,0,0,0.642707824707031,0,0,0,0,0,0,0.656120300292969,0,0.658607482910156,0,0,0,0,0,0,0,0,0,0,0.714408874511719,0,0,0,0,0.661224365234375,0,0,0,0,0,0,0,0,0.982620239257812,0,0,0.592742919921875,0,0,0,0,0,-10.324348449707,0,0,0,0,0,0,0.221786499023438,0,0,0,0,0,0,0,0,0,0,0,0,0.690200805664062,0,0.672317504882812,0,0,0,0,0.889640808105469,0,0,0,0,0,0,0,1.20870971679688,0,0.580772399902344,0,0,0,0,0,0,0,0.818290710449219,0,0,0,0,0,0,0.537429809570312,0,0,0,0,0,0,0.552970886230469,0,0,0,0,0,0.896812438964844,0,0,0,0,0,0,0,0,0.588729858398438,0,0.545257568359375,0,0,0,0,0,0,0,0,0,0.564323425292969,0,0.527992248535156,0,0,0,0,0,0,0.7017822265625,0,0,0,0,0,0,0,0,-9.90408325195312,0,0,0,0,1.02967834472656,0,0,0,0,0,0,0,0,0.605514526367188,0,0,0,0,0,0,0,0,0,0.947196960449219,0,1.21275329589844,0,0,0,0,0,0.91033935546875,0,0,0,0,0,0,0.89825439453125,0,0,0,0,0,0,0,0.615432739257812,0,0,0,0,0,0,0,1.177001953125,0,0,0,0,0,0,0,0.937255859375,0,0,0,0,0,0,0,0.573715209960938,0,0.900978088378906,0,0,0,0,0,0,0,0,0,0,-9.88484954833984,0,0,0,0,0,0,0,0,0.671310424804688,0,0,0,0,0,0,0.704605102539062,0,0,0,0,0,0,0,0.894668579101562,0,0,0,0,0.612403869628906,0,0,0,0,0.890396118164062,0,0,0,0,0,0,0,0,0,0,0.732688903808594,0,0,0,0,0,0,0,0,0,0,0,0,0.844161987304688,0,0,0,0,0,0,0,0,0,0,0.834571838378906,0,0,0,0,0.897346496582031,0,0,0,0,0.46051025390625,0,0,0,0,0,0,0.740470886230469,0,0,0,0,0,0,0,0,0,0.572914123535156,0,0,0,0,0,0,0,0.566932678222656,0,0,0,0,0,0.918434143066406,0,0,0,0,0,0,-9.94357299804688,0,0,0,0,0,0,0,0.80712890625,0,0,0,0,0,0,0,0.686546325683594,0,0,0,0,0,0,0,0.83294677734375,0,0,0,0,0,0,0.625137329101562,0,0,0,0,0,0,0,0,0,0,0.636009216308594,0,0.859207153320312,0,0,0,0,0.719711303710938,0,0,0,0,0,0,0,0.554489135742188,0,0,0,0,0,0,0,0,0.626556396484375,0,0,0,0,0,0.91949462890625,0,0,0,0,0,0.673835754394531,0,0,0,0,0.591835021972656,0,0,0,0,0.5706787109375,0,0,0,0,0,0,0,0.577186584472656,0,0,0,0,0.535881042480469,0,0,0,0,0,0,0,-10.143669128418,0,0.573783874511719,0,0.584609985351562,0,0,0,0,0.962562561035156,0,0,0,0,0,0,0,0,0,0.681449890136719,0,0,0,0,0,0.59967041015625,0,0,0,0,0,0,0,0,0.604377746582031,0,0,0,0,0,0,0.722480773925781,0,0,0,0,0,1.03629302978516,0,1.20703125,0,0,0,0,0,0,0.6019287109375,0,0,0,0,0,0,0,0.641883850097656,0,0,0,0,0,0,0,1.15532684326172,0,0,0,0,0,0,0,0,0,0,-9.81767272949219,0,0,0,0,0,0,0,0,0,0,0.830093383789062,0,0,0,0,0,0,0,0.61224365234375,0,0,0,0,0,0,0.659111022949219,0,0,0,0,0,0,0.634864807128906,0,0,0,0,0,0.593406677246094,0,0,0,0,0,0,0,0,1.00151062011719,0,0,0,0,0,0,0.638465881347656,0,0,0,0,0,0,0.891014099121094,0,0,0,0,0,0,0.667022705078125,0,0.777084350585938,0,0,0,0,0,0,0,1.18158721923828,0,0,0,0,0,0,0,0.683250427246094,0,0,0.966285705566406,0,0,0,0,0,0,0,0.478492736816406,0,0,-9.82257080078125,0,0,0,0,0,0,0,0.6114501953125,0,0,0,0,0,0,0,0,0,0,1.22434234619141,0,0,0,0,0,0,0,0,0,0,0,0.786277770996094,0,0,0,0,0,0,0.964767456054688,0,0,0,0,0,0,0,0,0,0.695533752441406,0,0,0,0,0.589866638183594,0,0,0,0,0.608993530273438,0,0,0,0,0,0,0,0,0,1.20967864990234,0,0.982368469238281,0,0,0,0,0.639259338378906,0,0,0,0,0,0,0,0,0,0,0,0,0.764106750488281,0,0,0,0,0,0,0,0,0.591270446777344,0,0,0,0,0,-9.79022979736328,0,1.21937561035156,0,0,0,0,0,0,0,0.639892578125,0,0,0,0,0,0,0,0.673912048339844,0,0,0,0,0,0,0,0.770889282226562,0,0.672882080078125,0,0,0,0,0,0,0.602455139160156,0,0,0,0,0.613609313964844,0,0,0,0,0.6126708984375,0,0,0,0,0.591484069824219,0,0,0,0,0,0,0.579818725585938,0,0,0,0,0.592514038085938,0,0,0,0,0,0,0.91461181640625,0,0.640182495117188,0,0.65948486328125,0,0,0,0,0,0,0,0,0,-9.64223480224609,0,1.20606994628906,0,0,0,0,0,0,0,0.898063659667969,0,0,0,0,0,0.611007690429688,0,0,0,0,1.1986083984375,0,0,0,0,0,0,0.600128173828125,0,0,0,0,0,0,0.651924133300781,0,0,0,0,0,0,1.14385223388672,0,0,0,0,0,0,1.12596130371094,0,0,0,0,0.588851928710938,0,0,0,0,0,0,0,0,0.600143432617188,0,0,0,0,0,0,0,0.593170166015625,0,0,0,0,0,-9.83806610107422,0,0,1.00753021240234,0,0,0,0,0,0.673789978027344,0,0,0,0,0,0,0.771759033203125,0,0,0,0,0,0,0.5987548828125,0,0,0,0,0,0,0,0,0.688980102539062,0,0,0,0,0,0,0.958633422851562,0,0,0,0,0,0,0,0,0,0.816642761230469,0,0,0,0,0,0,0.625831604003906,0,0,0,0,0,0,0,0,0,0.834617614746094,0,0,0,0,0,0,0.665412902832031,0,0.650131225585938,0,0,0,0,0,0,0.817520141601562,0,0,0,0,0,0,0,0.62078857421875,0,0,0,0,0,0,0,0,0,-9.79486846923828,0,0,0,0,0.630210876464844,0,0,0,0,0.769905090332031,0,0,0,0,0,0,0.654197692871094,0,0.613494873046875,0,0,0,0,0,0.60919189453125,0,0,0,0,0,0,0,0,0,0,0.661415100097656,0,0,0,0,0.991127014160156,0,0,0,0,0,0,0,0,0,0,0,0.754341125488281,0,0,0,0,0,0,0,0,0,0,0.747398376464844,0,0,0,0,0.963638305664062,0,0,0,0,0,0,0,0,0,0,0.730926513671875,0,0,0,0,0,0,0.681900024414062,0,0,0,0,0,0,0,1.1866455078125,0,0,0,0,-9.99486541748047,0,0,0,0,0,0,0,1.22477722167969,0,0,0,0,0,0,1.22123718261719,0,0,0,0,0,0,0,0,0,0.6036376953125,0,0,0,0,0,0,0,0,0,1.22156524658203,0,0,0,0,0.610458374023438,0,0.58917236328125,0,0.6527099609375,0,0,0,0,0,0,0,1.03821563720703,0,0,0,0,0,0,0,0,0,0.607414245605469,0,0,0,0.528404235839844,0,0,0,0,0,0,0.761756896972656,0,0,0,0,0,0.606773376464844,0,0,0,0,0,0,0,0,0,0,0.616828918457031,0,0,0,0,0,0,-10.1323089599609,0,0,0,0,0,0.585922241210938,0,0,0,0,0,0,0.877059936523438,0,0,0,0,0.606895446777344,0,0,0,0,0,0,0,1.22431182861328,0,0,0,0,0,0,1.02576446533203,0,0,0,0,0,0,0,0,0.791694641113281,0,0,0,0,0,0,0,0.605697631835938,0,0,0,0,0,0,0.872085571289062,0,0,0,0,0,0,0,0,0,0.607330322265625,0,0,0,0,0.598655700683594,0,0.5838623046875,0,0,0,0,0.6202392578125,0,0.601814270019531,0,0,0,0,0,0,0,0,0,0,0.650070190429688,0,0,0,-9.96430969238281,0,0,0.758003234863281,0,0,0,0,0,0,0,0,0,0,0.601280212402344,0,0,0,0,0,0,0,0.62359619140625,0,0,0,0,0,0,0,0,0,0,0,0,0.7464599609375,0,0,0,0,0,0,0,0.614326477050781,0,0,0,0,0,0,0.961502075195312,0,0,0,0,0,0,0,0,0.85821533203125,0,0,0.920112609863281,0,0,0,0,0,0,0.5877685546875,0,0,0,0,0,0,0,0,0,1.19404602050781,0,0,0,0,0,0,0.594680786132812,0,0,0,0,0,0,0,0,0,0,0,0,0,0.562080383300781,0,0,1.04564666748047,0,0,0,0,0,0,0,-9.79327392578125,0,0,0,0,0,0,0.661827087402344,0,0,0,0,0,0,0,0.608108520507812,0,0.717811584472656,0,0,0,0,0,0,0,0,0,0,0.83050537109375,0,0,0,0,0,0.610664367675781,0,0,0,0,0,0,0,0,0,1.21272277832031,0,0,0,0,0,0,0,0,0,0.935333251953125,0,0,0,0,0,0,0.872276306152344,0,0.611930847167969,0,0,0,0,0,0,0,0,0,0.777671813964844,0,0,0,0,0,0,0.6143798828125,0,0,0,0,0.591453552246094,0,0,0,0,0,0,0.590126037597656,0,0,0,0,-9.81147766113281,0,0,0,0,0,0,0,0.642967224121094,0,0,0,0,0,0,0,0,0,0,0.745475769042969,0,0,0.624725341796875,0,0,0,0,0,0,0,0.609848022460938,0,0,0,0,0,0,0,0,0,0.821197509765625,0,0,0,0,0,0,0,0,0.657608032226562,0,1.01963043212891,0,0,0,0,0,0,0.741287231445312,0,0,0,0,0,0,0,0,0.599853515625,0,0,0,0,0,0,0,0,0,0.666435241699219,0,0,0,0,0,0,0,0,0,0.600425720214844,0,0,0,0,0,0,0.595016479492188,0,0,0,0,1.19853210449219,0,0,0,0,0,-9.54248046875,0,0,0,0,0,0,0.742820739746094,0,1.22205352783203,0,0,0,0,0,0,0.617164611816406,0,0,0,0,0,0,0,0.696319580078125,0,0,0,0,0,0,0,0,0,0,0,0,0.834251403808594,0,0,0,0,0,0,0,0,0,1.21047210693359,0,0,0,0,0,0.844200134277344,0,0.602218627929688,0,0,0,0,0,0,0,0,0,1.19645690917969,0,0,0,0,0,0,0.639259338378906,0,1.15949249267578,0,0,0,0,0,0,-9.52375030517578,0,0.612571716308594,0,0,0,0,0,0,0,0,0.727516174316406,0,0,0,0,0,0,0,0,0,0,0,1.22148895263672,0,0,0,0.6121826171875,0,0,0,0,0,0.81549072265625,0,0,0,0,0.592430114746094,0,0,0,0,0,0,0,0.824119567871094,0,0,0.597488403320312,0,0,0,0,0.677993774414062,0,0,0,0,0,0,0.627281188964844,0,0,0,0,0,0.599342346191406,0,0.711715698242188,0,0,0,0.559669494628906,0,0,0,0,-9.95722198486328,0,0,0,0,0,0.643745422363281,0,0,0,0,0,0,0,0,0,0,0.960678100585938,0,0.749984741210938,0,0,0,0,0,0,0,0.602745056152344,0,0,0,0,0,0,0,0.579002380371094,0,0,0,0,0,0,0,0.6524658203125,0,0,0,0,0,0,0,0,0.687515258789062,0,0,0,0,0,0.651473999023438,0,0,0,0,0,1.0618896484375,0,0.601127624511719,0,0,0,0,0,0,0,0.611579895019531,0,0,0,0,0,0,0,0.662643432617188,0,0,0.884757995605469,0,0,0,0,0,0,0.613807678222656,0,0,0,0,0,0,0.569793701171875,0,0,0,0,0,0,-9.99490356445312,0,0,0,0,0,0,0,0,0,0.605903625488281,0,0,0,0,0.614410400390625,0,0,0,0,0,0,0,0.748794555664062,0,0,0,0,0,0,0,0.711196899414062,0,0,0,0,0,0,0,0,0,0.654823303222656,0,0.568206787109375,0,0,0,0,0,0,0,0,0,0,0.923500061035156,0,0,0,0,0,0,0.643585205078125,0,0,0,0,0,0,0,0,0.577217102050781,0,0,0,0,0,0,0,0,0,0,0.734077453613281,0,0,0,0,0,0,0,0,0,0.680854797363281,0,0,0,0,0.603378295898438,0,0,0,0,0,0,0,0,0.730239868164062,0,0,0,0,0,0,0,0,0,0.669219970703125,0,0,0,0,0,0.535377502441406,0,0,0,0,0,0,-10.0488204956055,0,0,0,0,0.814460754394531,0,0,0,0,0,0,0.675880432128906,0,0,0,0,0,0,0,0,0,0,0.64007568359375,0,0,0,0,0,0,0,0.842315673828125,0,0.589431762695312,0,0,0,0,0,0,0,0.606712341308594,0,0,0,0,0,0,0.79150390625,0,0,0,0,0,0,0,0,0.814682006835938,0,0,0,0,0,0,0,0.705451965332031,0,0,0,0,0,0,0,0,0,0,0.839164733886719,0,0,0,0,0,0,0,0.575958251953125,0,0,0,0,0,0.898933410644531,0,0,0,0,0.98077392578125,0,0,0,0,0,0,-10.0187225341797,0,0,0,0,0,0,0,0,0,0,0,0,0.585304260253906,0,0,0,0,0,0,0,0.859245300292969,0,0,0,0,0,0,0,0,0,0,0,0.922592163085938,0,0,0,0,0,0,0,0.606071472167969,0,0.819366455078125,0,0,0,0,0,0.710968017578125,0,0,0,0,0.84161376953125,0,0,0,0,0.66400146484375,0,0.770584106445312,0,0,0.701164245605469,0,0.791473388671875,0,0,0,0,0,0,0.613258361816406,0,0,0,0,0,0,0,0,0,0.831390380859375,0,0,0,0,0,0,0,0,0,0,0,0.495361328125,0,0,0,0,0,0,-9.61026000976562,0,0,0,0,0,0,0.656417846679688,0,0,0,0,0,0,0.652542114257812,0,0,0,0,0,0,0.698051452636719,0,0.982292175292969,0,0,0,0,0,0,0.644744873046875,0,0,0,0.709281921386719,0,0,0,0,0,0,0,0.966148376464844,0,0,0,0,0,0,0,0,0,0.811798095703125,0,0,0,0,0.671119689941406,0,0,0,0,0,0,0,0.621406555175781,0,0,0,0,0,0,0.680801391601562,0,0,0,0,0,0,0,0,0,0.654502868652344,0,0,0,0,0,0,0,0.66778564453125,0,0,0,0,0,0,-10.1132354736328,0,0,0,0,0,0,0.583061218261719,0,0,0,0,0,0,0,0.609756469726562,0,0,0,0.875846862792969,0,0.583534240722656,0,0,0,0,0,0,0,0.617416381835938,0,0,0,0,0,0,0,0.694831848144531,0,0.605720520019531,0,0,0.956558227539062,0,0,0,0,0,0,0.590423583984375,0,0,0,0,0,0,0.701225280761719,0,0.771224975585938,0,0,0,0,0,0,0.588706970214844,0,0,0,0,0,0.591766357421875,0,0.737068176269531,0,0,0,0,0,0.576400756835938,0,0,0,0,-10.1653366088867,0,0,0,0,0,0,0.588150024414062,0,0,0,0,0,0,0,0.6551513671875,0,0,0,0,0,0,0.899307250976562,0,0,0,0.839035034179688,0,0,0,0,0,0,0,0.664558410644531,0,0,0,0,0,0,0,0.572181701660156,0,0,0,0,0,0.654518127441406,0,0,0,0,0,0,0,0,0,0,0.642654418945312,0,0,0,0,0,0,0.609054565429688,0,0,0,0,0,0.790733337402344,0,0,0,0,0.711715698242188,0,0,0,0,0,0,0,0,0.649940490722656,0,0,0,0,0,0,0,0.915321350097656,0,0,0,0,0,0,0,0,0,0,0,0.609458923339844,0,0,0,0,0,0.614547729492188,0,0,0,0,0,-9.73262023925781,0,0,0,0,0,0,0,0,0.877037048339844,0,0,0,0,0,0,0,0,0,0.626235961914062,0,0,0,0,0,0,0,0.901695251464844,0,0,0,0,0,0.582908630371094,0,0,0,0,0,0,0,0,0.6326904296875,0,0.783370971679688,0,0,0,0,0,0,0,0,0.584243774414062,0,0,0,0,0,0,0,0,0,0,0,0,0,0.638130187988281,0,0,0,0,0.717964172363281,0,0,0,0,0,0,0,0.624641418457031,0,0,0,0,0,0,0,0,0.598365783691406,0,0,0,0,0,0,0.673851013183594,0,0,0,0,0,0.571113586425781,0,0,0,0,0,0,0.642333984375,0,0,0,0,0,0,-9.81200408935547,0,0.868721008300781,0,0,0,0,0.635955810546875,0,0,0,0,0,0,0,0,0,0.916534423828125,0,0,0,0,0,0,0,0,0,0,0,0,0.645133972167969,0,0,0,0,0,0,0,0.616973876953125,0,0,0,0,0,0,0,0.656463623046875,0,0,0,0,0,0,0.585403442382812,0,0,0,0,0,0,0,0.651847839355469,0,0,0,0,0,0,0.595680236816406,0,0,0,0,0.698280334472656,0,0,0.718917846679688,0,0,0,0,0,0,0,0.85888671875,0,0.829971313476562,0,0,0,0,0,0,0,0.585845947265625,0,0,0,0,0,0,0,-10.002326965332,0,0,0,0,0,0.645217895507812,0,0,0,0,0,1.18649291992188,0,0,0,0,0.603706359863281,0,0,0,0,0,0,0,0,0.67938232421875,0,0,0,0,0.601997375488281,0,0,0,0,0,0.600997924804688,0,0,0,0,0.610122680664062,0,0,0,0,0,0,0.769676208496094,0,0,0,0,0,0.804489135742188,0,0,0,0,0,0,0,0,0,0.953155517578125,0,0,0,0,0,0,1.19130706787109,0,0,0,0,0,0,1.19675445556641,0,0,0,0,0,0,0,-10.0485076904297,0,0,0.631645202636719,0,0,0,0,0,0,0.937698364257812,0,0,0,0,0.624839782714844,0,0,0,0,0,0,0,0.606346130371094,0,0.616104125976562,0,0,0,0,0,0.625114440917969,0,0,0,0,0,0,0,0,0,0.790191650390625,0,0,0,0,0,0,0,1.00479125976562,0,1.2103271484375,0,0,0,0,0,0,0,0.591941833496094,0,0,0,0,0,0,0.852485656738281,0,0,0,0,0,0,0,1.19791412353516,0,0,0,0,0,0,0,0,0.743141174316406,0,-9.78661346435547,0,0,0,0,0,0,0,0.608894348144531,0,0,0,0,0,0,0.6531982421875,0,0,0,0,0,0,0,0,0.8160400390625,0,0.713645935058594,0,0,0,0,0,0,0,0,0,0.746681213378906,0,0.667808532714844,0,0,0,0,0,0.849250793457031,0,0,0,0,0,0,0,0,0.723228454589844,0,0,0,0,0,0.601539611816406,0,0,0,0,0,0,0,0,0,0.599998474121094,0,0,0,0,0.657089233398438,0,0,0,0,0,0,0,1.09415435791016,0,0,0,0,0,0,0,0.732505798339844,0,0,0,0,0,-9.89930725097656,0,0,0,0,0,0,0,0,0,0.604888916015625,0,0.579505920410156,0,0,0,0,0,0.595802307128906,0,0,0,0,0,0,0.892578125,0,0,0,0,0,0,0.768898010253906,0,0,0.632484436035156,0,0,0,0,0,0,0.5960693359375,0,0,0,0,0,0,0,0.584632873535156,0,0,0,0,0,0,0.899749755859375,0,0,0,1.00928497314453,0,0.5869140625,0,0,0,0,0,0.635673522949219,0,0,0.615516662597656,0,0,0,0,0.581954956054688,0,0,0,0,0,0,0,-9.51979827880859,0,0,0,0,0,0,0,0.768333435058594,0,0,0,0,0,0,0.699874877929688,0,0,0.670013427734375,0,0,0,0,0,0,0,0,0,0,0,0.870697021484375,0,0,0,0,0.610031127929688,0,0,0,0,0.611946105957031,0,0,0,0,0,0,0,0,0,0.608612060546875,0,0,0,0,0,0,0,1.19671630859375,0,0.82928466796875,0,0.704971313476562,0,0,0,0,0,0,0,0.602378845214844,0,0,0,0,0.576118469238281,0,0,0,0,0,0,0,0.570404052734375,0,0,0,0,0,0.613967895507812,0,0,0,0,0,0,-10.0529708862305,0,0,0,0,0,0.59893798828125,0,0,0,0,0,0,0,0,0.745010375976562,0,0,0,0,0,0.873321533203125,0,0.697540283203125,0,0,0,0,0,0,0,0.717582702636719,0,0,0,0,0,0,0.927055358886719,0,0,0,0,0,1.20508575439453,0,0,0,0,0,0,0,1.20692443847656,0,1.19841766357422,0,0.746124267578125,0,1.04907989501953,0,0,0,0,0,0,0,-9.48115539550781,0,0,0,0,0,0,0,0,1.08002471923828,0,0,0,0,0,0,0.745262145996094,0,0,0,0,0,0,1.03822326660156,0,0,0,0,0,0,0,0.891754150390625,0,0,0,0,0,0,0.595008850097656,0,0,0,0,0,0,0,0,0.7259521484375,0,0,0,0,0,0,0.717864990234375,0,0,0,0,0,0,0,0.623268127441406,0,0,0,0,0,0,0,1.20824432373047,0,0.612754821777344,0,0,0,1.18220520019531,0,0,0,0,0,0,0,-9.62639617919922,0,0,0,0,0,0.731575012207031,0,0,0,0,0.688804626464844,0,0,0,0,0,1.14463043212891,0,0,0,0,0,0,0.611534118652344,0,0,0,0,0,0,0,0,0,0,1.22158050537109,0,0,0,0,0,0.904960632324219,0,0,0,0,0,0,0,0,0.901313781738281,0,0,0,0,0,0,0,0,0,0,0,0,0.690414428710938,0,0,0,0,0,0,0.584274291992188,0,0,0,0,0,0,0,0,0,0.656303405761719,0,0,0,0,0,0,0,0,0,0,0.608932495117188,0,0,0,0,0,0,0,0,0,0.604148864746094,0,0,0,0,-9.48622894287109,0,0,0,0,0,0.74713134765625,0,0,0,0,0,0,1.07229614257812,0,0.760780334472656,0,0,0,0,0.601150512695312,0,0,0,0,0,0],&#34;filename&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},&#34;interval&#34;:10,&#34;files&#34;:[],&#34;prof_output&#34;:&#34;/var/folders/f3/t51slq3x2dlfgk3ksp7vddzm0000gq/T//Rtmpc50nMf/filea0242a7e129.prof&#34;,&#34;highlight&#34;:{&#34;output&#34;:[&#34;^output\\$&#34;],&#34;gc&#34;:[&#34;^&lt;GC&gt;$&#34;],&#34;stacktrace&#34;:[&#34;^\\.\\.stacktraceo(n|ff)\\.\\.$&#34;]},&#34;split&#34;:&#34;h&#34;}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;div id=&#34;htmlwidget-2&#34; style=&#34;width:100%;height:600px;&#34; class=&#34;profvis html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;message&#34;:{&#34;prof&#34;:{&#34;time&#34;:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11],&#34;depth&#34;:[16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1],&#34;label&#34;:[&#34;%in%&#34;,&#34;getFoldFun&#34;,&#34;constantFoldCall&#34;,&#34;constantFold&#34;,&#34;cmp&#34;,&#34;h&#34;,&#34;tryInline&#34;,&#34;cmpCall&#34;,&#34;cmp&#34;,&#34;genCode&#34;,&#34;cmpfun&#34;,&#34;compiler:::tryCmpfun&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sum&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;getOption&#34;,&#34;sum&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sum&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sum&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;],&#34;filenum&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,1,null,null,null,null],&#34;linenum&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,3,null,null,null,null,null,null,null,null,3,null,null,null,null],&#34;memalloc&#34;:[28.4371337890625,28.4371337890625,28.4371337890625,28.4371337890625,28.4371337890625,28.4371337890625,28.4371337890625,28.4371337890625,28.4371337890625,28.4371337890625,28.4371337890625,28.4371337890625,28.4371337890625,28.4371337890625,28.4371337890625,28.4371337890625,31.9986114501953,31.9986114501953,31.9986114501953,31.9986114501953,31.9986114501953,31.9986114501953,31.9986114501953,43.547966003418,43.547966003418,43.547966003418,43.547966003418,43.547966003418,43.547966003418,43.547966003418,43.547966003418,50.6626663208008,50.6626663208008,50.6626663208008,50.6626663208008,50.6626663208008,50.6626663208008,50.6626663208008,50.6626663208008,60.4793243408203,60.4793243408203,60.4793243408203,60.4793243408203,60.4793243408203,60.4793243408203,60.4793243408203,49.5292510986328,49.5292510986328,49.5292510986328,49.5292510986328,49.5292510986328,49.5292510986328,49.5292510986328,49.5292510986328,35.8811111450195,35.8811111450195,35.8811111450195,35.8811111450195,35.8811111450195,35.8811111450195,35.8811111450195,35.8811111450195,44.1074447631836,44.1074447631836,44.1074447631836,44.1074447631836,44.1074447631836,44.1074447631836,44.1074447631836,44.1074447631836,54.609489440918,54.609489440918,54.609489440918,54.609489440918,54.609489440918,54.609489440918,54.609489440918,54.609489440918,60.3472442626953,60.3472442626953,60.3472442626953,60.3472442626953,60.3472442626953,60.3472442626953,60.3472442626953,44.938232421875,44.938232421875,44.938232421875,44.938232421875,44.938232421875,44.938232421875,44.938232421875,44.938232421875,44.938232421875],&#34;meminc&#34;:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.56147766113281,0,0,0,0,0,0,11.5493545532227,0,0,0,0,0,0,0,7.11470031738281,0,0,0,0,0,0,0,9.81665802001953,0,0,0,0,0,0,-10.9500732421875,0,0,0,0,0,0,0,-13.6481399536133,0,0,0,0,0,0,0,8.22633361816406,0,0,0,0,0,0,0,10.5020446777344,0,0,0,0,0,0,0,5.73775482177734,0,0,0,0,0,0,-15.4090118408203,0,0,0,0,0,0,0,0],&#34;filename&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null]},&#34;interval&#34;:10,&#34;files&#34;:[{&#34;filename&#34;:&#34;&lt;expr&gt;&#34;,&#34;content&#34;:&#34;set.seed(2009)\nprofvis({\n    NullDistFSNDR_aw &lt;- fastSimNullDistRProp(sex ~ time, success=\&#34;Female\&#34;, data=tips)\n})&#34;,&#34;normpath&#34;:&#34;&lt;expr&gt;&#34;}],&#34;prof_output&#34;:&#34;/var/folders/f3/t51slq3x2dlfgk3ksp7vddzm0000gq/T//Rtmpc50nMf/filea021a18cd1c.prof&#34;,&#34;highlight&#34;:{&#34;output&#34;:[&#34;^output\\$&#34;],&#34;gc&#34;:[&#34;^&lt;GC&gt;$&#34;],&#34;stacktrace&#34;:[&#34;^\\.\\.stacktraceo(n|ff)\\.\\.$&#34;]},&#34;split&#34;:&#34;h&#34;}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;div id=&#34;htmlwidget-3&#34; style=&#34;width:100%;height:600px;&#34; class=&#34;profvis html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-3&#34;&gt;{&#34;x&#34;:{&#34;message&#34;:{&#34;prof&#34;:{&#34;time&#34;:[1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,4,4,4,4,4,4,4,5,5,5,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,11,11,11,12,12,12,12,12,12,12,12,12,13,13,13,13,13,14,14,14,14,14,14,14,15,15,15,15,15,16,16,16,16,16,16,16,17,17,18,18,18,18,18,19,19,19,19,19,20,20,20,20,20,20,20,21,21,21,21,22,22,22,22,22,22,22,22,23,23,23,24,24,24,24,24,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,29,29,29,29,29,29,29,30,30,30,30,30,30,30,31,31,31,31,31,32,32,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,39,39,39,39,39,40,40,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,44,44,44,44,44,44,45,45,45,45,45,45,45,45,46,46,46,46,46,47,47,47,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,52,52,52,52,53,53,53,53,53,53,53,53,53,53,53,54,54,54,54,54,55,55,55,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,61,61,61,61,61,61,61,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,63,64,64,64,64,64,64,64,65,65,66,66,66,66,66,66,66,66,67,67,67,67,68,68,69,69,69,69,69,69,69,69,69,70,70,70,70,71,71,71,71,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,73,73,73,73,74,74,74,74,74,74,74,74,74,74,74,74,74,74,75,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,78,78,78,78,78,78,78,78,78,78,78,79,79,79,79,79,79,79,79,80,80,80,80,80,80,80,81,81,81,81,81,81,81,82,82,82,82,82,83,83,83,83,83,84,84,84,84,84,84,84,84,85,85,86,86,86,86,86,86,86,87,87,87,87,87,87,87,87,88,88,88,88,88,88,89,89,90,90,90,90,90,91,91,91,91,91,91,91,91,91,91,91,92,92,92,92,92,93,93,93,93,93,94,94,94,94,94,94,94,94,95,95,96,96,96,96,96,97,97,97,97,97,98,98,98,98,99,99,100,100,100,100,100,100,100,101,101,101,102,102,102,102,102,102,102,103,103,103,103,103,103,103,104,104,104,104,105,105,105,105,105,105,105,105,105,106,106,106,106,106,107,107,107,107,107,107,107,108,108,108,108,108,108,108,108,108,109,109,109,109,109,109,110,110,110,110,110,110,110,111,111,111,111,111,112,112,112,112,112,112,112,113,113,113,113,113,114,114,114,114,115,115,116,116,116,116,116,116,116,116,116,117,117,117,117,117,118,118,119,119,119,119,119,120,120,120,120,120,120,120,120,120,121,121,121,121,121,121,121,121,121,121,121,122,122,122,122,122,122,122,122,123,123,123,123,123,123,123,123,123,123,123,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,126,126,126,126,126,127,127,127,127,127,127,127,127,128,128,128,128,128,129,129,129,129,129,129,129,129,130,130,130,130,130,130,130,130,131,131,131,131,131,131,131,132,132,132,132,132,132,133,133,133,133,133,133,133,133,134,134,135,135,135,135,135,135,135,135,135,136,136,136,136,136,137,137,137,137,137,137,137,138,138,138,138,138,138,139,139,139,139,139,140,140,140,140,140,140,140,140,140,140,141,141,141,142,142,142,142,142,142,142,142,143,143,143,144,144,144,144,144,144,144,144,144,144,145,145,145,145,145,145,145,146,146,146,146,146,146,146,147,147,147,147,147,147,147,147,147,147,147,147,147,148,148,148,148,148,148,148,148,148,148,149,149,149,149,149,149,149,149,149,149,150,150,150,150,150,150,150,150,150,151,151,151,151,151,152,152,152,152,152,152,152,152,152,153,153,153,153,153,153,153,154,154,154,154,154,154,155,155,155,155,155,155,155,155,155,155,156,156,156,156,156,156,156,157,157,157,157,157,157,157,157,157,157,157,157,158,158,158,158,158,158,158,159,159,159,159,160,160,161,161,161,161,161,161,161,161,162,162,162,162,162,162,163,163,163,163,163,163,164,164,164,164,164,164,165,165,165,165,165,165,166,166,166,166,166,166,166,166,166,166,167,167,167,167,167,167,168,168,168,168,169,169,169,169,169,169,169,169,170,170,170,170,170,170,170,170,170,170,170,171,171,171,172,172,172,172,172,172,172,173,173,174,174,174,174,174,174,174,175,175,175,175,175,175,176,176,176,176,176,176,176,176,177,177,177,177,177,177,177,177,177,178,178,178,178,179,179,180,180,180,180,180,180,180,180,180,180,181,181,181,181,181,181,181,181,181,182,182,183,183,183,183,183,183,183,183,183,183,184,184,184,184,184,184,184,185,185,185,185,185,185,186,186,186,186,186,186,186,186,186,187,187,187,187,187,187,187,187,187,188,188,188,188,188,188,188,188,189,189,189,189,189,189,189,189,189,189,190,190,190,190,190,190,191,191,191,191,192,192,192,192,192,193,193,193,193,193,193,193,193,194,194,194,194,194,194,194,195,195,195,195,195,195,195,195,196,196,196,196,196,196,197,197,197,197,197,197,197,197,197,197,198,198,198,198,198,198,198,198,199,199,199,199,199,199,199,199,200,200,200,200,201,201,201,201,201,201,201,201,201,202,202,202,202,202,202,202,202,202,202,202,202,202,203,203,203,203,203,203,203,203,203,203,204,204,204,204,205,205,205,205,205,206,206,206,206,206,206,206,207,207,207,207,207,207,207,208,208,208,208,208,208,208,208,208,208,209,209,209,209,209,210,210,210,210,210,210,210,211,211,211,211,211,211,211,211,211,211,211,211,211,212,212,212,212,212,213,213,213,213,213,213,213,214,214,214,214,215,215,216,216,216,216,216,216,216,216,217,217,218,218,218,218,218,219,219,219,219,219,219,220,220,220,220,220,220,220,220,220,220,221,221,221,221,221,222,222,222,222,222,222,222,223,223,223,223,223,223,223,223,223,224,224,224,224,224,224,225,225,225,225,225,225,225,226,226,226,226,226,227,227,227,227,227,227,227,227,227,227,228,228,228,228,228,228,228,228,228,228,229,229,230,230,230,230,230,230,230,230,231,231,231,231,231,231,231,231,231,231,231,232,232,232,232,232,232,232,233,233,233,233,233,233,234,234,234,234,234,234,234,235,235,235,235,235,235,235,236,236,236,236,236,236,237,237,237,237,237,237,237,237,238,238,238,238,238,238,238,238,238,239,239,239,239,239,239,240,240,240,240,240,240,240,240,241,241,241,241,241,242,242,242,242,242,242,242,243,243,244,244,244,244,244,244,244,245,245,246,246,246,246,246,246,246,247,247,247,247,247,247,247,248,248,248,248,248,248,248,248,248,249,249,249,249,249,249,249,250,250,250,250,250,250,250,250,250,251,251,252,252,252,252,252,252,252,253,253,253,253,253,254,254,255,255,255,255,255,256,256,256,256,256,257,257,257,257,257,257,257,257,258,258,258,258,258,258,258,258,258,258,258,259,259,259,259,259,259,259,260,260,260,260,260,260,260,260,260,260,260,260,261,261,261,261,261,261,261,262,262,262,262,262,262,262,262,262,262,262,263,263,263,263,263,263,263,264,264,264,264,264,264,264,264,264,265,265,265,265,265,265,266,266,266,266,266,266,266,266,267,267,267,267,267,267,267,268,268,269,269,269,269,269,269,269,269,270,270,270,270,270,270,270,270,270,270,271,271,271,271,271,271,271,272,272,272,272,272,272,273,273,273,273,273,273,273,274,274,274,274,274,274,274,274,275,275,275,275,275,275,275,276,276,276,277,277,278,278,278,278,278,278,278,279,279,279,279,279,280,280,280,280,280,280,280,280,280,281,281,281,281,281,281,281,281,281,281,282,282,282,282,282,283,283,283,283,284,284,284,284,284,285,285,285,285,285,285,286,286,286,286,286,286,286,287,287,288,288,288,288,288,288,288,289,289,289,289,289,289,289,289,289,289,289,290,290,290,290,290,290,290,290,290,290,290,290,290,290,291,291,291,291,291,291,292,292,292,292,292,292,293,293,294,294,294,294,294,294,295,295,296,296,296,296,296,296,296,297,297,297,297,297,297,298,298,298,298,298,299,299,299,299,299,299,299,300,300,300,300,300,301,301,301,301,301,301,301,302,302,302,303,303,303,303,303,303,303,304,304,304,304,304,304,305,305,305,305,305,305,305,306,306,306,306,306,307,307,307,307,307,307,307,308,308,308,308,308,308,308,308,308,309,309,309,309,309,309,309,309,309,309,310,310,310,310,310,310,311,311,311,311,311,311,311,312,312,312,312,312,313,313,313,313,313,314,314,314,314,314,314,314,314,315,315,315,315,315,315,315,315,316,316,316,316,316,316,316,316,317,317,317,317,317,317,317,317,318,318,318,318,318,318,318,318,319,319,319,319,319,319,319,319,320,320,320,320,320,320,320,320,321,321,321,321,321,321,321,321,322,322,322,322,322,322,323,323,323,323,323,323,323,323,323,323,323,324,324,324,324,324,324,324,324,325,325,325,325,325,325,325,326,326,326,326,326,326,326,326,327,327,327,327,327,327,327,327,328,328,328,328,328,328,328,329,329,329,329,329,329,329,330,330,330,331,331,331,331,332,332,332,332,332,332,332,332,332,333,333,333,333,333,333,333,333,333,333,333,334,334,335,335,335,335,335,335,335,335,336,336,337,337,337,337,337,337,337,337,337,338,338,338,338,338,338,339,339,339,339,339,339,340,340,340,340,340,340,340,340,340,340,340,341,341,341,341,341,341,341,341,341,342,342,342,342,342,342,342,343,343,343,343,343,343,343,343,343,343,344,344,344,344,345,345,345,345,345,346,346,346,346,346,346,347,347,347,347,347,347,347,348,348,348,348,348,348,348,348,348,349,349,349,349,349,349,350,350,350,350,351,351,351,351,351,351,351,351,351,351,351,351,351,351,352,352,352,352,352,352,352,352,352,352,352,352,353,353,353,353,353,353,353,353,353,353,353,354,354,354,354,354,354,354,355,355,355,355,355,355,355,356,356,356,356,356,356,357,357,357,357,357,358,358,358,358,358,358,358,358,358,359,359,359,359,359,359,359,359,360,360,360,360,360,360,360,360,361,361,361,361,361,361,361,361,362,362,362,362,362,362,362,362,363,363,363,363,363,363,363,363,364,364,364,364,364,364,365,365,365,365,365,366,366,366,366,366,366,366,367,367,367,367,367,367,367,368,368,369,369,369,369,369,369,369,369,370,370,370,370,370,371,371,371,371,371,371,371,371,372,372,372,372,372,372,372,373,373,373,373,373,373,373,374,374,374,374,374,374,374,375,375,375,375,375,375,375,375,376,376,376,376,376,376,376,376,376,377,377,377,377,377,377,377,377,378,378,378,378,378,378,378,378,378,378,379,379,380,380,381,381,381,381,381,381,381,382,382,382,383,383,383,384,384,384,384,384,384,384,384,384,384,385,385,385,385,385,385,386,386,386,386,386,386,386,387,387,387,387,387,387,388,388,388,388,388,388,389,389,389,389,389,390,390,390,390,390,391,391,391,391,391,391,391,391,392,392,392,392,392,393,393,393,394,394,394,394,395,395,395,395,395,395,395,395,395,395,395,395,395,396,396,396,396,396,396,396,396,396,396,396,396,396,396,397,397,398,398,398,398,398,398,398,398,398,399,399,399,399,399,400,400,400,400,400,400,400,400,401,401,401,401,401,402,402,402,402,402,402,402,402,402,403,403,403,403,403,403,403,404,404,405,405,405,405,405,405,405,405,405,406,406,406,406,406,406,406,406,406,406,407,407,407,407,407,407,407,407,408,408,408,408,408,408,408,408,409,409,409,409,409,409,409,409,409,409,410,410,410,410,410,410,410,410,411,411,411,411,411,411,412,412,412,412,412,412,412,412,412,412,413,413,414,414,414,414,414,414,414,415,415,415,415,415,415,415,415,415,415,415,416,416,416,416,416,417,417,417,417,417,417,417,417,417,417,418,418,418,418,418,419,419,419,419,419,420,420,420,420,421,421,422,422,422,422,422,422,422,422,423,423,423,423,423,423,423,424,424,424,424,424,424,425,425,425,425,425,425,425,426,426,426,426,426,427,427,427,427,427,427,427,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,430,430,430,430,430,430,430,431,431,432,432,432,432,433,433,433,433,433,433,433,433,433,433,434,434,434,434,434,434,434,434,435,435,435,435,435,435,435,435,435,435,435,436,436,436,436,436,436,436,436,437,437,437,437,437,437,437,437,438,438,438,438,438,438,438,439,439,439,439,439,439,439,439,439,439,439,440,440,440,440,440,440,441,441,441,441,441,441,441,442,442,442,442,442,442,442,443,443,443,443,443,443,443,443,444,444,444,444,444,445,445,445,445,445,445,445,445,446,446,446,446,447,447,447,447,447,447,447,448,448,448,448,448,448,448,449,449,449,449,449,449,449,449,450,450,450,450,450,450,450,450,451,451,451,451,451,451,452,452,452,453,453,453,453,453,453,453,454,454,454,454,454,454,454,454,454,454,455,455,455,456,456,456,456,456,456,456,456,456,456,457,457,457,457,457,457,458,458,458,458,458,458,458,459,459,459,459,459,460,460,461,461,461,461,461,462,462,462,462,462,462,462,462,462,462,462,462,462,463,463,463,463,463,463,464,464,464,464,464,465,465,465,465,465,465,465,465,466,466,466,466,466,467,467,468,468,469,469,469,469,469,470,470,470,470,470,470,470,471,471,471,471,471,471,471,471,472,472,472,472,472,472,472,473,473,473,473,473,473,474,474,474,474,474,474,474,474,474,475,475,475,475,475,475,475,476,476,476,476,476,477,477,477,477,477,478,478,478,478,479,479,479,479,480,480,480,480,480,481,481,481,481,481,481,481,482,482,483,483,483,483,483,483,483,484,484,485,485,485,485,485,485,486,486,486,486,486,486,486,487,487,488,488,488,488,488,489,489,489,489,489,490,490,491,491,491,491,491,491,491,492,492,492,492,492,492,492,492,493,493,493,493,493,493,493,493,494,494,494,495,495,495,495,495,495,495,496,496,496,496,496,496,496,496,497,497,497,497,497,497,497,498,498,498,498,498,498,498,498,499,499,499,499,499,499,499,500,500,500,500,500,501,501,501,501,501,502,502,502,502,502,503,503,503,503,503,503,503,503,503],&#34;depth&#34;:[9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,3,2,1,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,2,1,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,8,7,6,5,4,3,2,1,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,2,1,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,4,3,2,1,2,1,9,8,7,6,5,4,3,2,1,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,2,1,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,2,1,7,6,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,4,3,2,1,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,3,2,1,8,7,6,5,4,3,2,1,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,4,3,2,1,2,1,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,4,3,2,1,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,2,1,8,7,6,5,4,3,2,1,2,1,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,5,4,3,2,1,2,1,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,3,2,1,2,1,7,6,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,2,1,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,3,2,1,4,3,2,1,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,2,1,2,1,7,6,5,4,3,2,1,3,2,1,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,3,2,1,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,2,1,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,2,1,2,1,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,5,4,3,2,1,5,4,3,2,1,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1],&#34;label&#34;:[&#34;structure&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;&lt;Anonymous&gt;&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;~&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;[[.data.frame&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;unique&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;rhs_or_expr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;alist&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rlang::is_formula&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rlang::eval_tidy&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;diff.default&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;do.call&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;NextMethod&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[[&lt;-&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sys.call&#34;,&#34;alist&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[.data.frame&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;anyNA&#34;,&#34;local&#34;,&#34;parent.frame&#34;,&#34;enexpr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;unique&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rlang::is_formula&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;paste0&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;levels&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[[.data.frame&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;is.call&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.External2&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rlang::is_formula&#34;,&#34;rhs_or_expr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sys.function&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;$&#34;,&#34;lhs.parsedFormula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[.data.frame&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;$&#34;,&#34;condition.parsedFormula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sum&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sys.function&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;row.names&lt;-&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;~&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;split&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;lhs&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean.default&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;grep&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;enexpr&#34;,&#34;rhs_or_expr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;grep&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rlang::is_formula&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;grep&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.integer&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;grep&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;row.names&lt;-&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition.parsedFormula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;rhs.parsedFormula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.External2&#34;,&#34;local&#34;,&#34;force&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;enexpr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;diff.default&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;$&#34;,&#34;lhs.parsedFormula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;Anonymous&gt;&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sum&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;enexpr&#34;,&#34;rhs_or_expr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.External2&#34;,&#34;local&#34;,&#34;NextMethod&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;make.unique&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.External2&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;enexpr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;unique&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sys.call&#34;,&#34;alist&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;alist&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;NextMethod&#34;,&#34;[.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rlang::is_formula&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rlang::is_formula&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;paste0&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;getOption&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;...names&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;any&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list.default&#34;,&#34;alist&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs_or_expr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sys.function&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;mosaicCore::joinFrames&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition.parsedFormula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;Anonymous&gt;&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;dim.data.frame&#34;,&#34;ncol&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.integer&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;%in%&#34;,&#34;[.data.frame&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;attributes&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;names&lt;-&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;any&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;attributes&#34;,&#34;local&#34;,&#34;paste0&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sys.function&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;do.call&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;NextMethod&#34;,&#34;[.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;dim.data.frame&#34;,&#34;ncol&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;do.call&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;attributes&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs_or_expr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;Anonymous&gt;&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;any&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs_or_expr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;names&#34;,&#34;[.data.frame&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;any&#34;,&#34;local&#34;,&#34;is.factor&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;enexpr&#34;,&#34;rhs_or_expr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;diff.default&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;match.fun&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;(&#34;,&#34;local&#34;,&#34;$&#34;,&#34;lhs.parsedFormula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;list&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;dim&#34;,&#34;ncol&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;is.factor&#34;,&#34;grep&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;alist&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list.default&#34;,&#34;alist&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;startsWith&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;Anonymous&gt;&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;is.data.frame&#34;,&#34;rownames&lt;-&#34;,&#34;row.names&lt;-.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;any&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;paste0&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;any&#34;,&#34;local&#34;,&#34;attr&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;diff.default&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;is.factor&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;alist&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;grep&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;abs&#34;,&#34;local&#34;,&#34;force&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;list&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;unlist&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parent.frame&#34;,&#34;caller_env&#34;,&#34;rlang::eval_tidy&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;alist&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;nzchar&#34;,&#34;local&#34;,&#34;rhs&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sys.parent&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parent.frame&#34;,&#34;caller_env&#34;,&#34;rlang::eval_tidy&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;paste0&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;paste0&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;cull&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list.default&#34;,&#34;alist&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;c&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;alist&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;dim&#34;,&#34;ncol&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;paste0&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;do.call&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.list&#34;,&#34;alist&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;enexpr&#34;,&#34;rhs_or_expr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;diff&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;enexpr&#34;,&#34;rhs_or_expr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;any&#34;,&#34;local&#34;,&#34;enexpr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;dim.data.frame&#34;,&#34;ncol&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rlang::enexpr&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;pmatch&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;environment&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;condition.parsedFormula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;length&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.External2&#34;,&#34;local&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[[&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;attributes&#34;,&#34;local&#34;,&#34;grep&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;grep&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;names&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;structure&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;gsub&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;grep&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;%in%&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;],&#34;filenum&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],&#34;linenum&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],&#34;memalloc&#34;:[28.6987686157227,28.6987686157227,28.6987686157227,28.6987686157227,28.6987686157227,28.6987686157227,28.6987686157227,28.6987686157227,28.6987686157227,29.1891784667969,29.1891784667969,29.1891784667969,29.1891784667969,29.1891784667969,29.1891784667969,29.1891784667969,29.6740570068359,29.6740570068359,30.6693878173828,30.6693878173828,30.6693878173828,30.6693878173828,30.6693878173828,30.6693878173828,30.6693878173828,31.1491317749023,31.1491317749023,31.1491317749023,32.0458068847656,32.0458068847656,32.9710388183594,32.9710388183594,32.9710388183594,32.9710388183594,32.9710388183594,32.9710388183594,32.9710388183594,32.9710388183594,33.4404067993164,33.4404067993164,33.4404067993164,33.4404067993164,33.4404067993164,33.4404067993164,33.4404067993164,33.4404067993164,33.4404067993164,34.3660888671875,34.3660888671875,34.3660888671875,34.3660888671875,34.3660888671875,34.3660888671875,34.3660888671875,34.3660888671875,34.3660888671875,35.2992858886719,35.2992858886719,35.2992858886719,35.2992858886719,35.2992858886719,35.2992858886719,35.7754287719727,35.7754287719727,35.7754287719727,36.2434463500977,36.2434463500977,36.2434463500977,36.2434463500977,36.2434463500977,36.2434463500977,36.2434463500977,36.2434463500977,36.2434463500977,28.2878799438477,28.2878799438477,28.2878799438477,28.2878799438477,28.2878799438477,28.8211822509766,28.8211822509766,28.8211822509766,28.8211822509766,28.8211822509766,28.8211822509766,28.8211822509766,29.4347534179688,29.4347534179688,29.4347534179688,29.4347534179688,29.4347534179688,30.0958862304688,30.0958862304688,30.0958862304688,30.0958862304688,30.0958862304688,30.0958862304688,30.0958862304688,30.8663101196289,30.8663101196289,31.5713348388672,31.5713348388672,31.5713348388672,31.5713348388672,31.5713348388672,32.0727691650391,32.0727691650391,32.0727691650391,32.0727691650391,32.0727691650391,32.6383819580078,32.6383819580078,32.6383819580078,32.6383819580078,32.6383819580078,32.6383819580078,32.6383819580078,33.2125015258789,33.2125015258789,33.2125015258789,33.2125015258789,34.1846389770508,34.1846389770508,34.1846389770508,34.1846389770508,34.1846389770508,34.1846389770508,34.1846389770508,34.1846389770508,35.1567306518555,35.1567306518555,35.1567306518555,35.9982070922852,35.9982070922852,35.9982070922852,35.9982070922852,35.9982070922852,36.5636825561523,36.5636825561523,36.5636825561523,36.5636825561523,36.5636825561523,36.5636825561523,36.5636825561523,36.5636825561523,36.5636825561523,29.0336074829102,29.0336074829102,29.0336074829102,29.0336074829102,29.0336074829102,29.0336074829102,29.0336074829102,29.6117095947266,29.6117095947266,29.6117095947266,29.6117095947266,29.6117095947266,29.6117095947266,29.6117095947266,29.6117095947266,29.6117095947266,30.6039962768555,30.6039962768555,30.6039962768555,30.6039962768555,30.6039962768555,30.6039962768555,30.6039962768555,31.3678970336914,31.3678970336914,31.3678970336914,31.3678970336914,31.3678970336914,31.3678970336914,31.3678970336914,32.3549423217773,32.3549423217773,32.3549423217773,32.3549423217773,32.3549423217773,32.3549423217773,32.3549423217773,33.3281402587891,33.3281402587891,33.3281402587891,33.3281402587891,33.3281402587891,33.933349609375,33.933349609375,34.7912521362305,34.7912521362305,34.7912521362305,34.7912521362305,34.7912521362305,34.7912521362305,34.7912521362305,34.7912521362305,34.7912521362305,35.7634887695312,35.7634887695312,35.7634887695312,35.7634887695312,35.7634887695312,35.7634887695312,35.7634887695312,35.7634887695312,35.7634887695312,36.4136810302734,36.4136810302734,36.4136810302734,36.4136810302734,36.4136810302734,36.4136810302734,36.4136810302734,36.4136810302734,28.4593124389648,28.4593124389648,28.4593124389648,28.4593124389648,28.4593124389648,28.4593124389648,28.4593124389648,28.4593124389648,28.4593124389648,29.464111328125,29.464111328125,29.464111328125,29.464111328125,29.464111328125,29.464111328125,29.464111328125,29.464111328125,30.4088439941406,30.4088439941406,30.4088439941406,30.4088439941406,30.4088439941406,30.4088439941406,30.4088439941406,30.4088439941406,30.9611053466797,30.9611053466797,30.9611053466797,30.9611053466797,30.9611053466797,31.9653701782227,31.9653701782227,32.9557723999023,32.9557723999023,32.9557723999023,32.9557723999023,32.9557723999023,32.9557723999023,32.9557723999023,33.9424514770508,33.9424514770508,33.9424514770508,33.9424514770508,33.9424514770508,33.9424514770508,33.9424514770508,33.9424514770508,33.9424514770508,34.4343948364258,34.4343948364258,34.4343948364258,34.4343948364258,34.4343948364258,34.4343948364258,34.4343948364258,35.3689804077148,35.3689804077148,35.3689804077148,35.3689804077148,35.3689804077148,35.3689804077148,35.9109115600586,35.9109115600586,35.9109115600586,35.9109115600586,35.9109115600586,35.9109115600586,35.9109115600586,35.9109115600586,28.3206558227539,28.3206558227539,28.3206558227539,28.3206558227539,28.3206558227539,29.3217697143555,29.3217697143555,29.3217697143555,29.3217697143555,29.3217697143555,29.3217697143555,29.3217697143555,29.3217697143555,29.3217697143555,29.3217697143555,29.3217697143555,29.3217697143555,29.822883605957,29.822883605957,29.822883605957,29.822883605957,29.822883605957,29.822883605957,29.822883605957,29.822883605957,29.822883605957,29.822883605957,30.5635528564453,30.5635528564453,30.5635528564453,30.5635528564453,30.5635528564453,30.5635528564453,30.5635528564453,30.5635528564453,31.0490036010742,31.0490036010742,31.0490036010742,31.0490036010742,31.0490036010742,31.0490036010742,31.0490036010742,31.0490036010742,31.0490036010742,31.5369262695312,31.5369262695312,31.5369262695312,31.5369262695312,31.5369262695312,31.5369262695312,31.5369262695312,32.031364440918,32.031364440918,32.031364440918,32.031364440918,32.7195053100586,32.7195053100586,32.7195053100586,32.7195053100586,32.7195053100586,32.7195053100586,32.7195053100586,32.7195053100586,32.7195053100586,32.7195053100586,32.7195053100586,33.204216003418,33.204216003418,33.204216003418,33.204216003418,33.204216003418,33.7797317504883,33.7797317504883,33.7797317504883,33.7797317504883,33.7797317504883,33.7797317504883,33.7797317504883,33.7797317504883,33.7797317504883,33.7797317504883,33.7797317504883,34.5375213623047,34.5375213623047,34.5375213623047,34.5375213623047,34.5375213623047,34.5375213623047,34.5375213623047,34.5375213623047,35.2329559326172,35.2329559326172,35.2329559326172,35.2329559326172,35.2329559326172,35.2329559326172,35.2329559326172,35.2329559326172,35.2329559326172,35.2329559326172,35.2329559326172,36.1960372924805,36.1960372924805,36.1960372924805,36.1960372924805,36.1960372924805,36.1960372924805,36.1960372924805,36.1960372924805,28.2281036376953,28.2281036376953,28.2281036376953,28.2281036376953,28.2281036376953,28.2281036376953,28.2281036376953,28.2281036376953,28.2281036376953,28.2281036376953,28.2281036376953,28.2281036376953,28.2281036376953,28.2281036376953,28.5526580810547,28.5526580810547,28.5526580810547,28.5526580810547,28.5526580810547,28.5526580810547,28.5526580810547,29.0365600585938,29.0365600585938,29.0365600585938,29.0365600585938,29.0365600585938,29.0365600585938,29.0365600585938,30.0204162597656,30.0204162597656,30.0204162597656,30.0204162597656,30.0204162597656,30.0204162597656,30.0204162597656,31.0116500854492,31.0116500854492,31.0116500854492,31.0116500854492,31.0116500854492,31.0116500854492,31.0116500854492,31.0116500854492,31.0116500854492,31.0116500854492,31.9977951049805,31.9977951049805,31.9977951049805,31.9977951049805,31.9977951049805,31.9977951049805,31.9977951049805,32.6970901489258,32.6970901489258,33.4265823364258,33.4265823364258,33.4265823364258,33.4265823364258,33.4265823364258,33.4265823364258,33.4265823364258,33.4265823364258,34.3617172241211,34.3617172241211,34.3617172241211,34.3617172241211,35.2970428466797,35.2970428466797,35.7507705688477,35.7507705688477,35.7507705688477,35.7507705688477,35.7507705688477,35.7507705688477,35.7507705688477,35.7507705688477,35.7507705688477,36.2373046875,36.2373046875,36.2373046875,36.2373046875,28.3667068481445,28.3667068481445,28.3667068481445,28.3667068481445,28.3667068481445,28.3667068481445,28.3667068481445,28.3667068481445,28.3667068481445,28.3667068481445,28.3667068481445,28.8617553710938,28.8617553710938,28.8617553710938,28.8617553710938,28.8617553710938,28.8617553710938,28.8617553710938,28.8617553710938,28.8617553710938,28.8617553710938,29.5321655273438,29.5321655273438,29.5321655273438,29.5321655273438,29.5321655273438,29.5321655273438,29.5321655273438,29.5321655273438,29.5321655273438,29.5321655273438,29.5321655273438,29.5321655273438,30.0658569335938,30.0658569335938,30.0658569335938,30.0658569335938,30.0658569335938,30.0658569335938,30.0658569335938,30.0658569335938,30.0658569335938,30.0658569335938,30.0658569335938,30.0658569335938,30.0658569335938,30.0658569335938,30.5874710083008,30.5874710083008,30.5874710083008,30.5874710083008,30.5874710083008,30.5874710083008,30.5874710083008,30.5874710083008,30.5874710083008,31.5544738769531,31.5544738769531,31.5544738769531,31.5544738769531,31.5544738769531,31.5544738769531,31.5544738769531,31.5544738769531,31.5544738769531,32.5454864501953,32.5454864501953,32.5454864501953,32.5454864501953,32.5454864501953,32.5454864501953,32.5454864501953,33.1526565551758,33.1526565551758,33.1526565551758,33.1526565551758,33.1526565551758,33.1526565551758,33.1526565551758,33.1526565551758,33.1526565551758,33.1526565551758,33.1526565551758,33.7848663330078,33.7848663330078,33.7848663330078,33.7848663330078,33.7848663330078,33.7848663330078,33.7848663330078,33.7848663330078,34.5204849243164,34.5204849243164,34.5204849243164,34.5204849243164,34.5204849243164,34.5204849243164,34.5204849243164,35.5071029663086,35.5071029663086,35.5071029663086,35.5071029663086,35.5071029663086,35.5071029663086,35.5071029663086,36.4976348876953,36.4976348876953,36.4976348876953,36.4976348876953,36.4976348876953,28.5292816162109,28.5292816162109,28.5292816162109,28.5292816162109,28.5292816162109,29.5347061157227,29.5347061157227,29.5347061157227,29.5347061157227,29.5347061157227,29.5347061157227,29.5347061157227,29.5347061157227,30.2923049926758,30.2923049926758,31.0427856445312,31.0427856445312,31.0427856445312,31.0427856445312,31.0427856445312,31.0427856445312,31.0427856445312,32.0313491821289,32.0313491821289,32.0313491821289,32.0313491821289,32.0313491821289,32.0313491821289,32.0313491821289,32.0313491821289,33.0093383789062,33.0093383789062,33.0093383789062,33.0093383789062,33.0093383789062,33.0093383789062,33.640266418457,33.640266418457,34.2414627075195,34.2414627075195,34.2414627075195,34.2414627075195,34.2414627075195,34.8349227905273,34.8349227905273,34.8349227905273,34.8349227905273,34.8349227905273,34.8349227905273,34.8349227905273,34.8349227905273,34.8349227905273,34.8349227905273,34.8349227905273,35.5825271606445,35.5825271606445,35.5825271606445,35.5825271606445,35.5825271606445,36.118782043457,36.118782043457,36.118782043457,36.118782043457,36.118782043457,28.3472518920898,28.3472518920898,28.3472518920898,28.3472518920898,28.3472518920898,28.3472518920898,28.3472518920898,28.3472518920898,29.3491363525391,29.3491363525391,30.3543701171875,30.3543701171875,30.3543701171875,30.3543701171875,30.3543701171875,31.3584365844727,31.3584365844727,31.3584365844727,31.3584365844727,31.3584365844727,31.861686706543,31.861686706543,31.861686706543,31.861686706543,32.3647003173828,32.3647003173828,32.9048004150391,32.9048004150391,32.9048004150391,32.9048004150391,32.9048004150391,32.9048004150391,32.9048004150391,33.7407302856445,33.7407302856445,33.7407302856445,34.6439514160156,34.6439514160156,34.6439514160156,34.6439514160156,34.6439514160156,34.6439514160156,34.6439514160156,35.3845901489258,35.3845901489258,35.3845901489258,35.3845901489258,35.3845901489258,35.3845901489258,35.3845901489258,35.8655090332031,35.8655090332031,35.8655090332031,35.8655090332031,36.4751510620117,36.4751510620117,36.4751510620117,36.4751510620117,36.4751510620117,36.4751510620117,36.4751510620117,36.4751510620117,36.4751510620117,28.6486968994141,28.6486968994141,28.6486968994141,28.6486968994141,28.6486968994141,29.2059860229492,29.2059860229492,29.2059860229492,29.2059860229492,29.2059860229492,29.2059860229492,29.2059860229492,29.7463607788086,29.7463607788086,29.7463607788086,29.7463607788086,29.7463607788086,29.7463607788086,29.7463607788086,29.7463607788086,29.7463607788086,30.3280029296875,30.3280029296875,30.3280029296875,30.3280029296875,30.3280029296875,30.3280029296875,30.8473663330078,30.8473663330078,30.8473663330078,30.8473663330078,30.8473663330078,30.8473663330078,30.8473663330078,31.4646759033203,31.4646759033203,31.4646759033203,31.4646759033203,31.4646759033203,31.9639892578125,31.9639892578125,31.9639892578125,31.9639892578125,31.9639892578125,31.9639892578125,31.9639892578125,32.4380264282227,32.4380264282227,32.4380264282227,32.4380264282227,32.4380264282227,32.9748764038086,32.9748764038086,32.9748764038086,32.9748764038086,33.5792617797852,33.5792617797852,34.0654296875,34.0654296875,34.0654296875,34.0654296875,34.0654296875,34.0654296875,34.0654296875,34.0654296875,34.0654296875,34.5488433837891,34.5488433837891,34.5488433837891,34.5488433837891,34.5488433837891,35.0136642456055,35.0136642456055,35.4886703491211,35.4886703491211,35.4886703491211,35.4886703491211,35.4886703491211,36.0753936767578,36.0753936767578,36.0753936767578,36.0753936767578,36.0753936767578,36.0753936767578,36.0753936767578,36.0753936767578,36.0753936767578,28.52783203125,28.52783203125,28.52783203125,28.52783203125,28.52783203125,28.52783203125,28.52783203125,28.52783203125,28.52783203125,28.52783203125,28.52783203125,29.3633193969727,29.3633193969727,29.3633193969727,29.3633193969727,29.3633193969727,29.3633193969727,29.3633193969727,29.3633193969727,30.0372695922852,30.0372695922852,30.0372695922852,30.0372695922852,30.0372695922852,30.0372695922852,30.0372695922852,30.0372695922852,30.0372695922852,30.0372695922852,30.0372695922852,31.0450744628906,31.0450744628906,31.0450744628906,31.0450744628906,31.0450744628906,31.0450744628906,31.0450744628906,31.0450744628906,32.0503692626953,32.0503692626953,32.0503692626953,32.0503692626953,32.0503692626953,32.0503692626953,32.0503692626953,32.0503692626953,32.8455429077148,32.8455429077148,32.8455429077148,32.8455429077148,32.8455429077148,33.3578796386719,33.3578796386719,33.3578796386719,33.3578796386719,33.3578796386719,33.3578796386719,33.3578796386719,33.3578796386719,33.8525390625,33.8525390625,33.8525390625,33.8525390625,33.8525390625,34.3610153198242,34.3610153198242,34.3610153198242,34.3610153198242,34.3610153198242,34.3610153198242,34.3610153198242,34.3610153198242,35.1442413330078,35.1442413330078,35.1442413330078,35.1442413330078,35.1442413330078,35.1442413330078,35.1442413330078,35.1442413330078,35.6157073974609,35.6157073974609,35.6157073974609,35.6157073974609,35.6157073974609,35.6157073974609,35.6157073974609,36.1185607910156,36.1185607910156,36.1185607910156,36.1185607910156,36.1185607910156,36.1185607910156,36.5709381103516,36.5709381103516,36.5709381103516,36.5709381103516,36.5709381103516,36.5709381103516,36.5709381103516,36.5709381103516,28.8320388793945,28.8320388793945,29.3390197753906,29.3390197753906,29.3390197753906,29.3390197753906,29.3390197753906,29.3390197753906,29.3390197753906,29.3390197753906,29.3390197753906,29.973388671875,29.973388671875,29.973388671875,29.973388671875,29.973388671875,30.6767044067383,30.6767044067383,30.6767044067383,30.6767044067383,30.6767044067383,30.6767044067383,30.6767044067383,31.4211730957031,31.4211730957031,31.4211730957031,31.4211730957031,31.4211730957031,31.4211730957031,31.9833679199219,31.9833679199219,31.9833679199219,31.9833679199219,31.9833679199219,32.5009689331055,32.5009689331055,32.5009689331055,32.5009689331055,32.5009689331055,32.5009689331055,32.5009689331055,32.5009689331055,32.5009689331055,32.5009689331055,32.9887313842773,32.9887313842773,32.9887313842773,33.5962448120117,33.5962448120117,33.5962448120117,33.5962448120117,33.5962448120117,33.5962448120117,33.5962448120117,33.5962448120117,34.0952835083008,34.0952835083008,34.0952835083008,35.0745620727539,35.0745620727539,35.0745620727539,35.0745620727539,35.0745620727539,35.0745620727539,35.0745620727539,35.0745620727539,35.0745620727539,35.0745620727539,35.6079025268555,35.6079025268555,35.6079025268555,35.6079025268555,35.6079025268555,35.6079025268555,35.6079025268555,36.5509262084961,36.5509262084961,36.5509262084961,36.5509262084961,36.5509262084961,36.5509262084961,36.5509262084961,29.1143341064453,29.1143341064453,29.1143341064453,29.1143341064453,29.1143341064453,29.1143341064453,29.1143341064453,29.1143341064453,29.1143341064453,29.1143341064453,29.1143341064453,29.1143341064453,29.1143341064453,29.6186981201172,29.6186981201172,29.6186981201172,29.6186981201172,29.6186981201172,29.6186981201172,29.6186981201172,29.6186981201172,29.6186981201172,29.6186981201172,30.1205978393555,30.1205978393555,30.1205978393555,30.1205978393555,30.1205978393555,30.1205978393555,30.1205978393555,30.1205978393555,30.1205978393555,30.1205978393555,31.1264038085938,31.1264038085938,31.1264038085938,31.1264038085938,31.1264038085938,31.1264038085938,31.1264038085938,31.1264038085938,31.1264038085938,32.0031204223633,32.0031204223633,32.0031204223633,32.0031204223633,32.0031204223633,32.6285247802734,32.6285247802734,32.6285247802734,32.6285247802734,32.6285247802734,32.6285247802734,32.6285247802734,32.6285247802734,32.6285247802734,33.6334075927734,33.6334075927734,33.6334075927734,33.6334075927734,33.6334075927734,33.6334075927734,33.6334075927734,34.2729110717773,34.2729110717773,34.2729110717773,34.2729110717773,34.2729110717773,34.2729110717773,34.7821807861328,34.7821807861328,34.7821807861328,34.7821807861328,34.7821807861328,34.7821807861328,34.7821807861328,34.7821807861328,34.7821807861328,34.7821807861328,35.2479476928711,35.2479476928711,35.2479476928711,35.2479476928711,35.2479476928711,35.2479476928711,35.2479476928711,35.7292251586914,35.7292251586914,35.7292251586914,35.7292251586914,35.7292251586914,35.7292251586914,35.7292251586914,35.7292251586914,35.7292251586914,35.7292251586914,35.7292251586914,35.7292251586914,36.3250122070312,36.3250122070312,36.3250122070312,36.3250122070312,36.3250122070312,36.3250122070312,36.3250122070312,28.5292434692383,28.5292434692383,28.5292434692383,28.5292434692383,29.1479568481445,29.1479568481445,29.8431854248047,29.8431854248047,29.8431854248047,29.8431854248047,29.8431854248047,29.8431854248047,29.8431854248047,29.8431854248047,30.5132904052734,30.5132904052734,30.5132904052734,30.5132904052734,30.5132904052734,30.5132904052734,31.0083160400391,31.0083160400391,31.0083160400391,31.0083160400391,31.0083160400391,31.0083160400391,31.5091400146484,31.5091400146484,31.5091400146484,31.5091400146484,31.5091400146484,31.5091400146484,32.4848937988281,32.4848937988281,32.4848937988281,32.4848937988281,32.4848937988281,32.4848937988281,32.9759750366211,32.9759750366211,32.9759750366211,32.9759750366211,32.9759750366211,32.9759750366211,32.9759750366211,32.9759750366211,32.9759750366211,32.9759750366211,33.861213684082,33.861213684082,33.861213684082,33.861213684082,33.861213684082,33.861213684082,34.3622131347656,34.3622131347656,34.3622131347656,34.3622131347656,34.9374847412109,34.9374847412109,34.9374847412109,34.9374847412109,34.9374847412109,34.9374847412109,34.9374847412109,34.9374847412109,35.925895690918,35.925895690918,35.925895690918,35.925895690918,35.925895690918,35.925895690918,35.925895690918,35.925895690918,35.925895690918,35.925895690918,35.925895690918,28.4809417724609,28.4809417724609,28.4809417724609,29.4855117797852,29.4855117797852,29.4855117797852,29.4855117797852,29.4855117797852,29.4855117797852,29.4855117797852,30.4907302856445,30.4907302856445,31.0535125732422,31.0535125732422,31.0535125732422,31.0535125732422,31.0535125732422,31.0535125732422,31.0535125732422,31.5382843017578,31.5382843017578,31.5382843017578,31.5382843017578,31.5382843017578,31.5382843017578,32.0396728515625,32.0396728515625,32.0396728515625,32.0396728515625,32.0396728515625,32.0396728515625,32.0396728515625,32.0396728515625,32.6099166870117,32.6099166870117,32.6099166870117,32.6099166870117,32.6099166870117,32.6099166870117,32.6099166870117,32.6099166870117,32.6099166870117,33.3263626098633,33.3263626098633,33.3263626098633,33.3263626098633,33.8430862426758,33.8430862426758,34.3637542724609,34.3637542724609,34.3637542724609,34.3637542724609,34.3637542724609,34.3637542724609,34.3637542724609,34.3637542724609,34.3637542724609,34.3637542724609,35.0324554443359,35.0324554443359,35.0324554443359,35.0324554443359,35.0324554443359,35.0324554443359,35.0324554443359,35.0324554443359,35.0324554443359,35.5192642211914,35.5192642211914,36.0045547485352,36.0045547485352,36.0045547485352,36.0045547485352,36.0045547485352,36.0045547485352,36.0045547485352,36.0045547485352,36.0045547485352,36.0045547485352,36.4758987426758,36.4758987426758,36.4758987426758,36.4758987426758,36.4758987426758,36.4758987426758,36.4758987426758,28.8071746826172,28.8071746826172,28.8071746826172,28.8071746826172,28.8071746826172,28.8071746826172,29.4978713989258,29.4978713989258,29.4978713989258,29.4978713989258,29.4978713989258,29.4978713989258,29.4978713989258,29.4978713989258,29.4978713989258,29.9949798583984,29.9949798583984,29.9949798583984,29.9949798583984,29.9949798583984,29.9949798583984,29.9949798583984,29.9949798583984,29.9949798583984,30.5876388549805,30.5876388549805,30.5876388549805,30.5876388549805,30.5876388549805,30.5876388549805,30.5876388549805,30.5876388549805,31.2001647949219,31.2001647949219,31.2001647949219,31.2001647949219,31.2001647949219,31.2001647949219,31.2001647949219,31.2001647949219,31.2001647949219,31.2001647949219,31.8624496459961,31.8624496459961,31.8624496459961,31.8624496459961,31.8624496459961,31.8624496459961,32.359016418457,32.359016418457,32.359016418457,32.359016418457,33.3401260375977,33.3401260375977,33.3401260375977,33.3401260375977,33.3401260375977,34.3273010253906,34.3273010253906,34.3273010253906,34.3273010253906,34.3273010253906,34.3273010253906,34.3273010253906,34.3273010253906,35.3092346191406,35.3092346191406,35.3092346191406,35.3092346191406,35.3092346191406,35.3092346191406,35.3092346191406,35.8033142089844,35.8033142089844,35.8033142089844,35.8033142089844,35.8033142089844,35.8033142089844,35.8033142089844,35.8033142089844,36.5496673583984,36.5496673583984,36.5496673583984,36.5496673583984,36.5496673583984,36.5496673583984,28.7374877929688,28.7374877929688,28.7374877929688,28.7374877929688,28.7374877929688,28.7374877929688,28.7374877929688,28.7374877929688,28.7374877929688,28.7374877929688,29.621940612793,29.621940612793,29.621940612793,29.621940612793,29.621940612793,29.621940612793,29.621940612793,29.621940612793,30.6346435546875,30.6346435546875,30.6346435546875,30.6346435546875,30.6346435546875,30.6346435546875,30.6346435546875,30.6346435546875,31.6474838256836,31.6474838256836,31.6474838256836,31.6474838256836,32.6037750244141,32.6037750244141,32.6037750244141,32.6037750244141,32.6037750244141,32.6037750244141,32.6037750244141,32.6037750244141,32.6037750244141,33.0935211181641,33.0935211181641,33.0935211181641,33.0935211181641,33.0935211181641,33.0935211181641,33.0935211181641,33.0935211181641,33.0935211181641,33.0935211181641,33.0935211181641,33.0935211181641,33.0935211181641,33.7826766967773,33.7826766967773,33.7826766967773,33.7826766967773,33.7826766967773,33.7826766967773,33.7826766967773,33.7826766967773,33.7826766967773,33.7826766967773,34.262321472168,34.262321472168,34.262321472168,34.262321472168,34.742057800293,34.742057800293,34.742057800293,34.742057800293,34.742057800293,35.4212265014648,35.4212265014648,35.4212265014648,35.4212265014648,35.4212265014648,35.4212265014648,35.4212265014648,35.905403137207,35.905403137207,35.905403137207,35.905403137207,35.905403137207,35.905403137207,35.905403137207,28.4373550415039,28.4373550415039,28.4373550415039,28.4373550415039,28.4373550415039,28.4373550415039,28.4373550415039,28.4373550415039,28.4373550415039,28.4373550415039,28.9997329711914,28.9997329711914,28.9997329711914,28.9997329711914,28.9997329711914,29.4842910766602,29.4842910766602,29.4842910766602,29.4842910766602,29.4842910766602,29.4842910766602,29.4842910766602,30.0774917602539,30.0774917602539,30.0774917602539,30.0774917602539,30.0774917602539,30.0774917602539,30.0774917602539,30.0774917602539,30.0774917602539,30.0774917602539,30.0774917602539,30.0774917602539,30.0774917602539,30.5741882324219,30.5741882324219,30.5741882324219,30.5741882324219,30.5741882324219,31.163215637207,31.163215637207,31.163215637207,31.163215637207,31.163215637207,31.163215637207,31.163215637207,31.6518325805664,31.6518325805664,31.6518325805664,31.6518325805664,32.2009201049805,32.2009201049805,32.7740249633789,32.7740249633789,32.7740249633789,32.7740249633789,32.7740249633789,32.7740249633789,32.7740249633789,32.7740249633789,33.30859375,33.30859375,33.7962417602539,33.7962417602539,33.7962417602539,33.7962417602539,33.7962417602539,34.3376846313477,34.3376846313477,34.3376846313477,34.3376846313477,34.3376846313477,34.3376846313477,34.9065017700195,34.9065017700195,34.9065017700195,34.9065017700195,34.9065017700195,34.9065017700195,34.9065017700195,34.9065017700195,34.9065017700195,34.9065017700195,35.4697799682617,35.4697799682617,35.4697799682617,35.4697799682617,35.4697799682617,36.4435043334961,36.4435043334961,36.4435043334961,36.4435043334961,36.4435043334961,36.4435043334961,36.4435043334961,29.0057983398438,29.0057983398438,29.0057983398438,29.0057983398438,29.0057983398438,29.0057983398438,29.0057983398438,29.0057983398438,29.0057983398438,30.004508972168,30.004508972168,30.004508972168,30.004508972168,30.004508972168,30.004508972168,30.9957656860352,30.9957656860352,30.9957656860352,30.9957656860352,30.9957656860352,30.9957656860352,30.9957656860352,31.6151351928711,31.6151351928711,31.6151351928711,31.6151351928711,31.6151351928711,32.0999984741211,32.0999984741211,32.0999984741211,32.0999984741211,32.0999984741211,32.0999984741211,32.0999984741211,32.0999984741211,32.0999984741211,32.0999984741211,32.7431106567383,32.7431106567383,32.7431106567383,32.7431106567383,32.7431106567383,32.7431106567383,32.7431106567383,32.7431106567383,32.7431106567383,32.7431106567383,33.2236633300781,33.2236633300781,34.1933441162109,34.1933441162109,34.1933441162109,34.1933441162109,34.1933441162109,34.1933441162109,34.1933441162109,34.1933441162109,35.1566543579102,35.1566543579102,35.1566543579102,35.1566543579102,35.1566543579102,35.1566543579102,35.1566543579102,35.1566543579102,35.1566543579102,35.1566543579102,35.1566543579102,35.9800872802734,35.9800872802734,35.9800872802734,35.9800872802734,35.9800872802734,35.9800872802734,35.9800872802734,36.5949935913086,36.5949935913086,36.5949935913086,36.5949935913086,36.5949935913086,36.5949935913086,28.8724136352539,28.8724136352539,28.8724136352539,28.8724136352539,28.8724136352539,28.8724136352539,28.8724136352539,29.8610763549805,29.8610763549805,29.8610763549805,29.8610763549805,29.8610763549805,29.8610763549805,29.8610763549805,30.8503189086914,30.8503189086914,30.8503189086914,30.8503189086914,30.8503189086914,30.8503189086914,31.3484878540039,31.3484878540039,31.3484878540039,31.3484878540039,31.3484878540039,31.3484878540039,31.3484878540039,31.3484878540039,31.8363037109375,31.8363037109375,31.8363037109375,31.8363037109375,31.8363037109375,31.8363037109375,31.8363037109375,31.8363037109375,31.8363037109375,32.7441864013672,32.7441864013672,32.7441864013672,32.7441864013672,32.7441864013672,32.7441864013672,33.7319259643555,33.7319259643555,33.7319259643555,33.7319259643555,33.7319259643555,33.7319259643555,33.7319259643555,33.7319259643555,34.2290954589844,34.2290954589844,34.2290954589844,34.2290954589844,34.2290954589844,35.2074127197266,35.2074127197266,35.2074127197266,35.2074127197266,35.2074127197266,35.2074127197266,35.2074127197266,35.7019577026367,35.7019577026367,36.5995254516602,36.5995254516602,36.5995254516602,36.5995254516602,36.5995254516602,36.5995254516602,36.5995254516602,29.2799682617188,29.2799682617188,30.2861480712891,30.2861480712891,30.2861480712891,30.2861480712891,30.2861480712891,30.2861480712891,30.2861480712891,31.2089996337891,31.2089996337891,31.2089996337891,31.2089996337891,31.2089996337891,31.2089996337891,31.2089996337891,31.7103729248047,31.7103729248047,31.7103729248047,31.7103729248047,31.7103729248047,31.7103729248047,31.7103729248047,31.7103729248047,31.7103729248047,32.7005844116211,32.7005844116211,32.7005844116211,32.7005844116211,32.7005844116211,32.7005844116211,32.7005844116211,33.3425827026367,33.3425827026367,33.3425827026367,33.3425827026367,33.3425827026367,33.3425827026367,33.3425827026367,33.3425827026367,33.3425827026367,34.0414428710938,34.0414428710938,34.525016784668,34.525016784668,34.525016784668,34.525016784668,34.525016784668,34.525016784668,34.525016784668,35.5139236450195,35.5139236450195,35.5139236450195,35.5139236450195,35.5139236450195,36.4920883178711,36.4920883178711,29.0859756469727,29.0859756469727,29.0859756469727,29.0859756469727,29.0859756469727,29.5887222290039,29.5887222290039,29.5887222290039,29.5887222290039,29.5887222290039,30.0908737182617,30.0908737182617,30.0908737182617,30.0908737182617,30.0908737182617,30.0908737182617,30.0908737182617,30.0908737182617,30.5844573974609,30.5844573974609,30.5844573974609,30.5844573974609,30.5844573974609,30.5844573974609,30.5844573974609,30.5844573974609,30.5844573974609,30.5844573974609,30.5844573974609,31.5845642089844,31.5845642089844,31.5845642089844,31.5845642089844,31.5845642089844,31.5845642089844,31.5845642089844,32.5774688720703,32.5774688720703,32.5774688720703,32.5774688720703,32.5774688720703,32.5774688720703,32.5774688720703,32.5774688720703,32.5774688720703,32.5774688720703,32.5774688720703,32.5774688720703,33.576545715332,33.576545715332,33.576545715332,33.576545715332,33.576545715332,33.576545715332,33.576545715332,34.0660018920898,34.0660018920898,34.0660018920898,34.0660018920898,34.0660018920898,34.0660018920898,34.0660018920898,34.0660018920898,34.0660018920898,34.0660018920898,34.0660018920898,34.8515625,34.8515625,34.8515625,34.8515625,34.8515625,34.8515625,34.8515625,35.5418853759766,35.5418853759766,35.5418853759766,35.5418853759766,35.5418853759766,35.5418853759766,35.5418853759766,35.5418853759766,35.5418853759766,36.5296020507812,36.5296020507812,36.5296020507812,36.5296020507812,36.5296020507812,36.5296020507812,28.6249771118164,28.6249771118164,28.6249771118164,28.6249771118164,28.6249771118164,28.6249771118164,28.6249771118164,28.6249771118164,29.6239624023438,29.6239624023438,29.6239624023438,29.6239624023438,29.6239624023438,29.6239624023438,29.6239624023438,30.6277694702148,30.6277694702148,31.4217987060547,31.4217987060547,31.4217987060547,31.4217987060547,31.4217987060547,31.4217987060547,31.4217987060547,31.4217987060547,32.1233139038086,32.1233139038086,32.1233139038086,32.1233139038086,32.1233139038086,32.1233139038086,32.1233139038086,32.1233139038086,32.1233139038086,32.1233139038086,32.6223068237305,32.6223068237305,32.6223068237305,32.6223068237305,32.6223068237305,32.6223068237305,32.6223068237305,33.6013565063477,33.6013565063477,33.6013565063477,33.6013565063477,33.6013565063477,33.6013565063477,34.5858917236328,34.5858917236328,34.5858917236328,34.5858917236328,34.5858917236328,34.5858917236328,34.5858917236328,35.5741271972656,35.5741271972656,35.5741271972656,35.5741271972656,35.5741271972656,35.5741271972656,35.5741271972656,35.5741271972656,36.0725479125977,36.0725479125977,36.0725479125977,36.0725479125977,36.0725479125977,36.0725479125977,36.0725479125977,36.5521087646484,36.5521087646484,36.5521087646484,29.1489639282227,29.1489639282227,29.7839660644531,29.7839660644531,29.7839660644531,29.7839660644531,29.7839660644531,29.7839660644531,29.7839660644531,30.2849807739258,30.2849807739258,30.2849807739258,30.2849807739258,30.2849807739258,31.2821273803711,31.2821273803711,31.2821273803711,31.2821273803711,31.2821273803711,31.2821273803711,31.2821273803711,31.2821273803711,31.2821273803711,32.1825561523438,32.1825561523438,32.1825561523438,32.1825561523438,32.1825561523438,32.1825561523438,32.1825561523438,32.1825561523438,32.1825561523438,32.1825561523438,32.9010467529297,32.9010467529297,32.9010467529297,32.9010467529297,32.9010467529297,33.6386871337891,33.6386871337891,33.6386871337891,33.6386871337891,34.1769485473633,34.1769485473633,34.1769485473633,34.1769485473633,34.1769485473633,34.6519775390625,34.6519775390625,34.6519775390625,34.6519775390625,34.6519775390625,34.6519775390625,35.2797393798828,35.2797393798828,35.2797393798828,35.2797393798828,35.2797393798828,35.2797393798828,35.2797393798828,35.9525985717773,35.9525985717773,36.4895324707031,36.4895324707031,36.4895324707031,36.4895324707031,36.4895324707031,36.4895324707031,36.4895324707031,28.6053619384766,28.6053619384766,28.6053619384766,28.6053619384766,28.6053619384766,28.6053619384766,28.6053619384766,28.6053619384766,28.6053619384766,28.6053619384766,28.6053619384766,29.2092666625977,29.2092666625977,29.2092666625977,29.2092666625977,29.2092666625977,29.2092666625977,29.2092666625977,29.2092666625977,29.2092666625977,29.2092666625977,29.2092666625977,29.2092666625977,29.2092666625977,29.2092666625977,29.777702331543,29.777702331543,29.777702331543,29.777702331543,29.777702331543,29.777702331543,30.4649200439453,30.4649200439453,30.4649200439453,30.4649200439453,30.4649200439453,30.4649200439453,31.0510177612305,31.0510177612305,31.5497131347656,31.5497131347656,31.5497131347656,31.5497131347656,31.5497131347656,31.5497131347656,32.0961380004883,32.0961380004883,32.5910873413086,32.5910873413086,32.5910873413086,32.5910873413086,32.5910873413086,32.5910873413086,32.5910873413086,33.0794906616211,33.0794906616211,33.0794906616211,33.0794906616211,33.0794906616211,33.0794906616211,33.6614227294922,33.6614227294922,33.6614227294922,33.6614227294922,33.6614227294922,34.2171630859375,34.2171630859375,34.2171630859375,34.2171630859375,34.2171630859375,34.2171630859375,34.2171630859375,35.0146789550781,35.0146789550781,35.0146789550781,35.0146789550781,35.0146789550781,36.0083999633789,36.0083999633789,36.0083999633789,36.0083999633789,36.0083999633789,36.0083999633789,36.0083999633789,36.5463562011719,36.5463562011719,36.5463562011719,29.0607528686523,29.0607528686523,29.0607528686523,29.0607528686523,29.0607528686523,29.0607528686523,29.0607528686523,29.6131362915039,29.6131362915039,29.6131362915039,29.6131362915039,29.6131362915039,29.6131362915039,30.6005249023438,30.6005249023438,30.6005249023438,30.6005249023438,30.6005249023438,30.6005249023438,30.6005249023438,31.1697082519531,31.1697082519531,31.1697082519531,31.1697082519531,31.1697082519531,31.9155654907227,31.9155654907227,31.9155654907227,31.9155654907227,31.9155654907227,31.9155654907227,31.9155654907227,32.5509796142578,32.5509796142578,32.5509796142578,32.5509796142578,32.5509796142578,32.5509796142578,32.5509796142578,32.5509796142578,32.5509796142578,33.5224304199219,33.5224304199219,33.5224304199219,33.5224304199219,33.5224304199219,33.5224304199219,33.5224304199219,33.5224304199219,33.5224304199219,33.5224304199219,34.0139389038086,34.0139389038086,34.0139389038086,34.0139389038086,34.0139389038086,34.0139389038086,34.9872360229492,34.9872360229492,34.9872360229492,34.9872360229492,34.9872360229492,34.9872360229492,34.9872360229492,35.5980529785156,35.5980529785156,35.5980529785156,35.5980529785156,35.5980529785156,36.3426666259766,36.3426666259766,36.3426666259766,36.3426666259766,36.3426666259766,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,36.6179428100586,28.266960144043,28.266960144043,28.266960144043,28.266960144043,28.266960144043,28.266960144043,28.266960144043,28.266960144043,28.7607192993164,28.7607192993164,28.7607192993164,28.7607192993164,28.7607192993164,28.7607192993164,29.3388137817383,29.3388137817383,29.3388137817383,29.3388137817383,29.3388137817383,29.3388137817383,29.3388137817383,29.3388137817383,29.3388137817383,29.3388137817383,29.3388137817383,29.8329010009766,29.8329010009766,29.8329010009766,29.8329010009766,29.8329010009766,29.8329010009766,29.8329010009766,29.8329010009766,30.3790130615234,30.3790130615234,30.3790130615234,30.3790130615234,30.3790130615234,30.3790130615234,30.3790130615234,30.8710784912109,30.8710784912109,30.8710784912109,30.8710784912109,30.8710784912109,30.8710784912109,30.8710784912109,30.8710784912109,31.5085220336914,31.5085220336914,31.5085220336914,31.5085220336914,31.5085220336914,31.5085220336914,31.5085220336914,31.5085220336914,32.0080947875977,32.0080947875977,32.0080947875977,32.0080947875977,32.0080947875977,32.0080947875977,32.0080947875977,32.5060043334961,32.5060043334961,32.5060043334961,32.5060043334961,32.5060043334961,32.5060043334961,32.5060043334961,33.5126495361328,33.5126495361328,33.5126495361328,34.0152282714844,34.0152282714844,34.0152282714844,34.0152282714844,34.5172729492188,34.5172729492188,34.5172729492188,34.5172729492188,34.5172729492188,34.5172729492188,34.5172729492188,34.5172729492188,34.5172729492188,35.5139007568359,35.5139007568359,35.5139007568359,35.5139007568359,35.5139007568359,35.5139007568359,35.5139007568359,35.5139007568359,35.5139007568359,35.5139007568359,35.5139007568359,36.0020294189453,36.0020294189453,28.5976333618164,28.5976333618164,28.5976333618164,28.5976333618164,28.5976333618164,28.5976333618164,28.5976333618164,28.5976333618164,29.0824661254883,29.0824661254883,29.7737884521484,29.7737884521484,29.7737884521484,29.7737884521484,29.7737884521484,29.7737884521484,29.7737884521484,29.7737884521484,29.7737884521484,30.271484375,30.271484375,30.271484375,30.271484375,30.271484375,30.271484375,30.7590026855469,30.7590026855469,30.7590026855469,30.7590026855469,30.7590026855469,30.7590026855469,31.4154205322266,31.4154205322266,31.4154205322266,31.4154205322266,31.4154205322266,31.4154205322266,31.4154205322266,31.4154205322266,31.4154205322266,31.4154205322266,31.4154205322266,31.9193267822266,31.9193267822266,31.9193267822266,31.9193267822266,31.9193267822266,31.9193267822266,31.9193267822266,31.9193267822266,31.9193267822266,32.5228118896484,32.5228118896484,32.5228118896484,32.5228118896484,32.5228118896484,32.5228118896484,32.5228118896484,33.0576553344727,33.0576553344727,33.0576553344727,33.0576553344727,33.0576553344727,33.0576553344727,33.0576553344727,33.0576553344727,33.0576553344727,33.0576553344727,33.5569305419922,33.5569305419922,33.5569305419922,33.5569305419922,34.1451110839844,34.1451110839844,34.1451110839844,34.1451110839844,34.1451110839844,34.6961364746094,34.6961364746094,34.6961364746094,34.6961364746094,34.6961364746094,34.6961364746094,35.1927795410156,35.1927795410156,35.1927795410156,35.1927795410156,35.1927795410156,35.1927795410156,35.1927795410156,35.7238845825195,35.7238845825195,35.7238845825195,35.7238845825195,35.7238845825195,35.7238845825195,35.7238845825195,35.7238845825195,35.7238845825195,36.4366760253906,36.4366760253906,36.4366760253906,36.4366760253906,36.4366760253906,36.4366760253906,28.6419906616211,28.6419906616211,28.6419906616211,28.6419906616211,29.662467956543,29.662467956543,29.662467956543,29.662467956543,29.662467956543,29.662467956543,29.662467956543,29.662467956543,29.662467956543,29.662467956543,29.662467956543,29.662467956543,29.662467956543,29.662467956543,30.1560287475586,30.1560287475586,30.1560287475586,30.1560287475586,30.1560287475586,30.1560287475586,30.1560287475586,30.1560287475586,30.1560287475586,30.1560287475586,30.1560287475586,30.1560287475586,30.6575469970703,30.6575469970703,30.6575469970703,30.6575469970703,30.6575469970703,30.6575469970703,30.6575469970703,30.6575469970703,30.6575469970703,30.6575469970703,30.6575469970703,31.1505355834961,31.1505355834961,31.1505355834961,31.1505355834961,31.1505355834961,31.1505355834961,31.1505355834961,32.0614547729492,32.0614547729492,32.0614547729492,32.0614547729492,32.0614547729492,32.0614547729492,32.0614547729492,32.563720703125,32.563720703125,32.563720703125,32.563720703125,32.563720703125,32.563720703125,33.3997116088867,33.3997116088867,33.3997116088867,33.3997116088867,33.3997116088867,34.0617904663086,34.0617904663086,34.0617904663086,34.0617904663086,34.0617904663086,34.0617904663086,34.0617904663086,34.0617904663086,34.0617904663086,34.7406845092773,34.7406845092773,34.7406845092773,34.7406845092773,34.7406845092773,34.7406845092773,34.7406845092773,34.7406845092773,35.5647811889648,35.5647811889648,35.5647811889648,35.5647811889648,35.5647811889648,35.5647811889648,35.5647811889648,35.5647811889648,36.5537490844727,36.5537490844727,36.5537490844727,36.5537490844727,36.5537490844727,36.5537490844727,36.5537490844727,36.5537490844727,29.1593246459961,29.1593246459961,29.1593246459961,29.1593246459961,29.1593246459961,29.1593246459961,29.1593246459961,29.1593246459961,29.6622772216797,29.6622772216797,29.6622772216797,29.6622772216797,29.6622772216797,29.6622772216797,29.6622772216797,29.6622772216797,30.264892578125,30.264892578125,30.264892578125,30.264892578125,30.264892578125,30.264892578125,30.8311996459961,30.8311996459961,30.8311996459961,30.8311996459961,30.8311996459961,31.3384704589844,31.3384704589844,31.3384704589844,31.3384704589844,31.3384704589844,31.3384704589844,31.3384704589844,31.9711456298828,31.9711456298828,31.9711456298828,31.9711456298828,31.9711456298828,31.9711456298828,31.9711456298828,32.4602813720703,32.4602813720703,33.0805816650391,33.0805816650391,33.0805816650391,33.0805816650391,33.0805816650391,33.0805816650391,33.0805816650391,33.0805816650391,33.5802307128906,33.5802307128906,33.5802307128906,33.5802307128906,33.5802307128906,34.0859069824219,34.0859069824219,34.0859069824219,34.0859069824219,34.0859069824219,34.0859069824219,34.0859069824219,34.0859069824219,34.7735061645508,34.7735061645508,34.7735061645508,34.7735061645508,34.7735061645508,34.7735061645508,34.7735061645508,35.5267105102539,35.5267105102539,35.5267105102539,35.5267105102539,35.5267105102539,35.5267105102539,35.5267105102539,36.0345764160156,36.0345764160156,36.0345764160156,36.0345764160156,36.0345764160156,36.0345764160156,36.0345764160156,36.516716003418,36.516716003418,36.516716003418,36.516716003418,36.516716003418,36.516716003418,36.516716003418,36.516716003418,28.6824722290039,28.6824722290039,28.6824722290039,28.6824722290039,28.6824722290039,28.6824722290039,28.6824722290039,28.6824722290039,28.6824722290039,29.180908203125,29.180908203125,29.180908203125,29.180908203125,29.180908203125,29.180908203125,29.180908203125,29.180908203125,30.0731735229492,30.0731735229492,30.0731735229492,30.0731735229492,30.0731735229492,30.0731735229492,30.0731735229492,30.0731735229492,30.0731735229492,30.0731735229492,30.5760192871094,30.5760192871094,31.2192306518555,31.2192306518555,31.7072219848633,31.7072219848633,31.7072219848633,31.7072219848633,31.7072219848633,31.7072219848633,31.7072219848633,32.2373733520508,32.2373733520508,32.2373733520508,32.8991928100586,32.8991928100586,32.8991928100586,33.3920059204102,33.3920059204102,33.3920059204102,33.3920059204102,33.3920059204102,33.3920059204102,33.3920059204102,33.3920059204102,33.3920059204102,33.3920059204102,33.9046325683594,33.9046325683594,33.9046325683594,33.9046325683594,33.9046325683594,33.9046325683594,34.372428894043,34.372428894043,34.372428894043,34.372428894043,34.372428894043,34.372428894043,34.372428894043,34.9784088134766,34.9784088134766,34.9784088134766,34.9784088134766,34.9784088134766,34.9784088134766,35.4493789672852,35.4493789672852,35.4493789672852,35.4493789672852,35.4493789672852,35.4493789672852,35.9831008911133,35.9831008911133,35.9831008911133,35.9831008911133,35.9831008911133,28.3251266479492,28.3251266479492,28.3251266479492,28.3251266479492,28.3251266479492,28.8284912109375,28.8284912109375,28.8284912109375,28.8284912109375,28.8284912109375,28.8284912109375,28.8284912109375,28.8284912109375,29.3655242919922,29.3655242919922,29.3655242919922,29.3655242919922,29.3655242919922,30.2037658691406,30.2037658691406,30.2037658691406,31.1847915649414,31.1847915649414,31.1847915649414,31.1847915649414,32.1972427368164,32.1972427368164,32.1972427368164,32.1972427368164,32.1972427368164,32.1972427368164,32.1972427368164,32.1972427368164,32.1972427368164,32.1972427368164,32.1972427368164,32.1972427368164,32.1972427368164,32.699836730957,32.699836730957,32.699836730957,32.699836730957,32.699836730957,32.699836730957,32.699836730957,32.699836730957,32.699836730957,32.699836730957,32.699836730957,32.699836730957,32.699836730957,32.699836730957,33.4398498535156,33.4398498535156,33.9304428100586,33.9304428100586,33.9304428100586,33.9304428100586,33.9304428100586,33.9304428100586,33.9304428100586,33.9304428100586,33.9304428100586,34.4313049316406,34.4313049316406,34.4313049316406,34.4313049316406,34.4313049316406,35.1919555664062,35.1919555664062,35.1919555664062,35.1919555664062,35.1919555664062,35.1919555664062,35.1919555664062,35.1919555664062,35.9361419677734,35.9361419677734,35.9361419677734,35.9361419677734,35.9361419677734,36.4292907714844,36.4292907714844,36.4292907714844,36.4292907714844,36.4292907714844,36.4292907714844,36.4292907714844,36.4292907714844,36.4292907714844,28.6974868774414,28.6974868774414,28.6974868774414,28.6974868774414,28.6974868774414,28.6974868774414,28.6974868774414,29.1939315795898,29.1939315795898,30.1885299682617,30.1885299682617,30.1885299682617,30.1885299682617,30.1885299682617,30.1885299682617,30.1885299682617,30.1885299682617,30.1885299682617,30.6842498779297,30.6842498779297,30.6842498779297,30.6842498779297,30.6842498779297,30.6842498779297,30.6842498779297,30.6842498779297,30.6842498779297,30.6842498779297,31.4622573852539,31.4622573852539,31.4622573852539,31.4622573852539,31.4622573852539,31.4622573852539,31.4622573852539,31.4622573852539,31.9488677978516,31.9488677978516,31.9488677978516,31.9488677978516,31.9488677978516,31.9488677978516,31.9488677978516,31.9488677978516,32.6460037231445,32.6460037231445,32.6460037231445,32.6460037231445,32.6460037231445,32.6460037231445,32.6460037231445,32.6460037231445,32.6460037231445,32.6460037231445,33.1470260620117,33.1470260620117,33.1470260620117,33.1470260620117,33.1470260620117,33.1470260620117,33.1470260620117,33.1470260620117,33.6381912231445,33.6381912231445,33.6381912231445,33.6381912231445,33.6381912231445,33.6381912231445,34.1391448974609,34.1391448974609,34.1391448974609,34.1391448974609,34.1391448974609,34.1391448974609,34.1391448974609,34.1391448974609,34.1391448974609,34.1391448974609,34.6415557861328,34.6415557861328,35.6374435424805,35.6374435424805,35.6374435424805,35.6374435424805,35.6374435424805,35.6374435424805,35.6374435424805,36.139404296875,36.139404296875,36.139404296875,36.139404296875,36.139404296875,36.139404296875,36.139404296875,36.139404296875,36.139404296875,36.139404296875,36.139404296875,28.3504486083984,28.3504486083984,28.3504486083984,28.3504486083984,28.3504486083984,29.2560043334961,29.2560043334961,29.2560043334961,29.2560043334961,29.2560043334961,29.2560043334961,29.2560043334961,29.2560043334961,29.2560043334961,29.2560043334961,29.758544921875,29.758544921875,29.758544921875,29.758544921875,29.758544921875,30.2612991333008,30.2612991333008,30.2612991333008,30.2612991333008,30.2612991333008,31.2671203613281,31.2671203613281,31.2671203613281,31.2671203613281,32.2730941772461,32.2730941772461,32.7759552001953,32.7759552001953,32.7759552001953,32.7759552001953,32.7759552001953,32.7759552001953,32.7759552001953,32.7759552001953,33.3795394897461,33.3795394897461,33.3795394897461,33.3795394897461,33.3795394897461,33.3795394897461,33.3795394897461,34.2846298217773,34.2846298217773,34.2846298217773,34.2846298217773,34.2846298217773,34.2846298217773,34.7880554199219,34.7880554199219,34.7880554199219,34.7880554199219,34.7880554199219,34.7880554199219,34.7880554199219,35.2671890258789,35.2671890258789,35.2671890258789,35.2671890258789,35.2671890258789,36.2582473754883,36.2582473754883,36.2582473754883,36.2582473754883,36.2582473754883,36.2582473754883,36.2582473754883,28.860466003418,28.860466003418,28.860466003418,28.860466003418,28.860466003418,28.860466003418,28.860466003418,29.3607559204102,29.3607559204102,29.3607559204102,29.3607559204102,29.3607559204102,29.3607559204102,29.3607559204102,29.3607559204102,29.3607559204102,29.3607559204102,29.3607559204102,29.3607559204102,29.8615570068359,29.8615570068359,29.8615570068359,29.8615570068359,29.8615570068359,29.8615570068359,29.8615570068359,30.8508148193359,30.8508148193359,31.3467788696289,31.3467788696289,31.3467788696289,31.3467788696289,31.842041015625,31.842041015625,31.842041015625,31.842041015625,31.842041015625,31.842041015625,31.842041015625,31.842041015625,31.842041015625,31.842041015625,32.841438293457,32.841438293457,32.841438293457,32.841438293457,32.841438293457,32.841438293457,32.841438293457,32.841438293457,33.3297653198242,33.3297653198242,33.3297653198242,33.3297653198242,33.3297653198242,33.3297653198242,33.3297653198242,33.3297653198242,33.3297653198242,33.3297653198242,33.3297653198242,33.8215789794922,33.8215789794922,33.8215789794922,33.8215789794922,33.8215789794922,33.8215789794922,33.8215789794922,33.8215789794922,34.8183517456055,34.8183517456055,34.8183517456055,34.8183517456055,34.8183517456055,34.8183517456055,34.8183517456055,34.8183517456055,35.7998352050781,35.7998352050781,35.7998352050781,35.7998352050781,35.7998352050781,35.7998352050781,35.7998352050781,36.3012237548828,36.3012237548828,36.3012237548828,36.3012237548828,36.3012237548828,36.3012237548828,36.3012237548828,36.3012237548828,36.3012237548828,36.3012237548828,36.3012237548828,28.9095611572266,28.9095611572266,28.9095611572266,28.9095611572266,28.9095611572266,28.9095611572266,29.5108947753906,29.5108947753906,29.5108947753906,29.5108947753906,29.5108947753906,29.5108947753906,29.5108947753906,30.3335342407227,30.3335342407227,30.3335342407227,30.3335342407227,30.3335342407227,30.3335342407227,30.3335342407227,30.8381729125977,30.8381729125977,30.8381729125977,30.8381729125977,30.8381729125977,30.8381729125977,30.8381729125977,30.8381729125977,31.5042724609375,31.5042724609375,31.5042724609375,31.5042724609375,31.5042724609375,32.3447570800781,32.3447570800781,32.3447570800781,32.3447570800781,32.3447570800781,32.3447570800781,32.3447570800781,32.3447570800781,32.8472595214844,32.8472595214844,32.8472595214844,32.8472595214844,33.8503036499023,33.8503036499023,33.8503036499023,33.8503036499023,33.8503036499023,33.8503036499023,33.8503036499023,34.6874771118164,34.6874771118164,34.6874771118164,34.6874771118164,34.6874771118164,34.6874771118164,34.6874771118164,35.3578186035156,35.3578186035156,35.3578186035156,35.3578186035156,35.3578186035156,35.3578186035156,35.3578186035156,35.3578186035156,35.9331588745117,35.9331588745117,35.9331588745117,35.9331588745117,35.9331588745117,35.9331588745117,35.9331588745117,35.9331588745117,36.4341430664062,36.4341430664062,36.4341430664062,36.4341430664062,36.4341430664062,36.4341430664062,28.6276016235352,28.6276016235352,28.6276016235352,29.2173919677734,29.2173919677734,29.2173919677734,29.2173919677734,29.2173919677734,29.2173919677734,29.2173919677734,29.7188491821289,29.7188491821289,29.7188491821289,29.7188491821289,29.7188491821289,29.7188491821289,29.7188491821289,29.7188491821289,29.7188491821289,29.7188491821289,30.2119674682617,30.2119674682617,30.2119674682617,30.7244338989258,30.7244338989258,30.7244338989258,30.7244338989258,30.7244338989258,30.7244338989258,30.7244338989258,30.7244338989258,30.7244338989258,30.7244338989258,31.2417297363281,31.2417297363281,31.2417297363281,31.2417297363281,31.2417297363281,31.2417297363281,32.251579284668,32.251579284668,32.251579284668,32.251579284668,32.251579284668,32.251579284668,32.251579284668,32.7843704223633,32.7843704223633,32.7843704223633,32.7843704223633,32.7843704223633,33.3577575683594,33.3577575683594,33.8591156005859,33.8591156005859,33.8591156005859,33.8591156005859,33.8591156005859,34.4656753540039,34.4656753540039,34.4656753540039,34.4656753540039,34.4656753540039,34.4656753540039,34.4656753540039,34.4656753540039,34.4656753540039,34.4656753540039,34.4656753540039,34.4656753540039,34.4656753540039,35.1512145996094,35.1512145996094,35.1512145996094,35.1512145996094,35.1512145996094,35.1512145996094,35.6471481323242,35.6471481323242,35.6471481323242,35.6471481323242,35.6471481323242,36.5743865966797,36.5743865966797,36.5743865966797,36.5743865966797,36.5743865966797,36.5743865966797,36.5743865966797,36.5743865966797,29.2756958007812,29.2756958007812,29.2756958007812,29.2756958007812,29.2756958007812,30.2811584472656,30.2811584472656,31.124755859375,31.124755859375,31.652214050293,31.652214050293,31.652214050293,31.652214050293,31.652214050293,32.206657409668,32.206657409668,32.206657409668,32.206657409668,32.206657409668,32.206657409668,32.206657409668,32.7111206054688,32.7111206054688,32.7111206054688,32.7111206054688,32.7111206054688,32.7111206054688,32.7111206054688,32.7111206054688,33.3981704711914,33.3981704711914,33.3981704711914,33.3981704711914,33.3981704711914,33.3981704711914,33.3981704711914,33.9606475830078,33.9606475830078,33.9606475830078,33.9606475830078,33.9606475830078,33.9606475830078,34.5680847167969,34.5680847167969,34.5680847167969,34.5680847167969,34.5680847167969,34.5680847167969,34.5680847167969,34.5680847167969,34.5680847167969,35.0565643310547,35.0565643310547,35.0565643310547,35.0565643310547,35.0565643310547,35.0565643310547,35.0565643310547,35.9767608642578,35.9767608642578,35.9767608642578,35.9767608642578,35.9767608642578,28.5817108154297,28.5817108154297,28.5817108154297,28.5817108154297,28.5817108154297,29.0813140869141,29.0813140869141,29.0813140869141,29.0813140869141,29.5720291137695,29.5720291137695,29.5720291137695,29.5720291137695,30.0655364990234,30.0655364990234,30.0655364990234,30.0655364990234,30.0655364990234,30.6616592407227,30.6616592407227,30.6616592407227,30.6616592407227,30.6616592407227,30.6616592407227,30.6616592407227,31.1615219116211,31.1615219116211,32.1684875488281,32.1684875488281,32.1684875488281,32.1684875488281,32.1684875488281,32.1684875488281,32.1684875488281,33.1728134155273,33.1728134155273,34.1723556518555,34.1723556518555,34.1723556518555,34.1723556518555,34.1723556518555,34.1723556518555,35.1707458496094,35.1707458496094,35.1707458496094,35.1707458496094,35.1707458496094,35.1707458496094,35.1707458496094,36.1266174316406,36.1266174316406,28.5324401855469,28.5324401855469,28.5324401855469,28.5324401855469,28.5324401855469,29.5381317138672,29.5381317138672,29.5381317138672,29.5381317138672,29.5381317138672,30.5437774658203,30.5437774658203,31.0442962646484,31.0442962646484,31.0442962646484,31.0442962646484,31.0442962646484,31.0442962646484,31.0442962646484,31.5411148071289,31.5411148071289,31.5411148071289,31.5411148071289,31.5411148071289,31.5411148071289,31.5411148071289,31.5411148071289,32.0438842773438,32.0438842773438,32.0438842773438,32.0438842773438,32.0438842773438,32.0438842773438,32.0438842773438,32.0438842773438,32.766487121582,32.766487121582,32.766487121582,33.5248413085938,33.5248413085938,33.5248413085938,33.5248413085938,33.5248413085938,33.5248413085938,33.5248413085938,34.017822265625,34.017822265625,34.017822265625,34.017822265625,34.017822265625,34.017822265625,34.017822265625,34.017822265625,34.7319030761719,34.7319030761719,34.7319030761719,34.7319030761719,34.7319030761719,34.7319030761719,34.7319030761719,35.5150375366211,35.5150375366211,35.5150375366211,35.5150375366211,35.5150375366211,35.5150375366211,35.5150375366211,35.5150375366211,36.5141220092773,36.5141220092773,36.5141220092773,36.5141220092773,36.5141220092773,36.5141220092773,36.5141220092773,29.1552658081055,29.1552658081055,29.1552658081055,29.1552658081055,29.1552658081055,30.1609954833984,30.1609954833984,30.1609954833984,30.1609954833984,30.1609954833984,31.1655349731445,31.1655349731445,31.1655349731445,31.1655349731445,31.1655349731445,31.7896194458008,31.7896194458008,31.7896194458008,31.7896194458008,31.7896194458008,31.7896194458008,31.7896194458008,31.7896194458008,31.7896194458008],&#34;meminc&#34;:[0,0,0,0,0,0,0,0,0,0.490409851074219,0,0,0,0,0,0,0.484878540039062,0,0.995330810546875,0,0,0,0,0,0,0.479743957519531,0,0,0.896675109863281,0,0.92523193359375,0,0,0,0,0,0,0,0.469367980957031,0,0,0,0,0,0,0,0,0.925682067871094,0,0,0,0,0,0,0,0,0.933197021484375,0,0,0,0,0,0.476142883300781,0,0,0.468017578125,0,0,0,0,0,0,0,0,-7.95556640625,0,0,0,0,0.533302307128906,0,0,0,0,0,0,0.613571166992188,0,0,0,0,0.6611328125,0,0,0,0,0,0,0.770423889160156,0,0.705024719238281,0,0,0,0,0.501434326171875,0,0,0,0,0.56561279296875,0,0,0,0,0,0,0.574119567871094,0,0,0,0.972137451171875,0,0,0,0,0,0,0,0.972091674804688,0,0,0.841476440429688,0,0,0,0,0.565475463867188,0,0,0,0,0,0,0,0,-7.53007507324219,0,0,0,0,0,0,0.578102111816406,0,0,0,0,0,0,0,0,0.992286682128906,0,0,0,0,0,0,0.763900756835938,0,0,0,0,0,0,0.987045288085938,0,0,0,0,0,0,0.973197937011719,0,0,0,0,0.605209350585938,0,0.857902526855469,0,0,0,0,0,0,0,0,0.972236633300781,0,0,0,0,0,0,0,0,0.650192260742188,0,0,0,0,0,0,0,-7.95436859130859,0,0,0,0,0,0,0,0,1.00479888916016,0,0,0,0,0,0,0,0.944732666015625,0,0,0,0,0,0,0,0.552261352539062,0,0,0,0,1.00426483154297,0,0.990402221679688,0,0,0,0,0,0,0.986679077148438,0,0,0,0,0,0,0,0,0.491943359375,0,0,0,0,0,0,0.934585571289062,0,0,0,0,0,0.54193115234375,0,0,0,0,0,0,0,-7.59025573730469,0,0,0,0,1.00111389160156,0,0,0,0,0,0,0,0,0,0,0,0.501113891601562,0,0,0,0,0,0,0,0,0,0.740669250488281,0,0,0,0,0,0,0,0.485450744628906,0,0,0,0,0,0,0,0,0.487922668457031,0,0,0,0,0,0,0.494438171386719,0,0,0,0.688140869140625,0,0,0,0,0,0,0,0,0,0,0.484710693359375,0,0,0,0,0.575515747070312,0,0,0,0,0,0,0,0,0,0,0.757789611816406,0,0,0,0,0,0,0,0.6954345703125,0,0,0,0,0,0,0,0,0,0,0.963081359863281,0,0,0,0,0,0,0,-7.96793365478516,0,0,0,0,0,0,0,0,0,0,0,0,0,0.324554443359375,0,0,0,0,0,0,0.483901977539062,0,0,0,0,0,0,0.983856201171875,0,0,0,0,0,0,0.991233825683594,0,0,0,0,0,0,0,0,0,0.98614501953125,0,0,0,0,0,0,0.699295043945312,0,0.7294921875,0,0,0,0,0,0,0,0.935134887695312,0,0,0,0.935325622558594,0,0.453727722167969,0,0,0,0,0,0,0,0,0.486534118652344,0,0,0,-7.87059783935547,0,0,0,0,0,0,0,0,0,0,0.495048522949219,0,0,0,0,0,0,0,0,0,0.67041015625,0,0,0,0,0,0,0,0,0,0,0,0.53369140625,0,0,0,0,0,0,0,0,0,0,0,0,0,0.521614074707031,0,0,0,0,0,0,0,0,0.967002868652344,0,0,0,0,0,0,0,0,0.991012573242188,0,0,0,0,0,0,0.607170104980469,0,0,0,0,0,0,0,0,0,0,0.632209777832031,0,0,0,0,0,0,0,0.735618591308594,0,0,0,0,0,0,0.986618041992188,0,0,0,0,0,0,0.990531921386719,0,0,0,0,-7.96835327148438,0,0,0,0,1.00542449951172,0,0,0,0,0,0,0,0.757598876953125,0,0.750480651855469,0,0,0,0,0,0,0.988563537597656,0,0,0,0,0,0,0,0.977989196777344,0,0,0,0,0,0.630928039550781,0,0.6011962890625,0,0,0,0,0.593460083007812,0,0,0,0,0,0,0,0,0,0,0.747604370117188,0,0,0,0,0.5362548828125,0,0,0,0,-7.77153015136719,0,0,0,0,0,0,0,1.00188446044922,0,1.00523376464844,0,0,0,0,1.00406646728516,0,0,0,0,0.503250122070312,0,0,0,0.503013610839844,0,0.54010009765625,0,0,0,0,0,0,0.835929870605469,0,0,0.903221130371094,0,0,0,0,0,0,0.740638732910156,0,0,0,0,0,0,0.480918884277344,0,0,0,0.609642028808594,0,0,0,0,0,0,0,0,-7.82645416259766,0,0,0,0,0.557289123535156,0,0,0,0,0,0,0.540374755859375,0,0,0,0,0,0,0,0,0.581642150878906,0,0,0,0,0,0.519363403320312,0,0,0,0,0,0,0.6173095703125,0,0,0,0,0.499313354492188,0,0,0,0,0,0,0.474037170410156,0,0,0,0,0.536849975585938,0,0,0,0.604385375976562,0,0.486167907714844,0,0,0,0,0,0,0,0,0.483413696289062,0,0,0,0,0.464820861816406,0,0.475006103515625,0,0,0,0,0.586723327636719,0,0,0,0,0,0,0,0,-7.54756164550781,0,0,0,0,0,0,0,0,0,0,0.835487365722656,0,0,0,0,0,0,0,0.6739501953125,0,0,0,0,0,0,0,0,0,0,1.00780487060547,0,0,0,0,0,0,0,1.00529479980469,0,0,0,0,0,0,0,0.795173645019531,0,0,0,0,0.512336730957031,0,0,0,0,0,0,0,0.494659423828125,0,0,0,0,0.508476257324219,0,0,0,0,0,0,0,0.783226013183594,0,0,0,0,0,0,0,0.471466064453125,0,0,0,0,0,0,0.502853393554688,0,0,0,0,0,0.452377319335938,0,0,0,0,0,0,0,-7.73889923095703,0,0.506980895996094,0,0,0,0,0,0,0,0,0.634368896484375,0,0,0,0,0.703315734863281,0,0,0,0,0,0,0.744468688964844,0,0,0,0,0,0.56219482421875,0,0,0,0,0.517601013183594,0,0,0,0,0,0,0,0,0,0.487762451171875,0,0,0.607513427734375,0,0,0,0,0,0,0,0.499038696289062,0,0,0.979278564453125,0,0,0,0,0,0,0,0,0,0.533340454101562,0,0,0,0,0,0,0.943023681640625,0,0,0,0,0,0,-7.43659210205078,0,0,0,0,0,0,0,0,0,0,0,0,0.504364013671875,0,0,0,0,0,0,0,0,0,0.501899719238281,0,0,0,0,0,0,0,0,0,1.00580596923828,0,0,0,0,0,0,0,0,0.876716613769531,0,0,0,0,0.625404357910156,0,0,0,0,0,0,0,0,1.0048828125,0,0,0,0,0,0,0.639503479003906,0,0,0,0,0,0.509269714355469,0,0,0,0,0,0,0,0,0,0.465766906738281,0,0,0,0,0,0,0.481277465820312,0,0,0,0,0,0,0,0,0,0,0,0.595787048339844,0,0,0,0,0,0,-7.79576873779297,0,0,0,0.61871337890625,0,0.695228576660156,0,0,0,0,0,0,0,0.67010498046875,0,0,0,0,0,0.495025634765625,0,0,0,0,0,0.500823974609375,0,0,0,0,0,0.975753784179688,0,0,0,0,0,0.491081237792969,0,0,0,0,0,0,0,0,0,0.885238647460938,0,0,0,0,0,0.500999450683594,0,0,0,0.575271606445312,0,0,0,0,0,0,0,0.988410949707031,0,0,0,0,0,0,0,0,0,0,-7.44495391845703,0,0,1.00457000732422,0,0,0,0,0,0,1.00521850585938,0,0.562782287597656,0,0,0,0,0,0,0.484771728515625,0,0,0,0,0,0.501388549804688,0,0,0,0,0,0,0,0.570243835449219,0,0,0,0,0,0,0,0,0.716445922851562,0,0,0,0.5167236328125,0,0.520668029785156,0,0,0,0,0,0,0,0,0,0.668701171875,0,0,0,0,0,0,0,0,0.486808776855469,0,0.48529052734375,0,0,0,0,0,0,0,0,0,0.471343994140625,0,0,0,0,0,0,-7.66872406005859,0,0,0,0,0,0.690696716308594,0,0,0,0,0,0,0,0,0.497108459472656,0,0,0,0,0,0,0,0,0.592658996582031,0,0,0,0,0,0,0,0.612525939941406,0,0,0,0,0,0,0,0,0,0.662284851074219,0,0,0,0,0,0.496566772460938,0,0,0,0.981109619140625,0,0,0,0,0.987174987792969,0,0,0,0,0,0,0,0.98193359375,0,0,0,0,0,0,0.49407958984375,0,0,0,0,0,0,0,0.746353149414062,0,0,0,0,0,-7.81217956542969,0,0,0,0,0,0,0,0,0,0.884452819824219,0,0,0,0,0,0,0,1.01270294189453,0,0,0,0,0,0,0,1.01284027099609,0,0,0,0.956291198730469,0,0,0,0,0,0,0,0,0.48974609375,0,0,0,0,0,0,0,0,0,0,0,0,0.689155578613281,0,0,0,0,0,0,0,0,0,0.479644775390625,0,0,0,0.479736328125,0,0,0,0,0.679168701171875,0,0,0,0,0,0,0.484176635742188,0,0,0,0,0,0,-7.46804809570312,0,0,0,0,0,0,0,0,0,0.5623779296875,0,0,0,0,0.48455810546875,0,0,0,0,0,0,0.59320068359375,0,0,0,0,0,0,0,0,0,0,0,0,0.496696472167969,0,0,0,0,0.589027404785156,0,0,0,0,0,0,0.488616943359375,0,0,0,0.549087524414062,0,0.573104858398438,0,0,0,0,0,0,0,0.534568786621094,0,0.487648010253906,0,0,0,0,0.54144287109375,0,0,0,0,0,0.568817138671875,0,0,0,0,0,0,0,0,0,0.563278198242188,0,0,0,0,0.973724365234375,0,0,0,0,0,0,-7.43770599365234,0,0,0,0,0,0,0,0,0.998710632324219,0,0,0,0,0,0.991256713867188,0,0,0,0,0,0,0.619369506835938,0,0,0,0,0.48486328125,0,0,0,0,0,0,0,0,0,0.643112182617188,0,0,0,0,0,0,0,0,0,0.480552673339844,0,0.969680786132812,0,0,0,0,0,0,0,0.963310241699219,0,0,0,0,0,0,0,0,0,0,0.823432922363281,0,0,0,0,0,0,0.614906311035156,0,0,0,0,0,-7.72257995605469,0,0,0,0,0,0,0.988662719726562,0,0,0,0,0,0,0.989242553710938,0,0,0,0,0,0.4981689453125,0,0,0,0,0,0,0,0.487815856933594,0,0,0,0,0,0,0,0,0.907882690429688,0,0,0,0,0,0.987739562988281,0,0,0,0,0,0,0,0.497169494628906,0,0,0,0,0.978317260742188,0,0,0,0,0,0,0.494544982910156,0,0.897567749023438,0,0,0,0,0,0,-7.31955718994141,0,1.00617980957031,0,0,0,0,0,0,0.9228515625,0,0,0,0,0,0,0.501373291015625,0,0,0,0,0,0,0,0,0.990211486816406,0,0,0,0,0,0,0.641998291015625,0,0,0,0,0,0,0,0,0.698860168457031,0,0.483573913574219,0,0,0,0,0,0,0.988906860351562,0,0,0,0,0.978164672851562,0,-7.40611267089844,0,0,0,0,0.50274658203125,0,0,0,0,0.502151489257812,0,0,0,0,0,0,0,0.493583679199219,0,0,0,0,0,0,0,0,0,0,1.00010681152344,0,0,0,0,0,0,0.992904663085938,0,0,0,0,0,0,0,0,0,0,0,0.999076843261719,0,0,0,0,0,0,0.489456176757812,0,0,0,0,0,0,0,0,0,0,0.785560607910156,0,0,0,0,0,0,0.690322875976562,0,0,0,0,0,0,0,0,0.987716674804688,0,0,0,0,0,-7.90462493896484,0,0,0,0,0,0,0,0.998985290527344,0,0,0,0,0,0,1.00380706787109,0,0.794029235839844,0,0,0,0,0,0,0,0.701515197753906,0,0,0,0,0,0,0,0,0,0.498992919921875,0,0,0,0,0,0,0.979049682617188,0,0,0,0,0,0.984535217285156,0,0,0,0,0,0,0.988235473632812,0,0,0,0,0,0,0,0.498420715332031,0,0,0,0,0,0,0.479560852050781,0,0,-7.40314483642578,0,0.635002136230469,0,0,0,0,0,0,0.501014709472656,0,0,0,0,0.997146606445312,0,0,0,0,0,0,0,0,0.900428771972656,0,0,0,0,0,0,0,0,0,0.718490600585938,0,0,0,0,0.737640380859375,0,0,0,0.538261413574219,0,0,0,0,0.475028991699219,0,0,0,0,0,0.627761840820312,0,0,0,0,0,0,0.672859191894531,0,0.536933898925781,0,0,0,0,0,0,-7.88417053222656,0,0,0,0,0,0,0,0,0,0,0.603904724121094,0,0,0,0,0,0,0,0,0,0,0,0,0,0.568435668945312,0,0,0,0,0,0.687217712402344,0,0,0,0,0,0.586097717285156,0,0.498695373535156,0,0,0,0,0,0.546424865722656,0,0.494949340820312,0,0,0,0,0,0,0.4884033203125,0,0,0,0,0,0.581932067871094,0,0,0,0,0.555740356445312,0,0,0,0,0,0,0.797515869140625,0,0,0,0,0.993721008300781,0,0,0,0,0,0,0.537956237792969,0,0,-7.48560333251953,0,0,0,0,0,0,0.552383422851562,0,0,0,0,0,0.987388610839844,0,0,0,0,0,0,0.569183349609375,0,0,0,0,0.745857238769531,0,0,0,0,0,0,0.635414123535156,0,0,0,0,0,0,0,0,0.971450805664062,0,0,0,0,0,0,0,0,0,0.491508483886719,0,0,0,0,0,0.973297119140625,0,0,0,0,0,0,0.610816955566406,0,0,0,0,0.744613647460938,0,0,0,0,0.275276184082031,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-8.35098266601562,0,0,0,0,0,0,0,0.493759155273438,0,0,0,0,0,0.578094482421875,0,0,0,0,0,0,0,0,0,0,0.494087219238281,0,0,0,0,0,0,0,0.546112060546875,0,0,0,0,0,0,0.4920654296875,0,0,0,0,0,0,0,0.637443542480469,0,0,0,0,0,0,0,0.49957275390625,0,0,0,0,0,0,0.497909545898438,0,0,0,0,0,0,1.00664520263672,0,0,0.502578735351562,0,0,0,0.502044677734375,0,0,0,0,0,0,0,0,0.996627807617188,0,0,0,0,0,0,0,0,0,0,0.488128662109375,0,-7.40439605712891,0,0,0,0,0,0,0,0.484832763671875,0,0.691322326660156,0,0,0,0,0,0,0,0,0.497695922851562,0,0,0,0,0,0.487518310546875,0,0,0,0,0,0.656417846679688,0,0,0,0,0,0,0,0,0,0,0.50390625,0,0,0,0,0,0,0,0,0.603485107421875,0,0,0,0,0,0,0.534843444824219,0,0,0,0,0,0,0,0,0,0.499275207519531,0,0,0,0.588180541992188,0,0,0,0,0.551025390625,0,0,0,0,0,0.49664306640625,0,0,0,0,0,0,0.531105041503906,0,0,0,0,0,0,0,0,0.712791442871094,0,0,0,0,0,-7.79468536376953,0,0,0,1.02047729492188,0,0,0,0,0,0,0,0,0,0,0,0,0,0.493560791015625,0,0,0,0,0,0,0,0,0,0,0,0.501518249511719,0,0,0,0,0,0,0,0,0,0,0.492988586425781,0,0,0,0,0,0,0.910919189453125,0,0,0,0,0,0,0.502265930175781,0,0,0,0,0,0.835990905761719,0,0,0,0,0.662078857421875,0,0,0,0,0,0,0,0,0.67889404296875,0,0,0,0,0,0,0,0.8240966796875,0,0,0,0,0,0,0,0.988967895507812,0,0,0,0,0,0,0,-7.39442443847656,0,0,0,0,0,0,0,0.502952575683594,0,0,0,0,0,0,0,0.602615356445312,0,0,0,0,0,0.566307067871094,0,0,0,0,0.507270812988281,0,0,0,0,0,0,0.632675170898438,0,0,0,0,0,0,0.4891357421875,0,0.62030029296875,0,0,0,0,0,0,0,0.499649047851562,0,0,0,0,0.50567626953125,0,0,0,0,0,0,0,0.687599182128906,0,0,0,0,0,0,0.753204345703125,0,0,0,0,0,0,0.507865905761719,0,0,0,0,0,0,0.482139587402344,0,0,0,0,0,0,0,-7.83424377441406,0,0,0,0,0,0,0,0,0.498435974121094,0,0,0,0,0,0,0,0.892265319824219,0,0,0,0,0,0,0,0,0,0.502845764160156,0,0.643211364746094,0,0.487991333007812,0,0,0,0,0,0,0.5301513671875,0,0,0.661819458007812,0,0,0.492813110351562,0,0,0,0,0,0,0,0,0,0.512626647949219,0,0,0,0,0,0.467796325683594,0,0,0,0,0,0,0.605979919433594,0,0,0,0,0,0.470970153808594,0,0,0,0,0,0.533721923828125,0,0,0,0,-7.65797424316406,0,0,0,0,0.503364562988281,0,0,0,0,0,0,0,0.537033081054688,0,0,0,0,0.838241577148438,0,0,0.981025695800781,0,0,0,1.012451171875,0,0,0,0,0,0,0,0,0,0,0,0,0.502593994140625,0,0,0,0,0,0,0,0,0,0,0,0,0,0.740013122558594,0,0.490592956542969,0,0,0,0,0,0,0,0,0.500862121582031,0,0,0,0,0.760650634765625,0,0,0,0,0,0,0,0.744186401367188,0,0,0,0,0.493148803710938,0,0,0,0,0,0,0,0,-7.73180389404297,0,0,0,0,0,0,0.496444702148438,0,0.994598388671875,0,0,0,0,0,0,0,0,0.495719909667969,0,0,0,0,0,0,0,0,0,0.778007507324219,0,0,0,0,0,0,0,0.486610412597656,0,0,0,0,0,0,0,0.697135925292969,0,0,0,0,0,0,0,0,0,0.501022338867188,0,0,0,0,0,0,0,0.491165161132812,0,0,0,0,0,0.500953674316406,0,0,0,0,0,0,0,0,0,0.502410888671875,0,0.995887756347656,0,0,0,0,0,0,0.501960754394531,0,0,0,0,0,0,0,0,0,0,-7.78895568847656,0,0,0,0,0.905555725097656,0,0,0,0,0,0,0,0,0,0.502540588378906,0,0,0,0,0.502754211425781,0,0,0,0,1.00582122802734,0,0,0,1.00597381591797,0,0.502861022949219,0,0,0,0,0,0,0,0.603584289550781,0,0,0,0,0,0,0.90509033203125,0,0,0,0,0,0.503425598144531,0,0,0,0,0,0,0.479133605957031,0,0,0,0,0.991058349609375,0,0,0,0,0,0,-7.39778137207031,0,0,0,0,0,0,0.500289916992188,0,0,0,0,0,0,0,0,0,0,0,0.500801086425781,0,0,0,0,0,0,0.9892578125,0,0.495964050292969,0,0,0,0.495262145996094,0,0,0,0,0,0,0,0,0,0.999397277832031,0,0,0,0,0,0,0,0.488327026367188,0,0,0,0,0,0,0,0,0,0,0.491813659667969,0,0,0,0,0,0,0,0.996772766113281,0,0,0,0,0,0,0,0.981483459472656,0,0,0,0,0,0,0.501388549804688,0,0,0,0,0,0,0,0,0,0,-7.39166259765625,0,0,0,0,0,0.601333618164062,0,0,0,0,0,0,0.822639465332031,0,0,0,0,0,0,0.504638671875,0,0,0,0,0,0,0,0.666099548339844,0,0,0,0,0.840484619140625,0,0,0,0,0,0,0,0.50250244140625,0,0,0,1.00304412841797,0,0,0,0,0,0,0.837173461914062,0,0,0,0,0,0,0.670341491699219,0,0,0,0,0,0,0,0.575340270996094,0,0,0,0,0,0,0,0.500984191894531,0,0,0,0,0,-7.80654144287109,0,0,0.589790344238281,0,0,0,0,0,0,0.501457214355469,0,0,0,0,0,0,0,0,0,0.493118286132812,0,0,0.512466430664062,0,0,0,0,0,0,0,0,0,0.517295837402344,0,0,0,0,0,1.00984954833984,0,0,0,0,0,0,0.532791137695312,0,0,0,0,0.573387145996094,0,0.501358032226562,0,0,0,0,0.606559753417969,0,0,0,0,0,0,0,0,0,0,0,0,0.685539245605469,0,0,0,0,0,0.495933532714844,0,0,0,0,0.927238464355469,0,0,0,0,0,0,0,-7.29869079589844,0,0,0,0,1.00546264648438,0,0.843597412109375,0,0.527458190917969,0,0,0,0,0.554443359375,0,0,0,0,0,0,0.504463195800781,0,0,0,0,0,0,0,0.687049865722656,0,0,0,0,0,0,0.562477111816406,0,0,0,0,0,0.607437133789062,0,0,0,0,0,0,0,0,0.488479614257812,0,0,0,0,0,0,0.920196533203125,0,0,0,0,-7.39505004882812,0,0,0,0,0.499603271484375,0,0,0,0.490715026855469,0,0,0,0.493507385253906,0,0,0,0,0.596122741699219,0,0,0,0,0,0,0.499862670898438,0,1.00696563720703,0,0,0,0,0,0,1.00432586669922,0,0.999542236328125,0,0,0,0,0,0.998390197753906,0,0,0,0,0,0,0.95587158203125,0,-7.59417724609375,0,0,0,0,1.00569152832031,0,0,0,0,1.00564575195312,0,0.500518798828125,0,0,0,0,0,0,0.496818542480469,0,0,0,0,0,0,0,0.502769470214844,0,0,0,0,0,0,0,0.722602844238281,0,0,0.758354187011719,0,0,0,0,0,0,0.49298095703125,0,0,0,0,0,0,0,0.714080810546875,0,0,0,0,0,0,0.783134460449219,0,0,0,0,0,0,0,0.99908447265625,0,0,0,0,0,0,-7.35885620117188,0,0,0,0,1.00572967529297,0,0,0,0,1.00453948974609,0,0,0,0,0.62408447265625,0,0,0,0,0,0,0,0],&#34;filename&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},&#34;interval&#34;:10,&#34;files&#34;:[],&#34;prof_output&#34;:&#34;/var/folders/f3/t51slq3x2dlfgk3ksp7vddzm0000gq/T//Rtmpc50nMf/filea0268a8367a.prof&#34;,&#34;highlight&#34;:{&#34;output&#34;:[&#34;^output\\$&#34;],&#34;gc&#34;:[&#34;^&lt;GC&gt;$&#34;],&#34;stacktrace&#34;:[&#34;^\\.\\.stacktraceo(n|ff)\\.\\.$&#34;]},&#34;split&#34;:&#34;h&#34;}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;div id=&#34;htmlwidget-4&#34; style=&#34;width:100%;height:600px;&#34; class=&#34;profvis html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-4&#34;&gt;{&#34;x&#34;:{&#34;message&#34;:{&#34;prof&#34;:{&#34;time&#34;:[1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12],&#34;depth&#34;:[7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1],&#34;label&#34;:[&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;getOption&#34;,&#34;sum&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;is.null&#34;,&#34;local&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sample.int&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;],&#34;filenum&#34;:[null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null],&#34;linenum&#34;:[null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null],&#34;memalloc&#34;:[31.6913833618164,31.6913833618164,31.6913833618164,31.6913833618164,31.6913833618164,31.6913833618164,31.6913833618164,42.9852142333984,42.9852142333984,42.9852142333984,42.9852142333984,42.9852142333984,42.9852142333984,42.9852142333984,42.9852142333984,49.0664215087891,49.0664215087891,49.0664215087891,49.0664215087891,49.0664215087891,49.0664215087891,49.0664215087891,49.0664215087891,54.9366302490234,54.9366302490234,54.9366302490234,54.9366302490234,54.9366302490234,54.9366302490234,54.9366302490234,54.9366302490234,60.7808303833008,60.7808303833008,60.7808303833008,60.7808303833008,60.7808303833008,60.7808303833008,60.7808303833008,60.7808303833008,37.6629943847656,37.6629943847656,37.6629943847656,37.6629943847656,37.6629943847656,37.6629943847656,37.6629943847656,37.6629943847656,37.6629943847656,33.8526916503906,33.8526916503906,33.8526916503906,33.8526916503906,33.8526916503906,33.8526916503906,33.8526916503906,33.8526916503906,43.6068878173828,43.6068878173828,43.6068878173828,43.6068878173828,43.6068878173828,43.6068878173828,43.6068878173828,43.6068878173828,49.40283203125,49.40283203125,55.1845626831055,55.1845626831055,55.1845626831055,55.1845626831055,55.1845626831055,55.1845626831055,51.1763534545898,51.1763534545898,51.1763534545898,51.1763534545898,51.1763534545898,51.1763534545898,51.1763534545898,51.1763534545898,51.1763534545898,35.3730010986328,35.3730010986328,35.3730010986328,35.3730010986328,35.3730010986328,35.3730010986328,35.3730010986328,35.3730010986328],&#34;meminc&#34;:[0,0,0,0,0,0,0,11.293830871582,0,0,0,0,0,0,0,6.08120727539062,0,0,0,0,0,0,0,5.87020874023438,0,0,0,0,0,0,0,5.84420013427734,0,0,0,0,0,0,0,-23.1178359985352,0,0,0,0,0,0,0,0,-3.810302734375,0,0,0,0,0,0,0,9.75419616699219,0,0,0,0,0,0,0,5.79594421386719,0,5.78173065185547,0,0,0,0,0,-4.00820922851562,0,0,0,0,0,0,0,0,-15.803352355957,0,0,0,0,0,0,0],&#34;filename&#34;:[null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null]},&#34;interval&#34;:10,&#34;files&#34;:[{&#34;filename&#34;:&#34;&lt;expr&gt;&#34;,&#34;content&#34;:&#34;set.seed(2009)\nprofvis({\n    NullDistFSNDR_mw &lt;- fastSimNullDistRMean(total_bill ~ time, data=tips)\n})&#34;,&#34;normpath&#34;:&#34;&lt;expr&gt;&#34;}],&#34;prof_output&#34;:&#34;/var/folders/f3/t51slq3x2dlfgk3ksp7vddzm0000gq/T//Rtmpc50nMf/filea025a731d15.prof&#34;,&#34;highlight&#34;:{&#34;output&#34;:[&#34;^output\\$&#34;],&#34;gc&#34;:[&#34;^&lt;GC&gt;$&#34;],&#34;stacktrace&#34;:[&#34;^\\.\\.stacktraceo(n|ff)\\.\\.$&#34;]},&#34;split&#34;:&#34;h&#34;}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Das mit den beiden Routinen aus FastSimNullDistR die gleichen Ergebnisse zu erwarten sind, sie also ein “(quasi-)drop-in-replacements” der Mosaic Routinen darstellen, kann man an den folgenden QQ-Plots erkennen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df.diffprop &amp;lt;- data_frame(diffprop = c(NullDistFSNDR_aw$diffprop,
    NullDistMosaic_aw$diffprop), type = c(rep(&amp;quot;FSNDR&amp;quot;, 10000),
    rep(&amp;quot;mosaic&amp;quot;, 10000)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: `data_frame()` was deprecated in tibble 1.1.0.
## Please use `tibble()` instead.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_qq(~diffprop, color = ~type, data = df.diffprop)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-05-02-ein-wenig-schneller-zur-simulierten-nullverteilung_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df.diffmean &amp;lt;- data_frame(diffmean = c(NullDistFSNDR_mw$diffmean,
    NullDistMosaic_mw$diffmean), type = c(rep(&amp;quot;FSNDR&amp;quot;, 10000),
    rep(&amp;quot;mosaic&amp;quot;, 10000)))
gf_qq(~diffmean, color = ~type, data = df.diffmean)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-05-02-ein-wenig-schneller-zur-simulierten-nullverteilung_files/figure-html/unnamed-chunk-15-2.png&#34; width=&#34;672&#34; /&gt;
# qqplot(NullDistFSNDR_aw&lt;span class=&#34;math inline&#34;&gt;\(diffprop, NullDistMosaic_aw\)&lt;/span&gt;diffprop)
gf_qq(FSNDR ~ Mosaic, data=df)
# qqplot(NullDistFSNDR_mw&lt;span class=&#34;math inline&#34;&gt;\(diffmean, NullDistMosaic_mw\)&lt;/span&gt;diffmean)
gf_qq(NullDistFSNDR_mw&lt;span class=&#34;math inline&#34;&gt;\(diffmean ~ NullDistMosaic_mw\)&lt;/span&gt;diffmean)
```&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;woher-kommt-die-geschwindigkeit&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Woher kommt die Geschwindigkeit?&lt;/h2&gt;
&lt;p&gt;Schaut man sich den Quellcode von Mosaic an, wird einem schnell klar, dass es zwar didaktisch sinnvoll ist die unabhängige Variable mit &lt;code&gt;shuffle()&lt;/code&gt; zu bearbeiten, nicht aber programmiertechnisch. Und wenn, dann nicht in dem man die ganze Datenzeile für die Berechnung kopiert. Statt also &lt;span class=&#34;math inline&#34;&gt;\(10\,000\)&lt;/span&gt; mal die ganzen Daten im Speicher zu kopieren wäre es doch sinnvoller mit Hilfe eines Index auf die unveränderten Daten zuzugreifen. Und genau das machen die zwei Routinen. Es wird also nur dieser Zugriffsindex wird &lt;em&gt;geshuffelt&lt;/em&gt; und das spart Speicherplatz und deutlich auch Rechenzeit.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Nur ein wenig lineare Regression</title>
      <link>https://sefiroth.net/nab/post/nur-ein-wenig-lineare-regression/</link>
      <pubDate>Mon, 08 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/nur-ein-wenig-lineare-regression/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Der &lt;em&gt;tipping&lt;/em&gt; Datensatz wird oft analysiert. Das Verhältnis von Trinkgeld (&lt;em&gt;tip&lt;/em&gt;) und Rechnungsbetrag (&lt;em&gt;total_bill&lt;/em&gt;) steht dabei im Vordergrund einer lineare Regressionsanalyse.
So auch hier. Wir wollen die einzelnen Angaben von &lt;strong&gt;R&lt;/strong&gt; dabei in den Fokus rücken und einmal Hinterfragen, was wir bei der Ausgabe von &lt;strong&gt;R&lt;/strong&gt; eigentlich genau sehen, woher es kommt und wie man es interpretieren kann.&lt;/p&gt;
&lt;p&gt;Zunächst laden wir dazu die &lt;strong&gt;tipping&lt;/strong&gt; Daten mittels&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mosaic)
download.file(&amp;quot;https://goo.gl/whKjnl&amp;quot;, destfile = &amp;quot;tips.csv&amp;quot;)
tips &amp;lt;- read.csv2(&amp;quot;tips.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in den Arbeitsspeicher.&lt;/p&gt;
&lt;p&gt;Eine lineares Modell wird schnell mit&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;linMod &amp;lt;- lm(tip ~ total_bill, data = tips)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;erstellt.
Betrachten wir die Zusammenfassung:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(linMod)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = tip ~ total_bill, data = tips)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -3.1982 -0.5652 -0.0974  0.4863  3.7434 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept) 0.920270   0.159735   5.761 2.53e-08 ***
## total_bill  0.105025   0.007365  14.260  &amp;lt; 2e-16 ***
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 1.022 on 242 degrees of freedom
## Multiple R-squared:  0.4566, Adjusted R-squared:  0.4544 
## F-statistic: 203.4 on 1 and 242 DF,  p-value: &amp;lt; 2.2e-16&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Die zentrale Frage bei einer linearen Regression ist, finden wir einen linearen Zusammenhang in unserer Stichprobe, den wir auf die Population (als die Grundgesamtheit) übertragen können.&lt;/p&gt;
&lt;p&gt;Die Spalte &lt;strong&gt;Estimate&lt;/strong&gt; im Abschnitt &lt;strong&gt;Coefficients&lt;/strong&gt; liefert uns in unser Stichprobe einen möglichen linearen Zusammenhang gemäß&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\hat{y}_{\text{tip}} = \hat{\beta}_{\text{0}} + \hat{\beta}_{\text{total_bill}} \cdot x_{\text{total_bill}},\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;mit den &lt;em&gt;Regressionskoeffizienten&lt;/em&gt; &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}_0=0.9202696\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}_{\text{total_bill}}=0.1050245\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Graphisch ergibt sich damit das Modell wie folgt:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Statt plotModel(linMod) besser:
mypanel &amp;lt;- function(x, y) {
    # Scatterplot:
    panel.xyplot(x, y, col = &amp;quot;darkgreen&amp;quot;) 
    # Regressionsgerade:
    panel.abline(linMod, col = &amp;quot;red&amp;quot;, lwd = 1.2, lty = 2)
}
xyplot(
    tip ~ total_bill, data = tips, 
    panel = mypanel,
    main  = &amp;quot;Streudiagramm der Trinkgelder&amp;quot;,
    ylab  = &amp;quot;Trinkgeld&amp;quot;,
    xlab  = &amp;quot;Rechnungsbetrag&amp;quot;,
    key = list(
            space = &amp;quot;bottom&amp;quot;, padding.text = 8,
            lines = list(col = c(&amp;quot;red&amp;quot;), lty = c(2), lwd = 1.2),
            text = list(c(&amp;quot;Regressionsgerade&amp;quot;))
          )
     )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-01-08-nur-ein-wenig-lineare-regression_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Was hat es mit dem y-Achsenabschnitt &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}_0\)&lt;/span&gt; auf sich?&lt;/p&gt;
&lt;p&gt;Ist es etwa eine Art &lt;em&gt;Grundtrinkgeld&lt;/em&gt;, mit dem der Kellern rechnen kann, auch wenn der Kunde gar nichts bestellt?&lt;/p&gt;
&lt;p&gt;Nun ja, es so etwas in der Art, aber eben ein rein fiktiver Wert, der durch die Konstruktion der Parameter entsteht.
Eine (affin-)lineare Gerade geht nun einmal irgendwann durch die y-Achse (wenn sie nicht parallel dazu ist) und es kann passieren, dass eine sinnvolle Interpretation nicht so ohne weiteres möglich ist.&lt;/p&gt;
&lt;p&gt;Wir können aber dieses &lt;em&gt;Grundtrinkgeld&lt;/em&gt; heraus nehmen und den y-Achsenabschnitt auf Null setzen. Dazu ziehen wir &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}_0\)&lt;/span&gt; einfach von alle Trinkgeldern ab. Wir erhalten quasi nur noch den &lt;em&gt;Trinkgeldzuwach&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;beta_0 &amp;lt;- coef(linMod)[&amp;quot;(Intercept)&amp;quot;]  # Grundtrinkgeld
tips$delta_tip &amp;lt;- tips$tip - beta_0    # wird abgezogen&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vergleichen wir das alte lineare Modell mit dem neuen Modell (&lt;em&gt;linModDelta&lt;/em&gt;):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;linModDelta &amp;lt;- lm(delta_tip ~ total_bill, data = tips)
summary(linModDelta)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = delta_tip ~ total_bill, data = tips)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -3.1982 -0.5652 -0.0974  0.4863  3.7434 
## 
## Coefficients:
##               Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept) -4.549e-15  1.597e-01    0.00        1    
## total_bill   1.050e-01  7.365e-03   14.26   &amp;lt;2e-16 ***
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 1.022 on 242 degrees of freedom
## Multiple R-squared:  0.4566, Adjusted R-squared:  0.4544 
## F-statistic: 203.4 on 1 and 242 DF,  p-value: &amp;lt; 2.2e-16&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In diesem Modell ist der Wert für den y-Achsenabschnitt numerisch gleich 0. – Ja, da mag zwar &lt;span class=&#34;math inline&#34;&gt;\(-4.5487837\times 10^{-15}\)&lt;/span&gt; stehen, jedoch sind so kleine Werte der jedem Rechner inne wohnenden Ungenauigkeit in der Gleitkomma-Arithmetik geschuldet und ist faktisch gleich 0.&lt;/p&gt;
&lt;p&gt;Der Wert für die Steigung lautet weiterhin &lt;span class=&#34;math inline&#34;&gt;\(0.1050245\)&lt;/span&gt;.
Das war auch zu erwarten, denn wir haben unsere Regressionsgerade eigentlich nur um &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}_0\)&lt;/span&gt; nach unten verschoben. (Der Fachmann spricht von einer Translation (Parallelverschiebung)&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; um &lt;span class=&#34;math inline&#34;&gt;\(-\hat{\beta}_0\)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Statt plotModel(linModDelta) besser:
mypanel &amp;lt;- function(x, y) {
    # Scatterplot:
    panel.xyplot(x, y, col = &amp;quot;darkgreen&amp;quot;) 
    # Regressionsgerade:
    panel.abline(linModDelta, col = &amp;quot;red&amp;quot;, lwd = 1.2, lty = 2)
}
xyplot(
    delta_tip ~ total_bill, data=tips, 
    panel = mypanel,
    main  = &amp;quot;Streudiagramm der Delta Trinkgelder&amp;quot;,
    ylab  = &amp;quot;Delta Trinkgeld&amp;quot;,
    xlab  = &amp;quot;Rechnungsbetrag&amp;quot;,
    key = list(
            space=&amp;quot;bottom&amp;quot;, padding.text=8,
            lines=list(col=c(&amp;quot;red&amp;quot;), lty=c(2), lwd=1.2),
            text=list(c(&amp;quot;Regressionsgerade&amp;quot;)))
     )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-01-08-nur-ein-wenig-lineare-regression_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Vergleichen wir die beiden Zusammenfassungen, so stellen wir fest das sich mit Ausnahme der &lt;em&gt;[Intercept]&lt;/em&gt; Zeile praktisch nichts geändert hat. Das ist kein Wunder, sondern Absicht!&lt;/p&gt;
&lt;p&gt;Die Regressionsgerade stellt für unsere Stichprobe die Gerade mit dem geringsten Fehler an den Datenpunkten dar. Mathematisch heißt das folgendes:&lt;/p&gt;
&lt;p&gt;An den &lt;span class=&#34;math inline&#34;&gt;\(n=244\)&lt;/span&gt; Datenpunkten unserer Stichprobe &lt;span class=&#34;math inline&#34;&gt;\((x_i, y_i)=(tips\$total\_bill[i], tips\$tip[i])\)&lt;/span&gt; [für &lt;span class=&#34;math inline&#34;&gt;\((i=1, \dots, n)\)&lt;/span&gt;] sind die &lt;em&gt;Residuen&lt;/em&gt;, also die &lt;em&gt;Fehlerterme&lt;/em&gt;,&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
 \hat{e}_i =\hat{y}_i - y_i = \left[\hat{\beta}_{\text{0}} + \hat{\beta}_{\text{total_bill}} \cdot x_i\right] - y_i
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;durch die verwendete &lt;em&gt;Methode der kleinsten Quadrate&lt;/em&gt;&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; &lt;em&gt;quadratisch minimal&lt;/em&gt;. Kurz:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    \sum_{i=1}^n (\hat{e}_i)^2 \text{ ist minimal!}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir können diese Fehlerterme graphisch ansehen um die Varianz der Residuen zu sehen.
Dazu ziehen wir von allen Datenpunkten &lt;span class=&#34;math inline&#34;&gt;\(y_i\)&lt;/span&gt; den geschätzten Wert &lt;span class=&#34;math inline&#34;&gt;\(\hat{y}_i\)&lt;/span&gt; ab und erstellen ein neues lineares Modell:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;beta_total_bill &amp;lt;- coef(linModDelta)[&amp;quot;total_bill&amp;quot;]
tips$error_tip &amp;lt;- (tips$tip - beta_0 - beta_total_bill * tips$total_bill)
linModError &amp;lt;- lm(error_tip ~ total_bill, data = tips)
summary(linModError)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = error_tip ~ total_bill, data = tips)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -3.1982 -0.5652 -0.0974  0.4863  3.7434 
## 
## Coefficients:
##               Estimate Std. Error t value Pr(&amp;gt;|t|)
## (Intercept)  1.900e-15  1.597e-01       0        1
## total_bill  -8.740e-17  7.365e-03       0        1
## 
## Residual standard error: 1.022 on 242 degrees of freedom
## Multiple R-squared:  6.665e-31,  Adjusted R-squared:  -0.004132 
## F-statistic: 1.613e-28 on 1 and 242 DF,  p-value: 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also Diagramm sieht es dann so aus:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Statt plotModel(linModError) besser:
mypanel &amp;lt;- function(x, y) {
    # Scatterplot:
    panel.xyplot(x, y, col = &amp;quot;darkgreen&amp;quot;) 
    # Regressionsgerade:
    panel.abline(linModError, col = &amp;quot;red&amp;quot;, lwd = 1.2, lty = 2)
}
xyplot(
    error_tip ~ total_bill, data = tips, 
    panel = mypanel,
    main  = &amp;quot;Streudiagramm der Residuen&amp;quot;,
    ylab  = &amp;quot;Residuen&amp;quot;,
    xlab  = &amp;quot;Rechnungsbetrag&amp;quot;,
    key = list(
            space = &amp;quot;bottom&amp;quot;, rows = 3, padding.text = 8,
            lines = list(col=c(&amp;quot;red&amp;quot;), lty = c(2), lwd = 1.2),
            text = list(c(&amp;quot;Regressionsgerade / x-Achse&amp;quot;))
          )
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-01-08-nur-ein-wenig-lineare-regression_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Wir können die Graphik im wesentlichen auch einfacher über den Befehl&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;xyplot(residuals(linMod) ~ fitted(linMod))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-01-08-nur-ein-wenig-lineare-regression_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;erhalten.&lt;/p&gt;
&lt;p&gt;Betrachten wir kurz nur die Residuen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;favstats(~residuals(linMod))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        min         Q1      median        Q3      max          mean       sd   n
##  -3.198225 -0.5651615 -0.09744499 0.4863111 3.743435 -2.022281e-17 1.019943 244
##  missing
##        0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wir sehe, dass wir in der Zusammenfassung immer genau diese Werte unter dem Abschnitt &lt;em&gt;Residuals&lt;/em&gt; gefunden haben. Minimum, das 1. Quantil, der Median, das 3. Quantil und das Maximum stimmen überein.&lt;/p&gt;
&lt;p&gt;Der erwartungstreue und unverzerrte Schätzer für den Standardfehler der Residuen, lautet&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{align*}
    SE_{\text{Residuen}} &amp;amp;= \sqrt{\frac{1}{n-2} \cdot \sum_{i=1}^n (\hat{e_i})^2} = \sqrt{\frac{n-1}{n-2} \cdot \frac{1}{n-1} \cdot \sum_{i=1}^n (\hat{e_i})^2} \\
                         &amp;amp;= \sqrt{\frac{n-1}{n-2}} \cdot \sqrt{\frac{1}{n-1} \cdot \sum_{i=1}^n (\hat{e_i})^2} \\
                         &amp;amp;= \sqrt{\frac{n-1}{n-2}} \cdot s_{\text{Residuen}}
\end{align*}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Also finden wir den Wert &lt;em&gt;Residual standard error&lt;/em&gt; aus der Zeile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Residual standard error: 1.022 on 242 degrees of freedom&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in dem wir den in den &lt;em&gt;favstats&lt;/em&gt; gefundenen Wert für die Standardabweichung entsprechen korrigieren:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    SE_{\text{Residuen}} = \sqrt{\frac{n-1}{n-2}} \cdot s_{\text{Residuen}} = \sqrt{\frac{243}{242}} \cdot 1.0199426 = 1.0220477
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Der Median der Residuen ist nicht gleich Null, wie der Mittelwert. (Welcher auch hier als numerisch Null interpretiert werden muss!)
Es könnte also eine linkssteile, rechtsschiefe Verteilung der Residuen vorliegen.
Betrachten wir dazu das Histogramm:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;histogram(~residuals(linMod), nint = 19)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-01-08-nur-ein-wenig-lineare-regression_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Schon beim ersten Blick auf das Histogramm kann an eine Normalverteilung der Residuen nicht mehr so ganz geglaubt werden.&lt;/p&gt;
&lt;p&gt;Ein Shapiro-Wilk-Test&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; hat als Nullhypothese die Annahme, dass die Daten normalverteilt sind!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;shapiro.test(residuals(linMod))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Shapiro-Wilk normality test
## 
## data:  residuals(linMod)
## W = 0.96728, p-value = 2.171e-05&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Davon ist nach dem Ergebnis eben sowenig auszugehen, wie nach einem Blick auf das QQ-Normal-Diagramm:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qqnorm(residuals(linMod), col = &amp;quot;darkgreen&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-01-08-nur-ein-wenig-lineare-regression_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Ein K.O.-Kriterium für gute Prognosen.&lt;/p&gt;
&lt;p&gt;Wie gut aber beschreibt unsere Regressionsgerade die Daten?&lt;/p&gt;
&lt;p&gt;Als Maß dafür können wir das Bestimmtheitsmaß nehmen.&lt;/p&gt;
&lt;p&gt;Ein kurzer Blick auf die Situation, der Mittelwert der Trinkgelder ist&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    \bar{y} =  \frac{1}{n} \cdot \sum_{i=1}^n y_i = 2.9982787.
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir erhalten so folgendes Diagramm:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mypanel &amp;lt;- function(x, y) {
    panel.xyplot(x, y)
    panel.abline(h = mean(y), lwd = 1.2, lty = 2, col = &amp;quot;darkgreen&amp;quot;)
    panel.lmline(x, y, col = &amp;quot;red&amp;quot;, lwd = 1.2, lty = 2)
}
xyplot(
    tip ~ total_bill, data = tips, 
    panel = mypanel,
    main  = &amp;quot;Streudiagramm der Trinkgelder&amp;quot;,
    ylab  = &amp;quot;Trinkgeld&amp;quot;,
    xlab  = &amp;quot;Rechnungsbetrag&amp;quot;,
    key = list(
            space = &amp;quot;bottom&amp;quot;,
            padding.text = 8,
            columns = 2,
            just = c(&amp;quot;center&amp;quot;, &amp;quot;bottom&amp;quot;),
            lines = list(col = c(&amp;quot;darkgreen&amp;quot;, &amp;quot;red&amp;quot;), lty = c(2, 2), lwd = 1.2),
            text = list(c(expression(bar(y)), expression(hat(beta)[0]+hat(beta)[total_bill] * x[total_bill]))),
            text = list(c(&amp;quot;Mittelwert Trinkgeld&amp;quot;, &amp;quot;Regressionsgerade&amp;quot;))
    )
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-01-08-nur-ein-wenig-lineare-regression_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Die Varianz &lt;span class=&#34;math inline&#34;&gt;\(s^2_{y_i}=1.9144546\)&lt;/span&gt; beschreibt die mittlere quadratische Abweichung der Datenpunkte &lt;span class=&#34;math inline&#34;&gt;\(y_i\)&lt;/span&gt; vom Mittelwert &lt;span class=&#34;math inline&#34;&gt;\(\bar{y}\)&lt;/span&gt;.
Diese Varianz lässt sich Zerlegen in einen Anteil, der durch die Regressionsgerade &lt;em&gt;erklärt&lt;/em&gt; wird und in einen Anteil, der durch die Regressionsgerade &lt;em&gt;nicht erklärt&lt;/em&gt; wird.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    s^2_{y_i} = s^2_{\hat{y}_i} + s^2_{\hat{e}_i}
\]&lt;/span&gt;
Dividiert man beider Seiten durch die Varianz &lt;span class=&#34;math inline&#34;&gt;\(s^2_{y_i}\)&lt;/span&gt;, so normiert man den Ausdruck und kann den Faktor &lt;span class=&#34;math inline&#34;&gt;\(\frac{1}{n-1}\)&lt;/span&gt; (bzw. &lt;span class=&#34;math inline&#34;&gt;\(\frac{1}{n}\)&lt;/span&gt;) herauskürzen. Es bleibt dann:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    1 = \frac{\sum_{i=1}^n (\bar{y}- \hat{y_i})^2}{\sum_{i=1}^n (\bar{y}-y_i)^2} + \frac{\sum_{i=1}^n (\hat{e_i})^2}{\sum_{i=1}^n (\bar{y}-y_i)^2}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Multipliziert man beide Seiten mit &lt;span class=&#34;math inline&#34;&gt;\(\sum_{i=1}^n (y_i)^2\)&lt;/span&gt;, so erhält man:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    \sum_{i=1}^n (\bar{y}- y_i)^2 = \sum_{i=1}^n (\bar{y}- \hat{y_i})^2+ \sum_{i=1}^n (\hat{e_i})^2 
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Zur Vereinfachung nennt man die einzelnen Summen in dem Ausdruck wie folgt:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Der erste Ausdruck heißt &lt;strong&gt;Gesamtvarianz&lt;/strong&gt; oder &lt;strong&gt;total sum of squares&lt;/strong&gt; oder kurz &lt;strong&gt;&lt;span class=&#34;math inline&#34;&gt;\(SS_T\)&lt;/span&gt;&lt;/strong&gt;, (oder &lt;strong&gt;TSS&lt;/strong&gt;) er ist die Summe der quadrierten Differenzen&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    SS_T = \sum_{i=1}^n (\bar{y}-y_i)^2
\]&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Der zweite Ausdruck heißt &lt;strong&gt;Modellvarianz&lt;/strong&gt; oder &lt;strong&gt;model sum of squares&lt;/strong&gt; oder kurz &lt;strong&gt;&lt;span class=&#34;math inline&#34;&gt;\(SS_M\)&lt;/span&gt;&lt;/strong&gt; (oder &lt;strong&gt;RSS&lt;/strong&gt;), er ist die Summe der quadrierten Differenzen aus dem Mittelwert &lt;span class=&#34;math inline&#34;&gt;\(\bar{y}\)&lt;/span&gt; und der Punkte auf der Regressionsgeraden &lt;span class=&#34;math inline&#34;&gt;\(\hat{y}_i\)&lt;/span&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    SS_M = \sum_{i=1}^n (\bar{y}-\hat{y}_i)^2
\]&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Der dritte Ausdruck heißt &lt;strong&gt;Gesamt-Verhersage-Fehler&lt;/strong&gt;, &lt;strong&gt;Fehlersteuung der Regression&lt;/strong&gt; oder &lt;strong&gt;error sum of squares&lt;/strong&gt; oder kurz &lt;span class=&#34;math inline&#34;&gt;\(SS_E\)&lt;/span&gt; (oder &lt;strong&gt;ESS&lt;/strong&gt;), er ist die Summe der quadratischen Differenz aus den Datenpunkten &lt;span class=&#34;math inline&#34;&gt;\(y_i\)&lt;/span&gt; und den Punkten der Regressionsgeraden &lt;span class=&#34;math inline&#34;&gt;\(\hat{y}_i\)&lt;/span&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    SS_E = \sum_{i=1}^n (\hat{y}_i-y_i)^2 = \sum_{i=1}^n (\hat{e}_i)^2
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir können daher auch kurz&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    SS_T = SS_M + SS_E
\]&lt;/span&gt;
schreiben und sparen uns die ganzen Summenzeichen.&lt;/p&gt;
&lt;p&gt;Die Güte einer Regression wollen wir durch den Anteil der durch das Model erklärten Varianz (also der &lt;span class=&#34;math inline&#34;&gt;\(SS_M\)&lt;/span&gt;) ausdrücken und stellen daher nach &lt;span class=&#34;math inline&#34;&gt;\(SS_M\)&lt;/span&gt; um:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    SS_M = SS_T - SS_E
\]&lt;/span&gt;
Teilen wir beide Seiten durch &lt;span class=&#34;math inline&#34;&gt;\(SS_T\)&lt;/span&gt; also der maximalen (weil totalen) Quadratsumme, so erhalten wir:
&lt;span class=&#34;math display&#34;&gt;\[
    \frac{SS_M}{SS_T} = \frac{SS_T}{SS_T} - \frac{SS_E}{SS_T} = 1 - \frac{SS_E}{SS_T}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Den Ausdruck &lt;span class=&#34;math inline&#34;&gt;\(\frac{SS_M}{SS_T}\)&lt;/span&gt; nennen wir &lt;strong&gt;Bestimmtheitsmaß&lt;/strong&gt; und schreiben dafür &lt;span class=&#34;math inline&#34;&gt;\(R^2\)&lt;/span&gt;. Es ist ein Wert zwischen 0 und 1, der den Anteil der durch das Modell beschriebenen Varianz in Bezug auf die Gesamtvarianz angibt. Kraft Definition ist &lt;span class=&#34;math inline&#34;&gt;\(R^2\)&lt;/span&gt; im eindimensionalen Fall tatsächlich das Quadrat des (Pearson-)Korrelationskoeffizienten &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt;. (M.a.W.: &lt;span class=&#34;math inline&#34;&gt;\(R^2= r^2\)&lt;/span&gt;.)&lt;/p&gt;
&lt;p&gt;In unserer Zusammenfassung des linearen Models findet sich dieser Wert auch. Und zwar unter dem Begriff:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Multiple R-squared:  0.4566, &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Es gilt ja:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    R^2 = 1 - \frac{SS_E}{SS_T} = 1 - \frac{s^2_{\hat{e}_i}}{s^2_{y_i}} = 1 - \frac{1.0402829}{1.9144546} = 0.4566166
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Der Wert&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## ..., Adjusted R-squared:  0.4544&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;erklärt sich daraus&lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;, dass das Bestimmheitsmaß um so größer wird je größer die Zahl der unabhängigen Variablen wird.
Und zwar &lt;em&gt;unabhöngig&lt;/em&gt; davon, ob weitere unabhängige Variablen wirklich einen Beitrag zur Erklärungskraft liefern.
Daher nutzt man besser das &lt;strong&gt;korrigierte Bestimmtheitsmaß&lt;/strong&gt; (engl.: &lt;em&gt;adjusted R-squared&lt;/em&gt;) &lt;span class=&#34;math inline&#34;&gt;\(\bar{R}^2\)&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    \begin{align*}
        \bar{R}^2 &amp;amp;= 1- (1-R^2) \cdot \frac{n-1}{n-p-1}\\ 
                  &amp;amp;= R^2 - (1-R^2)  \cdot \frac{p}{n-p-1}
    \end{align*}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wobei &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; die Anzahl der unabhängigen Variablen im Modell darstellt.
In unserem Beispiel gilt daher:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    \begin{align*}
        \bar{R}^2 &amp;amp;= 1 - (1-R^2)  \cdot \frac{n-1}{n-p-1} \\
                  &amp;amp;= 1 - (1- 0.4566166)  \cdot \frac{244-1}{244- 1- 1} \\
                  &amp;amp;= 0.4543712
    \end{align*}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vorsicht:&lt;/strong&gt; Das &lt;em&gt;korrigierte Bestimmtheitsmaß&lt;/em&gt; ist nicht mehr an das Intervall &lt;span class=&#34;math inline&#34;&gt;\([0; 1]\)&lt;/span&gt; gebunden!
Es kann negative Werte annehmen, ist in der Regel kleiner als das (unkorrigierte) Bestimmtheitsmaß und erreicht die obere Grenze (&lt;span class=&#34;math inline&#34;&gt;\(\bar{R}^2=1\)&lt;/span&gt;) genau dann, wenn &lt;span class=&#34;math inline&#34;&gt;\(R^2 = 1\)&lt;/span&gt; ist.&lt;/p&gt;
&lt;p&gt;Bei der &lt;strong&gt;Gesamtsignifikanz des Modells&lt;/strong&gt; (auch &lt;strong&gt;Overall-F-Test&lt;/strong&gt; genannt) wird geprüft, ob mindestens eine Variable einen Erklärungsgehalt für das Modell liefert.&lt;/p&gt;
&lt;p&gt;Falls diese Hypothese verworfen wird ist somit das Modell nutzlos.
Dieser Test lässt sich so interpretieren als würde man die gesamte Güte des Modells, also das &lt;span class=&#34;math inline&#34;&gt;\(R^2\)&lt;/span&gt; des Modells, testen.
Aus diesem Grund wird der F-Test der Gesamtsignifikanz des Modells auch als Anpassungsgüte-Test bezeichnet.
Die Nullhypothese des F-Test der Gesamtsignifikanz des Modells sagt aus, dass alle erklärenden Variablen keinen Einfluss auf die abhängige Variable haben.
Sowohl die abhängige Variable als auch die unabhängigen Variablen können binär (kategoriell) oder metrisch sein.
Der &lt;em&gt;Wald-Test&lt;/em&gt; kann dann die Hypothesen testen (ohne Einbezug des Achsenabschnittes):&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    H_{0}\colon \beta _{1}=\beta _{2}=\ldots =\beta _{k}\;=\;0\Rightarrow R^{2}=0
\]&lt;/span&gt;
gegen&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    H_{1}:\beta _{j}\;\neq \;0\;\mathrm {f{\ddot {u}}r\;mindestens\;ein} \;j\in \{1,\ldots ,k\}\Rightarrow R^{2}\neq 0
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Die Teststatistik dieses Tests lautet&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
    F\;\;{\stackrel {H_{0}}{=}}{\frac {R^{2}}{1-R^{2}}} \cdot {\frac {n-p-1}{p}}\;\;{\stackrel {H_{0}}{\sim }}\;\;F(p,n-p)
\end{aligned}.
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;mit &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(\displaystyle (n-p-1)\)&lt;/span&gt; Freiheitsgraden.
Überschreitet der empirische F-Wert einen kritischen F-Wert, der zu einem a priori festgelegten Signifikanzniveau &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt;, so verwirft man die Nullhypothese &lt;span class=&#34;math inline&#34;&gt;\(H_{0}\)&lt;/span&gt;.
Das &lt;span class=&#34;math inline&#34;&gt;\(R^{2}\)&lt;/span&gt; ist dann ausreichend groß und mindestens ein Regressor trägt also vermutlich genügend viel Information zur Erklärung von &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; bei.
Es ist naheliegend bei hohen F-Werten die Nullhypothese zu verwerfen, da ein hohes Bestimmtheitsmaß zu einem hohen F-Wert führt.
Wenn der &lt;em&gt;Wald-Test&lt;/em&gt; für eine oder mehrere unabhängige Variablen die Nullhypothese ablehnt, dann kann man davon ausgehen, dass die zugehörigen Parameter ungleich Null sind, so dass die Variable(n) in das Modell mit einbezogen werden sollten.&lt;/p&gt;
&lt;p&gt;In unserem Beispiel ist&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    F={\frac {R^{2}}{1-R^{2}}} \cdot {\frac {n-p-1}{p}} = \frac{0.4566166}{1-0.4566166} \cdot \frac{244-1-1}{1} = 203.3577233
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;der Wert in der Zeile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## F-statistic: 203.4 on 1 and 242 DF,  p-value: &amp;lt; 2.2e-16&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mit Parametern &lt;span class=&#34;math inline&#34;&gt;\(p=1\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(n-p-1=242\)&lt;/span&gt; Freiheitsgraden.&lt;/p&gt;
&lt;p&gt;Der p-Wert von (numerisch) 0, liefert also ein hinreichendes Indiz dafür, dass der Rechnungsbetrag einen echten Beitrag liefert.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;vgl.: &lt;a href=&#34;https://de.wikipedia.org/wiki/Parallelverschiebung&#34; class=&#34;uri&#34;&gt;https://de.wikipedia.org/wiki/Parallelverschiebung&lt;/a&gt;&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;vgl.: &lt;a href=&#34;https://de.wikipedia.org/wiki/Methode_der_kleinsten_Quadrate&#34; class=&#34;uri&#34;&gt;https://de.wikipedia.org/wiki/Methode_der_kleinsten_Quadrate&lt;/a&gt;&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;vgl.: &lt;a href=&#34;https://de.wikipedia.org/wiki/Shapiro-Wilk-Test&#34; class=&#34;uri&#34;&gt;https://de.wikipedia.org/wiki/Shapiro-Wilk-Test&lt;/a&gt;&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;vgl.: &lt;a href=&#34;https://de.wikipedia.org/wiki/Bestimmtheitsmaß#Das_korrigierte_Bestimmtheitsmaß&#34; class=&#34;uri&#34;&gt;https://de.wikipedia.org/wiki/Bestimmtheitsmaß#Das_korrigierte_Bestimmtheitsmaß&lt;/a&gt;&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Prognose-, Konfidenz- und Fiduzialintervalle</title>
      <link>https://sefiroth.net/nab/post/prognose-konfidenz-und-fiduzialintervalle/</link>
      <pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/prognose-konfidenz-und-fiduzialintervalle/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;*&lt;strong&gt;WORK IN PROGRESS&lt;/strong&gt;
Dieser Eintrag ist noch nicht fertig und wird in der Zukunft erweitert!&lt;/p&gt;
&lt;div id=&#34;konfidenzintervalle&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Konfidenzintervalle&lt;/h2&gt;
&lt;div id=&#34;definition-von-konfidenzintervallen&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Definition von Konfidenzintervallen&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Für unabhängig identisch verteilte Zufallsvariablen &lt;span class=&#34;math inline&#34;&gt;\(X_1,\dotsc, X_n\)&lt;/span&gt; mit unbekanntem reellen Verteilungsparameter &lt;span class=&#34;math inline&#34;&gt;\(\vartheta\)&lt;/span&gt; kann unter bestimmten Umständen zwei Stichprobenfunktionen &lt;span class=&#34;math inline&#34;&gt;\(U\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(V\)&lt;/span&gt; angeben, so dass&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[P(U &amp;lt; \vartheta &amp;lt; V) \geq \gamma\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;gilt, mit &lt;span class=&#34;math inline&#34;&gt;\(\gamma \in (0,1)\)&lt;/span&gt;.
Dann heißt das (stochastische) Intervall &lt;span class=&#34;math inline&#34;&gt;\([U, V]\)&lt;/span&gt; ein &lt;strong&gt;Konfidenzintervall&lt;/strong&gt; für &lt;span class=&#34;math inline&#34;&gt;\(\vartheta\)&lt;/span&gt; zum Konfidenzniveau &lt;span class=&#34;math inline&#34;&gt;\(\gamma\)&lt;/span&gt; (auch: ein &lt;strong&gt;&lt;span class=&#34;math inline&#34;&gt;\(\gamma\)&lt;/span&gt;-Konfidenzintervall&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;Die Realisationen &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; von &lt;span class=&#34;math inline&#34;&gt;\(U\)&lt;/span&gt; bzw. &lt;span class=&#34;math inline&#34;&gt;\(V\)&lt;/span&gt; bilden das &lt;strong&gt;Schätzintervall&lt;/strong&gt; &lt;span class=&#34;math inline&#34;&gt;\([u, v]\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Da die Realisationen &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; der Grenzen &lt;span class=&#34;math inline&#34;&gt;\(U\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(V\)&lt;/span&gt; keine Zufallsvariablen sind und &lt;span class=&#34;math inline&#34;&gt;\(\vartheta\)&lt;/span&gt; ein fixer Wert ist, kann man &lt;strong&gt;nicht&lt;/strong&gt; sagen, dass das Schätzintervall &lt;span class=&#34;math inline&#34;&gt;\([u, v]\)&lt;/span&gt; mit einer Wahrscheinlichkeit von &lt;span class=&#34;math inline&#34;&gt;\(\gamma\)&lt;/span&gt; den unbekannten Parameter &lt;span class=&#34;math inline&#34;&gt;\(\vartheta\)&lt;/span&gt; enthält. Es bedeutet vielmehr, dass im Mittel ein Anteil von &lt;span class=&#34;math inline&#34;&gt;\(\gamma\)&lt;/span&gt; aller so berechneten Schätzintervalle den unbekannten Parameter überdecken. Dem nicht widersprechend, kann –- wie bereits von Ronald Fisher festgestellt – in manchen Modellen die Qualität des Schätzintervalls von den Daten abhängen und sogar zu Antworten führen, die mit Blick auf die Daten unsinnig sind. Probleme mit solcher Post-Data-Inkohärenz führen zur Theorie der bedingten Inferenz. Ein weiteres Problem sind die Stichprobenfunktionen U und V an sich. Um diese zu finden werden oft Vereinfachungen getroffen, dadurch können systematische Fehler entstehen, oft es gibt mehrere Konfidenzintervalle (bei der Binomialverteilung z.B. nach Clopper-Pearson, Agresti-Coull oder Wald), welche oft unterschiedliche Werte liefern.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ein-beispiel&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Ein Beispiel&lt;/h3&gt;
&lt;p&gt;Wir nehmen zunächst als Population &lt;span class=&#34;math inline&#34;&gt;\(N=1000\)&lt;/span&gt; normalverteilte Zufallszahlen mit dem Mittelwert &lt;span class=&#34;math inline&#34;&gt;\(\mu= 0\)&lt;/span&gt; und der Standardabweichung &lt;span class=&#34;math inline&#34;&gt;\(\sigma=2.0088\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Dazu das Histogramm der Population:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;histogram(pop, xlab=&amp;quot;Population&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-01-04-prognose-konfidenz-und-fiduzialintervalle_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Aus dieser Population ziehen wir eine Stichprobe &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; vom Umfang $n=$40 und erhalten die folgenden statistischen Daten:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;favstats(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    min      Q1 median    Q3   max   mean    sd  n missing
##  -3.38 -0.9781 0.2042 1.546 4.002 0.1877 1.901 40       0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wir wollen nun den wahren Mittelwert &lt;span class=&#34;math inline&#34;&gt;\(\vartheta=\mu\)&lt;/span&gt; mit Hilfe der Stichprobe &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; schätzen. So ist es ja in der Realität auch, denn normalerweise haben wir die Daten über die Population nicht.&lt;/p&gt;
&lt;p&gt;Die Schätzfunktion für den Mittelwert lautet nun
&lt;span class=&#34;math display&#34;&gt;\[\bar{X} = \frac1n \sum_{i=1}^n X_i\]&lt;/span&gt;,
und damit die konkrete Punktschätzung
&lt;span class=&#34;math display&#34;&gt;\[\hat{\mu}=\bar{x}= \sum_{i=1}^n x_i\]&lt;/span&gt;
liefert den Wert &lt;span class=&#34;math inline&#34;&gt;\(\hat{\mu}=\)&lt;/span&gt; 0.1877.&lt;/p&gt;
&lt;p&gt;In unserem Beispiel unterscheiden sich die beiden Werte um &lt;span class=&#34;math inline&#34;&gt;\(\mu - \hat{\mu}=\)&lt;/span&gt; -0.1877.&lt;/p&gt;
&lt;p&gt;Ein 95%-Konfidenzintervall nimmt nun den geschätzen Wert &lt;span class=&#34;math inline&#34;&gt;\(\hat{\mu}\)&lt;/span&gt; als Grundlage und gibt liefert ein Intervall mit der Eigentschaft, ausgehend von den konkreten Stichproben in 95% der Fälle den tatsächlichen Wert &lt;span class=&#34;math inline&#34;&gt;\(\mu\)&lt;/span&gt; zu umfassen. Es ist also
&lt;span class=&#34;math display&#34;&gt;\[\gamma = 0.95 = 1 - \alpha = 1 - 0.05, \quad \alpha = 0.05\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Dazu werden die beiden Stichprobenfunktionen&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[U=U(X_1, \dots, X_n)=\bar{X}-z_{\left(1-\frac{\alpha}{2}\right)}\cdot\frac{\sigma}{\sqrt{n}}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;und&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[V=V(X_1, \dots, X_n)=\bar{X}-z_{\left(1-\frac{\alpha}{2}\right)}\cdot\frac{\sigma}{\sqrt{n}}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;mit der &lt;em&gt;bekannten&lt;/em&gt; Standardabweichung &lt;span class=&#34;math inline&#34;&gt;\(\sigma\)&lt;/span&gt; der &lt;em&gt;Population&lt;/em&gt; und der Stichprobengröße &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; nun mit der konkreten Realisation &lt;span class=&#34;math inline&#34;&gt;\(x_1, \dots, x_n\)&lt;/span&gt; der Stichprobe gefüttert und wir erhalten damit&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[u = \bar{x}-z_{\left(1-\frac{\alpha}{2}\right)}\cdot\frac{\sigma}{\sqrt{n}} = 0.1877-z_{\left(0.975\right)}\cdot\frac{2.0088}{\sqrt{40}}=-0.4348\]&lt;/span&gt;
und&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[v = \bar{x}+z_{\left(1-\frac{\alpha}{2}\right)}\cdot\frac{\sigma}{\sqrt{n}} = 0.1877+z_{\left(0.975\right)}\cdot\frac{2.0088}{\sqrt{40}}=0.8102.\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Die Realisation unseres 95%-Konfidenzintervall lautet nun also:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[[-0.4348; 0.8102]\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Was hat es nun mit den ominösen 95% auf sich?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Das Konfidenzintervall ist ein stochastisches Intervall, d.h. die hier angegebenen Werte für &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; sind abhängig von der Realisation &lt;span class=&#34;math inline&#34;&gt;\(x_1, \dots, x_n\)&lt;/span&gt;, also der konkreten Stichprobe.&lt;/p&gt;
&lt;p&gt;Nehmen wir nun also einmal eine neue Stichprobe und berechnen erneut die Realisation unseres 95%-Konfidenzintervalls, so erhalten wir:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[[-0.7033; 0.5418]\]&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Interval coverage:&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     cover
## n     Low  Yes High
##   40 0.00 0.98 0.02&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: It is deprecated to specify `guide = FALSE` to remove a guide. Please
## use `guide = &amp;quot;none&amp;quot;` instead.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2018-01-04-prognose-konfidenz-und-fiduzialintervalle_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;prognoseintervalle&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Prognoseintervalle&lt;/h2&gt;
&lt;/div&gt;
&lt;div id=&#34;fuduzialintervalle&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Fuduzialintervalle&lt;/h2&gt;
&lt;p&gt;Quellen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Logik in der Statistik; Andrea Wiencierz, 7.10.2007 Link: &lt;a href=&#34;https://static.aminer.org/pdf/PDF/000/230/772/induktive_inferenz_und_mehrwertige_logik.pdf&#34; class=&#34;uri&#34;&gt;https://static.aminer.org/pdf/PDF/000/230/772/induktive_inferenz_und_mehrwertige_logik.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;vgl: &lt;a href=&#34;https://de.wikipedia.org/wiki/Konfidenzintervall&#34; class=&#34;uri&#34;&gt;https://de.wikipedia.org/wiki/Konfidenzintervall&lt;/a&gt;&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Konfidenzintervalle</title>
      <link>https://sefiroth.net/nab/post/konfidenzintervalle/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/konfidenzintervalle/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Stub!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zentrales Schwankungsintervall</title>
      <link>https://sefiroth.net/nab/post/zentrales-schwankungsintervall/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/zentrales-schwankungsintervall/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Das &lt;strong&gt;zentrale Schwankungsintervall&lt;/strong&gt; sagt etwas über die Präzision der Lageschätzung eines Parameters (zum Beispiel eines Mittelwertes) aus. Das Schwankungsintervall schließt einen Bereich um den wahren Wert des Parameters in der Grundgesamtheit ein, der – vereinfacht gesprochen – mit einer zuvor festgelegten Sicherheitswahrscheinlichkeit den aus der Stichprobe geschätzten Parameter enthält.&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;vgl: &lt;a href=&#34;https://de.wikipedia.org/wiki/Zentrales_Schwankungsintervall&#34; class=&#34;uri&#34;&gt;https://de.wikipedia.org/wiki/Zentrales_Schwankungsintervall&lt;/a&gt;&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Ein paar interessante Links</title>
      <link>https://sefiroth.net/nab/post/ein-paar-interessante-links/</link>
      <pubDate>Sun, 31 Dec 2017 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/ein-paar-interessante-links/</guid>
      <description>&lt;p&gt;Im Laufe der Zeit sammeln sich bei mir mehr und mehr Links zu anderen Seiten an, die ich irgendwie speichern will aber nicht ernsthaft sortieren möchte.
So ist diese Sammlung hier entstanden:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www2.hs-fulda.de/~grams/hoppla/wordpress/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Blog von Prof. Dr. Timm Grams&lt;/a&gt; &amp;ndash; &amp;ldquo;Ein Weblogbuch über sonderbare Nachrichten und alltäglichen Statistikplunder&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www2.hs-fulda.de/~grams/dnkfln.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Denkfallen und Paradoxa&lt;/a&gt; &amp;ndash; Prof. Dr. Timm Grams gibt einen Überblick&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www2.hs-fulda.de/~grams/mathehilft/schaetzen/Vierfeldertafel.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Signifikanztest mit der Vierfeldertafel&lt;/a&gt; &amp;ndash; Prof. Dr. Timm Grams&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www2.hs-fulda.de/~grams/Heuristik/Lektionen/Querbeet.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Querbeet &amp;ndash; Eine Problemsammlung&lt;/a&gt; &amp;ndash; Prof. Dr. Timm Grams&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://data-se.netlify.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Blog von Prof. Dr. Sebastian Sauer&lt;/a&gt; &amp;ndash; Quelle der Erleuchtung und Intuition&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.six-sigma-material.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Six Sigma Material&lt;/a&gt; &amp;ndash; Six Sigma Seite&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.foundstat.statistik.uni-muenchen.de/studium_lehre/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AG Method(olgo)ische Grundlagen der Statistik und Ihre Anwendung&lt;/a&gt; &amp;ndash; LMU München &amp;hellip; WOW!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.beltz.de/fileadmin/beltz/leseproben/978-3-7799-3658-9.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Leseprobe &amp;ldquo;Induktive Statistik und soziologische Theorie&amp;rdquo;&lt;/a&gt; &amp;ndash; Markus Ziegler - Eine Analyse des theoretischen Potenzials der Bayes-Statistik&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://support.minitab.com/de-de/minitab/18/help-and-how-to/modeling-statistics/reliability/how-to/probit-analysis/perform-the-analysis/estimate-percentiles-and-probabilities/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fiduzial&lt;/a&gt; &amp;ndash;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.stefanbartz.de/dateien/Vorsicht-bei-der-sigma-Regel.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vorsicht bei der σ-Regel&lt;/a&gt; &amp;ndash; Stefan Bartz&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Quartile, Quantile, Perzentile etc.</title>
      <link>https://sefiroth.net/nab/post/quartile-quantile-perzentile-etc/</link>
      <pubDate>Tue, 19 Dec 2017 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/quartile-quantile-perzentile-etc/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;“Was hat das eigentlich mit den Quartilen, Quantilen und so weiter auf sich?”
Diese Frage kommt ab und zu in Vorlesungen zur Statistik vor. Dabei ist die Antwort recht einfach.&lt;/p&gt;
&lt;div id=&#34;quantile&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Quantile&lt;/h2&gt;
&lt;div id=&#34;definitorische-antwort&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Definitorische Antwort&lt;/h3&gt;
&lt;p&gt;Für eine gegebene reelle Zufallsvariable &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; heißt eine reelle Zahl &lt;span class=&#34;math inline&#34;&gt;\(x_p\)&lt;/span&gt; ein &lt;strong&gt;p-Quantil&lt;/strong&gt; (von &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt;), falls gilt:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[P(X \leq x_p) \leq p \quad \text{ und }\quad P(x_p \leq X) \geq 1-p.\]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;was-bedeutet-das-denn-nun-konkret&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Was bedeutet das denn nun konkret?&lt;/h3&gt;
&lt;p&gt;Nun, ein Quantil ist ein Schwellenwert.
Ein bestimmter Anteil der Werte ist kleiner als das Quantil, der Rest ist größer.
Das 25-%-Quantil beispielsweise ist der Wert, für den gilt, dass 25 % aller Werte kleiner sind als dieser Wert.
Quantile formalisieren praktische Aussagen wie „25 % aller Frauen sind kleiner als 1,62 m“ –- wobei 1,62 m hier das 25-%-Quantil ist.&lt;/p&gt;
&lt;p&gt;Spezielle Quantile sind der &lt;em&gt;Median&lt;/em&gt;, die &lt;em&gt;Quartile&lt;/em&gt;, die &lt;em&gt;Quintile&lt;/em&gt;, die &lt;em&gt;Dezile&lt;/em&gt; und die &lt;em&gt;Perzentile&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;Wir betrachten dazu in den Bespielen die Datenreihe &lt;code&gt;dr&lt;/code&gt; an:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Die Zahlen von 0 bis 600 
dr &amp;lt;- 0:600&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;median&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Median&lt;/h3&gt;
&lt;p&gt;Der &lt;strong&gt;Median&lt;/strong&gt; (von lat. &lt;em&gt;Medium&lt;/em&gt; für „Mitte, Mittelpunkt“ abgeleiteter Begriff mit der Bedeutung “in der Mitte gelegen”) die das 50-%-Quantil. Der Wert, welcher die Datenreihe (bestenfalls) in zwei (etwa) gleich große Abschnitte trennt. Sehr oft schreibt man &lt;span class=&#34;math inline&#34;&gt;\(x_{med}\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(x_{50\%}\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(x_{Med}\)&lt;/span&gt; oder &lt;span class=&#34;math inline&#34;&gt;\(Q_2\)&lt;/span&gt; für den Median&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;median(dr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 300&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;terzile&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Terzile&lt;/h3&gt;
&lt;p&gt;Als &lt;strong&gt;Terile&lt;/strong&gt; (von lat. &lt;em&gt;tertius&lt;/em&gt; “der Dritte”) werden die beiden Quantile mit &lt;span class=&#34;math inline&#34;&gt;\(p=1/3\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(p=2/3\)&lt;/span&gt; bezeichnet.
Sie teilen die Datenreihe in drei Abschnitte.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quantile(dr, probs = seq(0, 1, 1/3))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        0% 33.33333% 66.66667%      100% 
##         0       200       400       600&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;quartile&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Quartile&lt;/h3&gt;
&lt;p&gt;Die &lt;strong&gt;Quartile&lt;/strong&gt; (von lat. &lt;em&gt;quartus&lt;/em&gt; „der Vierte“) werden die Quantile mit &lt;span class=&#34;math inline&#34;&gt;\(p=25\%\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(p=50\%\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(p=75\%\)&lt;/span&gt; bezeichnet.
Sie teilen die Datenreihe in vier Abschnitte.
Dabei schreibt man oft: &lt;span class=&#34;math inline&#34;&gt;\(Q_1 = x_{0{,}25}\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(x_{Med} = Q_2 = x_{0{,}50}\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(Q_3 = x_{0{,}75}\)&lt;/span&gt; für die drei Quantile.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quantile(dr) # oder auch: quantile(dr, probs=seq(0, 1, 1/4))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   0%  25%  50%  75% 100% 
##    0  150  300  450  600&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;quintile&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Quintile&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Quintile&lt;/strong&gt; (von lat. &lt;em&gt;quintus&lt;/em&gt; “der Fünfte”) werden die Quantile mit &lt;span class=&#34;math inline&#34;&gt;\(p=20\%\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(p=40\%\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(p=60\%\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(p=80\%\)&lt;/span&gt; bezeichnet.
Sie teilen die Datenreihe in fünf Abschnitte.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quantile(dr, probs = seq(0, 1, 1/5))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   0%  20%  40%  60%  80% 100% 
##    0  120  240  360  480  600&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;dezile&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Dezile&lt;/h3&gt;
&lt;p&gt;Die Quantile für vielfache von &lt;span class=&#34;math inline&#34;&gt;\(0{,}1\)&lt;/span&gt; also für &lt;span class=&#34;math inline&#34;&gt;\(p=0{,}1;0{,}2;\dots ;0{,}9\)&lt;/span&gt; werden &lt;strong&gt;Dezile&lt;/strong&gt; (von mittellateinisch &lt;em&gt;decimalis&lt;/em&gt;, zu lat. &lt;em&gt;decem&lt;/em&gt; „zehn“) genannt.
Dabei heißt das &lt;span class=&#34;math inline&#34;&gt;\(0{,}1\)&lt;/span&gt;-Quantil das erste Dezil, das &lt;span class=&#34;math inline&#34;&gt;\(0{,}2\)&lt;/span&gt;-Quantil das zweite Dezil usw.
Unterhalb des ersten Dezils liegen 10 % der Stichprobe, oberhalb entsprechend 90 % der Stichprobe.
Ebenso liegen 40 % der Stichprobe unterhalb des vierten Dezils und 60 % oberhalb.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quantile(dr, probs = seq(0, 1, 1/10))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   0%  10%  20%  30%  40%  50%  60%  70%  80%  90% 100% 
##    0   60  120  180  240  300  360  420  480  540  600&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;perzentile&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Perzentile&lt;/h3&gt;
&lt;p&gt;Als &lt;strong&gt;Perzentile&lt;/strong&gt; (von lat.-ital. &lt;em&gt;per centum&lt;/em&gt; “von Hundert, Hundertstel”) werden die Quantile von &lt;span class=&#34;math inline&#34;&gt;\(\displaystyle 0{,}01\)&lt;/span&gt; bis $ 0{,}99$ in Schritten von &lt;span class=&#34;math inline&#34;&gt;\(0{,}01\)&lt;/span&gt; bezeichnet.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quantile(dr, probs = seq(0, 1, 1/100))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   0%   1%   2%   3%   4%   5%   6%   7%   8%   9%  10%  11%  12%  13%  14%  15% 
##    0    6   12   18   24   30   36   42   48   54   60   66   72   78   84   90 
##  16%  17%  18%  19%  20%  21%  22%  23%  24%  25%  26%  27%  28%  29%  30%  31% 
##   96  102  108  114  120  126  132  138  144  150  156  162  168  174  180  186 
##  32%  33%  34%  35%  36%  37%  38%  39%  40%  41%  42%  43%  44%  45%  46%  47% 
##  192  198  204  210  216  222  228  234  240  246  252  258  264  270  276  282 
##  48%  49%  50%  51%  52%  53%  54%  55%  56%  57%  58%  59%  60%  61%  62%  63% 
##  288  294  300  306  312  318  324  330  336  342  348  354  360  366  372  378 
##  64%  65%  66%  67%  68%  69%  70%  71%  72%  73%  74%  75%  76%  77%  78%  79% 
##  384  390  396  402  408  414  420  426  432  438  444  450  456  462  468  474 
##  80%  81%  82%  83%  84%  85%  86%  87%  88%  89%  90%  91%  92%  93%  94%  95% 
##  480  486  492  498  504  510  516  522  528  534  540  546  552  558  564  570 
##  96%  97%  98%  99% 100% 
##  576  582  588  594  600&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Der Zentrale Grenzwertsatz</title>
      <link>https://sefiroth.net/nab/post/der-zentrale-grenzwertsatz/</link>
      <pubDate>Wed, 05 Apr 2017 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/post/der-zentrale-grenzwertsatz/</guid>
      <description>
&lt;script src=&#34;https://sefiroth.net/nab/nabrmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;der-zentrale-grenzwertsatz-der-statistik-bei-identischer-verteilung.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Der &lt;strong&gt;Zentrale Grenzwertsatz&lt;/strong&gt; der Statistik bei identischer Verteilung.&lt;/h2&gt;
&lt;div id=&#34;zentraler-grenzwertsatz&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Zentraler Grenzwertsatz&lt;/h3&gt;
&lt;p&gt;Seien &lt;span class=&#34;math inline&#34;&gt;\(X_1, X_2, ..., X_n\)&lt;/span&gt; unabhängige und identisch verteilte Zufallsvariablen mit bekanntem Erwartungswert &lt;span class=&#34;math inline&#34;&gt;\(E(X_i) = \mu\)&lt;/span&gt; und bekannter Varianz &lt;span class=&#34;math inline&#34;&gt;\(Var(X_i)=\sigma^2\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Für die Summe &lt;span class=&#34;math inline&#34;&gt;\(S_n = \sum_{i=1}^n X_i\)&lt;/span&gt; ist dann der Erwartungswert &lt;span class=&#34;math inline&#34;&gt;\(E(S_n)= n \cdot \mu\)&lt;/span&gt; und die Varianz &lt;span class=&#34;math inline&#34;&gt;\(Var(S_n)= n \cdot \sigma^2\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Dann gilt für die &lt;em&gt;standardisierte&lt;/em&gt; Zufallsvariable&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{align*}
Z_n &amp;amp;= \frac{\left(\sum\limits_{i=1}^n X_i\right) - n \cdot \mu}{\sqrt{n\cdot \sigma^2}}
    = \frac{S_n - n \cdot \mu}{\sigma \cdot \sqrt{n}} 
    = \frac{n \cdot \bar{X}_n-n \cdot \mu}{\sigma \cdot n / \sqrt{n}} \\
    &amp;amp;= \frac{\bar{X}_n - \mu}{\sigma / \sqrt{n}} 
    = \frac{\bar{X}_n - \mu}{\sigma} \cdot \sqrt{n},
\end{align*}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;dass sie für wachsendes &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; immer besser durch die &lt;em&gt;Standardnormalverteilung&lt;/em&gt; &lt;span class=&#34;math inline&#34;&gt;\(N(0, 1)\)&lt;/span&gt; approximiert werden kann.&lt;/p&gt;
&lt;p&gt;Mit anderen Worten:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
P(Z_n \leq x) \longrightarrow \Phi(x), \quad \text{ für }\; n \rightarrow \infty
\]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;ein-beispiel&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Ein Beispiel:&lt;/h2&gt;
&lt;p&gt;Nehmen wir drei Verteilungen mit Zufallsvariable &lt;span class=&#34;math inline&#34;&gt;\(U\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; und jeweils &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; Realisationen &lt;span class=&#34;math inline&#34;&gt;\(u_1,\dots, u_n\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(x_1,\dots, x_n\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(y_1,\dots, y_n\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Wählen wir zunächst &lt;span class=&#34;math inline&#34;&gt;\(n=5\)&lt;/span&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;u&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 19.726 69.683 60.790  0.955 42.901&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  7.942 15.905 12.917  6.818  4.434&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;y&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 59.961 56.552 51.094 75.288 47.985&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Standardisieren wir die Werte:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mosaic)
zscore(u)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -0.6695256  1.0830283  0.7710507 -1.3280357  0.1434823&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;zscore(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -0.3543069  1.3440714  0.7067796 -0.5940379 -1.1025063&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;zscore(y)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  0.1677971 -0.1526624 -0.6657361  1.6085958 -0.9579944&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Die Behauptung des Zentralengrenzwertsatzes ist nun, dass mit steigender Anzahl an Werten &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; die standardisierten Werte in der empirischen Verteilungsfunktion sich immer mehr der Verteilungsfunktion der Standardnormalverteilung annähern:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2017-04-05-der-zentrale-grenzwertsatz_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2017-04-05-der-zentrale-grenzwertsatz_files/figure-html/unnamed-chunk-4-2.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2017-04-05-der-zentrale-grenzwertsatz_files/figure-html/unnamed-chunk-4-3.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;https://sefiroth.net/nab/nabpost/2017-04-05-der-zentrale-grenzwertsatz_files/figure-html/unnamed-chunk-4-4.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Weiterführende Literatur und Quellen dieses Eintrags:&lt;/strong&gt;&lt;/p&gt;
&lt;div id=&#34;refs&#34; class=&#34;references csl-bib-body&#34;&gt;
&lt;div id=&#34;ref-Schira2005&#34; class=&#34;csl-entry&#34;&gt;
&lt;div class=&#34;csl-left-margin&#34;&gt;1. &lt;/div&gt;&lt;div class=&#34;csl-right-inline&#34;&gt;Schira, J.: Statistische Methoden der VWL und BWL. PEARSON Studion, München (2005)&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-website:WikipediaZGS&#34; class=&#34;csl-entry&#34;&gt;
&lt;div class=&#34;csl-left-margin&#34;&gt;2. &lt;/div&gt;&lt;div class=&#34;csl-right-inline&#34;&gt;Wikipedia: Zentraler Grenzwertsatz, &lt;a href=&#34;https://de.wikipedia.org/w/index.php?title=Zentraler_Grenzwertsatz&amp;amp;oldid=162715036&#34;&gt;https://de.wikipedia.org/w/index.php?title=Zentraler_Grenzwertsatz&amp;amp;oldid=162715036&lt;/a&gt;, (2017)&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-website:WolframMathWorldCLT&#34; class=&#34;csl-entry&#34;&gt;
&lt;div class=&#34;csl-left-margin&#34;&gt;3. &lt;/div&gt;&lt;div class=&#34;csl-right-inline&#34;&gt;Weisstein, E.W.: Central limit theorem, &lt;a href=&#34;http://mathworld.wolfram.com/CentralLimitTheorem.html&#34;&gt;http://mathworld.wolfram.com/CentralLimitTheorem.html&lt;/a&gt;, (2017)&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Etwas R am Abend</title>
      <link>https://sefiroth.net/nab/project/etwas-r-am-abend/</link>
      <pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/project/etwas-r-am-abend/</guid>
      <description></description>
    </item>
    
    <item>
      <title>FastSimNullDistR</title>
      <link>https://sefiroth.net/nab/project/fastsimnulldistr/</link>
      <pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate>
      <guid>https://sefiroth.net/nab/project/fastsimnulldistr/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
