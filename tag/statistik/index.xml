<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Statistik | Norman&#39;s Academic Blog</title>
    <link>/tag/statistik/</link>
      <atom:link href="/tag/statistik/index.xml" rel="self" type="application/rss+xml" />
    <description>Statistik</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>de-de</language><copyright>© in 2017-2021 by Norman Markgraf</copyright><lastBuildDate>Wed, 12 Feb 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Statistik</title>
      <link>/tag/statistik/</link>
    </image>
    
    <item>
      <title>Eine typische Frage von Studierenden</title>
      <link>/post/eine-typische-frage-von-studierenden/</link>
      <pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate>
      <guid>/post/eine-typische-frage-von-studierenden/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Vor kurzem fand ich mal wieder eine Anfrage einer Studierenden in meinem Email Postfach. Die Frage lautete in etwa wie folgt:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Guten Tag Herr Markgraf,&lt;/p&gt;
&lt;p&gt;ich würde gerne die Hypothese untersuchen: Die reduzierte Abhängigkeit des Iphones tagsüber liegt am schönen Wetter.
Dazu habe ich eine Variable “iphones.tagsüber.unbeachtet” mit 1x, 2x und 3x täglich als Ausprägungen und eine andere Variable “wetter.ist.gut”, die als Ausprägung “Ja” und “Nein” hat.
Welchen Test kann ich dazu zur Überprüfung einer Abhängigkeit nehmen?&lt;/p&gt;
&lt;p&gt;Vielen Dank im Voraus.&lt;/p&gt;
&lt;p&gt;MfG Monika Mustermann&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Natürlich ist diese Frage im Prinzip einfach zu beantworten, sogar von Leuten, die Statistik an einer Hochschule gehört haben. – Aber da ich ja auch sonst nichts zu tun habe gebe ich gerne statistische Hilfestellung für Studierende. Sicher verdiene ich damit eigentlich Geld, also ist es nur natürlich, dass ich so etwas volllkommen unendgeldlich mache. Und wieso sollten Studierende einfach mal ein Buch in die Hand nehmen und selber nachdenken? Es gibt vermutlich keine Bücher zu diesem Thema, denn es ist gar sicher eine Geheimwissenschaft. Und wieso sollte man dann also seine Betreuungsperson zu diesem Probem fragen? – Egal.&lt;/p&gt;
&lt;p&gt;Was haben wir hier vorliegen? – Im einfachsten Fall sind es zwei kategoriale Variablen und wir wollen sehen ob diese von einenander (un-)Abhängig sind.
Mangels tatsächlicher Daten basten wir uns einfach mal ein Beispiel:&lt;/p&gt;
&lt;div id=&#34;wir-basten-uns-ein-beispiel&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Wir basten uns ein Beispiel&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Wie immer zuerst das Paket &amp;#39;mosaic&amp;#39; laden
library(mosaic)

# Einen beliebigen Startwert für den Zufallszahlengenerator
# für die Reproduzierbarkeit
set.seed(123)

# Anzahl der Vorfälle insgesamt
n &amp;lt;- 176

# Anzahl der Wiederholungen für die SBI-Methoden
loops &amp;lt;- 10000

# Erfinden eines Beispieldatensatzes
daten &amp;lt;- data.frame(
  iphones.tagsüber.unbeachtet = sample(rep(c(&amp;quot;1xtäglich&amp;quot;,&amp;quot;2xtäglich&amp;quot;,&amp;quot;3xtäglich&amp;quot;),n),n),
  wetter.ist.gut = sample(rep(c(&amp;quot;Ja&amp;quot;,&amp;quot;Nein&amp;quot;),n),n)
)

# Ausgabe der ersten Zeilen des Datensatzes
head(daten)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   iphones.tagsüber.unbeachtet wetter.ist.gut
## 1                   1xtäglich             Ja
## 2                   1xtäglich           Nein
## 3                   2xtäglich             Ja
## 4                   3xtäglich           Nein
## 5                   1xtäglich             Ja
## 6                   2xtäglich             Ja&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;ein-blick-auf-kennzahlen-und-visualisierungsmöglichkeiten&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Ein Blick auf Kennzahlen und Visualisierungsmöglichkeiten&lt;/h3&gt;
&lt;p&gt;Man kann diese Daten als Kreuztabelle zusammenfassen und diese dann mit Hilfe eines Mosaikplots darstellen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tally(iphones.tagsüber.unbeachtet ~ wetter.ist.gut, data=daten)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                            wetter.ist.gut
## iphones.tagsüber.unbeachtet Ja Nein
##                   1xtäglich 29   33
##                   2xtäglich 34   26
##                   3xtäglich 27   27&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mosaicplot(wetter.ist.gut ~ iphones.tagsüber.unbeachtet, data=daten)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-02-12-eine-typische-frage-von-studierenden_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Für später speichern wir die Kreuztabelle in obs.tab
obs.tab &amp;lt;- tally(iphones.tagsüber.unbeachtet ~ wetter.ist.gut, data=daten)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;von-der-forschungsthese-zur-hypothese&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Von der Forschungsthese zur Hypothese&lt;/h3&gt;
&lt;p&gt;Um nun zwischen abhänig und unabhängig statitisch zu unterscheiden, sollte man sich die Null- und Alternativhypothese genau überlegen und &lt;em&gt;operationalisieren&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Ein Blick auf die (orginal) Forschungsthese: “Die reduzierte Abhängigkeit des Iphones tagsüber liegt am schönen Wetter.”&lt;/p&gt;
&lt;p&gt;Okay, wir formulieren etwas um: “Es besteht ein Zusammenhang zwischen ‘schönem Wetter’ und dem ‘Iphone tagsüber unbeachtet’ lassen.”&lt;/p&gt;
&lt;p&gt;Warum diese unterschiedliche Formulierung? – Nun, in der orginal Forschungsthese wird ein kausal Zusammenhang geprüft. Da es sich vermutlich um eine Beobachtungstudie handelt können wir einen solchen Ursache-Wirkungs-Zusammenhang aber hier nicht so einfach (bis gar nicht) prüfen. Zwar kann man von außen sagen: “Wenn es einen Zusammenhang gibt, dann führt das schöne Wetter zur Nichtbeachtung.” statitisch können wir hier aber aktuell nur den Zusammenhang (und zwar ungerichtget!) testen. Liegt dieser &lt;strong&gt;nicht&lt;/strong&gt; vor, so spricht erstmal auch nichts für einen kausalen Zusammenhang, aber ein Zusammenhang an sich spricht noch nicht für einen kausalen Zusammenhang!&lt;/p&gt;
&lt;p&gt;Aus der umformulierten Forschungsfrage können wir die Alternativ- und auch die Nullhypothese ableiten:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Alternativhypothese:&lt;/strong&gt; Es besteht ein Zusammenhang zwischen ‘schönem Wetter’ und dem ‘Iphone tagsüber unbeachtet’ lassen.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nullhypothese:&lt;/strong&gt; Es besteht &lt;strong&gt;kein&lt;/strong&gt; Zusammenhang zwischen ‘schönem Wetter’ und dem ‘Iphone tagsüber unbeachtet’ lassen.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;wie-kann-man-nun-den-zusammenhang-messen-und-wie-sieht-kein-zusammenhang-dabei-aus&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Wie kann man nun den Zusammenhang &lt;em&gt;messen&lt;/em&gt; und wie sieht &lt;em&gt;kein Zusammenhang&lt;/em&gt; dabei aus?&lt;/h2&gt;
&lt;p&gt;Um zu sehen ob unsere Werte keinen Zusammenhang haben, also rein zufällig sind, oder es einen inneren Zusammenhang gibt müssen wir die äußeren von den inneren Häufigkeiten trennen.&lt;/p&gt;
&lt;p&gt;Konkret heißt das, wir schauen uns an wie die Häufigkeiten oder auch Verteilung der einzelnen Variabeln ausssehen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tally(~ wetter.ist.gut, data=daten)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## wetter.ist.gut
##   Ja Nein 
##   90   86&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tally(~ iphones.tagsüber.unbeachtet, data=daten)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## iphones.tagsüber.unbeachtet
## 1xtäglich 2xtäglich 3xtäglich 
##        62        60        54&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;freiheitsgrade&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Freiheitsgrade&lt;/h4&gt;
&lt;p&gt;Die Werte innerhalb der Kreuztabelle oben werden im wesendlichen durch diese Werte bestimmt. Die außeren Werte sind also unsere Rahmenbedingungen. Dabei ist der Einfluss der sogenannten &lt;em&gt;Randhäufigkeiten&lt;/em&gt; (&lt;em&gt;Marginale Häufigkeit&lt;/em&gt;) nicht zu unterschätzen. Denn wenn wir diese als &lt;em&gt;fix&lt;/em&gt;/&lt;em&gt;gegeben&lt;/em&gt; ansehen, können wir nur mit den sechs Werten in der Mitte unserer Kreuztabelle &lt;em&gt;spielen&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Doch sind nicht alle sechs Werte wirklich frei wählbar. Denn um zum Beispiel die Summe 62 in der ersten Zeile zu erhalten haben wir ja die Summe von 29 und 33 gebildet.&lt;/p&gt;
&lt;p&gt;Ist nun der Rand, also 62, fest, so kann ich nicht &lt;em&gt;beide&lt;/em&gt; Summanden frei wählen, denn&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[62 = 29 + 33\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;impliziert ja, dass allgemein&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[62 = x + y\]&lt;/span&gt;
gelten muss und somit durch&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[x = 62 - y \qquad\text{ bzw. }\qquad y = 62 - x\]&lt;/span&gt;
immer maximal eine der Variabeln – &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; oder &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; – wirklich frei wählen kann.&lt;/p&gt;
&lt;p&gt;Da dies für jede Zeile, aber auch für jede Spalte gilt, denn z.B. ist die Summe der ersten Spalte gegeben durch&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[90 = 29 + 34 + 27,\]&lt;/span&gt;
sind von den sechs Werten in der Kreuztabelle in der Tat nur 2 Werte wirklich frei zu wählen.
Wir haben also ein Problem mit &lt;em&gt;2 Freiheitsgraden&lt;/em&gt;, man schreibt das kurz mit &lt;span class=&#34;math inline&#34;&gt;\(df=2\)&lt;/span&gt; (&lt;em&gt;df&lt;/em&gt; steht dabei für &lt;em&gt;degree of freedom&lt;/em&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;unabhängigkeit-in-der-statistik&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Unabhängigkeit in der Statistik&lt;/h3&gt;
&lt;p&gt;Wir sagen, in der Statistik, dass ein gemeinsames Ereignis unabhängig ist wenn sich das Ereignis als Produkt der beiden Einzelereignisse berechnen lässt.
Seien &lt;span class=&#34;math inline&#34;&gt;\(A\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(B\)&lt;/span&gt; also zwei Ereignisse, dann gilt im Falle der Unabhängigkeit:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[P(A \cap B) = P(A) \cdot P(B)\]&lt;/span&gt;
Oder etwas informeller: &lt;em&gt;Die Wahrscheinlichkeit das beide Ereignisse eintreffen ist das Produkt der Wahrscheinlichkeiten, dass jeweils eines der beiden Ereignisse eintrifft.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Wir können diese Definition aus der Wahrscheinlichkeitstheorie an unser Problem adaptieren, in dem wir die Wahrscheinlichkeiten durch die relativen Häufigkeiten ersetzen.&lt;/p&gt;
&lt;p&gt;Der Wert für das gemeinsame Ereignis &lt;code&gt;iphone.tagsüber.unbeachtet = 1xtäglich&lt;/code&gt; und das &lt;code&gt;wetter.ist.gut=ja&lt;/code&gt; wird im Falle der Unabhägigkeit durch die beiden Randhäufigkeiten bestimmt:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[62 \cdot 90 = 31.7045455\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir können nun mit eine Kreuztabelle erstellen, wie sie seien müsste, falls wir tatsächlich &lt;em&gt;statitische Unabhängigkeit&lt;/em&gt; hätten. Wir nutzen dafür eine sehr allgemein gehaltene, aber selbst programmierte, Funktion &lt;code&gt;expectation.tab()&lt;/code&gt;, der wir eine Tabelle mit den Häufigkeiten der Beobachtungen geben und die uns dann die Tabelle liefert, wie sie aussehen würde, falls tatsächlich &lt;em&gt;statitische Unabhängigkeit&lt;/em&gt; herrschen würde.&lt;/p&gt;
&lt;p&gt;Die Tabelle mit den beobchteten Werten speichern wir in &lt;code&gt;obs.tab&lt;/code&gt;, die der erwarteten Werte in &lt;code&gt;exp.tab&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;expectation.tab &amp;lt;- function(tab.obs) {
  ret &amp;lt;- tab.obs
  max.i &amp;lt;- dim(tab.obs)[1]
  max.j &amp;lt;- dim(tab.obs)[2]
  
  # Randhäufigkeiten 
  x &amp;lt;- rep(0, max.i)
  for(i in 0:max.i) x[i] = sum(tab.obs[i,])

  y &amp;lt;- rep(0, max.j)
  for(j in 0:max.j) y[j] = sum(tab.obs[,j])

  # Anzahl aller Beobachtungen
  n = sum(tab.obs)
  
  for(i in 0:max.i){
    for(j in 0:max.j) {
       ret[i,j] &amp;lt;- (x[i] * y[j] / n)
    }
  }

  return(ret)
}

# Kreuztabelle der beobachtete Werte
obs.tab &amp;lt;- tally(iphones.tagsüber.unbeachtet ~ wetter.ist.gut, data=daten)

# Kreuztabelle der erwarteten Werte auf Grundlage der beobachteten Werte
exp.tab &amp;lt;- expectation.tab(obs.tab)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Schauen wir uns die beiden Tabellen kurz an. Zuerst die der beobachteten Werte:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;obs.tab&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                            wetter.ist.gut
## iphones.tagsüber.unbeachtet Ja Nein
##                   1xtäglich 29   33
##                   2xtäglich 34   26
##                   3xtäglich 27   27&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dann die der erwarteten Werte:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;exp.tab&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                            wetter.ist.gut
## iphones.tagsüber.unbeachtet       Ja     Nein
##                   1xtäglich 31.70455 30.29545
##                   2xtäglich 30.68182 29.31818
##                   3xtäglich 27.61364 26.38636&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;was-können-wir-nun-messen&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Was können wir nun messen?&lt;/h3&gt;
&lt;p&gt;Unsicherheit und Zufall spielen eine große Rolle. Wir können also nicht erwarten, dass die Werte für die Kreuztabelle in der Realität genau getroffen werden. (Vorallem, weil wir hier ja mit Nachkommastellen arbeiten!) Aber wir können versuchen den Abstand zu diesen Werten zu messen. Je weiter weg die Werte in der Kreuztabelle von den theoretischen Werten liegen, um so unwarscheinlicher ist es, dass die Werte zufällig aus einer unabhängigen Population gezogen wurden. D.h. wir könnten uns für eine Abhägigkeit aussprechen.&lt;/p&gt;
&lt;div id=&#34;messen-mit-dem-absolutabstand&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Messen mit dem Absolutabstand?&lt;/h4&gt;
&lt;p&gt;Man könnte nun auf die Idee kommen die Abstände an jeder Stelle zu messen und den absoluten Abstand zu summieren:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum(abs(obs.tab-exp.tab))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 13.27273&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nur was sagt dieser Wert aus? – Ist das ein kleiner Abstand oder ein großer?&lt;/p&gt;
&lt;p&gt;Wir brauchen Referenzwerte zur Orientierung. Eine Idee lautet: &lt;strong&gt;Permutationstest&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sind die Werte unabhängig von einander, dann spielt die konkrete Zuordnung keine Rolle, sondern nur die Anzahl der Ereignisse an sich. Ordnen wir nun zufällig einem &lt;code&gt;iphones.tagsüber.unbeachtet&lt;/code&gt;-Wert einen beliebigen &lt;code&gt;wetter.ist.gut&lt;/code&gt;-Wert zu, dann besteht kein Zusammenhang mehr zwischen den Werten. Dies machen wir mittels &lt;code&gt;iphones.tagsüber.unbeachtet ~ shuffle(wetter.ist.gut)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Wir simulieren so den Zustand, dass es keine Abhängigkeit zwischen den Werten gibt.&lt;/p&gt;
&lt;p&gt;Dabei messen wir den Abstand zwischen den Abstand zwischen den beobachteten Werten und den Werten, die wir erwarten würden, falls Unabhägigkeit vorliegen würde. Dafür nutzen wir die selbsterstellte Funktioen &lt;code&gt;diffabsobsexp&lt;/code&gt;, welche die Summe der absoluten Abweichungen berechnet:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\text{diffabsobsexp}(obs, exp) = \sum\limits_i \left|obs_i - exp_i\right|\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir Wiederholen das ganze mit Hilfe von &lt;code&gt;do(loops)&lt;/code&gt; genau &lt;code&gt;loops&lt;/code&gt;&lt;span class=&#34;math inline&#34;&gt;\(=10^{4}\)&lt;/span&gt; mal, geben dann das Histogramm aus und tragen als rote Linie den Wert ein, die wir bei unseren beobachteten Daten tatsächliche gemessen haben:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Funktion zur Berechnung der absoluten Differenz zwischen
# beobachteten und erwarteten Werte
diffabsobsexp &amp;lt;- function(obs, exp) {
  return(sum(abs(obs-exp)))
}

# Absolute Abweichung der gemessenen Werte
obs.abs &amp;lt;- diffabsobsexp(obs.tab, exp.tab)

# Erzeugen der Nullverteilung
NullVert  &amp;lt;- do(loops) * diffabsobsexp(tally(iphones.tagsüber.unbeachtet ~ shuffle(wetter.ist.gut), data=daten), exp.tab)
gf_histogram(~ diffabsobsexp, data=NullVert) %&amp;gt;%
  gf_vline(xintercept = ~ obs.abs, color=&amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-02-12-eine-typische-frage-von-studierenden_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Wir können nun den p-Wert, also die relative Fläche rechts von der roten Linie in unseren Histogramm, abschätzen mit:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;prop( ~ diffabsobsexp &amp;gt;= obs.abs, data=NullVert)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## prop_TRUE 
##    0.5714&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Absolute Abweichungen (oder auch &lt;em&gt;absolute Fehler&lt;/em&gt;) haben die Tendenz bei großen Zahlen auch große Abweichungswerte zu liefern und bei kleinen Werten eher kleine Abweichungswerte.
Das kann man als Markel ansehen.
Daher arbeitet man vielleicht lieber mit relativen Abweichungen (oder auch &lt;em&gt;relativen Fehlern&lt;/em&gt;).
Dabei setzt man die absolute Abweichung jedesmal in Bezug auf den erwarteten Wert.
Die dazu passenden Funktion haben wir unten mit &lt;code&gt;diffabsobsexprel&lt;/code&gt; implementiert.
Dabei ist:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\text{diffabsobsexprel}(obs, exp) = \sum\limits_i \frac{\left|obs_i - exp_i\right|}{exp_i}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir Wiederholen das ganze mit Hilfe von &lt;code&gt;do(loops)&lt;/code&gt; genau &lt;code&gt;loops&lt;/code&gt;&lt;span class=&#34;math inline&#34;&gt;\(=10^{4}\)&lt;/span&gt; mal, geben dann das Histogramm aus und tragen als rote Linie den Wert ein, den wir bei unseren beobachteten Daten tatsächliche gemessen haben:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Funktion zur Berechnung der korrigierten absoluten 
# Differenz zwischen beobachteten und erwarteten Werten
diffabsobsexprel &amp;lt;- function(obs, exp) {
  return(sum((abs(obs-exp))/exp))
}

# Absolute Abweichung der gemessenen Werte -- korrigiert
obs.abs &amp;lt;- diffabsobsexprel(obs.tab, exp.tab)

# Erzeugen der Nullverteilung
NullVert  &amp;lt;- do(loops) * diffabsobsexprel(tally(iphones.tagsüber.unbeachtet ~ shuffle(wetter.ist.gut), data=daten), exp.tab)
gf_dhistogram(~ diffabsobsexprel, data=NullVert) %&amp;gt;%
  gf_vline(xintercept = ~ obs.abs, color=&amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-02-12-eine-typische-frage-von-studierenden_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Auch hier können wir den p-Wert abschätzen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;prop( ~ diffabsobsexprel &amp;gt;= obs.abs, data=NullVert)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## prop_TRUE 
##    0.5983&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Ist der absolute Abstand überhaupt gut gewählt? – Wäre nicht eher der quadratische Abstand angebracht?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ein Vorteil des quadratischen Abstand ist es, dass er kleine Abstände kleiner und große Abstände größer bewertet, als der absolute Abstand. Außerdem hat er mathematisch einige Vorteile. Wir messen nun den quadratischen Abstande mit der Funktion
&lt;code&gt;diffquad&lt;/code&gt;, die wie folgt arbeitet:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\text{diffquad}(obs, exp) = \sum\limits_i \left(obs_i - exp_i\right)^2\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir Wiederholen dies nun mit Hilfe von &lt;code&gt;do(loops)&lt;/code&gt; genau &lt;code&gt;loops&lt;/code&gt;&lt;span class=&#34;math inline&#34;&gt;\(=10^{4}\)&lt;/span&gt; mal, geben dann das Histogramm aus und tragen als rote Linie den Wert ein, den wir bei unseren beobachteten Daten tatsächliche gemessen haben:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Funktion zur Berechnung der quadratischen 
# Differenz zwischen beobachteten und erwarteten Werten
diffquad &amp;lt;- function(obs, exp) {
  return(sum((obs-exp)^2))
}

# Quadratische Abweichung der gemessenen Werte
obs.abs &amp;lt;- diffquad(obs.tab, exp.tab)

# Erzeugen der Nullverteilung
NullVert  &amp;lt;- do(loops) * diffquad(tally(iphones.tagsüber.unbeachtet ~ shuffle(wetter.ist.gut), data=daten), exp.tab)
gf_dhistogram(~ diffquad, data=NullVert) %&amp;gt;%
  gf_vline(xintercept = ~ obs.abs, color=&amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-02-12-eine-typische-frage-von-studierenden_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Wir können nun den p-Wert abschätzen mit:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;prop( ~ diffquad &amp;gt;= obs.abs, data=NullVert)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## prop_TRUE 
##    0.5389&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wie beim absoluten Abstand werden hier die Größe der Werte ausser acht gelassen und vielleicht fühlen wir uns etwas wohler, wenn wir statt des quadratischen Abstands den relativen quadratischen Abstand benutzen:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\text{diffquadrel}(obs, exp) = \sum\limits_i \frac{\left(obs_i - exp_i\right)^2}{exp_i}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Dies wiederholen wir nun mit Hilfe von &lt;code&gt;do(loops)&lt;/code&gt; genau &lt;code&gt;loops&lt;/code&gt;&lt;span class=&#34;math inline&#34;&gt;\(=10^{4}\)&lt;/span&gt; mal, geben dann das Histogramm aus und tragen als rote Linie den Wert ein, den wir bei unseren beobachteten Daten tatsächliche gemessen haben:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Funktion zur Berechnung der korrigierten quadratischen 
# Differenz zwischen beobachteten und erwarteten Werten
diffquadrel &amp;lt;- function(obs, exp) {
  return(sum(((obs-exp)^2)/exp))
}

# Quadratische Abweichung der gemessenen Werte -- korrigiert
obs.abs &amp;lt;- diffquadrel(obs.tab, exp.tab)

# Erzeugen der Nullverteilung
NullVert  &amp;lt;- do(loops) * diffquadrel(tally(iphones.tagsüber.unbeachtet ~ shuffle(wetter.ist.gut), data=daten), exp.tab)
gf_histogram(~ diffquadrel, binwidth = 0.5, center = 0.25, data=NullVert) %&amp;gt;%
  gf_vline(xintercept = ~ obs.abs, color=&amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-02-12-eine-typische-frage-von-studierenden_files/figure-html/unnamed-chunk-20-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Den Wert 1.2344597, den wir mit Hilfe der relativen quadratischen Abweichung berechnet haben, nennen wir auch &lt;span class=&#34;math inline&#34;&gt;\(\chi^2\)&lt;/span&gt; Wert.&lt;/p&gt;
&lt;p&gt;Wir können nun den p-Wert abschätzen mit:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;prop( ~ diffquadrel &amp;gt;= obs.abs, data=NullVert)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## prop_TRUE 
##    0.5599&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An Hand der p-Werte können wir nun über die Nullhypothese entscheiden:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;was-sagt-die-klassische-statistik&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Was sagt die klassische Statistik?&lt;/h3&gt;
&lt;p&gt;In der klassischen Statistik könnte man hier den &lt;span class=&#34;math inline&#34;&gt;\(\chi^2\)&lt;/span&gt;-Unabhängigkeitstest anwenden:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;xchisq.test(iphones.tagsüber.unbeachtet ~ wetter.ist.gut, data=daten)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Pearson&amp;#39;s Chi-squared test
## 
## data:  x
## X-squared = 1.2345, df = 2, p-value = 0.5394
## 
##    29       33   
## (31.70)  (30.30) 
## [0.231]  [0.241] 
## &amp;lt;-0.48&amp;gt;  &amp;lt; 0.49&amp;gt; 
##    
##    34       26   
## (30.68)  (29.32) 
## [0.359]  [0.376] 
## &amp;lt; 0.60&amp;gt;  &amp;lt;-0.61&amp;gt; 
##    
##    27       27   
## (27.61)  (26.39) 
## [0.014]  [0.014] 
## &amp;lt;-0.12&amp;gt;  &amp;lt; 0.12&amp;gt; 
##    
## key:
##  observed
##  (expected)
##  [contribution to X-squared]
##  &amp;lt;Pearson residual&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vergleichen wir nun die beiden Ansätze, SBI auf der einen und der klassische Ansatz auf der anderern Seite, einmal in einem Diagramm. Das (Dichte-)Histogramm sind die Daten aus der Nullverteilung für die quadratische, korrigierte Differenz. Die rote Linie ist der gemessene Abweichungswert. Die schwarze Linie ist der Graph der &lt;span class=&#34;math inline&#34;&gt;\(\chi^2\)&lt;/span&gt;-Verteilung mit zwei Freiheitsgraden:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_dhistogram(~ diffquadrel, binwidth = 0.5, center = 0.25, data=NullVert) %&amp;gt;%
  gf_fun(dchisq(x, df=2) ~ x, xlim=c(0:20), color=&amp;quot;blue&amp;quot;) %&amp;gt;% 
  gf_vline(xintercept = ~ obs.abs, color=&amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-02-12-eine-typische-frage-von-studierenden_files/figure-html/unnamed-chunk-26-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Aber es gibt auch den (exakten) Fisher-Test:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fisher.test(obs.tab, alternative = &amp;quot;greater&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Fisher&amp;#39;s Exact Test for Count Data
## 
## data:  obs.tab
## p-value = 0.5609
## alternative hypothesis: greater&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;fazit&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Fazit&lt;/h3&gt;
&lt;p&gt;Wir können die p-Werte der einzelnen Tests nun gegenüber stellen:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Scale for &amp;#39;y&amp;#39; is already present. Adding another scale for &amp;#39;y&amp;#39;, which will
## replace the existing scale.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-02-12-eine-typische-frage-von-studierenden_files/figure-html/unnamed-chunk-29-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Gewöhnlich haben wir ein Signifikanznivau von &lt;span class=&#34;math inline&#34;&gt;\(5\% = 0{,}05\)&lt;/span&gt; angenommen. Die rote Linie zeigt diese Grenze. Liegt der Balken links vor dieser Linie, so sprechen wir davon, dass der gemessene Wert selten bei unabhänigen Daten vorliegt und würden uns gegen die Nullhypothese und damit quasi für die Alternativhypothese entscheiden. Liegt der Balken recht der roten Linie, so haben wir übliche Werte für unabhängige Daten und keinen Grund gefunden, der gegen die Nullhypothese spricht. Warum wir sie dann, auf Grundlage unserer Daten, auch nicht ablehnen können.&lt;/p&gt;
&lt;p&gt;Bleibt Sie Frage, gibt es Situationen in denen die Entscheidung über die Nullhypothese bei den einzelen betrachteten Verfahren unterschiedlichen ist? Und wenn ja, wann und wieoft?&lt;/p&gt;
&lt;p&gt;Diese Fragen sind nicht Thema dieses Beitrags, aber vielleicht habe ich Zeit und betrachte das später einmal.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Moderator und Mediation - Formen der Interaktion bei Analyse von Zusammenhängen</title>
      <link>/post/moderator-und-mediation-formen-der-interaktion-bei-analyse-von-zusammenhaengen/</link>
      <pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate>
      <guid>/post/moderator-und-mediation-formen-der-interaktion-bei-analyse-von-zusammenhaengen/</guid>
      <description>
&lt;script src=&#34;2019-12-31-moderator-und-mediation-formen-der-interaktion-bei-analyse-von-zusammenhängen_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Bei der Analyse von Zusammenhängen tauchen sowohl &lt;em&gt;Moderation&lt;/em&gt; als auch &lt;em&gt;Mediation&lt;/em&gt; auf. Es geht um Zusammenhänge zwischen drei Variablen &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt;.
Untersucht wird der Effekt einer unabhägigen Variable &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; (&lt;em&gt;Prädiktor&lt;/em&gt;, &lt;em&gt;UV&lt;/em&gt;) auf ein abhängige Variable &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; (&lt;em&gt;AV&lt;/em&gt;).
Wir untersuchen dies mit einem Regressionsmodell &lt;span class=&#34;math inline&#34;&gt;\(Y \sim X\)&lt;/span&gt;.
Dabei wird zusätzlich eine dritte Variable &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; berücksichtigt, die man entweder der &lt;em&gt;Moderator&lt;/em&gt; oder &lt;em&gt;Mediator&lt;/em&gt; nennt.&lt;/p&gt;
&lt;p&gt;Ist die abhängige Variable metrisch, so können wir mittels eine linearer Regression vorgehen, ist die AB dagegen dichotom, so nutzen wir eine logistische Regression.&lt;/p&gt;
&lt;div id=&#34;moderation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Moderation&lt;/h2&gt;
&lt;p&gt;Bei einer &lt;em&gt;Moderation&lt;/em&gt; wirkt die dritte Variable &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; (&lt;em&gt;Moderator&lt;/em&gt;) auf die Beziehung zwischen &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-12-31-moderator-und-mediation-formen-der-interaktion-bei-analyse-von-zusammenha%CC%88ngen_files/figure-html/Moderation-1.png&#34; width=&#34;30%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Der Einfluss von &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; ändert also den Effekt von &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; auf &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt;. Der Zusammenhang zwischen &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; ist also je nach &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; unterschiedlich.&lt;/p&gt;
&lt;p&gt;Statistisch gesehen liegt eine &lt;em&gt;Interaktion&lt;/em&gt; zwischen &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; vor.&lt;/p&gt;
&lt;div id=&#34;wie-untersucht-man-einen-zusammenhang-auf-eine-moderation&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Wie untersucht man einen Zusammenhang auf eine Moderation?&lt;/h3&gt;
&lt;p&gt;Dazu stellen wir ein Regressionsmodell mit den drei Faktoren &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; und der Interaktion zwischen &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; auf.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lm(Y ~ X * M, data=daten)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oder alternativ:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lm(Y ~ X + M + M:X, data=daten)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Diese drei Faktoren wirken auf &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt;. Ist in diesem Modell die Interaktion &lt;span class=&#34;math inline&#34;&gt;\(M:X\)&lt;/span&gt; &lt;em&gt;signifikant&lt;/em&gt;, so liegt eine (signifikante) &lt;em&gt;Moderation&lt;/em&gt; vor.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;mediation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Mediation&lt;/h2&gt;
&lt;p&gt;Bei der &lt;em&gt;Mediation&lt;/em&gt; steht die Variable &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; (der &lt;em&gt;Mediator&lt;/em&gt;) sowohl zu &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; als auch zu &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; in Beziehung.
Der direkte Effekt zwischen &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; wird durch den indirekten Effekt über &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; erklärt, also durch
&lt;span class=&#34;math inline&#34;&gt;\(X \to M \to Y\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-12-31-moderator-und-mediation-formen-der-interaktion-bei-analyse-von-zusammenha%CC%88ngen_files/figure-html/Mediator-1.png&#34; width=&#34;30%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;wie-untersucht-man-auf-eine-mediation&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Wie untersucht man auf eine Mediation?&lt;/h3&gt;
&lt;p&gt;In diesem Fall stellen wir mehrere Regressionsmodelle auf. Eine (signifikante) Mediation liegt dann vor, wenn die folgenden Bedinungen erfüllt sind:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;erstesModell &amp;lt;- lm(Y ~ X, data=daten)
zweitesModell &amp;lt;- lm(M ~ X, data=daten)
drittesModell &amp;lt;- lm(Y ~ X + M, data=daten)&lt;/code&gt;&lt;/pre&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Im ersten Modell (&lt;span class=&#34;math inline&#34;&gt;\(X \to Y\)&lt;/span&gt;) ist der Regressionskoeffizient von &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; signifikant.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Im zweiten Modell (&lt;span class=&#34;math inline&#34;&gt;\(X \to M\)&lt;/span&gt;) ist der Regressionskoeffizient von &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; signifikant.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Im dritten Modell (&lt;span class=&#34;math inline&#34;&gt;\(X,M \to Y\)&lt;/span&gt;) ist der Regressionskoeffizient von &lt;span class=&#34;math inline&#34;&gt;\(M\)&lt;/span&gt; signifikant und&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;der Regressionskoeffizient von &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; im dritten Modell kleiner als im ersten Modell.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Die ersten Schritte zur Prognose mitteles linearer Regression</title>
      <link>/post/die-ersten-schritte-zur-prognose-mitteles-linearer-regression/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      <guid>/post/die-ersten-schritte-zur-prognose-mitteles-linearer-regression/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Prognosen sind ein wichtiger Bestandteil von Data Science und ist durchaus nicht nur auf moderne Ansätze, wie Neuronale Netze, deep lerning etc. begrenzt. Auch die gute, alte Regression kann ein sehr sinnvolles Mittel sein solche Prognosen zu erstellen.&lt;/p&gt;
&lt;p&gt;Um ein wenig die Ideen hinter Prognosen zu beleuchten wollen wir uns an Prognosen mit dem &lt;strong&gt;tipping&lt;/strong&gt;-Daten heranwagen.&lt;/p&gt;
&lt;div id=&#34;einlesen-der-tipping-daten&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Einlesen der tipping-Daten&lt;/h2&gt;
&lt;p&gt;Zuerst laden wir die notwenidgen Pakete:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mosaic)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Falls die &lt;strong&gt;tipping&lt;/strong&gt;-Daten noch nicht im Verzeichnis liegen, laden wir sie aus dem Internet nach:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!file.exists(&amp;quot;tips.csv&amp;quot;)) {
  download.file(&amp;quot;https://goo.gl/whKjnl&amp;quot;, destfile = &amp;quot;tips.csv&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nun laden wir die &lt;strong&gt;tipping&lt;/strong&gt;-Daten in den Speicher in den Datenrahmen &lt;code&gt;tips&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tips &amp;lt;- read.csv2(&amp;quot;tips.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wir werfen einen ersten Blick auf die &lt;strong&gt;tipping&lt;/strong&gt;-Daten:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;inspect(tips)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## categorical variables:  
##     name     class levels   n missing
## 1    sex character      2 244       0
## 2 smoker character      2 244       0
## 3    day character      4 244       0
## 4   time character      2 244       0
##                                    distribution
## 1 Male (64.3%), Female (35.7%)                 
## 2 No (61.9%), Yes (38.1%)                      
## 3 Sat (35.7%), Sun (31.1%), Thur (25.4%) ...   
## 4 Dinner (72.1%), Lunch (27.9%)                
## 
## quantitative variables:  
##            name   class  min      Q1 median      Q3   max      mean        sd
## ...1 total_bill numeric 3.07 13.3475 17.795 24.1275 50.81 19.785943 8.9024120
## ...2        tip numeric 1.00  2.0000  2.900  3.5625 10.00  2.998279 1.3836382
## ...3       size integer 1.00  2.0000  2.000  3.0000  6.00  2.569672 0.9510998
##        n missing
## ...1 244       0
## ...2 244       0
## ...3 244       0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;vorbereiten-der-test-trainings--und-auswertungesdaten&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Vorbereiten der Test-/Trainings- und Auswertungesdaten&lt;/h2&gt;
&lt;p&gt;Zunächst schränken wir die &lt;strong&gt;tipping&lt;/strong&gt;-Daten auf die Variabeln “total_bill”, “sex”, “smoker”, “day”, “time”, “size” ein und speichern das Ergebnis wieder in &lt;code&gt;tips&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tips %&amp;gt;%
    select(c(&amp;quot;total_bill&amp;quot;, &amp;quot;sex&amp;quot;, &amp;quot;smoker&amp;quot;, &amp;quot;day&amp;quot;, &amp;quot;time&amp;quot;, &amp;quot;size&amp;quot;)) -&amp;gt; tips&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ziel ist es, den Rechnungsbetrag (“total_bill”) auf Grundlage der Variabeln “sex”, “smoker”, “day”, “time” und/oder “size” vorherzusagen.&lt;/p&gt;
&lt;p&gt;Wir teilen den tipping-Datensatz auf in eine Trainingsdatensatz (“tipstrain”), einem Testdatensatz (“tipstest”) und einem Prüfdatensatz (“tipspruef”).
Der Trainingsdatensatz sollte rund zweidrittel der Daten die wir haben umfassen.
Der Testdatensatz die restlich ca. eindrittel.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;trainings_anteil = 2/3

# n.train ist ein Index für alle Werte, 
# die wir im Trainingsdatensatz haben wollen:
x.train &amp;lt;- sample(1:nrow(tips), floor(trainings_anteil*nrow(tips)))

# Trainingsdatensatz erstellen:
tipstrain &amp;lt;- slice(tips, x.train)

# Prüfdatensatz erstellen, also alles was 
# nicht in den Trainingsdatensatz gekommen ist:
tipspruef &amp;lt;- slice(tips, -(x.train))

# Der Testdatensatz ist der Prüfdatensatz 
# ohne die Variable total_bill:
tipspruef %&amp;gt;% 
    select(-total_bill) -&amp;gt; tipstest&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mit dem Tainingsdatensatz versuchen wir nun ein Prognosemodell zu erstellen, um aus den Testdatensatz eine Prognose für “total_bill” zu erstellen.&lt;/p&gt;
&lt;p&gt;Das Prognose-Modell wird ausschließlich auf Grundlage des Trainingsdatensatzes erstellt. Am Ende wollen wir unser Modell dann aber mit Hilfe des Prüfdatensatzes bewertet.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;die-datenlage&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Die Datenlage&lt;/h2&gt;
&lt;p&gt;Ein (paar) Blick(e) auf unsere Trainingsdaten:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_point(total_bill ~ jitter(size), color=~time, data=tipstrain)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-12-18-die-ersten-schritte-zur-prognose-mitteles-linearer-regression_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_point(total_bill ~ day | time, color = ~ sex, data=tipstrain)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-12-18-die-ersten-schritte-zur-prognose-mitteles-linearer-regression_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;prognosemodel-nullmodell&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Prognosemodel: Nullmodell&lt;/h2&gt;
&lt;div id=&#34;aufstellen-des-nullmodel-aka-regression-mit-der-achse&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Aufstellen des Nullmodel aka Regression mit der Achse&lt;/h3&gt;
&lt;p&gt;Wir erstellen das Nullmodell wie folgt:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lm.null &amp;lt;- lm( total_bill ~ 1, data=tipstrain)
summary(lm.null)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = total_bill ~ 1, data = tipstrain)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -13.159  -6.989  -2.429   4.171  30.401 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept)  20.4086     0.7311   27.91   &amp;lt;2e-16 ***
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 9.306 on 161 degrees of freedom&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Das Nullmodell sagt in jedem Fall den Rechnungsbetrag vorher als den Mittelwert der Trainingsdaten!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mean(~ total_bill, data=tipstrain)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 20.40864&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nun bestimmten wir mit Hilfe des Nullmodells “lm.null” eine Vorhersage für die Testdaten:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;predict.null &amp;lt;- predict(lm.null, newdata=tipstest)
head(predict.null)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        1        2        3        4        5        6 
## 20.40864 20.40864 20.40864 20.40864 20.40864 20.40864&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wie gesagt, das Nullmodell liefert als Prognose immer den Mittelwert der Trainingsdaten zurück,
das mathematische Nullmodell lautet also:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\widehat{total\_bill_i} = 20.408642  \]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;auswertung-des-nullmodells&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Auswertung des Nullmodells&lt;/h3&gt;
&lt;p&gt;Zur Auswertung Nutzen wir den &lt;em&gt;mittleren Absolutabstand&lt;/em&gt; zwischen der Vorhersage und den Prüfdaten:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;maa.null &amp;lt;-sum( abs( tipspruef$total_bill - predict.null))
maa.null&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 544.772&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;prognosemodell-lineare-regression-gegen-size-als-metrischer-wert&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Prognosemodell: Lineare Regression gegen “size” als metrischer Wert&lt;/h2&gt;
&lt;div id=&#34;aufstellen-des-modells&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Aufstellen des Modells&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;auswertung-des-regressionsmodell&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Auswertung des Regressionsmodell&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>SBI - Simulation Based Inference</title>
      <link>/post/sbi-simulation-based-inference/</link>
      <pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate>
      <guid>/post/sbi-simulation-based-inference/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Wenn meine Tochter &lt;em&gt;SBI&lt;/em&gt; hört, denkt sie an &lt;em&gt;Sally Bollywood Investigation&lt;/em&gt;. – Und ich oft auch. – Mit &lt;em&gt;SBI&lt;/em&gt; ist hier aber nicht der Trickfilm für Kinder, sondern &lt;em&gt;&lt;strong&gt;S&lt;/strong&gt;imulation &lt;strong&gt;B&lt;/strong&gt;ased &lt;strong&gt;I&lt;/strong&gt;nference&lt;/em&gt;, gemeint.&lt;/p&gt;
&lt;p&gt;Angestachelt von Prof. Dr. Karsten Lübke und im Schlepptau von Prof. Dr. Oliver Gansser, Prof. Dr. Matthias Gehrke und Prof. Dr. Bianca Krol haben ein paar kluge Köpfe bei der &lt;a href=&#34;http://www.fom.de&#34;&gt;FOM&lt;/a&gt; den Unterricht für Statistik auf eine neue Grundlage zu stellen. Und ich habe dabei mitgewirkt.&lt;/p&gt;
&lt;p&gt;Unser Mastermind, Karsten Lübke, hat dazu einen sehr schönen und lesenswerten Blog-Eintrag geschrieben: &lt;a href=&#34;https://www.causeweb.org/sbi/?p=1559&#34; class=&#34;uri&#34;&gt;https://www.causeweb.org/sbi/?p=1559&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ein wenig schneller zur simulierten Nullverteilung</title>
      <link>/post/ein-wenig-schneller-zur-simulierten-nullverteilung/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      <guid>/post/ein-wenig-schneller-zur-simulierten-nullverteilung/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/d3/d3.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/profvis/profvis.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/profvis/profvis.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/profvis/scroll.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/highlight/textmate.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/highlight/highlight.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/profvis-binding/profvis.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Ein Nullhypothesentest ist schnell geschrieben.
Will man den approximativen Weg gehen, so hilft &lt;strong&gt;R&lt;/strong&gt; einem mit entsprechenden Tests mit einfachen Befehlen.
Nimmt man &lt;strong&gt;MOSAIC&lt;/strong&gt; dazu, so bekommt man u.a. für den Test auf Anteils- oder Mittelwerte sogar einen sehr einfachen, weil einheitlichen, Syntax.&lt;/p&gt;
&lt;div id=&#34;zwei-beispiele-für-approximative-hypothesentests-mit-mosaic&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Zwei Beispiele für approximative Hypothesentests mit MOSAIC&lt;/h3&gt;
&lt;p&gt;Laden wir unsere Testdaten, die &lt;strong&gt;tipping&lt;/strong&gt; Daten wie folgt:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mosaic)
download.file(&amp;quot;https://goo.gl/whKjnl&amp;quot;, destfile = &amp;quot;tips.csv&amp;quot;)
tips &amp;lt;- read.csv2(&amp;quot;tips.csv&amp;quot;)
set.seed(2009)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dann erstellen wir zwei Forschungsfragen:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Ist der mittlere Frauenanteil unter der Bezahler*innen zu den Zeitpunkten Lunch und Dinner gleich?&lt;/li&gt;
&lt;li&gt;Ist der mittlere Rechnungsbetrag zu den Zeitpunkten Lunch und Dinner gleich?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Im ersten Fall ist die Hypothese schnell geschrieben:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
H_0 : \pi_{\text{Lunch}} = \pi_{\text{Dinner}} \quad\text{vs.}\quad H_1 : \pi_{\text{Lunch}} \neq \pi_{\text{Dinner}}
\]&lt;/span&gt;
Der approximative Test mit R und MOSAIC lautet nun:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;prop.test(sex ~ time, success = &amp;quot;Female&amp;quot;, data = tips)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  2-sample test for equality of proportions with continuity correction
## 
## data:  tally(sex ~ time)
## X-squared = 9.3438, df = 1, p-value = 0.002237
## alternative hypothesis: two.sided
## 95 percent confidence interval:
##  -0.36602563 -0.07247705
## sample estimates:
##    prop 1    prop 2 
## 0.2954545 0.5147059&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ähnlich sieht es für den zweiten Fall aus. Die Hypothese lautet hier:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
H_0 : \mu_{Lunch} = \mu_{Dinner} \quad\text{vs.}\quad H_1 : \mu_{Lunch} \neq \mu_{Dinner}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Der dazugehörige Test lautet dann:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;t.test(total_bill ~ time, data = tips)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Welch Two Sample t-test
## 
## data:  total_bill by time
## t = 3.123, df = 143.29, p-value = 0.002167
## alternative hypothesis: true difference in means is not equal to 0
## 95 percent confidence interval:
##  1.331877 5.925088
## sample estimates:
## mean in group Dinner  mean in group Lunch 
##             20.79716             17.16868&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;simulation-der-nullverteilung-mit-mosaic&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Simulation der Nullverteilung mit MOSAIC&lt;/h2&gt;
&lt;p&gt;Ein anderer Weg ist es die Stichprobe selber zu nutzen um daraus eine Verteilung der Nullhypothese (die Nullverteilung) ableiten zu können.
Im ersten Fall schaut man sich die Anteilsunterschiede an, wenn man die (potentielle) Abhängigkeit von der Tageszeit (Lunch und Dinner) künstlich “abschaltet”:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(2009)
NullVtlgAntwert &amp;lt;- do(10000) * diffprop(sex ~ shuffle(time), 
    success = &amp;quot;Female&amp;quot;, data = tips)
gf_histogram(~diffprop, nint = 25, data = NullVtlgAntwert)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-05-02-ein-wenig-schneller-zur-simulierten-nullverteilung_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Schaut man sich nun die Lage der Anteilsdifferenz der Stichprobe &lt;span class=&#34;math inline&#34;&gt;\(\hat\pi=0.2192513\)&lt;/span&gt; in Bezug auf diese Nullverteilung geometrisch an, so kann man schon einen ersten Eindruck erlangen, ob die Nullhypothese abzulehnen ist oder nicht:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;diffpropdach &amp;lt;- diffprop(sex ~ time, success = &amp;quot;Female&amp;quot;, data = tips)
gf_histogram(~diffprop, nint = 25, data = NullVtlgAntwert) + 
    geom_vline(xintercept = diffpropdach, color = &amp;quot;blue&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-05-02-ein-wenig-schneller-zur-simulierten-nullverteilung_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Offenbar ist &lt;span class=&#34;math inline&#34;&gt;\(\hat\pi\)&lt;/span&gt; kein sehr häufiges Ereignis.&lt;/p&gt;
&lt;p&gt;Der &lt;em&gt;p-Wert&lt;/em&gt; ist ebenfalls leicht zu ermitteln:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pvalue_aw &amp;lt;- prop(~abs(diffprop) &amp;gt;= abs(diffpropdach), data = NullVtlgAntwert)
pvalue_aw&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## prop_TRUE 
##    0.0018&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mit einem Anteilswert (p-Wert) von 0.0018 zweigen wir wie selten das Ereignis unter der &lt;span class=&#34;math inline&#34;&gt;\(H_0\)&lt;/span&gt; ist.&lt;/p&gt;
&lt;p&gt;Ähnlich sieht die Situation im zweien Fall aus. Mit Hilfe weniger Befehle erzeugen wir die Nullverteilung:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(2009)
NullVtlgMittelwert &amp;lt;- do(10000) * diffmean(total_bill ~ shuffle(time), 
    data = tips)
gf_histogram(~diffmean, nint = 25, data = NullVtlgMittelwert)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-05-02-ein-wenig-schneller-zur-simulierten-nullverteilung_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Und können im Anschluss die Mittelwertsdifferenz der Stichprobe geometrisch einordnen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;diffmeandach &amp;lt;- diffmean(total_bill ~ time, data = tips)
gf_histogram(~diffmean, nint = 25, data = NullVtlgMittelwert) + 
    geom_vline(xintercept = diffmeandach, color = &amp;quot;blue&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-05-02-ein-wenig-schneller-zur-simulierten-nullverteilung_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Auch den &lt;em&gt;p-Wert&lt;/em&gt; können wir wieder leicht bestimmen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pvalue_mw &amp;lt;- prop(~abs(diffmean) &amp;gt;= abs(diffmeandach), data = NullVtlgMittelwert)
pvalue_mw&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## prop_TRUE 
##    0.0047&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;das-problem-zeit&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Das Problem – Zeit&lt;/h2&gt;
&lt;p&gt;Das Problem bei der Simulation ist die Zeit, die &lt;strong&gt;R&lt;/strong&gt; braucht um die Nullverteilungen zu generieren.
Das liegt im wesentlichen an Mosaic.
Mit den Routinen aus &lt;a href=&#34;https://github.com/NMarkgraf/FastSimNullDistR&#34;&gt;FastSimNullDistR&lt;/a&gt; lassen sich die Nullverteilungen deutlich schneller berechnen.
Ein Vergleich:&lt;/p&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:600px;&#34; class=&#34;profvis html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;message&#34;:{&#34;prof&#34;:{&#34;time&#34;:[1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,13,13,13,13,14,14,15,15,15,15,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,20,20,20,20,21,21,21,21,22,22,22,22,23,23,23,23,24,24,24,24,25,25,25,25,26,26,26,26,26,26,26,27,27,27,27,27,27,28,28,28,28,28,28,28,29,29,29,29,29,30,30,30,30,30,30,30,30,31,31,31,32,32,32,32,32,33,33,33,33,33,33,34,34,34,34,34,34,35,35,35,35,35,35,36,36,36,36,36,37,37,37,37,37,37,38,38,38,38,38,38,38,39,39,39,39,39,39,39,40,40,40,40,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,43,43,43,43,43,43,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,46,47,48,48,48,48,48,48,49,49,49,49,49,49,50,50,50,50,50,50,50,50,51,51,51,51,52,52,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,56,56,57,57,57,57,57,57,57,58,58,58,58,58,58,58,59,59,59,59,59,60,60,60,60,60,60,60,61,61,61,61,61,61,62,62,62,62,62,62,62,62,62,62,63,63,63,63,63,64,64,64,64,64,65,65,65,65,65,65,65,66,66,66,66,66,66,66,67,67,67,67,67,68,68,68,68,68,68,68,69,69,69,69,69,69,69,70,70,70,70,70,70,71,71,71,71,71,72,72,72,73,73,73,73,73,73,73,74,74,74,74,74,74,74,74,74,75,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,77,77,78,78,78,78,78,78,79,79,79,80,80,80,80,81,81,81,81,81,81,82,82,82,82,82,82,82,82,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,85,85,85,85,85,85,85,85,86,86,86,86,86,86,86,86,86,87,87,87,87,87,87,87,87,87,87,87,87,88,88,88,88,88,88,89,89,89,89,89,89,90,90,90,90,90,90,90,90,90,91,92,92,92,92,93,93,93,93,93,93,93,93,94,94,94,94,95,95,95,96,96,96,96,96,97,97,97,97,97,98,98,98,98,98,98,98,98,98,98,99,99,99,99,99,99,99,100,100,100,100,100,100,100,100,101,101,101,101,101,101,102,102,102,102,103,103,103,103,103,103,104,104,104,104,104,104,105,105,105,105,105,105,105,106,106,106,106,106,106,107,107,107,107,107,108,108,108,108,108,108,108,109,109,109,109,109,110,110,110,110,110,110,110,111,112,112,112,112,112,112,112,112,112,113,113,113,113,114,114,114,114,114,114,115,115,115,115,115,115,115,115,115,115,116,116,116,116,116,116,116,117,117,117,117,117,117,118,118,118,118,118,119,119,119,119,119,119,120,120,120,120,121,121,121,121,121,121,122,122,122,122,122,122,123,123,123,123,123,123,123,124,125,125,125,125,125,125,126,126,126,126,126,126,127,127,127,127,128,128,128,128,128,128,128,129,130,131,131,131,131,131,131,131,131,131,132,132,132,132,132,133,133,133,133,133,134,134,134,134,134,134,135,135,135,135,135,135,135,135,136,136,136,136,136,136,137,137,137,137,138,138,138,138,138,138,139,139,139,139,139,139,139,140,140,141,141,141,141,141,142,142,142,142,142,142,142,143,143,143,143,143,144,144,144,144,144,144,144,144,144,144,144,144,145,145,145,145,145,146,146,146,146,146,146,147,147,147,147,147,147,147,148,148,148,148,149,149,149,149,149,149,149,149,149,149,149,150,150,150,150,150,151,151,151,151,151,151,151,151,152,153,153,153,153,153,153,154,154,154,154,154,154,154,154,154,155,155,155,155,155,156,156,157,157,157,157,157,157,157,157,158,158,158,158,158,158,159,159,159,159,159,160,160,160,161,161,161,161,161,161,162,162,162,163,163,163,163,163,163,163,163,164,164,164,164,164,165,165,165,165,165,165,166,166,166,166,166,166,167,167,167,167,167,167,168,168,169,169,170,170,170,170,171,171,172,172,172,172,172,172,172,173,173,173,173,173,173,173,173,174,174,174,174,174,174,175,175,175,175,175,175,176,176,176,176,177,178,179,179,179,179,179,179,179,179,180,180,180,180,180,180,180,181,181,181,181,181,181,181,181,182,182,182,182,182,182,182,182,183,183,183,183,183,183,184,184,184,184,184,184,184,184,184,185,185,185,185,185,186,186,186,186,187,187,187,187,187,187,187,187,188,188,188,188,188,188,188,189,189,189,189,189,189,189,189,189,190,190,190,190,191,191,191,191,191,191,191,192,192,192,192,192,192,192,192,192,192,193,193,193,193,193,193,194,194,195,196,196,196,196,196,196,197,198,198,198,198,198,198,198,198,198,198,199,199,199,199,199,200,200,200,200,200,200,201,201,201,201,201,201,202,202,202,202,202,202,202,202,202,202,203,203,203,203,203,203,203,203,203,204,204,204,204,204,204,204,205,205,205,205,205,206,206,206,206,206,206,206,206,206,207,207,207,207,208,208,208,208,208,208,208,208,209,209,209,209,209,209,209,209,210,210,210,210,210,210,211,211,211,211,211,211,212,212,212,212,212,212,212,212,213,213,213,213,213,213,214,214,214,214,214,214,215,215,215,215,215,215,215,215,216,216,216,216,216,216,216,216,217,217,217,217,217,217,217,217,217,217,218,218,218,218,219,219,219,219,219,219,219,220,220,220,220,220,220,220,220,221,221,221,221,221,222,222,222,222,222,222,222,223,223,223,223,223,223,223,224,224,224,224,224,225,225,225,225,225,225,226,226,226,226,226,226,226,226,226,226,227,227,227,227,228,228,228,228,228,229,229,229,229,229,229,230,230,230,230,230,230,230,230,230,231,231,231,231,231,231,231,232,232,232,232,232,233,233,233,233,233,233,234,234,234,234,234,234,234,234,234,234,235,235,235,235,235,235,236,236,236,236,236,236,236,236,236,236,237,237,237,237,237,237,237,237,237,238,238,238,238,238,238,238,238,239,239,239,239,239,239,239,239,240,240,240,240,240,240,241,241,241,241,241,241,242,242,242,242,242,242,242,242,242,242,242,242,242,243,243,243,243,243,243,243,244,244,244,244,244,245,245,245,245,245,245,246,247,248,248,248,248,248,248,249,249,249,249,249,249,249,249,250,250,250,250,250,250,250,250,250,250,250,250,250,251,251,251,251,251,251,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,253,253,254,254,254,254,254,254,254,255,255,255,255,255,256,256,256,256,256,256,256,257,257,257,257,258,258,258,258,258,258,258,259,260,260,260,260,260,260,261,261,261,261,261,261,262,262,262,262,262,262,262,263,263,263,263,263,264,264,264,264,264,264,265,265,265,265,265,265,265,266,266,266,266,266,266,267,267,267,267,267,267,268,268,268,268,268,268,268,268,269,269,269,269,269,269,270,270,270,270,271,271,271,271,271,271,271,271,271,272,272,272,272,272,272,272,273,273,273,274,274,274,274,274,274,274,275,275,275,275,275,275,275,275,275,276,276,276,276,276,276,276,276,276,277,277,277,277,277,277,277,277,278,278,278,278,278,278,278,279,279,279,279,279,279,279,279,280,280,280,280,280,280,280,281,281,281,281,281,281,281,281,281,282,282,282,282,282,282,282,283,283,283,283,283,283,284,284,284,284,284,284,284,285,285,285,285,285,285,285,285,286,286,286,286,286,286,286,287,287,287,287,287,287,288,288,288,288,288,289,289,289,289,289,289,289,289,289,290,290,290,290,290,290,291,291,291,291,291,291,291,291,292,292,292,292,292,292,292,292,293,293,293,293,294,294,294,294,294,294,294,294,294,294,295,295,295,295,296,296,296,296,296,296,296,297,297,297,297,297,297,298,298,298,298,299,299,299,299,299,299,299,299,300,300,300,300,300,300,300,301,301,301,302,303,303,303,303,303,303,303,303,303,304,304,304,304,304,304,304,304,304,305,306,306,306,306,306,306,306,306,306,306,306,307,307,307,307,307,307,307,307,308,308,308,308,308,308,308,309,309,309,309,309,309,309,309,309,310,310,310,310,310,310,310,310,310,310,311,311,311,311,311,311,312,312,312,312,313,313,313,313,313,313,313,313,313,313,313,313,314,314,314,314,314,314,315,315,315,315,315,315,315,315,315,315,316,316,316,316,316,317,317,317,317,317,317,317,318,318,318,318,318,318,319,319,319,319,319,319,319,320,320,320,320,320,320,321,321,321,321,321,321,321,322,322,322,322,322,322,322,322,322,323,323,323,323,324,324,324,324,324,324,325,325,325,325,325,326,326,326,326,326,326,326,326,326,326,326,327,327,327,327,328,329,329,329,329,329,329,329,330,330,330,330,330,330,331,332,332,332,332,332,332,333,333,333,333,334,334,334,334,334,335,335,335,335,335,335,335,336,336,337,337,337,337,337,338,338,338,338,338,338,339,339,339,339,339,339,339,339,340,340,340,340,340,340,340,341,341,341,341,341,341,341,342,342,342,342,342,342,343,343,343,343,343,344,344,344,344,345,345,345,345,345,345,346,346,346,346,346,346,346,347,347,347,347,348,348,349,349,349,349,350,350,350,350,350,350,350,351,352,352,352,352,352,352,352,352,352,353,354,354,354,354,355,355,355,355,356,356,356,356,357,357,357,357,357,357,357,357,358,358,358,358,358,358,359,359,359,359,359,359,359,359,359,360,360,360,360,361,361,361,361,361,362,362,362,362,362,362,362,362,362,363,363,363,363,363,364,364,364,364,364,364,365,365,365,366,366,366,366,366,366,367,367,367,367,367,367,368,368,369,369,369,369,369,369,369,370,370,370,370,370,370,370,370,370,370,371,371,371,371,371,372,372,372,372,372,372,372,372,372,372,373,373,373,373,373,373,373,373,373,374,374,374,374,375,375,375,375,375,375,375,376,376,376,376,376,376,376,377,377,377,378,378,378,378,378,378,378,378,378,378,379,379,379,379,379,379,379,380,380,380,380,380,380,380,380,380,381,381,381,381,381,381,381,382,382,382,382,382,382,383,383,384,384,384,384,384,384,385,385,385,385,385,385,385,385,385,385,385,386,386,386,386,386,386,386,387,387,387,387,387,387,388,389,389,390,390,390,390,390,390,390,390,390,391,391,391,391,392,392,392,392,392,392,392,392,392,392,392,393,393,393,393,393,394,394,394,394,394,394,394,394,395,395,395,395,396,396,396,396,396,397,397,397,397,397,397,398,398,398,398,399,399,399,399,399,399,400,400,400,400,400,400,400,401,401,401,401,402,402,402,402,402,402,402,403,404,404,404,404,404,404,404,404,404,404,404,405,405,405,405,406,406,406,406,406,406,406,407,407,407,407,407,407,407,407,407,408,408,408,408,408,408,408,408,408,409,409,409,409,409,409,409,409,409,409,410,410,410,410,410,410,411,411,411,411,411,411,411,411,411,411,411,412,412,412,412,413,413,413,413,413,413,413,413,414,415,415,415,415,415,415,415,416,416,416,416,416,416,416,416,417,417,417,417,417,417,418,419,420,420,420,420,420,420,420,421,421,421,421,421,422,422,422,422,422,423,423,423,423,423,423,423,424,424,424,424,424,425,425,425,426,426,426,426,426,426,426,427,427,427,427,427,427,428,428,428,428,428,428,429,429,429,429,429,429,429,430,430,430,430,430,431,431,432,433,433,433,433,434,434,434,434,434,434,434,435,435,435,435,435,435,436,436,436,436,436,436,436,436,436,437,437,437,437,437,437,438,438,438,438,438,438,438,438,438,439,439,439,439,439,440,440,440,440,440,440,441,441,441,441,441,442,442,442,443,443,443,443,443,443,443,444,444,444,444,444,445,446,446,446,446,446,446,447,447,447,447,448,448,448,448,449,449,449,450,450,450,450,450,450,451,451,451,451,451,451,451,451,451,451,452,452,452,452,453,453,453,453,453,453,454,454,454,454,454,454,454,454,454,454,455,455,455,455,455,455,456,456,456,456,456,456,456,456,456,457,457,457,457,457,457,457,457,458,458,459,459,459,459,459,459,459,459,459,460,460,460,460,460,460,460,461,461,461,461,461,461,462,462,462,462,462,462,463,463,463,464,464,464,464,464,464,464,465,466,466,466,466,466,467,467,467,467,467,467,468,468,468,468,469,469,469,469,469,469,469,469,469,469,470,470,470,470,470,470,470,471,471,471,471,471,471,471,472,472,472,472,472,472,472,472,472,472,473,473,473,473,473,473,473,473,473,474,474,474,474,474,474,474,474,474,475,475,475,475,475,475,475,476,476,476,476,476,476,476,477,477,477,477,477,477,477,478,478,478,478,478,478,479,479,479,479,479,479,480,480,480,480,480,480,480,480,481,481,481,481,482,482,482,482,482,482,483,483,483,483,483,483,484,484,484,484,484,484,485,485,485,485,485,485,485,486,486,486,486,486,486,486,487,487,487,487,487,487,487,487,487,488,488,488,488,488,488,488,488,488,488,488,488,489,489,489,489,489,489,489,489,490,490,490,490,490,490,491,491,491,491,491,491,491,491,492,492,492,492,492,492,492,492,492,492,492,493,493,493,493,494,494,494,494,494,494,494,494,494,494,494,494,494,495,495,495,495,495,495,496,496,496,496,496,497,497,497,498,498,498,498,499,499,499,499,499,499,500,500,500,500,500,501,501,501,502,502,502,502,502,502,503,503,503,503,504,504,504,504,504,505,505,505,505,506,506,506,506,507,507,507,507,507,508,508,508,508,508,508,508,509,509,509,509,509,509,510,510,510,510,510,511,512,512,512,512,512,512,512,513,513,513,513,513,513,513,513,513,513,513,513,513,514,515,515,515,515,515,515,516,516,516,516,516,517,518,518,518,518,518,519,519,519,519,519,519,519,520,520,520,520,520,520,520,520,520,520,521,521,521,521,521,521,522,522,522,522,522,522,522,523,523,523,523,523,523,523,524,525,525,525,525,525,525,526,526,526,527,527,527,527,527,527,527,527,527,528,528,528,528,528,529,529,529,529,529,529,530,530,530,530,531,531,531,531,531,531,531,531,532,532,532,532,532,533,533,533,533,533,533,533,534,534,534,534,535,535,535,535,535,535,535,536,536,536,536,536,536,536,537,537,537,537,537,537,537,537,538,538,538,538,538,538,538,538,538,538,539,539,539,539,539,539,539,540,540,540,540,541,542,543,543,544,544,544,544,545,545,545,545,545,545,545,545,546,546,546,546,546,547,547,547,547,547,547,548,548,548,548,548,548,549,550,550,550,550,550,551,551,551,551,551,551,551,552,552,552,552,552,552,552,553,553,553,553,553,553,553,553,553,554,554,554,554,554,554,554,554,554,554,554],&#34;depth&#34;:[6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,4,3,2,1,2,1,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,3,2,1,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,1,1,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,3,2,1,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,1,4,3,2,1,8,7,6,5,4,3,2,1,4,3,2,1,3,2,1,5,4,3,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,1,9,8,7,6,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,1,6,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,1,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,3,2,1,6,5,4,3,2,1,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,2,1,2,1,4,3,2,1,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,1,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,2,1,1,6,5,4,3,2,1,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,1,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,1,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,4,3,2,1,10,9,8,7,6,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,3,2,1,1,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,4,3,2,1,1,7,6,5,4,3,2,1,6,5,4,3,2,1,1,6,5,4,3,2,1,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,2,1,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,2,1,4,3,2,1,7,6,5,4,3,2,1,1,9,8,7,6,5,4,3,2,1,1,4,3,2,1,4,3,2,1,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,2,1,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,1,2,1,9,8,7,6,5,4,3,2,1,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,1,11,10,9,8,7,6,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,4,3,2,1,8,7,6,5,4,3,2,1,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,1,1,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,2,1,1,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,1,6,5,4,3,2,1,4,3,2,1,4,3,2,1,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,1,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,3,2,1,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,3,2,1,6,5,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,1,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,1,6,5,4,3,2,1,5,4,3,2,1,1,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,1,6,5,4,3,2,1,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,1,1,2,1,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,1,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1],&#34;label&#34;:[&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;condition.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;colSums&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;asNamespace&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;list.names&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;local&#34;,&#34;local&#34;,&#34;alist&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;rhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;list.names&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;::&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;lhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;local&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;local&#34;,&#34;rhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;local&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;local&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;local&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;colSums&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;alist&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;local&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;::&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;rhs_or_expr&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;::&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[.table&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;local&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;lhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;condition.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;lhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[.table&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;rhs.parsedFormula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;tail.default&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;condition.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;asNamespace&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;condition.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;local&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;list.names&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;::&#34;,&#34;rhs_or_expr&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;local&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;::&#34;,&#34;rhs_or_expr&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;lhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;condition.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;colSums&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;rhs_or_expr&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;rhs.parsedFormula&#34;,&#34;rhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[.data.frame&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[.table&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;rhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;lhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;list.names&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;local&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;::&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[.data.frame&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;dim.data.frame&#34;,&#34;ncol&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;asNamespace&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;local&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;lhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;[.table&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;local&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;rhs_or_expr&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;condition.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;tail.default&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;match.arg&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;asNamespace&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;unique.default&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;::&#34;,&#34;rhs_or_expr&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;rhs_or_expr&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;rhs_or_expr&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;rhs_or_expr&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;local&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;alist&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;rhs.formula&#34;,&#34;mosaic_formula_q&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;asNamespace&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;joinTwoFrames&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;colSums&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;local&#34;,&#34;local&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;paste&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;list.names&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;&lt;Anonymous&gt;&#34;,&#34;joinFrames&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;local&#34;,&#34;logical2factor.data.frame&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;table&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;evalFormula&#34;,&#34;mosaic_tally.formula&#34;,&#34;prop&#34;,&#34;diffprop&#34;,&#34;local&#34;],&#34;filenum&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],&#34;linenum&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],&#34;memalloc&#34;:[28.8247222900391,28.8247222900391,28.8247222900391,28.8247222900391,28.8247222900391,28.8247222900391,29.9927139282227,29.9927139282227,29.9927139282227,29.9927139282227,29.9927139282227,29.9927139282227,31.1444549560547,31.1444549560547,31.1444549560547,31.1444549560547,31.1444549560547,31.1444549560547,31.1444549560547,31.1444549560547,31.7257461547852,31.7257461547852,31.7257461547852,31.7257461547852,31.7257461547852,31.7257461547852,32.3034515380859,32.3034515380859,32.3034515380859,32.3034515380859,32.3034515380859,32.3034515380859,33.436637878418,33.436637878418,33.436637878418,33.436637878418,33.436637878418,33.436637878418,33.436637878418,33.436637878418,33.436637878418,34.2276763916016,34.2276763916016,34.2276763916016,34.2276763916016,34.2276763916016,34.2276763916016,35.1266479492188,35.1266479492188,35.1266479492188,35.1266479492188,35.1266479492188,35.1266479492188,35.1266479492188,36.2788848876953,36.2788848876953,36.2788848876953,36.2788848876953,36.2788848876953,36.2788848876953,36.2788848876953,36.2788848876953,36.836669921875,36.836669921875,36.836669921875,36.836669921875,37.4085006713867,37.4085006713867,37.4085006713867,37.4085006713867,37.4085006713867,37.4085006713867,37.9805374145508,37.9805374145508,37.9805374145508,37.9805374145508,37.9805374145508,37.9805374145508,37.9805374145508,37.9805374145508,37.9805374145508,28.5576705932617,28.5576705932617,28.5576705932617,28.5576705932617,29.3943405151367,29.3943405151367,30.5408554077148,30.5408554077148,30.5408554077148,30.5408554077148,31.114143371582,31.114143371582,31.114143371582,31.114143371582,31.114143371582,31.114143371582,31.114143371582,32.2604064941406,32.2604064941406,32.2604064941406,32.2604064941406,33.2814636230469,33.2814636230469,33.2814636230469,33.2814636230469,33.2814636230469,33.2814636230469,33.2814636230469,33.2814636230469,33.2814636230469,34.4283294677734,34.4283294677734,34.4283294677734,34.4283294677734,34.4283294677734,34.4283294677734,34.4283294677734,35.0072402954102,35.0072402954102,35.0072402954102,35.0072402954102,35.5806121826172,35.5806121826172,35.5806121826172,35.5806121826172,36.1515960693359,36.1515960693359,36.1515960693359,36.1515960693359,36.724967956543,36.724967956543,36.724967956543,36.724967956543,37.29833984375,37.29833984375,37.29833984375,37.29833984375,37.8707733154297,37.8707733154297,37.8707733154297,37.8707733154297,28.5866622924805,28.5866622924805,28.5866622924805,28.5866622924805,28.5866622924805,28.5866622924805,28.5866622924805,29.7335891723633,29.7335891723633,29.7335891723633,29.7335891723633,29.7335891723633,29.7335891723633,30.6413192749023,30.6413192749023,30.6413192749023,30.6413192749023,30.6413192749023,30.6413192749023,30.6413192749023,31.4497833251953,31.4497833251953,31.4497833251953,31.4497833251953,31.4497833251953,32.6084594726562,32.6084594726562,32.6084594726562,32.6084594726562,32.6084594726562,32.6084594726562,32.6084594726562,32.6084594726562,33.4279479980469,33.4279479980469,33.4279479980469,33.9698028564453,33.9698028564453,33.9698028564453,33.9698028564453,33.9698028564453,34.5397262573242,34.5397262573242,34.5397262573242,34.5397262573242,34.5397262573242,34.5397262573242,35.1130981445312,35.1130981445312,35.1130981445312,35.1130981445312,35.1130981445312,35.1130981445312,35.6845169067383,35.6845169067383,35.6845169067383,35.6845169067383,35.6845169067383,35.6845169067383,36.2613983154297,36.2613983154297,36.2613983154297,36.2613983154297,36.2613983154297,36.7891082763672,36.7891082763672,36.7891082763672,36.7891082763672,36.7891082763672,36.7891082763672,37.7821884155273,37.7821884155273,37.7821884155273,37.7821884155273,37.7821884155273,37.7821884155273,37.7821884155273,28.0040130615234,28.0040130615234,28.0040130615234,28.0040130615234,28.0040130615234,28.0040130615234,28.0040130615234,28.6965942382812,28.6965942382812,28.6965942382812,28.6965942382812,29.8292999267578,29.8292999267578,29.8292999267578,29.8292999267578,29.8292999267578,29.8292999267578,29.8292999267578,29.8292999267578,30.963508605957,30.963508605957,30.963508605957,30.963508605957,30.963508605957,30.963508605957,30.963508605957,30.963508605957,31.9656524658203,31.9656524658203,31.9656524658203,31.9656524658203,31.9656524658203,31.9656524658203,33.0813980102539,33.0813980102539,33.0813980102539,33.0813980102539,33.0813980102539,33.0813980102539,33.9930419921875,33.9930419921875,33.9930419921875,33.9930419921875,33.9930419921875,33.9930419921875,33.9930419921875,33.9930419921875,33.9930419921875,34.5307464599609,35.6030120849609,36.1488418579102,36.1488418579102,36.1488418579102,36.1488418579102,36.1488418579102,36.1488418579102,36.6832733154297,36.6832733154297,36.6832733154297,36.6832733154297,36.6832733154297,36.6832733154297,37.230583190918,37.230583190918,37.230583190918,37.230583190918,37.230583190918,37.230583190918,37.230583190918,37.230583190918,37.8244094848633,37.8244094848633,37.8244094848633,37.8244094848633,28.1951141357422,28.1951141357422,28.1951141357422,28.1951141357422,28.1951141357422,28.1951141357422,28.1951141357422,28.1951141357422,28.1951141357422,28.1951141357422,28.1951141357422,28.7576599121094,28.7576599121094,28.7576599121094,28.7576599121094,28.7576599121094,28.7576599121094,28.7576599121094,28.7576599121094,28.7576599121094,29.7017135620117,29.7017135620117,29.7017135620117,29.7017135620117,29.7017135620117,29.7017135620117,30.3562088012695,30.3562088012695,30.3562088012695,30.3562088012695,30.3562088012695,30.3562088012695,30.3562088012695,30.3562088012695,30.3562088012695,30.9565277099609,30.9565277099609,31.5913238525391,31.5913238525391,31.5913238525391,31.5913238525391,31.5913238525391,31.5913238525391,31.5913238525391,32.2082672119141,32.2082672119141,32.2082672119141,32.2082672119141,32.2082672119141,32.2082672119141,32.2082672119141,32.829460144043,32.829460144043,32.829460144043,32.829460144043,32.829460144043,33.4149551391602,33.4149551391602,33.4149551391602,33.4149551391602,33.4149551391602,33.4149551391602,33.4149551391602,34.0628356933594,34.0628356933594,34.0628356933594,34.0628356933594,34.0628356933594,34.0628356933594,34.7673568725586,34.7673568725586,34.7673568725586,34.7673568725586,34.7673568725586,34.7673568725586,34.7673568725586,34.7673568725586,34.7673568725586,34.7673568725586,35.3235855102539,35.3235855102539,35.3235855102539,35.3235855102539,35.3235855102539,35.8715744018555,35.8715744018555,35.8715744018555,35.8715744018555,35.8715744018555,36.9748458862305,36.9748458862305,36.9748458862305,36.9748458862305,36.9748458862305,36.9748458862305,36.9748458862305,38.0775985717773,38.0775985717773,38.0775985717773,38.0775985717773,38.0775985717773,38.0775985717773,38.0775985717773,28.9152755737305,28.9152755737305,28.9152755737305,28.9152755737305,28.9152755737305,29.4851837158203,29.4851837158203,29.4851837158203,29.4851837158203,29.4851837158203,29.4851837158203,29.4851837158203,30.6219482421875,30.6219482421875,30.6219482421875,30.6219482421875,30.6219482421875,30.6219482421875,30.6219482421875,31.7673492431641,31.7673492431641,31.7673492431641,31.7673492431641,31.7673492431641,31.7673492431641,32.5623245239258,32.5623245239258,32.5623245239258,32.5623245239258,32.5623245239258,33.4820709228516,33.4820709228516,33.4820709228516,34.6026153564453,34.6026153564453,34.6026153564453,34.6026153564453,34.6026153564453,34.6026153564453,34.6026153564453,35.3824615478516,35.3824615478516,35.3824615478516,35.3824615478516,35.3824615478516,35.3824615478516,35.3824615478516,35.3824615478516,35.3824615478516,35.9958419799805,36.6015548706055,36.6015548706055,36.6015548706055,36.6015548706055,36.6015548706055,36.6015548706055,36.6015548706055,36.6015548706055,37.3677062988281,37.3677062988281,37.3677062988281,37.3677062988281,37.3677062988281,37.3677062988281,37.3677062988281,37.3677062988281,37.3677062988281,37.3677062988281,37.9688720703125,37.9688720703125,37.9688720703125,37.9688720703125,37.9688720703125,37.9688720703125,28.3887405395508,28.3887405395508,28.3887405395508,28.9813766479492,28.9813766479492,28.9813766479492,28.9813766479492,29.5545959472656,29.5545959472656,29.5545959472656,29.5545959472656,29.5545959472656,29.5545959472656,30.7063522338867,30.7063522338867,30.7063522338867,30.7063522338867,30.7063522338867,30.7063522338867,30.7063522338867,30.7063522338867,31.8740997314453,31.8740997314453,31.8740997314453,31.8740997314453,31.8740997314453,31.8740997314453,33.025276184082,33.025276184082,33.025276184082,33.025276184082,33.025276184082,33.025276184082,33.025276184082,33.025276184082,33.025276184082,33.5996704101562,33.5996704101562,33.5996704101562,33.5996704101562,33.5996704101562,33.5996704101562,33.5996704101562,33.5996704101562,34.7444229125977,34.7444229125977,34.7444229125977,34.7444229125977,34.7444229125977,34.7444229125977,34.7444229125977,34.7444229125977,34.7444229125977,35.3167190551758,35.3167190551758,35.3167190551758,35.3167190551758,35.3167190551758,35.3167190551758,35.3167190551758,35.3167190551758,35.3167190551758,35.3167190551758,35.3167190551758,35.3167190551758,36.4620056152344,36.4620056152344,36.4620056152344,36.4620056152344,36.4620056152344,36.4620056152344,37.5837097167969,37.5837097167969,37.5837097167969,37.5837097167969,37.5837097167969,37.5837097167969,38.1513671875,38.1513671875,38.1513671875,38.1513671875,38.1513671875,38.1513671875,38.1513671875,38.1513671875,38.1513671875,28.4632263183594,29.0082778930664,29.0082778930664,29.0082778930664,29.0082778930664,29.9781341552734,29.9781341552734,29.9781341552734,29.9781341552734,29.9781341552734,29.9781341552734,29.9781341552734,29.9781341552734,30.5750427246094,30.5750427246094,30.5750427246094,30.5750427246094,31.1489028930664,31.1489028930664,31.1489028930664,32.2951049804688,32.2951049804688,32.2951049804688,32.2951049804688,32.2951049804688,32.8458786010742,32.8458786010742,32.8458786010742,32.8458786010742,32.8458786010742,33.9765777587891,33.9765777587891,33.9765777587891,33.9765777587891,33.9765777587891,33.9765777587891,33.9765777587891,33.9765777587891,33.9765777587891,33.9765777587891,34.5606842041016,34.5606842041016,34.5606842041016,34.5606842041016,34.5606842041016,34.5606842041016,34.5606842041016,35.6629867553711,35.6629867553711,35.6629867553711,35.6629867553711,35.6629867553711,35.6629867553711,35.6629867553711,35.6629867553711,36.7827224731445,36.7827224731445,36.7827224731445,36.7827224731445,36.7827224731445,36.7827224731445,37.8995361328125,37.8995361328125,37.8995361328125,37.8995361328125,28.7665252685547,28.7665252685547,28.7665252685547,28.7665252685547,28.7665252685547,28.7665252685547,29.9361267089844,29.9361267089844,29.9361267089844,29.9361267089844,29.9361267089844,29.9361267089844,31.0862274169922,31.0862274169922,31.0862274169922,31.0862274169922,31.0862274169922,31.0862274169922,31.0862274169922,32.2452621459961,32.2452621459961,32.2452621459961,32.2452621459961,32.2452621459961,32.2452621459961,33.3766326904297,33.3766326904297,33.3766326904297,33.3766326904297,33.3766326904297,34.5004806518555,34.5004806518555,34.5004806518555,34.5004806518555,34.5004806518555,34.5004806518555,34.5004806518555,35.6414031982422,35.6414031982422,35.6414031982422,35.6414031982422,35.6414031982422,36.7768173217773,36.7768173217773,36.7768173217773,36.7768173217773,36.7768173217773,36.7768173217773,36.7768173217773,37.3449020385742,28.2209930419922,28.2209930419922,28.2209930419922,28.2209930419922,28.2209930419922,28.2209930419922,28.2209930419922,28.2209930419922,28.2209930419922,29.3734664916992,29.3734664916992,29.3734664916992,29.3734664916992,30.5286712646484,30.5286712646484,30.5286712646484,30.5286712646484,30.5286712646484,30.5286712646484,31.1336212158203,31.1336212158203,31.1336212158203,31.1336212158203,31.1336212158203,31.1336212158203,31.1336212158203,31.1336212158203,31.1336212158203,31.1336212158203,32.2645645141602,32.2645645141602,32.2645645141602,32.2645645141602,32.2645645141602,32.2645645141602,32.2645645141602,33.3904418945312,33.3904418945312,33.3904418945312,33.3904418945312,33.3904418945312,33.3904418945312,34.5332565307617,34.5332565307617,34.5332565307617,34.5332565307617,34.5332565307617,35.6762847900391,35.6762847900391,35.6762847900391,35.6762847900391,35.6762847900391,35.6762847900391,36.8087615966797,36.8087615966797,36.8087615966797,36.8087615966797,37.9287261962891,37.9287261962891,37.9287261962891,37.9287261962891,37.9287261962891,37.9287261962891,28.2511901855469,28.2511901855469,28.2511901855469,28.2511901855469,28.2511901855469,28.2511901855469,29.4002838134766,29.4002838134766,29.4002838134766,29.4002838134766,29.4002838134766,29.4002838134766,29.4002838134766,30.1149291992188,31.1147689819336,31.1147689819336,31.1147689819336,31.1147689819336,31.1147689819336,31.1147689819336,32.2664642333984,32.2664642333984,32.2664642333984,32.2664642333984,32.2664642333984,32.2664642333984,33.4145584106445,33.4145584106445,33.4145584106445,33.4145584106445,33.9877014160156,33.9877014160156,33.9877014160156,33.9877014160156,33.9877014160156,33.9877014160156,33.9877014160156,35.1313323974609,35.7007293701172,36.8231735229492,36.8231735229492,36.8231735229492,36.8231735229492,36.8231735229492,36.8231735229492,36.8231735229492,36.8231735229492,36.8231735229492,37.9566497802734,37.9566497802734,37.9566497802734,37.9566497802734,37.9566497802734,28.8498764038086,28.8498764038086,28.8498764038086,28.8498764038086,28.8498764038086,29.4257659912109,29.4257659912109,29.4257659912109,29.4257659912109,29.4257659912109,29.4257659912109,30.5861892700195,30.5861892700195,30.5861892700195,30.5861892700195,30.5861892700195,30.5861892700195,30.5861892700195,30.5861892700195,31.1594848632812,31.1594848632812,31.1594848632812,31.1594848632812,31.1594848632812,31.1594848632812,32.2990417480469,32.2990417480469,32.2990417480469,32.2990417480469,33.4421234130859,33.4421234130859,33.4421234130859,33.4421234130859,33.4421234130859,33.4421234130859,34.5859985351562,34.5859985351562,34.5859985351562,34.5859985351562,34.5859985351562,34.5859985351562,34.5859985351562,35.7291946411133,35.7291946411133,36.2946548461914,36.2946548461914,36.2946548461914,36.2946548461914,36.2946548461914,37.0558319091797,37.0558319091797,37.0558319091797,37.0558319091797,37.0558319091797,37.0558319091797,37.0558319091797,37.6095199584961,37.6095199584961,37.6095199584961,37.6095199584961,37.6095199584961,38.159423828125,38.159423828125,38.159423828125,38.159423828125,38.159423828125,38.159423828125,38.159423828125,38.159423828125,38.159423828125,38.159423828125,38.159423828125,38.159423828125,28.5077209472656,28.5077209472656,28.5077209472656,28.5077209472656,28.5077209472656,29.6678161621094,29.6678161621094,29.6678161621094,29.6678161621094,29.6678161621094,29.6678161621094,30.8403778076172,30.8403778076172,30.8403778076172,30.8403778076172,30.8403778076172,30.8403778076172,30.8403778076172,31.4179534912109,31.4179534912109,31.4179534912109,31.4179534912109,32.0014801025391,32.0014801025391,32.0014801025391,32.0014801025391,32.0014801025391,32.0014801025391,32.0014801025391,32.0014801025391,32.0014801025391,32.0014801025391,32.0014801025391,32.5784378051758,32.5784378051758,32.5784378051758,32.5784378051758,32.5784378051758,33.7248458862305,33.7248458862305,33.7248458862305,33.7248458862305,33.7248458862305,33.7248458862305,33.7248458862305,33.7248458862305,34.6918640136719,35.4442138671875,35.4442138671875,35.4442138671875,35.4442138671875,35.4442138671875,35.4442138671875,36.5775375366211,36.5775375366211,36.5775375366211,36.5775375366211,36.5775375366211,36.5775375366211,36.5775375366211,36.5775375366211,36.5775375366211,37.7004241943359,37.7004241943359,37.7004241943359,37.7004241943359,37.7004241943359,38.1653060913086,38.1653060913086,29.1262741088867,29.1262741088867,29.1262741088867,29.1262741088867,29.1262741088867,29.1262741088867,29.1262741088867,29.1262741088867,30.1061096191406,30.1061096191406,30.1061096191406,30.1061096191406,30.1061096191406,30.1061096191406,30.869384765625,30.869384765625,30.869384765625,30.869384765625,30.869384765625,32.0333099365234,32.0333099365234,32.0333099365234,33.1826095581055,33.1826095581055,33.1826095581055,33.1826095581055,33.1826095581055,33.1826095581055,34.3260040283203,34.3260040283203,34.3260040283203,34.8758773803711,34.8758773803711,34.8758773803711,34.8758773803711,34.8758773803711,34.8758773803711,34.8758773803711,34.8758773803711,35.5445251464844,35.5445251464844,35.5445251464844,35.5445251464844,35.5445251464844,36.6708374023438,36.6708374023438,36.6708374023438,36.6708374023438,36.6708374023438,36.6708374023438,37.7855224609375,37.7855224609375,37.7855224609375,37.7855224609375,37.7855224609375,37.7855224609375,28.5623779296875,28.5623779296875,28.5623779296875,28.5623779296875,28.5623779296875,28.5623779296875,29.1281890869141,29.1281890869141,30.2750396728516,30.2750396728516,31.2013931274414,31.2013931274414,31.2013931274414,31.2013931274414,31.9949722290039,31.9949722290039,32.5573196411133,32.5573196411133,32.5573196411133,32.5573196411133,32.5573196411133,32.5573196411133,32.5573196411133,33.1184005737305,33.1184005737305,33.1184005737305,33.1184005737305,33.1184005737305,33.1184005737305,33.1184005737305,33.1184005737305,34.2508239746094,34.2508239746094,34.2508239746094,34.2508239746094,34.2508239746094,34.2508239746094,34.8190612792969,34.8190612792969,34.8190612792969,34.8190612792969,34.8190612792969,34.8190612792969,35.3678970336914,35.3678970336914,35.3678970336914,35.3678970336914,36.498908996582,37.6159744262695,28.4966506958008,28.4966506958008,28.4966506958008,28.4966506958008,28.4966506958008,28.4966506958008,28.4966506958008,28.4966506958008,29.6429595947266,29.6429595947266,29.6429595947266,29.6429595947266,29.6429595947266,29.6429595947266,29.6429595947266,30.2891006469727,30.2891006469727,30.2891006469727,30.2891006469727,30.2891006469727,30.2891006469727,30.2891006469727,30.2891006469727,30.9023590087891,30.9023590087891,30.9023590087891,30.9023590087891,30.9023590087891,30.9023590087891,30.9023590087891,30.9023590087891,31.6101379394531,31.6101379394531,31.6101379394531,31.6101379394531,31.6101379394531,31.6101379394531,32.1874160766602,32.1874160766602,32.1874160766602,32.1874160766602,32.1874160766602,32.1874160766602,32.1874160766602,32.1874160766602,32.1874160766602,32.7575302124023,32.7575302124023,32.7575302124023,32.7575302124023,32.7575302124023,33.5048675537109,33.5048675537109,33.5048675537109,33.5048675537109,34.2266464233398,34.2266464233398,34.2266464233398,34.2266464233398,34.2266464233398,34.2266464233398,34.2266464233398,34.2266464233398,34.78662109375,34.78662109375,34.78662109375,34.78662109375,34.78662109375,34.78662109375,34.78662109375,35.4057083129883,35.4057083129883,35.4057083129883,35.4057083129883,35.4057083129883,35.4057083129883,35.4057083129883,35.4057083129883,35.4057083129883,36.0180053710938,36.0180053710938,36.0180053710938,36.0180053710938,36.5361251831055,36.5361251831055,36.5361251831055,36.5361251831055,36.5361251831055,36.5361251831055,36.5361251831055,37.2266845703125,37.2266845703125,37.2266845703125,37.2266845703125,37.2266845703125,37.2266845703125,37.2266845703125,37.2266845703125,37.2266845703125,37.2266845703125,37.9288558959961,37.9288558959961,37.9288558959961,37.9288558959961,37.9288558959961,37.9288558959961,28.6175155639648,28.6175155639648,29.1631240844727,29.8095932006836,29.8095932006836,29.8095932006836,29.8095932006836,29.8095932006836,29.8095932006836,30.3858413696289,31.2372817993164,31.2372817993164,31.2372817993164,31.2372817993164,31.2372817993164,31.2372817993164,31.2372817993164,31.2372817993164,31.2372817993164,31.2372817993164,31.7955856323242,31.7955856323242,31.7955856323242,31.7955856323242,31.7955856323242,32.4624557495117,32.4624557495117,32.4624557495117,32.4624557495117,32.4624557495117,32.4624557495117,33.0752563476562,33.0752563476562,33.0752563476562,33.0752563476562,33.0752563476562,33.0752563476562,33.6613922119141,33.6613922119141,33.6613922119141,33.6613922119141,33.6613922119141,33.6613922119141,33.6613922119141,33.6613922119141,33.6613922119141,33.6613922119141,34.3684692382812,34.3684692382812,34.3684692382812,34.3684692382812,34.3684692382812,34.3684692382812,34.3684692382812,34.3684692382812,34.3684692382812,35.0739135742188,35.0739135742188,35.0739135742188,35.0739135742188,35.0739135742188,35.0739135742188,35.0739135742188,35.787223815918,35.787223815918,35.787223815918,35.787223815918,35.787223815918,36.5619964599609,36.5619964599609,36.5619964599609,36.5619964599609,36.5619964599609,36.5619964599609,36.5619964599609,36.5619964599609,36.5619964599609,37.467170715332,37.467170715332,37.467170715332,37.467170715332,38.1488800048828,38.1488800048828,38.1488800048828,38.1488800048828,38.1488800048828,38.1488800048828,38.1488800048828,38.1488800048828,28.4887847900391,28.4887847900391,28.4887847900391,28.4887847900391,28.4887847900391,28.4887847900391,28.4887847900391,28.4887847900391,29.0467529296875,29.0467529296875,29.0467529296875,29.0467529296875,29.0467529296875,29.0467529296875,30.1667861938477,30.1667861938477,30.1667861938477,30.1667861938477,30.1667861938477,30.1667861938477,30.744873046875,30.744873046875,30.744873046875,30.744873046875,30.744873046875,30.744873046875,30.744873046875,30.744873046875,31.5140686035156,31.5140686035156,31.5140686035156,31.5140686035156,31.5140686035156,31.5140686035156,32.2671432495117,32.2671432495117,32.2671432495117,32.2671432495117,32.2671432495117,32.2671432495117,32.9584884643555,32.9584884643555,32.9584884643555,32.9584884643555,32.9584884643555,32.9584884643555,32.9584884643555,32.9584884643555,33.6813735961914,33.6813735961914,33.6813735961914,33.6813735961914,33.6813735961914,33.6813735961914,33.6813735961914,33.6813735961914,34.2531280517578,34.2531280517578,34.2531280517578,34.2531280517578,34.2531280517578,34.2531280517578,34.2531280517578,34.2531280517578,34.2531280517578,34.2531280517578,34.9545745849609,34.9545745849609,34.9545745849609,34.9545745849609,35.5039520263672,35.5039520263672,35.5039520263672,35.5039520263672,35.5039520263672,35.5039520263672,35.5039520263672,36.0629501342773,36.0629501342773,36.0629501342773,36.0629501342773,36.0629501342773,36.0629501342773,36.0629501342773,36.0629501342773,37.0602569580078,37.0602569580078,37.0602569580078,37.0602569580078,37.0602569580078,37.9144058227539,37.9144058227539,37.9144058227539,37.9144058227539,37.9144058227539,37.9144058227539,37.9144058227539,28.2335205078125,28.2335205078125,28.2335205078125,28.2335205078125,28.2335205078125,28.2335205078125,28.2335205078125,28.9752502441406,28.9752502441406,28.9752502441406,28.9752502441406,28.9752502441406,29.9480972290039,29.9480972290039,29.9480972290039,29.9480972290039,29.9480972290039,29.9480972290039,30.5197830200195,30.5197830200195,30.5197830200195,30.5197830200195,30.5197830200195,30.5197830200195,30.5197830200195,30.5197830200195,30.5197830200195,30.5197830200195,31.6515655517578,31.6515655517578,31.6515655517578,31.6515655517578,32.7492599487305,32.7492599487305,32.7492599487305,32.7492599487305,32.7492599487305,33.5648574829102,33.5648574829102,33.5648574829102,33.5648574829102,33.5648574829102,33.5648574829102,34.416015625,34.416015625,34.416015625,34.416015625,34.416015625,34.416015625,34.416015625,34.416015625,34.416015625,35.5485610961914,35.5485610961914,35.5485610961914,35.5485610961914,35.5485610961914,35.5485610961914,35.5485610961914,36.1096801757812,36.1096801757812,36.1096801757812,36.1096801757812,36.1096801757812,37.2300262451172,37.2300262451172,37.2300262451172,37.2300262451172,37.2300262451172,37.2300262451172,28.1117477416992,28.1117477416992,28.1117477416992,28.1117477416992,28.1117477416992,28.1117477416992,28.1117477416992,28.1117477416992,28.1117477416992,28.1117477416992,28.6844787597656,28.6844787597656,28.6844787597656,28.6844787597656,28.6844787597656,28.6844787597656,29.3188247680664,29.3188247680664,29.3188247680664,29.3188247680664,29.3188247680664,29.3188247680664,29.3188247680664,29.3188247680664,29.3188247680664,29.3188247680664,29.889404296875,29.889404296875,29.889404296875,29.889404296875,29.889404296875,29.889404296875,29.889404296875,29.889404296875,29.889404296875,30.5095901489258,30.5095901489258,30.5095901489258,30.5095901489258,30.5095901489258,30.5095901489258,30.5095901489258,30.5095901489258,31.1226425170898,31.1226425170898,31.1226425170898,31.1226425170898,31.1226425170898,31.1226425170898,31.1226425170898,31.1226425170898,31.8321914672852,31.8321914672852,31.8321914672852,31.8321914672852,31.8321914672852,31.8321914672852,32.3931655883789,32.3931655883789,32.3931655883789,32.3931655883789,32.3931655883789,32.3931655883789,33.0619506835938,33.0619506835938,33.0619506835938,33.0619506835938,33.0619506835938,33.0619506835938,33.0619506835938,33.0619506835938,33.0619506835938,33.0619506835938,33.0619506835938,33.0619506835938,33.0619506835938,33.6223602294922,33.6223602294922,33.6223602294922,33.6223602294922,33.6223602294922,33.6223602294922,33.6223602294922,34.2154235839844,34.2154235839844,34.2154235839844,34.2154235839844,34.2154235839844,34.9295501708984,34.9295501708984,34.9295501708984,34.9295501708984,34.9295501708984,34.9295501708984,35.5611953735352,36.2440338134766,36.9529800415039,36.9529800415039,36.9529800415039,36.9529800415039,36.9529800415039,36.9529800415039,37.5620498657227,37.5620498657227,37.5620498657227,37.5620498657227,37.5620498657227,37.5620498657227,37.5620498657227,37.5620498657227,38.1780548095703,38.1780548095703,38.1780548095703,38.1780548095703,38.1780548095703,38.1780548095703,38.1780548095703,38.1780548095703,38.1780548095703,38.1780548095703,38.1780548095703,38.1780548095703,38.1780548095703,28.6305541992188,28.6305541992188,28.6305541992188,28.6305541992188,28.6305541992188,28.6305541992188,29.2940063476562,29.2940063476562,29.2940063476562,29.2940063476562,29.2940063476562,29.2940063476562,29.2940063476562,29.2940063476562,29.2940063476562,29.8845291137695,29.8845291137695,29.8845291137695,29.8845291137695,29.8845291137695,29.8845291137695,29.8845291137695,29.8845291137695,30.4572601318359,30.4572601318359,30.4572601318359,30.4572601318359,30.4572601318359,30.4572601318359,30.4572601318359,31.0436630249023,31.0436630249023,31.0436630249023,31.0436630249023,31.0436630249023,31.6051559448242,31.6051559448242,31.6051559448242,31.6051559448242,31.6051559448242,31.6051559448242,31.6051559448242,32.5040969848633,32.5040969848633,32.5040969848633,32.5040969848633,33.6155090332031,33.6155090332031,33.6155090332031,33.6155090332031,33.6155090332031,33.6155090332031,33.6155090332031,34.3658218383789,35.0870971679688,35.0870971679688,35.0870971679688,35.0870971679688,35.0870971679688,35.0870971679688,35.6483688354492,35.6483688354492,35.6483688354492,35.6483688354492,35.6483688354492,35.6483688354492,36.394157409668,36.394157409668,36.394157409668,36.394157409668,36.394157409668,36.394157409668,36.394157409668,37.4949493408203,37.4949493408203,37.4949493408203,37.4949493408203,37.4949493408203,38.0707397460938,38.0707397460938,38.0707397460938,38.0707397460938,38.0707397460938,38.0707397460938,28.4776611328125,28.4776611328125,28.4776611328125,28.4776611328125,28.4776611328125,28.4776611328125,28.4776611328125,29.0378723144531,29.0378723144531,29.0378723144531,29.0378723144531,29.0378723144531,29.0378723144531,29.995719909668,29.995719909668,29.995719909668,29.995719909668,29.995719909668,29.995719909668,30.6548156738281,30.6548156738281,30.6548156738281,30.6548156738281,30.6548156738281,30.6548156738281,30.6548156738281,30.6548156738281,31.2257537841797,31.2257537841797,31.2257537841797,31.2257537841797,31.2257537841797,31.2257537841797,31.8850250244141,31.8850250244141,31.8850250244141,31.8850250244141,32.9198989868164,32.9198989868164,32.9198989868164,32.9198989868164,32.9198989868164,32.9198989868164,32.9198989868164,32.9198989868164,32.9198989868164,33.4804916381836,33.4804916381836,33.4804916381836,33.4804916381836,33.4804916381836,33.4804916381836,33.4804916381836,34.1355209350586,34.1355209350586,34.1355209350586,35.0408172607422,35.0408172607422,35.0408172607422,35.0408172607422,35.0408172607422,35.0408172607422,35.0408172607422,36.1396331787109,36.1396331787109,36.1396331787109,36.1396331787109,36.1396331787109,36.1396331787109,36.1396331787109,36.1396331787109,36.1396331787109,37.0217132568359,37.0217132568359,37.0217132568359,37.0217132568359,37.0217132568359,37.0217132568359,37.0217132568359,37.0217132568359,37.0217132568359,37.7978363037109,37.7978363037109,37.7978363037109,37.7978363037109,37.7978363037109,37.7978363037109,37.7978363037109,37.7978363037109,32.8735885620117,32.8735885620117,32.8735885620117,32.8735885620117,32.8735885620117,32.8735885620117,32.8735885620117,29.2443389892578,29.2443389892578,29.2443389892578,29.2443389892578,29.2443389892578,29.2443389892578,29.2443389892578,29.2443389892578,30.3781280517578,30.3781280517578,30.3781280517578,30.3781280517578,30.3781280517578,30.3781280517578,30.3781280517578,31.2290649414062,31.2290649414062,31.2290649414062,31.2290649414062,31.2290649414062,31.2290649414062,31.2290649414062,31.2290649414062,31.2290649414062,31.9373779296875,31.9373779296875,31.9373779296875,31.9373779296875,31.9373779296875,31.9373779296875,31.9373779296875,32.5115051269531,32.5115051269531,32.5115051269531,32.5115051269531,32.5115051269531,32.5115051269531,33.155403137207,33.155403137207,33.155403137207,33.155403137207,33.155403137207,33.155403137207,33.155403137207,33.7028350830078,33.7028350830078,33.7028350830078,33.7028350830078,33.7028350830078,33.7028350830078,33.7028350830078,33.7028350830078,34.2625961303711,34.2625961303711,34.2625961303711,34.2625961303711,34.2625961303711,34.2625961303711,34.2625961303711,34.9059829711914,34.9059829711914,34.9059829711914,34.9059829711914,34.9059829711914,34.9059829711914,35.5818557739258,35.5818557739258,35.5818557739258,35.5818557739258,35.5818557739258,36.2582931518555,36.2582931518555,36.2582931518555,36.2582931518555,36.2582931518555,36.2582931518555,36.2582931518555,36.2582931518555,36.2582931518555,36.8338470458984,36.8338470458984,36.8338470458984,36.8338470458984,36.8338470458984,36.8338470458984,37.5793075561523,37.5793075561523,37.5793075561523,37.5793075561523,37.5793075561523,37.5793075561523,37.5793075561523,37.5793075561523,38.153694152832,38.153694152832,38.153694152832,38.153694152832,38.153694152832,38.153694152832,38.153694152832,38.153694152832,28.6591567993164,28.6591567993164,28.6591567993164,28.6591567993164,29.2362976074219,29.2362976074219,29.2362976074219,29.2362976074219,29.2362976074219,29.2362976074219,29.2362976074219,29.2362976074219,29.2362976074219,29.2362976074219,30.1116485595703,30.1116485595703,30.1116485595703,30.1116485595703,30.9261245727539,30.9261245727539,30.9261245727539,30.9261245727539,30.9261245727539,30.9261245727539,30.9261245727539,31.4967575073242,31.4967575073242,31.4967575073242,31.4967575073242,31.4967575073242,31.4967575073242,32.2266845703125,32.2266845703125,32.2266845703125,32.2266845703125,32.8071746826172,32.8071746826172,32.8071746826172,32.8071746826172,32.8071746826172,32.8071746826172,32.8071746826172,32.8071746826172,33.5556411743164,33.5556411743164,33.5556411743164,33.5556411743164,33.5556411743164,33.5556411743164,33.5556411743164,34.3016052246094,34.3016052246094,34.3016052246094,35.4252166748047,35.9957046508789,35.9957046508789,35.9957046508789,35.9957046508789,35.9957046508789,35.9957046508789,35.9957046508789,35.9957046508789,35.9957046508789,36.5579147338867,36.5579147338867,36.5579147338867,36.5579147338867,36.5579147338867,36.5579147338867,36.5579147338867,36.5579147338867,36.5579147338867,37.6929702758789,28.3930587768555,28.3930587768555,28.3930587768555,28.3930587768555,28.3930587768555,28.3930587768555,28.3930587768555,28.3930587768555,28.3930587768555,28.3930587768555,28.3930587768555,29.5453491210938,29.5453491210938,29.5453491210938,29.5453491210938,29.5453491210938,29.5453491210938,29.5453491210938,29.5453491210938,30.7168502807617,30.7168502807617,30.7168502807617,30.7168502807617,30.7168502807617,30.7168502807617,30.7168502807617,31.8688354492188,31.8688354492188,31.8688354492188,31.8688354492188,31.8688354492188,31.8688354492188,31.8688354492188,31.8688354492188,31.8688354492188,32.4520874023438,32.4520874023438,32.4520874023438,32.4520874023438,32.4520874023438,32.4520874023438,32.4520874023438,32.4520874023438,32.4520874023438,32.4520874023438,33.0262145996094,33.0262145996094,33.0262145996094,33.0262145996094,33.0262145996094,33.0262145996094,34.1657333374023,34.1657333374023,34.1657333374023,34.1657333374023,35.3065872192383,35.3065872192383,35.3065872192383,35.3065872192383,35.3065872192383,35.3065872192383,35.3065872192383,35.3065872192383,35.3065872192383,35.3065872192383,35.3065872192383,35.3065872192383,36.4506988525391,36.4506988525391,36.4506988525391,36.4506988525391,36.4506988525391,36.4506988525391,37.572265625,37.572265625,37.572265625,37.572265625,37.572265625,37.572265625,37.572265625,37.572265625,37.572265625,37.572265625,28.4844741821289,28.4844741821289,28.4844741821289,28.4844741821289,28.4844741821289,29.633918762207,29.633918762207,29.633918762207,29.633918762207,29.633918762207,29.633918762207,29.633918762207,30.2110366821289,30.2110366821289,30.2110366821289,30.2110366821289,30.2110366821289,30.2110366821289,30.7942962646484,30.7942962646484,30.7942962646484,30.7942962646484,30.7942962646484,30.7942962646484,30.7942962646484,31.9485092163086,31.9485092163086,31.9485092163086,31.9485092163086,31.9485092163086,31.9485092163086,32.541877746582,32.541877746582,32.541877746582,32.541877746582,32.541877746582,32.541877746582,32.541877746582,33.6886367797852,33.6886367797852,33.6886367797852,33.6886367797852,33.6886367797852,33.6886367797852,33.6886367797852,33.6886367797852,33.6886367797852,34.2610931396484,34.2610931396484,34.2610931396484,34.2610931396484,34.8999557495117,34.8999557495117,34.8999557495117,34.8999557495117,34.8999557495117,34.8999557495117,35.7446823120117,35.7446823120117,35.7446823120117,35.7446823120117,35.7446823120117,36.6055221557617,36.6055221557617,36.6055221557617,36.6055221557617,36.6055221557617,36.6055221557617,36.6055221557617,36.6055221557617,36.6055221557617,36.6055221557617,36.6055221557617,37.7457504272461,37.7457504272461,37.7457504272461,37.7457504272461,28.6564636230469,29.8157348632812,29.8157348632812,29.8157348632812,29.8157348632812,29.8157348632812,29.8157348632812,29.8157348632812,30.9739761352539,30.9739761352539,30.9739761352539,30.9739761352539,30.9739761352539,30.9739761352539,32.1385345458984,32.7152252197266,32.7152252197266,32.7152252197266,32.7152252197266,32.7152252197266,32.7152252197266,33.6541748046875,33.6541748046875,33.6541748046875,33.6541748046875,34.3857269287109,34.3857269287109,34.3857269287109,34.3857269287109,34.3857269287109,35.0052032470703,35.0052032470703,35.0052032470703,35.0052032470703,35.0052032470703,35.0052032470703,35.0052032470703,35.5756149291992,35.5756149291992,36.2175598144531,36.2175598144531,36.2175598144531,36.2175598144531,36.2175598144531,36.8562927246094,36.8562927246094,36.8562927246094,36.8562927246094,36.8562927246094,36.8562927246094,37.5806274414062,37.5806274414062,37.5806274414062,37.5806274414062,37.5806274414062,37.5806274414062,37.5806274414062,37.5806274414062,38.1367492675781,38.1367492675781,38.1367492675781,38.1367492675781,38.1367492675781,38.1367492675781,38.1367492675781,28.5875930786133,28.5875930786133,28.5875930786133,28.5875930786133,28.5875930786133,28.5875930786133,28.5875930786133,29.2112197875977,29.2112197875977,29.2112197875977,29.2112197875977,29.2112197875977,29.2112197875977,29.9426116943359,29.9426116943359,29.9426116943359,29.9426116943359,29.9426116943359,30.5736923217773,30.5736923217773,30.5736923217773,30.5736923217773,31.3860473632812,31.3860473632812,31.3860473632812,31.3860473632812,31.3860473632812,31.3860473632812,32.034065246582,32.034065246582,32.034065246582,32.034065246582,32.034065246582,32.034065246582,32.034065246582,32.7759323120117,32.7759323120117,32.7759323120117,32.7759323120117,33.5703735351562,33.5703735351562,34.1186981201172,34.1186981201172,34.1186981201172,34.1186981201172,34.7615585327148,34.7615585327148,34.7615585327148,34.7615585327148,34.7615585327148,34.7615585327148,34.7615585327148,35.5395584106445,36.1000518798828,36.1000518798828,36.1000518798828,36.1000518798828,36.1000518798828,36.1000518798828,36.1000518798828,36.1000518798828,36.1000518798828,36.9668350219727,37.5148239135742,37.5148239135742,37.5148239135742,37.5148239135742,28.4476013183594,28.4476013183594,28.4476013183594,28.4476013183594,29.0221252441406,29.0221252441406,29.0221252441406,29.0221252441406,30.1746978759766,30.1746978759766,30.1746978759766,30.1746978759766,30.1746978759766,30.1746978759766,30.1746978759766,30.1746978759766,30.7493362426758,30.7493362426758,30.7493362426758,30.7493362426758,30.7493362426758,30.7493362426758,31.9086151123047,31.9086151123047,31.9086151123047,31.9086151123047,31.9086151123047,31.9086151123047,31.9086151123047,31.9086151123047,31.9086151123047,32.482292175293,32.482292175293,32.482292175293,32.482292175293,33.3023223876953,33.3023223876953,33.3023223876953,33.3023223876953,33.3023223876953,34.0498657226562,34.0498657226562,34.0498657226562,34.0498657226562,34.0498657226562,34.0498657226562,34.0498657226562,34.0498657226562,34.0498657226562,34.6034164428711,34.6034164428711,34.6034164428711,34.6034164428711,34.6034164428711,35.7463073730469,35.7463073730469,35.7463073730469,35.7463073730469,35.7463073730469,35.7463073730469,36.8862609863281,36.8862609863281,36.8862609863281,38.0222244262695,38.0222244262695,38.0222244262695,38.0222244262695,38.0222244262695,38.0222244262695,28.7928466796875,28.7928466796875,28.7928466796875,28.7928466796875,28.7928466796875,28.7928466796875,29.5427627563477,29.5427627563477,30.6969680786133,30.6969680786133,30.6969680786133,30.6969680786133,30.6969680786133,30.6969680786133,30.6969680786133,31.279411315918,31.279411315918,31.279411315918,31.279411315918,31.279411315918,31.279411315918,31.279411315918,31.279411315918,31.279411315918,31.279411315918,32.4346237182617,32.4346237182617,32.4346237182617,32.4346237182617,32.4346237182617,33.2985305786133,33.2985305786133,33.2985305786133,33.2985305786133,33.2985305786133,33.2985305786133,33.2985305786133,33.2985305786133,33.2985305786133,33.2985305786133,33.7817306518555,33.7817306518555,33.7817306518555,33.7817306518555,33.7817306518555,33.7817306518555,33.7817306518555,33.7817306518555,33.7817306518555,34.3186416625977,34.3186416625977,34.3186416625977,34.3186416625977,34.896858215332,34.896858215332,34.896858215332,34.896858215332,34.896858215332,34.896858215332,34.896858215332,35.5850524902344,35.5850524902344,35.5850524902344,35.5850524902344,35.5850524902344,35.5850524902344,35.5850524902344,36.2036972045898,36.2036972045898,36.2036972045898,36.7827682495117,36.7827682495117,36.7827682495117,36.7827682495117,36.7827682495117,36.7827682495117,36.7827682495117,36.7827682495117,36.7827682495117,36.7827682495117,37.3740844726562,37.3740844726562,37.3740844726562,37.3740844726562,37.3740844726562,37.3740844726562,37.3740844726562,37.9828643798828,37.9828643798828,37.9828643798828,37.9828643798828,37.9828643798828,37.9828643798828,37.9828643798828,37.9828643798828,37.9828643798828,28.3518447875977,28.3518447875977,28.3518447875977,28.3518447875977,28.3518447875977,28.3518447875977,28.3518447875977,29.0134429931641,29.0134429931641,29.0134429931641,29.0134429931641,29.0134429931641,29.0134429931641,29.6248626708984,29.6248626708984,30.2122421264648,30.2122421264648,30.2122421264648,30.2122421264648,30.2122421264648,30.2122421264648,31.3501281738281,31.3501281738281,31.3501281738281,31.3501281738281,31.3501281738281,31.3501281738281,31.3501281738281,31.3501281738281,31.3501281738281,31.3501281738281,31.3501281738281,31.9195861816406,31.9195861816406,31.9195861816406,31.9195861816406,31.9195861816406,31.9195861816406,31.9195861816406,32.7291870117188,32.7291870117188,32.7291870117188,32.7291870117188,32.7291870117188,32.7291870117188,33.8357620239258,34.9616317749023,34.9616317749023,36.0687713623047,36.0687713623047,36.0687713623047,36.0687713623047,36.0687713623047,36.0687713623047,36.0687713623047,36.0687713623047,36.0687713623047,36.614631652832,36.614631652832,36.614631652832,36.614631652832,37.1708679199219,37.1708679199219,37.1708679199219,37.1708679199219,37.1708679199219,37.1708679199219,37.1708679199219,37.1708679199219,37.1708679199219,37.1708679199219,37.1708679199219,37.7170486450195,37.7170486450195,37.7170486450195,37.7170486450195,37.7170486450195,35.181884765625,35.181884765625,35.181884765625,35.181884765625,35.181884765625,35.181884765625,35.181884765625,35.181884765625,29.2096176147461,29.2096176147461,29.2096176147461,29.2096176147461,29.7896347045898,29.7896347045898,29.7896347045898,29.7896347045898,29.7896347045898,30.6452407836914,30.6452407836914,30.6452407836914,30.6452407836914,30.6452407836914,30.6452407836914,31.5267181396484,31.5267181396484,31.5267181396484,31.5267181396484,32.6801452636719,32.6801452636719,32.6801452636719,32.6801452636719,32.6801452636719,32.6801452636719,33.825813293457,33.825813293457,33.825813293457,33.825813293457,33.825813293457,33.825813293457,33.825813293457,34.9663772583008,34.9663772583008,34.9663772583008,34.9663772583008,36.1018829345703,36.1018829345703,36.1018829345703,36.1018829345703,36.1018829345703,36.1018829345703,36.1018829345703,36.6632461547852,37.8035125732422,37.8035125732422,37.8035125732422,37.8035125732422,37.8035125732422,37.8035125732422,37.8035125732422,37.8035125732422,37.8035125732422,37.8035125732422,37.8035125732422,28.7475280761719,28.7475280761719,28.7475280761719,28.7475280761719,29.9024429321289,29.9024429321289,29.9024429321289,29.9024429321289,29.9024429321289,29.9024429321289,29.9024429321289,30.4784088134766,30.4784088134766,30.4784088134766,30.4784088134766,30.4784088134766,30.4784088134766,30.4784088134766,30.4784088134766,30.4784088134766,31.0531463623047,31.0531463623047,31.0531463623047,31.0531463623047,31.0531463623047,31.0531463623047,31.0531463623047,31.0531463623047,31.0531463623047,31.8613357543945,31.8613357543945,31.8613357543945,31.8613357543945,31.8613357543945,31.8613357543945,31.8613357543945,31.8613357543945,31.8613357543945,31.8613357543945,32.7389602661133,32.7389602661133,32.7389602661133,32.7389602661133,32.7389602661133,32.7389602661133,33.8733978271484,33.8733978271484,33.8733978271484,33.8733978271484,33.8733978271484,33.8733978271484,33.8733978271484,33.8733978271484,33.8733978271484,33.8733978271484,33.8733978271484,34.4440765380859,34.4440765380859,34.4440765380859,34.4440765380859,35.5661468505859,35.5661468505859,35.5661468505859,35.5661468505859,35.5661468505859,35.5661468505859,35.5661468505859,35.5661468505859,36.1336288452148,37.2417755126953,37.2417755126953,37.2417755126953,37.2417755126953,37.2417755126953,37.2417755126953,37.2417755126953,28.1605758666992,28.1605758666992,28.1605758666992,28.1605758666992,28.1605758666992,28.1605758666992,28.1605758666992,28.1605758666992,29.297248840332,29.297248840332,29.297248840332,29.297248840332,29.297248840332,29.297248840332,30.4428329467773,31.1614990234375,31.7300186157227,31.7300186157227,31.7300186157227,31.7300186157227,31.7300186157227,31.7300186157227,31.7300186157227,32.2919464111328,32.2919464111328,32.2919464111328,32.2919464111328,32.2919464111328,32.9094390869141,32.9094390869141,32.9094390869141,32.9094390869141,32.9094390869141,33.4970092773438,33.4970092773438,33.4970092773438,33.4970092773438,33.4970092773438,33.4970092773438,33.4970092773438,34.3070373535156,34.3070373535156,34.3070373535156,34.3070373535156,34.3070373535156,35.0801239013672,35.0801239013672,35.0801239013672,35.6417083740234,35.6417083740234,35.6417083740234,35.6417083740234,35.6417083740234,35.6417083740234,35.6417083740234,36.7464447021484,36.7464447021484,36.7464447021484,36.7464447021484,36.7464447021484,36.7464447021484,37.2922210693359,37.2922210693359,37.2922210693359,37.2922210693359,37.2922210693359,37.2922210693359,37.849967956543,37.849967956543,37.849967956543,37.849967956543,37.849967956543,37.849967956543,37.849967956543,28.3289260864258,28.3289260864258,28.3289260864258,28.3289260864258,28.3289260864258,29.3433609008789,29.3433609008789,29.9166488647461,31.0546188354492,31.0546188354492,31.0546188354492,31.0546188354492,32.1855850219727,32.1855850219727,32.1855850219727,32.1855850219727,32.1855850219727,32.1855850219727,32.1855850219727,32.7573776245117,32.7573776245117,32.7573776245117,32.7573776245117,32.7573776245117,32.7573776245117,33.317008972168,33.317008972168,33.317008972168,33.317008972168,33.317008972168,33.317008972168,33.317008972168,33.317008972168,33.317008972168,33.9935531616211,33.9935531616211,33.9935531616211,33.9935531616211,33.9935531616211,33.9935531616211,34.6998062133789,34.6998062133789,34.6998062133789,34.6998062133789,34.6998062133789,34.6998062133789,34.6998062133789,34.6998062133789,34.6998062133789,35.825798034668,35.825798034668,35.825798034668,35.825798034668,35.825798034668,36.4445343017578,36.4445343017578,36.4445343017578,36.4445343017578,36.4445343017578,36.4445343017578,37.0618209838867,37.0618209838867,37.0618209838867,37.0618209838867,37.0618209838867,37.6535797119141,37.6535797119141,37.6535797119141,38.1408843994141,38.1408843994141,38.1408843994141,38.1408843994141,38.1408843994141,38.1408843994141,38.1408843994141,28.6555328369141,28.6555328369141,28.6555328369141,28.6555328369141,28.6555328369141,29.3286743164062,29.9528350830078,29.9528350830078,29.9528350830078,29.9528350830078,29.9528350830078,29.9528350830078,30.5312576293945,30.5312576293945,30.5312576293945,30.5312576293945,31.2242965698242,31.2242965698242,31.2242965698242,31.2242965698242,31.8420486450195,31.8420486450195,31.8420486450195,32.4668502807617,32.4668502807617,32.4668502807617,32.4668502807617,32.4668502807617,32.4668502807617,33.0942611694336,33.0942611694336,33.0942611694336,33.0942611694336,33.0942611694336,33.0942611694336,33.0942611694336,33.0942611694336,33.0942611694336,33.0942611694336,33.7140045166016,33.7140045166016,33.7140045166016,33.7140045166016,34.2471237182617,34.2471237182617,34.2471237182617,34.2471237182617,34.2471237182617,34.2471237182617,34.8556213378906,34.8556213378906,34.8556213378906,34.8556213378906,34.8556213378906,34.8556213378906,34.8556213378906,34.8556213378906,34.8556213378906,34.8556213378906,35.3919143676758,35.3919143676758,35.3919143676758,35.3919143676758,35.3919143676758,35.3919143676758,36.0479736328125,36.0479736328125,36.0479736328125,36.0479736328125,36.0479736328125,36.0479736328125,36.0479736328125,36.0479736328125,36.0479736328125,36.6382141113281,36.6382141113281,36.6382141113281,36.6382141113281,36.6382141113281,36.6382141113281,36.6382141113281,36.6382141113281,37.355712890625,37.355712890625,37.9777908325195,37.9777908325195,37.9777908325195,37.9777908325195,37.9777908325195,37.9777908325195,37.9777908325195,37.9777908325195,37.9777908325195,28.3338165283203,28.3338165283203,28.3338165283203,28.3338165283203,28.3338165283203,28.3338165283203,28.3338165283203,29.0087890625,29.0087890625,29.0087890625,29.0087890625,29.0087890625,29.0087890625,29.6314086914062,29.6314086914062,29.6314086914062,29.6314086914062,29.6314086914062,29.6314086914062,30.2690353393555,30.2690353393555,30.2690353393555,30.8854064941406,30.8854064941406,30.8854064941406,30.8854064941406,30.8854064941406,30.8854064941406,30.8854064941406,31.4360275268555,32.1657943725586,32.1657943725586,32.1657943725586,32.1657943725586,32.1657943725586,32.8021697998047,32.8021697998047,32.8021697998047,32.8021697998047,32.8021697998047,32.8021697998047,33.4096832275391,33.4096832275391,33.4096832275391,33.4096832275391,34.0664749145508,34.0664749145508,34.0664749145508,34.0664749145508,34.0664749145508,34.0664749145508,34.0664749145508,34.0664749145508,34.0664749145508,34.0664749145508,34.615234375,34.615234375,34.615234375,34.615234375,34.615234375,34.615234375,34.615234375,35.1835632324219,35.1835632324219,35.1835632324219,35.1835632324219,35.1835632324219,35.1835632324219,35.1835632324219,35.8748321533203,35.8748321533203,35.8748321533203,35.8748321533203,35.8748321533203,35.8748321533203,35.8748321533203,35.8748321533203,35.8748321533203,35.8748321533203,36.4163589477539,36.4163589477539,36.4163589477539,36.4163589477539,36.4163589477539,36.4163589477539,36.4163589477539,36.4163589477539,36.4163589477539,37.0762939453125,37.0762939453125,37.0762939453125,37.0762939453125,37.0762939453125,37.0762939453125,37.0762939453125,37.0762939453125,37.0762939453125,37.7549667358398,37.7549667358398,37.7549667358398,37.7549667358398,37.7549667358398,37.7549667358398,37.7549667358398,28.1723480224609,28.1723480224609,28.1723480224609,28.1723480224609,28.1723480224609,28.1723480224609,28.1723480224609,28.7318115234375,28.7318115234375,28.7318115234375,28.7318115234375,28.7318115234375,28.7318115234375,28.7318115234375,29.4216690063477,29.4216690063477,29.4216690063477,29.4216690063477,29.4216690063477,29.4216690063477,29.980598449707,29.980598449707,29.980598449707,29.980598449707,29.980598449707,29.980598449707,30.6019821166992,30.6019821166992,30.6019821166992,30.6019821166992,30.6019821166992,30.6019821166992,30.6019821166992,30.6019821166992,31.2341690063477,31.2341690063477,31.2341690063477,31.2341690063477,31.8771362304688,31.8771362304688,31.8771362304688,31.8771362304688,31.8771362304688,31.8771362304688,32.4982528686523,32.4982528686523,32.4982528686523,32.4982528686523,32.4982528686523,32.4982528686523,33.0840148925781,33.0840148925781,33.0840148925781,33.0840148925781,33.0840148925781,33.0840148925781,33.7303695678711,33.7303695678711,33.7303695678711,33.7303695678711,33.7303695678711,33.7303695678711,33.7303695678711,34.8369140625,34.8369140625,34.8369140625,34.8369140625,34.8369140625,34.8369140625,34.8369140625,35.9496231079102,35.9496231079102,35.9496231079102,35.9496231079102,35.9496231079102,35.9496231079102,35.9496231079102,35.9496231079102,35.9496231079102,36.5200042724609,36.5200042724609,36.5200042724609,36.5200042724609,36.5200042724609,36.5200042724609,36.5200042724609,36.5200042724609,36.5200042724609,36.5200042724609,36.5200042724609,36.5200042724609,37.1707000732422,37.1707000732422,37.1707000732422,37.1707000732422,37.1707000732422,37.1707000732422,37.1707000732422,37.1707000732422,38.1561584472656,38.1561584472656,38.1561584472656,38.1561584472656,38.1561584472656,38.1561584472656,29.2253036499023,29.2253036499023,29.2253036499023,29.2253036499023,29.2253036499023,29.2253036499023,29.2253036499023,29.2253036499023,30.3705062866211,30.3705062866211,30.3705062866211,30.3705062866211,30.3705062866211,30.3705062866211,30.3705062866211,30.3705062866211,30.3705062866211,30.3705062866211,30.3705062866211,31.5158920288086,31.5158920288086,31.5158920288086,31.5158920288086,32.0905303955078,32.0905303955078,32.0905303955078,32.0905303955078,32.0905303955078,32.0905303955078,32.0905303955078,32.0905303955078,32.0905303955078,32.0905303955078,32.0905303955078,32.0905303955078,32.0905303955078,32.6632385253906,32.6632385253906,32.6632385253906,32.6632385253906,32.6632385253906,32.6632385253906,33.2358932495117,33.2358932495117,33.2358932495117,33.2358932495117,33.2358932495117,34.3798599243164,34.3798599243164,34.3798599243164,35.5113143920898,35.5113143920898,35.5113143920898,35.5113143920898,36.2402420043945,36.2402420043945,36.2402420043945,36.2402420043945,36.2402420043945,36.2402420043945,37.1863555908203,37.1863555908203,37.1863555908203,37.1863555908203,37.1863555908203,28.1403884887695,28.1403884887695,28.1403884887695,29.289436340332,29.289436340332,29.289436340332,29.289436340332,29.289436340332,29.289436340332,30.440788269043,30.440788269043,30.440788269043,30.440788269043,31.5990219116211,31.5990219116211,31.5990219116211,31.5990219116211,31.5990219116211,32.7701110839844,32.7701110839844,32.7701110839844,32.7701110839844,33.3292617797852,33.3292617797852,33.3292617797852,33.3292617797852,34.467658996582,34.467658996582,34.467658996582,34.467658996582,34.467658996582,35.610237121582,35.610237121582,35.610237121582,35.610237121582,35.610237121582,35.610237121582,35.610237121582,36.7424468994141,36.7424468994141,36.7424468994141,36.7424468994141,36.7424468994141,36.7424468994141,37.8672790527344,37.8672790527344,37.8672790527344,37.8672790527344,37.8672790527344,28.7309799194336,29.4219436645508,29.4219436645508,29.4219436645508,29.4219436645508,29.4219436645508,29.4219436645508,29.4219436645508,29.9931793212891,29.9931793212891,29.9931793212891,29.9931793212891,29.9931793212891,29.9931793212891,29.9931793212891,29.9931793212891,29.9931793212891,29.9931793212891,29.9931793212891,29.9931793212891,29.9931793212891,31.1409225463867,32.3025894165039,32.3025894165039,32.3025894165039,32.3025894165039,32.3025894165039,32.3025894165039,33.4487152099609,33.4487152099609,33.4487152099609,33.4487152099609,33.4487152099609,34.1345977783203,34.7092666625977,34.7092666625977,34.7092666625977,34.7092666625977,34.7092666625977,35.2849349975586,35.2849349975586,35.2849349975586,35.2849349975586,35.2849349975586,35.2849349975586,35.2849349975586,35.8617401123047,35.8617401123047,35.8617401123047,35.8617401123047,35.8617401123047,35.8617401123047,35.8617401123047,35.8617401123047,35.8617401123047,35.8617401123047,36.6943054199219,36.6943054199219,36.6943054199219,36.6943054199219,36.6943054199219,36.6943054199219,37.3123779296875,37.3123779296875,37.3123779296875,37.3123779296875,37.3123779296875,37.3123779296875,37.3123779296875,37.9785766601562,37.9785766601562,37.9785766601562,37.9785766601562,37.9785766601562,37.9785766601562,37.9785766601562,28.4473724365234,29.3485412597656,29.3485412597656,29.3485412597656,29.3485412597656,29.3485412597656,29.3485412597656,30.1175155639648,30.1175155639648,30.1175155639648,30.9608306884766,30.9608306884766,30.9608306884766,30.9608306884766,30.9608306884766,30.9608306884766,30.9608306884766,30.9608306884766,30.9608306884766,31.5300750732422,31.5300750732422,31.5300750732422,31.5300750732422,31.5300750732422,32.1485214233398,32.1485214233398,32.1485214233398,32.1485214233398,32.1485214233398,32.1485214233398,32.7197570800781,32.7197570800781,32.7197570800781,32.7197570800781,33.3874053955078,33.3874053955078,33.3874053955078,33.3874053955078,33.3874053955078,33.3874053955078,33.3874053955078,33.3874053955078,34.3711090087891,34.3711090087891,34.3711090087891,34.3711090087891,34.3711090087891,34.9317016601562,34.9317016601562,34.9317016601562,34.9317016601562,34.9317016601562,34.9317016601562,34.9317016601562,36.0475006103516,36.0475006103516,36.0475006103516,36.0475006103516,37.1773986816406,37.1773986816406,37.1773986816406,37.1773986816406,37.1773986816406,37.1773986816406,37.1773986816406,37.7284698486328,37.7284698486328,37.7284698486328,37.7284698486328,37.7284698486328,37.7284698486328,37.7284698486328,28.6822891235352,28.6822891235352,28.6822891235352,28.6822891235352,28.6822891235352,28.6822891235352,28.6822891235352,28.6822891235352,29.2555236816406,29.2555236816406,29.2555236816406,29.2555236816406,29.2555236816406,29.2555236816406,29.2555236816406,29.2555236816406,29.2555236816406,29.2555236816406,29.8972396850586,29.8972396850586,29.8972396850586,29.8972396850586,29.8972396850586,29.8972396850586,29.8972396850586,30.4701309204102,30.4701309204102,30.4701309204102,30.4701309204102,31.6088256835938,32.7521591186523,33.8742370605469,33.8742370605469,35.01318359375,35.01318359375,35.01318359375,35.01318359375,36.1330947875977,36.1330947875977,36.1330947875977,36.1330947875977,36.1330947875977,36.1330947875977,36.1330947875977,36.1330947875977,37.2514114379883,37.2514114379883,37.2514114379883,37.2514114379883,37.2514114379883,28.1918640136719,28.1918640136719,28.1918640136719,28.1918640136719,28.1918640136719,28.1918640136719,29.3370895385742,29.3370895385742,29.3370895385742,29.3370895385742,29.3370895385742,29.3370895385742,30.4851684570312,31.6320343017578,31.6320343017578,31.6320343017578,31.6320343017578,31.6320343017578,32.7610168457031,32.7610168457031,32.7610168457031,32.7610168457031,32.7610168457031,32.7610168457031,32.7610168457031,33.8931579589844,33.8931579589844,33.8931579589844,33.8931579589844,33.8931579589844,33.8931579589844,33.8931579589844,35.0225982666016,35.0225982666016,35.0225982666016,35.0225982666016,35.0225982666016,35.0225982666016,35.0225982666016,35.0225982666016,35.0225982666016,35.5858688354492,35.5858688354492,35.5858688354492,35.5858688354492,35.5858688354492,35.5858688354492,35.5858688354492,35.5858688354492,35.5858688354492,35.5858688354492,35.5858688354492],&#34;meminc&#34;:[0,0,0,0,0,0,1.16799163818359,0,0,0,0,0,1.15174102783203,0,0,0,0,0,0,0,0.581291198730469,0,0,0,0,0,0.577705383300781,0,0,0,0,0,1.13318634033203,0,0,0,0,0,0,0,0,0.791038513183594,0,0,0,0,0,0.898971557617188,0,0,0,0,0,0,1.15223693847656,0,0,0,0,0,0,0,0.557785034179688,0,0,0,0.571830749511719,0,0,0,0,0,0.572036743164062,0,0,0,0,0,0,0,0,-9.42286682128906,0,0,0,0.836669921875,0,1.14651489257812,0,0,0,0.573287963867188,0,0,0,0,0,0,1.14626312255859,0,0,0,1.02105712890625,0,0,0,0,0,0,0,0,1.14686584472656,0,0,0,0,0,0,0.578910827636719,0,0,0,0.573371887207031,0,0,0,0.57098388671875,0,0,0,0.573371887207031,0,0,0,0.573371887207031,0,0,0,0.572433471679688,0,0,0,-9.28411102294922,0,0,0,0,0,0,1.14692687988281,0,0,0,0,0,0.907730102539062,0,0,0,0,0,0,0.808464050292969,0,0,0,0,1.15867614746094,0,0,0,0,0,0,0,0.819488525390625,0,0,0.541854858398438,0,0,0,0,0.569923400878906,0,0,0,0,0,0.573371887207031,0,0,0,0,0,0.571418762207031,0,0,0,0,0,0.576881408691406,0,0,0,0,0.5277099609375,0,0,0,0,0,0.993080139160156,0,0,0,0,0,0,-9.77817535400391,0,0,0,0,0,0,0.692581176757812,0,0,0,1.13270568847656,0,0,0,0,0,0,0,1.13420867919922,0,0,0,0,0,0,0,1.00214385986328,0,0,0,0,0,1.11574554443359,0,0,0,0,0,0.911643981933594,0,0,0,0,0,0,0,0,0.537704467773438,1.072265625,0.545829772949219,0,0,0,0,0,0.534431457519531,0,0,0,0,0,0.547309875488281,0,0,0,0,0,0,0,0.593826293945312,0,0,0,-9.62929534912109,0,0,0,0,0,0,0,0,0,0,0.562545776367188,0,0,0,0,0,0,0,0,0.944053649902344,0,0,0,0,0,0.654495239257812,0,0,0,0,0,0,0,0,0.600318908691406,0,0.634796142578125,0,0,0,0,0,0,0.616943359375,0,0,0,0,0,0,0.621192932128906,0,0,0,0,0.585494995117188,0,0,0,0,0,0,0.647880554199219,0,0,0,0,0,0.704521179199219,0,0,0,0,0,0,0,0,0,0.556228637695312,0,0,0,0,0.547988891601562,0,0,0,0,1.103271484375,0,0,0,0,0,0,1.10275268554688,0,0,0,0,0,0,-9.16232299804688,0,0,0,0,0.569908142089844,0,0,0,0,0,0,1.13676452636719,0,0,0,0,0,0,1.14540100097656,0,0,0,0,0,0.794975280761719,0,0,0,0,0.919746398925781,0,0,1.12054443359375,0,0,0,0,0,0,0.77984619140625,0,0,0,0,0,0,0,0,0.613380432128906,0.605712890625,0,0,0,0,0,0,0,0.766151428222656,0,0,0,0,0,0,0,0,0,0.601165771484375,0,0,0,0,0,-9.58013153076172,0,0,0.592636108398438,0,0,0,0.573219299316406,0,0,0,0,0,1.15175628662109,0,0,0,0,0,0,0,1.16774749755859,0,0,0,0,0,1.15117645263672,0,0,0,0,0,0,0,0,0.574394226074219,0,0,0,0,0,0,0,1.14475250244141,0,0,0,0,0,0,0,0,0.572296142578125,0,0,0,0,0,0,0,0,0,0,0,1.14528656005859,0,0,0,0,0,1.1217041015625,0,0,0,0,0,0.567657470703125,0,0,0,0,0,0,0,0,-9.68814086914062,0.545051574707031,0,0,0,0.969856262207031,0,0,0,0,0,0,0,0.596908569335938,0,0,0,0.573860168457031,0,0,1.14620208740234,0,0,0,0,0.550773620605469,0,0,0,0,1.13069915771484,0,0,0,0,0,0,0,0,0,0.5841064453125,0,0,0,0,0,0,1.10230255126953,0,0,0,0,0,0,0,1.11973571777344,0,0,0,0,0,1.11681365966797,0,0,0,-9.13301086425781,0,0,0,0,0,1.16960144042969,0,0,0,0,0,1.15010070800781,0,0,0,0,0,0,1.15903472900391,0,0,0,0,0,1.13137054443359,0,0,0,0,1.12384796142578,0,0,0,0,0,0,1.14092254638672,0,0,0,0,1.13541412353516,0,0,0,0,0,0,0.568084716796875,-9.12390899658203,0,0,0,0,0,0,0,0,1.15247344970703,0,0,0,1.15520477294922,0,0,0,0,0,0.604949951171875,0,0,0,0,0,0,0,0,0,1.13094329833984,0,0,0,0,0,0,1.12587738037109,0,0,0,0,0,1.14281463623047,0,0,0,0,1.14302825927734,0,0,0,0,0,1.13247680664062,0,0,0,1.11996459960938,0,0,0,0,0,-9.67753601074219,0,0,0,0,0,1.14909362792969,0,0,0,0,0,0,0.714645385742188,0.999839782714844,0,0,0,0,0,1.15169525146484,0,0,0,0,0,1.14809417724609,0,0,0,0.573143005371094,0,0,0,0,0,0,1.14363098144531,0.56939697265625,1.12244415283203,0,0,0,0,0,0,0,0,1.13347625732422,0,0,0,0,-9.10677337646484,0,0,0,0,0.575889587402344,0,0,0,0,0,1.16042327880859,0,0,0,0,0,0,0,0.573295593261719,0,0,0,0,0,1.13955688476562,0,0,0,1.14308166503906,0,0,0,0,0,1.14387512207031,0,0,0,0,0,0,1.14319610595703,0,0.565460205078125,0,0,0,0,0.761177062988281,0,0,0,0,0,0,0.553688049316406,0,0,0,0,0.549903869628906,0,0,0,0,0,0,0,0,0,0,0,-9.65170288085938,0,0,0,0,1.16009521484375,0,0,0,0,0,1.17256164550781,0,0,0,0,0,0,0.57757568359375,0,0,0,0.583526611328125,0,0,0,0,0,0,0,0,0,0,0.576957702636719,0,0,0,0,1.14640808105469,0,0,0,0,0,0,0,0.967018127441406,0.752349853515625,0,0,0,0,0,1.13332366943359,0,0,0,0,0,0,0,0,1.12288665771484,0,0,0,0,0.464881896972656,0,-9.03903198242188,0,0,0,0,0,0,0,0.979835510253906,0,0,0,0,0,0.763275146484375,0,0,0,0,1.16392517089844,0,0,1.14929962158203,0,0,0,0,0,1.14339447021484,0,0,0.549873352050781,0,0,0,0,0,0,0,0.668647766113281,0,0,0,0,1.12631225585938,0,0,0,0,0,1.11468505859375,0,0,0,0,0,-9.22314453125,0,0,0,0,0,0.565811157226562,0,1.1468505859375,0,0.926353454589844,0,0,0,0.7935791015625,0,0.562347412109375,0,0,0,0,0,0,0.561080932617188,0,0,0,0,0,0,0,1.13242340087891,0,0,0,0,0,0.5682373046875,0,0,0,0,0,0.548835754394531,0,0,0,1.13101196289062,1.1170654296875,-9.11932373046875,0,0,0,0,0,0,0,1.14630889892578,0,0,0,0,0,0,0.646141052246094,0,0,0,0,0,0,0,0.613258361816406,0,0,0,0,0,0,0,0.707778930664062,0,0,0,0,0,0.577278137207031,0,0,0,0,0,0,0,0,0.570114135742188,0,0,0,0,0.747337341308594,0,0,0,0.721778869628906,0,0,0,0,0,0,0,0.559974670410156,0,0,0,0,0,0,0.619087219238281,0,0,0,0,0,0,0,0,0.612297058105469,0,0,0,0.518119812011719,0,0,0,0,0,0,0.690559387207031,0,0,0,0,0,0,0,0,0,0.702171325683594,0,0,0,0,0,-9.31134033203125,0,0.545608520507812,0.646469116210938,0,0,0,0,0,0.576248168945312,0.8514404296875,0,0,0,0,0,0,0,0,0,0.558303833007812,0,0,0,0,0.6668701171875,0,0,0,0,0,0.612800598144531,0,0,0,0,0,0.586135864257812,0,0,0,0,0,0,0,0,0,0.707077026367188,0,0,0,0,0,0,0,0,0.7054443359375,0,0,0,0,0,0,0.713310241699219,0,0,0,0,0.774772644042969,0,0,0,0,0,0,0,0,0.905174255371094,0,0,0,0.681709289550781,0,0,0,0,0,0,0,-9.66009521484375,0,0,0,0,0,0,0,0.557968139648438,0,0,0,0,0,1.12003326416016,0,0,0,0,0,0.578086853027344,0,0,0,0,0,0,0,0.769195556640625,0,0,0,0,0,0.753074645996094,0,0,0,0,0,0.69134521484375,0,0,0,0,0,0,0,0.722885131835938,0,0,0,0,0,0,0,0.571754455566406,0,0,0,0,0,0,0,0,0,0.701446533203125,0,0,0,0.54937744140625,0,0,0,0,0,0,0.558998107910156,0,0,0,0,0,0,0,0.997306823730469,0,0,0,0,0.854148864746094,0,0,0,0,0,0,-9.68088531494141,0,0,0,0,0,0,0.741729736328125,0,0,0,0,0.972846984863281,0,0,0,0,0,0.571685791015625,0,0,0,0,0,0,0,0,0,1.13178253173828,0,0,0,1.09769439697266,0,0,0,0,0.815597534179688,0,0,0,0,0,0.851158142089844,0,0,0,0,0,0,0,0,1.13254547119141,0,0,0,0,0,0,0.561119079589844,0,0,0,0,1.12034606933594,0,0,0,0,0,-9.11827850341797,0,0,0,0,0,0,0,0,0,0.572731018066406,0,0,0,0,0,0.634346008300781,0,0,0,0,0,0,0,0,0,0.570579528808594,0,0,0,0,0,0,0,0,0.620185852050781,0,0,0,0,0,0,0,0.613052368164062,0,0,0,0,0,0,0,0.709548950195312,0,0,0,0,0,0.56097412109375,0,0,0,0,0,0.668785095214844,0,0,0,0,0,0,0,0,0,0,0,0,0.560409545898438,0,0,0,0,0,0,0.593063354492188,0,0,0,0,0.714126586914062,0,0,0,0,0,0.631645202636719,0.682838439941406,0.708946228027344,0,0,0,0,0,0.60906982421875,0,0,0,0,0,0,0,0.616004943847656,0,0,0,0,0,0,0,0,0,0,0,0,-9.54750061035156,0,0,0,0,0,0.6634521484375,0,0,0,0,0,0,0,0,0.590522766113281,0,0,0,0,0,0,0,0.572731018066406,0,0,0,0,0,0,0.586402893066406,0,0,0,0,0.561492919921875,0,0,0,0,0,0,0.898941040039062,0,0,0,1.11141204833984,0,0,0,0,0,0,0.750312805175781,0.721275329589844,0,0,0,0,0,0.561271667480469,0,0,0,0,0,0.74578857421875,0,0,0,0,0,0,1.10079193115234,0,0,0,0,0.575790405273438,0,0,0,0,0,-9.59307861328125,0,0,0,0,0,0,0.560211181640625,0,0,0,0,0,0.957847595214844,0,0,0,0,0,0.659095764160156,0,0,0,0,0,0,0,0.570938110351562,0,0,0,0,0,0.659271240234375,0,0,0,1.03487396240234,0,0,0,0,0,0,0,0,0.560592651367188,0,0,0,0,0,0,0.655029296875,0,0,0.905296325683594,0,0,0,0,0,0,1.09881591796875,0,0,0,0,0,0,0,0,0.882080078125,0,0,0,0,0,0,0,0,0.776123046875,0,0,0,0,0,0,0,-4.92424774169922,0,0,0,0,0,0,-3.62924957275391,0,0,0,0,0,0,0,1.1337890625,0,0,0,0,0,0,0.850936889648438,0,0,0,0,0,0,0,0,0.70831298828125,0,0,0,0,0,0,0.574127197265625,0,0,0,0,0,0.643898010253906,0,0,0,0,0,0,0.547431945800781,0,0,0,0,0,0,0,0.559761047363281,0,0,0,0,0,0,0.643386840820312,0,0,0,0,0,0.675872802734375,0,0,0,0,0.676437377929688,0,0,0,0,0,0,0,0,0.575553894042969,0,0,0,0,0,0.745460510253906,0,0,0,0,0,0,0,0.574386596679688,0,0,0,0,0,0,0,-9.49453735351562,0,0,0,0.577140808105469,0,0,0,0,0,0,0,0,0,0.875350952148438,0,0,0,0.814476013183594,0,0,0,0,0,0,0.570632934570312,0,0,0,0,0,0.729927062988281,0,0,0,0.580490112304688,0,0,0,0,0,0,0,0.748466491699219,0,0,0,0,0,0,0.745964050292969,0,0,1.12361145019531,0.570487976074219,0,0,0,0,0,0,0,0,0.562210083007812,0,0,0,0,0,0,0,0,1.13505554199219,-9.29991149902344,0,0,0,0,0,0,0,0,0,0,1.15229034423828,0,0,0,0,0,0,0,1.17150115966797,0,0,0,0,0,0,1.15198516845703,0,0,0,0,0,0,0,0,0.583251953125,0,0,0,0,0,0,0,0,0,0.574127197265625,0,0,0,0,0,1.13951873779297,0,0,0,1.14085388183594,0,0,0,0,0,0,0,0,0,0,0,1.14411163330078,0,0,0,0,0,1.12156677246094,0,0,0,0,0,0,0,0,0,-9.08779144287109,0,0,0,0,1.14944458007812,0,0,0,0,0,0,0.577117919921875,0,0,0,0,0,0.583259582519531,0,0,0,0,0,0,1.15421295166016,0,0,0,0,0,0.593368530273438,0,0,0,0,0,0,1.14675903320312,0,0,0,0,0,0,0,0,0.572456359863281,0,0,0,0.638862609863281,0,0,0,0,0,0.8447265625,0,0,0,0,0.86083984375,0,0,0,0,0,0,0,0,0,0,1.14022827148438,0,0,0,-9.08928680419922,1.15927124023438,0,0,0,0,0,0,1.15824127197266,0,0,0,0,0,1.16455841064453,0.576690673828125,0,0,0,0,0,0.938949584960938,0,0,0,0.731552124023438,0,0,0,0,0.619476318359375,0,0,0,0,0,0,0.570411682128906,0,0.641944885253906,0,0,0,0,0.63873291015625,0,0,0,0,0,0.724334716796875,0,0,0,0,0,0,0,0.556121826171875,0,0,0,0,0,0,-9.54915618896484,0,0,0,0,0,0,0.623626708984375,0,0,0,0,0,0.731391906738281,0,0,0,0,0.631080627441406,0,0,0,0.812355041503906,0,0,0,0,0,0.648017883300781,0,0,0,0,0,0,0.741867065429688,0,0,0,0.794441223144531,0,0.548324584960938,0,0,0,0.642860412597656,0,0,0,0,0,0,0.777999877929688,0.560493469238281,0,0,0,0,0,0,0,0,0.866783142089844,0.547988891601562,0,0,0,-9.06722259521484,0,0,0,0.57452392578125,0,0,0,1.15257263183594,0,0,0,0,0,0,0,0.574638366699219,0,0,0,0,0,1.15927886962891,0,0,0,0,0,0,0,0,0.573677062988281,0,0,0,0.820030212402344,0,0,0,0,0.747543334960938,0,0,0,0,0,0,0,0,0.553550720214844,0,0,0,0,1.14289093017578,0,0,0,0,0,1.13995361328125,0,0,1.13596343994141,0,0,0,0,0,-9.22937774658203,0,0,0,0,0,0.749916076660156,0,1.15420532226562,0,0,0,0,0,0,0.582443237304688,0,0,0,0,0,0,0,0,0,1.15521240234375,0,0,0,0,0.863906860351562,0,0,0,0,0,0,0,0,0,0.483200073242188,0,0,0,0,0,0,0,0,0.536911010742188,0,0,0,0.578216552734375,0,0,0,0,0,0,0.688194274902344,0,0,0,0,0,0,0.618644714355469,0,0,0.579071044921875,0,0,0,0,0,0,0,0,0,0.591316223144531,0,0,0,0,0,0,0.608779907226562,0,0,0,0,0,0,0,0,-9.63101959228516,0,0,0,0,0,0,0.661598205566406,0,0,0,0,0,0.611419677734375,0,0.587379455566406,0,0,0,0,0,1.13788604736328,0,0,0,0,0,0,0,0,0,0,0.5694580078125,0,0,0,0,0,0,0.809600830078125,0,0,0,0,0,1.10657501220703,1.12586975097656,0,1.10713958740234,0,0,0,0,0,0,0,0,0.545860290527344,0,0,0,0.556236267089844,0,0,0,0,0,0,0,0,0,0,0.546180725097656,0,0,0,0,-2.53516387939453,0,0,0,0,0,0,0,-5.97226715087891,0,0,0,0.58001708984375,0,0,0,0,0.855606079101562,0,0,0,0,0,0.881477355957031,0,0,0,1.15342712402344,0,0,0,0,0,1.14566802978516,0,0,0,0,0,0,1.14056396484375,0,0,0,1.13550567626953,0,0,0,0,0,0,0.561363220214844,1.14026641845703,0,0,0,0,0,0,0,0,0,0,-9.05598449707031,0,0,0,1.15491485595703,0,0,0,0,0,0,0.575965881347656,0,0,0,0,0,0,0,0,0.574737548828125,0,0,0,0,0,0,0,0,0.808189392089844,0,0,0,0,0,0,0,0,0,0.87762451171875,0,0,0,0,0,1.13443756103516,0,0,0,0,0,0,0,0,0,0,0.5706787109375,0,0,0,1.1220703125,0,0,0,0,0,0,0,0.567481994628906,1.10814666748047,0,0,0,0,0,0,-9.08119964599609,0,0,0,0,0,0,0,1.13667297363281,0,0,0,0,0,1.14558410644531,0.718666076660156,0.568519592285156,0,0,0,0,0,0,0.561927795410156,0,0,0,0,0.61749267578125,0,0,0,0,0.587570190429688,0,0,0,0,0,0,0.810028076171875,0,0,0,0,0.773086547851562,0,0,0.56158447265625,0,0,0,0,0,0,1.104736328125,0,0,0,0,0,0.5457763671875,0,0,0,0,0,0.557746887207031,0,0,0,0,0,0,-9.52104187011719,0,0,0,0,1.01443481445312,0,0.573287963867188,1.13796997070312,0,0,0,1.13096618652344,0,0,0,0,0,0,0.571792602539062,0,0,0,0,0,0.55963134765625,0,0,0,0,0,0,0,0,0.676544189453125,0,0,0,0,0,0.706253051757812,0,0,0,0,0,0,0,0,1.12599182128906,0,0,0,0,0.618736267089844,0,0,0,0,0,0.617286682128906,0,0,0,0,0.591758728027344,0,0,0.4873046875,0,0,0,0,0,0,-9.4853515625,0,0,0,0,0.673141479492188,0.624160766601562,0,0,0,0,0,0.578422546386719,0,0,0,0.693038940429688,0,0,0,0.617752075195312,0,0,0.624801635742188,0,0,0,0,0,0.627410888671875,0,0,0,0,0,0,0,0,0,0.619743347167969,0,0,0,0.533119201660156,0,0,0,0,0,0.608497619628906,0,0,0,0,0,0,0,0,0,0.536293029785156,0,0,0,0,0,0.656059265136719,0,0,0,0,0,0,0,0,0.590240478515625,0,0,0,0,0,0,0,0.717498779296875,0,0.622077941894531,0,0,0,0,0,0,0,0,-9.64397430419922,0,0,0,0,0,0,0.674972534179688,0,0,0,0,0,0.62261962890625,0,0,0,0,0,0.637626647949219,0,0,0.616371154785156,0,0,0,0,0,0,0.550621032714844,0.729766845703125,0,0,0,0,0.636375427246094,0,0,0,0,0,0.607513427734375,0,0,0,0.656791687011719,0,0,0,0,0,0,0,0,0,0.548759460449219,0,0,0,0,0,0,0.568328857421875,0,0,0,0,0,0,0.691268920898438,0,0,0,0,0,0,0,0,0,0.541526794433594,0,0,0,0,0,0,0,0,0.659934997558594,0,0,0,0,0,0,0,0,0.678672790527344,0,0,0,0,0,0,-9.58261871337891,0,0,0,0,0,0,0.559463500976562,0,0,0,0,0,0,0.689857482910156,0,0,0,0,0,0.558929443359375,0,0,0,0,0,0.621383666992188,0,0,0,0,0,0,0,0.632186889648438,0,0,0,0.642967224121094,0,0,0,0,0,0.621116638183594,0,0,0,0,0,0.585762023925781,0,0,0,0,0,0.646354675292969,0,0,0,0,0,0,1.10654449462891,0,0,0,0,0,0,1.11270904541016,0,0,0,0,0,0,0,0,0.570381164550781,0,0,0,0,0,0,0,0,0,0,0,0.65069580078125,0,0,0,0,0,0,0,0.985458374023438,0,0,0,0,0,-8.93085479736328,0,0,0,0,0,0,0,1.14520263671875,0,0,0,0,0,0,0,0,0,0,1.1453857421875,0,0,0,0.574638366699219,0,0,0,0,0,0,0,0,0,0,0,0,0.572708129882812,0,0,0,0,0,0.572654724121094,0,0,0,0,1.14396667480469,0,0,1.13145446777344,0,0,0,0.728927612304688,0,0,0,0,0,0.946113586425781,0,0,0,0,-9.04596710205078,0,0,1.1490478515625,0,0,0,0,0,1.15135192871094,0,0,0,1.15823364257812,0,0,0,0,1.17108917236328,0,0,0,0.559150695800781,0,0,0,1.13839721679688,0,0,0,0,1.142578125,0,0,0,0,0,0,1.13220977783203,0,0,0,0,0,1.12483215332031,0,0,0,0,-9.13629913330078,0.690963745117188,0,0,0,0,0,0,0.571235656738281,0,0,0,0,0,0,0,0,0,0,0,0,1.14774322509766,1.16166687011719,0,0,0,0,0,1.14612579345703,0,0,0,0,0.685882568359375,0.574668884277344,0,0,0,0,0.575668334960938,0,0,0,0,0,0,0.576805114746094,0,0,0,0,0,0,0,0,0,0.832565307617188,0,0,0,0,0,0.618072509765625,0,0,0,0,0,0,0.66619873046875,0,0,0,0,0,0,-9.53120422363281,0.901168823242188,0,0,0,0,0,0.768974304199219,0,0,0.843315124511719,0,0,0,0,0,0,0,0,0.569244384765625,0,0,0,0,0.618446350097656,0,0,0,0,0,0.571235656738281,0,0,0,0.667648315429688,0,0,0,0,0,0,0,0.98370361328125,0,0,0,0,0.560592651367188,0,0,0,0,0,0,1.11579895019531,0,0,0,1.12989807128906,0,0,0,0,0,0,0.551071166992188,0,0,0,0,0,0,-9.04618072509766,0,0,0,0,0,0,0,0.573234558105469,0,0,0,0,0,0,0,0,0,0.641716003417969,0,0,0,0,0,0,0.572891235351562,0,0,0,1.13869476318359,1.14333343505859,1.12207794189453,0,1.13894653320312,0,0,0,1.11991119384766,0,0,0,0,0,0,0,1.11831665039062,0,0,0,0,-9.05954742431641,0,0,0,0,0,1.14522552490234,0,0,0,0,0,1.14807891845703,1.14686584472656,0,0,0,0,1.12898254394531,0,0,0,0,0,0,1.13214111328125,0,0,0,0,0,0,1.12944030761719,0,0,0,0,0,0,0,0,0.563270568847656,0,0,0,0,0,0,0,0,0,0],&#34;filename&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},&#34;interval&#34;:10,&#34;files&#34;:[],&#34;prof_output&#34;:&#34;/var/folders/f3/t51slq3x2dlfgk3ksp7vddzm0000gq/T//RtmpqnUq8M/filec0d6942e1b0.prof&#34;,&#34;highlight&#34;:{&#34;output&#34;:[&#34;^output\\$&#34;],&#34;gc&#34;:[&#34;^&lt;GC&gt;$&#34;],&#34;stacktrace&#34;:[&#34;^\\.\\.stacktraceo(n|ff)\\.\\.$&#34;]},&#34;split&#34;:&#34;h&#34;}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;div id=&#34;htmlwidget-2&#34; style=&#34;width:100%;height:600px;&#34; class=&#34;profvis html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;message&#34;:{&#34;prof&#34;:{&#34;time&#34;:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,12,12,12,12,12,12,13,13,13,13,13,13,13,14,14,14,14,14,14,15,15,15,15,15,15,15,16,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,19,19,19,19,19,19,19,20,20,20,20,20,20,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,23],&#34;depth&#34;:[24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,1],&#34;label&#34;:[&#34;h&#34;,&#34;tryInline&#34;,&#34;cmpCall&#34;,&#34;cmp&#34;,&#34;h&#34;,&#34;tryInline&#34;,&#34;cmpCall&#34;,&#34;cmp&#34;,&#34;cmpWhileBody&#34;,&#34;h&#34;,&#34;tryInline&#34;,&#34;cmpCall&#34;,&#34;cmp&#34;,&#34;h&#34;,&#34;tryInline&#34;,&#34;cmpCall&#34;,&#34;cmp&#34;,&#34;genCode&#34;,&#34;cmpfun&#34;,&#34;compiler:::tryCmpfun&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;asNamespace&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;sum&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;::&#34;,&#34;sum&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;sum&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRProp&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;local&#34;],&#34;filenum&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,1,null,null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,1,null,null,null,null,null],&#34;linenum&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,3,null,null,null,null,null,null,3,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,null,3,null,null,null,null,null,3,null,null,null,null,null,null,3,null,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,3,null,null,null,null,null,null,3,null,null,null,null,null,3,null,null,null,null,null,null,3,null,null,null,null,3,null,null,null,null,null,null,3,null,null,null,null,null,null,3,null,null,null,null,null,null,3,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,null,3,null,null,null,null,null],&#34;memalloc&#34;:[29.4016342163086,29.4016342163086,29.4016342163086,29.4016342163086,29.4016342163086,29.4016342163086,29.4016342163086,29.4016342163086,29.4016342163086,29.4016342163086,29.4016342163086,29.4016342163086,29.4016342163086,29.4016342163086,29.4016342163086,29.4016342163086,29.4016342163086,29.4016342163086,29.4016342163086,29.4016342163086,29.4016342163086,29.4016342163086,29.4016342163086,29.4016342163086,33.1294097900391,33.1294097900391,33.1294097900391,33.1294097900391,33.1294097900391,33.1294097900391,33.1294097900391,36.9196166992188,36.9196166992188,36.9196166992188,36.9196166992188,36.9196166992188,36.9196166992188,36.9196166992188,40.6353149414062,40.6353149414062,40.6353149414062,40.6353149414062,40.6353149414062,40.6353149414062,44.4013442993164,44.4013442993164,44.4013442993164,44.4013442993164,44.4013442993164,44.4013442993164,44.4013442993164,44.4013442993164,47.9738082885742,47.9738082885742,47.9738082885742,47.9738082885742,47.9738082885742,47.9738082885742,47.9738082885742,47.9738082885742,47.9738082885742,50.7925491333008,50.7925491333008,50.7925491333008,50.7925491333008,50.7925491333008,50.7925491333008,54.4029541015625,54.4029541015625,54.4029541015625,54.4029541015625,54.4029541015625,54.4029541015625,54.4029541015625,57.7861404418945,57.7861404418945,57.7861404418945,57.7861404418945,57.7861404418945,57.7861404418945,57.7861404418945,57.7861404418945,57.7861404418945,60.8605194091797,60.8605194091797,60.8605194091797,60.8605194091797,60.8605194091797,60.8605194091797,60.8605194091797,60.8605194091797,63.9813613891602,63.9813613891602,63.9813613891602,63.9813613891602,63.9813613891602,63.9813613891602,63.9813613891602,63.9813613891602,30.9189910888672,30.9189910888672,30.9189910888672,30.9189910888672,30.9189910888672,30.9189910888672,34.2111053466797,34.2111053466797,34.2111053466797,34.2111053466797,34.2111053466797,34.2111053466797,34.2111053466797,37.2940444946289,37.2940444946289,37.2940444946289,37.2940444946289,37.2940444946289,37.2940444946289,40.3722076416016,40.3722076416016,40.3722076416016,40.3722076416016,40.3722076416016,40.3722076416016,40.3722076416016,44.9911117553711,44.9911117553711,44.9911117553711,44.9911117553711,44.9911117553711,48.13623046875,48.13623046875,48.13623046875,48.13623046875,48.13623046875,48.13623046875,48.13623046875,51.1484603881836,51.1484603881836,51.1484603881836,51.1484603881836,51.1484603881836,51.1484603881836,51.1484603881836,54.1540451049805,54.1540451049805,54.1540451049805,54.1540451049805,54.1540451049805,54.1540451049805,54.1540451049805,58.4726867675781,58.4726867675781,58.4726867675781,58.4726867675781,58.4726867675781,58.4726867675781,53.3706970214844,53.3706970214844,53.3706970214844,53.3706970214844,53.3706970214844,53.3706970214844,53.3706970214844,53.3706970214844,34.0440902709961,34.0440902709961,34.0440902709961,34.0440902709961,34.0440902709961,34.0440902709961,34.0440902709961,34.0440902709961,34.0440902709961,37.4975051879883],&#34;meminc&#34;:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.72777557373047,0,0,0,0,0,0,3.79020690917969,0,0,0,0,0,0,3.7156982421875,0,0,0,0,0,3.76602935791016,0,0,0,0,0,0,0,3.57246398925781,0,0,0,0,0,0,0,0,2.81874084472656,0,0,0,0,0,3.61040496826172,0,0,0,0,0,0,3.38318634033203,0,0,0,0,0,0,0,0,3.07437896728516,0,0,0,0,0,0,0,3.12084197998047,0,0,0,0,0,0,0,-33.062370300293,0,0,0,0,0,3.2921142578125,0,0,0,0,0,0,3.08293914794922,0,0,0,0,0,3.07816314697266,0,0,0,0,0,0,4.61890411376953,0,0,0,0,3.14511871337891,0,0,0,0,0,0,3.01222991943359,0,0,0,0,0,0,3.00558471679688,0,0,0,0,0,0,4.31864166259766,0,0,0,0,0,-5.10198974609375,0,0,0,0,0,0,0,-19.3266067504883,0,0,0,0,0,0,0,0,3.45341491699219],&#34;filename&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null]},&#34;interval&#34;:10,&#34;files&#34;:[{&#34;filename&#34;:&#34;&lt;expr&gt;&#34;,&#34;content&#34;:&#34;set.seed(2009)\nprofvis({\n    NullDistFSNDR_aw &lt;- fastSimNullDistRProp(sex ~ time, success=\&#34;Female\&#34;, data=tips)\n})&#34;,&#34;normpath&#34;:&#34;&lt;expr&gt;&#34;}],&#34;prof_output&#34;:&#34;/var/folders/f3/t51slq3x2dlfgk3ksp7vddzm0000gq/T//RtmpqnUq8M/filec0d7610df2f.prof&#34;,&#34;highlight&#34;:{&#34;output&#34;:[&#34;^output\\$&#34;],&#34;gc&#34;:[&#34;^&lt;GC&gt;$&#34;],&#34;stacktrace&#34;:[&#34;^\\.\\.stacktraceo(n|ff)\\.\\.$&#34;]},&#34;split&#34;:&#34;h&#34;}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;div id=&#34;htmlwidget-3&#34; style=&#34;width:100%;height:600px;&#34; class=&#34;profvis html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-3&#34;&gt;{&#34;x&#34;:{&#34;message&#34;:{&#34;prof&#34;:{&#34;time&#34;:[1,1,1,1,1,1,2,2,2,2,2,2,2,3,4,4,4,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,8,8,8,8,8,8,8,9,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,13,13,13,13,14,14,14,14,14,14,14,15,15,15,15,15,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,18,18,19,19,19,19,19,19,20,20,20,21,21,21,21,21,21,21,22,22,22,22,22,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,29,29,29,29,30,30,30,30,30,30,30,31,31,31,31,31,31,32,32,32,33,33,33,33,33,33,33,33,33,33,34,35,35,35,35,36,36,36,36,37,37,37,37,37,37,38,38,38,38,38,38,39,40,40,40,40,40,41,41,41,41,41,41,41,42,42,42,43,43,43,43,43,43,44,44,44,44,45,45,45,46,46,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,48,48,49,49,49,49,50,50,50,51,51,51,51,51,51,51,51,51,52,52,52,52,52,52,53,53,53,53,53,53,54,54,54,54,54,55,55,55,55,55,55,55,55,55,55,56,56,56,56,56,56,57,57,57,58,58,58,58,58,59,59,59,60,60,60,60,60,60,60,60,61,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,63,63,63,63,63,63,64,64,64,64,64,64,64,64,64,64,64,64,65,65,65,65,65,66,66,66,66,66,66,66,67,67,67,68,68,68,68,68,68,68,68,69,69,69,69,69,69,69,69,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,74,74,74,74,74,74,75,76,76,76,76,76,76,76,77,77,77,77,77,77,78,78,78,78,78,79,79,79,79,79,79,79,79,79,79,79,79,80,80,80,80,80,80,80,80,81,81,81,81,81,82,82,82,82,82,82,82,82,82,82,82,83,83,83,83,83,84,84,84,84,84,84,84,85,85,85,85,85,85,86,86,86,86,87,87,87,87,87,88,88,88,88,88,88,88,89,89,89,89,90,90,91,91,91,91,91,91,91,91,91,92,92,92,92,93,93,93,93,94,94,94,94,95,95,95,95,95,96,96,96,96,96,97,97,97,97,97,97,97,97,97,98,98,98,98,98,98,98,99,99,99,99,99,99,99,99,100,100,100,100,100,100,101,101,101,101,101,101,101,101,101,102,102,102,103,103,103,103,103,104,104,104,104,104,104,105,105,105,105,105,105,105,106,106,106,106,106,106,106,106,106,107,107,107,107,107,107,108,108,108,108,108,108,108,108,109,109,109,109,109,109,109,109,110,110,110,110,111,111,111,111,111,111,111,111,112,112,112,112,112,113,113,113,113,113,113,114,114,114,114,114,114,114,114,115,115,115,115,116,116,116,116,116,117,117,117,117,117,118,118,118,118,118,118,119,119,119,119,119,119,119,119,120,120,120,120,120,120,120,120,120,121,121,121,121,121,121,122,122,122,122,122,122,122,123,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,126,126,126,126,127,127,127,127,127,127,128,128,128,128,128,128,128,128,128,129,129,129,129,129,129,130,130,130,130,130,130,131,131,131,131,131,131,132,132,132,132,133,133,133,133,133,133,134,134,134,134,134,134,135,135,135,135,135,135,135,136,137,138,138,138,138,138,139,139,139,139,139,139,139,140,140,140,140,140,140,140,140,141,141,141,141,141,141,141,142,142,142,142,142,142,142,143,143,143,143,143,143,143,144,144,145,145,145,145,145,145,145,145,146,146,146,146,147,147,147,147,147,147,147,147,148,149,149,149,149,150,151,151,151,151,151,151,151,151,152,153,153,153,153,153,153,153,153,154,154,154,154,154,154,154,154,155,155,155,155,155,155,155,155,155,155,156,156,156,156,157,157,157,157,157,157,157,158,158,158,158,159,159,159,159,160,160,161,161,161,161,161,161,161,162,162,162,162,162,162,162,162,163,163,163,163,164,164,164,164,165,165,165,165,165,165,165,165,165,165,165,166,167,167,167,167,167,167,167,168,168,168,168,168,168,168,168,169,169,169,169,169,169,169,169,170,170,170,170,170,170,171,171,171,171,171,171,172,172,172,173,173,173,173,173,173,173,173,174,174,174,175,175,175,175,175,175,175,176,176,176,176,176,176,176,176,176,176,177,177,177,177,177,177,178,179,179,179,179,179,179,180,180,180,180,180,180,180,180,180,180,180,181,181,181,181,181,181,181,182,182,182,182,182,182,182,182,182,182,183,183,183,183,183,183,184,184,184,185,185,185,185,185,185,185,186,186,186,186,186,186,187,187,187,187,187,187,187,187,187,188,188,188,188,188,188,188,189,189,190,190,190,190,190,191,191,191,191,191,191,191,191,191,191,192,193,193,193,193,193,193,194,195,195,195,195,196,196,196,196,196,196,197,197,197,197,197,197,197,197,198,198,198,198,198,198,199,199,199,199,199,199,200,200,200,200,200,201,201,201,201,201,201,201,201,201,201,201,201,202,202,202,202,202,202,202,203,203,203,203,203,203,203,203,204,204,204,204,204,204,205,205,205,205,206,206,206,206,207,207,207,207,208,209,209,209,209,209,209,210,211,211,211,211,211,211,211,211,211,211,212,212,212,212,213,213,214,214,214,214,214,214,214,214,215,215,215,215,215,215,216,216,216,216,216,216,217,217,217,217,217,218,218,218,218,219,219,219,219,219,219,219,220,220,220,220,220,220,221,221,221,221,221,221,221,221,221,221,221,221,222,222,222,222,223,223,223,223,223,223,224,224,224,224,224,224,224,225,225,225,225,225,225,226,226,226,226,227,227,227,227,227,228,228,228,228,228,228,229,229,229,229,229,230,230,230,230,230,230,231,231,231,231,231,231,231,231,231,232,232,232,232,232,232,232,232,233,233,233,233,233,234,234,234,234,234,234,234,234,234,235,235,235,235,235,235,235,235,235,235,236,236,236,237,237,237,237,237,237,237,238,238,238,238,238,239,239,239,239,239,239,239,240,240,240,240,240,240,241,241,241,241,241,241,242,242,242,242,242,243,243,243,243,244,244,244,244,244,244,244,245,245,245,245,245,246,246,246,246,246,247,247,247,247,248,248,248,248,249,249,249,249,249,249,249,249,249,249,250,250,250,251,251,251,251,251,251,251,252,252,252,252,252,253,253,253,253,254,254,254,254,254,254,254,254,254,254,255,255,255,255,255,255,255,255,256,256,256,256,256,256,257,257,257,257,257,257,257,258,258,258,258,258,258,258,259,259,259,259,259,260,260,260,260,260,261,261,261,261,261,262,262,262,262,262,262,262,263,263,263,263,263,264,264,264,264,264,264,265,265,265,265,265,265,265,265,265,265,266,266,266,266,266,267,267,267,267,267,267,267,267,268,268,269,269,269,269,269,269,269,269,270,270,270,270,270,271,271,271,271,271,271,271,271,271,272,272,272,272,272,273,273,273,273,273,274,274,274,274,274,275,276,276,276,276,276,276,276,276,277,277,277,277,277,277,277,277,278,278,278,278,279,279,279,279,279,279,279,279,279,280,280,280,280,280,280,281,281,281,282,282,282,282,282,283,284,284,284,284,284,285,285,285,285,285,285,285,286,286,287,287,287,287,288,288,288,288,288,288,289,289,289,289,289,289,289,289,289,290,290,290,290,290,291,291,291,291,291,291,291,291,291,291,291,292,292,292,292,292,293,293,293,293,294,294,294,294,294,294,294,294,295,295,295,295,295,295,295,296,297,297,297,297,297,297,298,298,298,298,298,298,299,300,300,300,301,301,301,301,301,301,301,301,301,302,302,302,302,302,302,302,302,303,303,303,303,303,303,304,304,304,304,304,304,304,304,305,305,305,305,305,305,306,306,307,307,307,308,308,308,308,309,309,309,309,309,309,309,310,310,310,310,310,310,311,311,311,311,311,312,312,312,312,313,313,313,313,314,314,314,314,314,315,315,315,315,315,315,316,316,316,316,316,316,317,318,318,318,318,318,318,318,318,318,319,319,319,319,319,319,319,320,320,320,320,321,321,321,321,321,321,321,321,321,321,322,322,322,322,322,322,323,323,323,324,324,324,324,324,324,324,324,324,325,325,325,325,326,326,326,326,326,326,326,326,327,327,327,327,327,328,329,329,329,329,330,330,330,330,330,330,330,331,331,331,331,331,331,332,332,332,332,332,332,333,333,333,333,333,334,334,334,334,335,335,335,335,336,336,336,337,337,337,337,338,338,338,338,339,340,340,340,340,340,340,341,341,341,341,341,342,343,343,343,343,343,343,344,344,344,345,345,345,345,345,345,345,346,346,346,346,346,347,347,347,347,347,347,348,348,348,348,348,349,349,349,349,349,349,349,350,350,350,350,350,351,351,351,351,351,351,351,351,351,351,352,352,352,352,352,352,352,353,353,353,353,353,353,354,354,354,354,354,354,354,355,355,355,355,355,355,355,356,356,356,356,356,356,357,357,357,357,357,358,358,358,358,359,359,359,359,359,360,360,360,360,360,360,360,360,361,361,361,361,361,361,362,363,363,363,363,363,363,364,364,364,364,364,364,364,364,365,366,366,366,366,366,366,367,367,367,367,367,367,367,368,368,368,368,368,368,368,369,369,369,369,369,370,371,372,372,372,372,372,372,372,372,372,373,373,373,373,373,373,373,373,373,373,374,374,374,374,375,375,375,375,375,375,375,375,376,376,376,376,376,376,376,376,376,377,377,377,377,377,377,378,378,378,378,378,378,379,379,379,380,380,380,380,380,380,380,380,380,381,381,381,381,381,381,381,382,382,382,382,383,383,383,383,383,383,384,384,384,384,384,384,384,384,384,384,385,385,385,385,385,385,385,386,386,386,386,386,386,386,386,386,386,386,386,387,388,389,390,390,390,390,390,390,391,391,391,391,391,391,391,391,391,391,391,392,392,392,392,392,392,392,393,393,393,393,393,393,393,394,394,394,394,395,395,395,395,395,395,396,396,396,396,396,397,398,398,398,398,398,398,399,399,399,399,399,399,400,401,401,401,401,401,401,401,401,401,402,403,403,403,403,403,403,403,404,405,405,405,405,405,405,405,405,405,405,405,406,406,406,406,406,406,407,408,408,408,408,409,409,409,409,409,409,410,410,410,410,410,410,411,411,411,411,411,411,412,412,412,412,412,412,412,412,412,412,413,413,413,413,413,413,413,414,414,414,414,414,414,414,414,414,415,415,415,415,415,416,416,416,416,416,416,416,417,417,417,417,417,417,417,417,417,417,417,418,418,418,418,418,418,418,418,419,419,419,419,419,420,420,420,420,420,420,420,420,421,421,421,422,423,423,423,424,424,424,424,424,424,424,425,425,425,425,425,425,425,425,426,426,426,426,426,426,426,426,426,427,427,427,427,427,427,427,428,428,428,428,428,428,429,429,429,429,430,430,430,430,430,430,431,431,431,431,432,432,432,432,432,432,432,432,432,432,433,433,433,433,433,433,434,434,434,434,434,434,434,435,436,436,436,436,436,436,436,436,436,436,437,437,437,437,437,437,437,438,438,438,438,438,438,438,439,439,439,439,439,440,440,440,440,440,440,440,441,441,441,441,441,441,442,442,442,442,442,442,442,443,444,444,444,444,444,444,444,444,444,444,444,444,445,445,445,445,446,446,446,446,446,446,447,447,447,447,447,447,447,447,447,447,448,448,448,448,448,448,448,449,449,449,449,449,449,449,450,450,450,450,450,450,450,450,450,451,451,451,451,451,451,451,451,451,452,452,452,452,452,452,453,453,453,453,453,453,453,453,453,453,454,454,454,455,456,456,456,456,456,456,457,457,458,458,458,458,458,458,458,459,459,459,459,459,459,459,459,459,460,460,460,460,460,460,460,460,461,461,461,461,461,461,462,462,462,462,462,462,462,462,462,463,463,463,463,463,463,463,463,464,464,464,464,464,464,464,464,465,465,465,465,465,465,465,466,467,467,467,467,467,468,468,468,468,468,468,468,469,469,469,469,469,469,469,469,469,469,470,470,470,470,470,470,470,470,470,471,471,471,471,471,471,471,472,472,472,472,472,472,473,473,473,473,473,473,474,474,474,474,475,475,475,475,476,476,476,476,476,476,477,477,477,477,477,477,477,477,477,477,477,477,478,478,478,478,478,478,479,479,479,479,479,479,479,480,480,480,480,480,480,480,480,480,480,481,481,481,481,481,481,481,482,482,482,482,482,482,483,483,483,483,483,483,484,484,484,484,485,485,485,486,487,487,487,487,487,487,488,488,488,488,488,488,488,489,490,490,490,490,490,490,491,491,491,491,491,491,491,491,491,491,492,492,492,492,492,492,493,494,495,495,495,495,495,495,495,495,495,496,496,496,496,496,496,496,497,497,497,497,497,498,498,498,498,499,499,499,499,499,499,499,500,500,500,501,501,501,501,501,501,502,502,502,502,502,502,503,503,503,503,503,504,504,504,504,504,504,505,505,505,505,505,505,506,506,506,506,506,506,506,507,507,507,507,507,507,508,508,508,508,508,508,508,508,508,509,510,511,511,511,511,511,511,511,512,513,513,513,513,513,514,514,514,514,514,514,514,514,514,514,515,515,515,515,515,515,515,515,515,516,516,516,516,516,516,517,517,517,517,517,517,518,518,518,518,518,518,518,518,518,519,519,519,519,519,519,519,520,520,520,520,520,521,521,521,521,521,521,521,521,522,522,522,522,522,522,522,522,523,524,524,524,524,524,524,524,524,524,525,526,526,526,526,526,526,527,527,527,527,527,527,527,527,528,528,528,528,528,528,529,529,529,529,529,530,530,530,530,530,530,531,531,531,531,531,531,531,531,531,531,532,532,532,532,532,532,532,532,532,532,533,533,533,533,534,534,534,534,534,534,534,534,534,535,535,535,535,535,535,535,535,535,536,536,536,536,536,536,536,536,536,537,537,537,537,537,537,537,537,537,538,538,538,538,538,538,538,538,538,539,539,539,539,539,539,539,539,539,540,540,540,540,540,540,540,540,540,541,541,541,541,541,541,541,541,541,542,542,542,542,542,542,543,543,543,543,543,543,543,544,544,544,544,544,544,544,545,545,545,545,545,546,547,547,547,547,547,547,547,547,548,548,548,548,548,548,548,549,549,549,549,549,549,550,550,550,550,550,550,550,551,551,551,551,551,551,551,551,551,552,552,552,552,552,552,552,552,553,553,553,554,555,555,555,555,555,555,555,555,555,555,556,556,556,556,556,556,557,558,558,558,558,559,560,560,560,560,560,560,560,560,560,561,561,561,561,561,561,562,562,562,562,562,562,562,563,563,563,563,564,564,564,564,565,565,565,565,565,565,566,566,566,566,566,566,567,567,567,567,567,567,567,567,567,567,567,568,568,568,568,568,568,569,569,569,569,569,569,570,570,570,570,570,570,570,570,570,570,571,571,571,571,571,572,572,572,572,572,572,573,573,573,573,573,573,573,574,574,574,574,575,575,575,575,575,575,575,575,575,575,576,576,576,576,576,577,577,577,577,577,577,577,577,577,577,577,577,578,578,578,578,578,578,579,579,579,579,579,580,580,580,580,580,580,580,580,580,581,581,581,581,581,581,581,581,581,582,582,582,582,582,583,583,584,584,584,584,584,584,584,585,585,585,585,585,585,585,585,586,586,586,586,586,586,587,587,587,587,587,588,588,588,588,588,588,588,589,589,589,589,589,589,589,590,590,590,590,590,590,591,591,591,591,592,592,592,592,592,592,592,592,593,593,593,593,594,594,594,594,594,594,595,595,595,595,595,595,596,596,596,596,596,596],&#34;depth&#34;:[6,5,4,3,2,1,7,6,5,4,3,2,1,1,8,7,6,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,3,2,1,10,9,8,7,6,5,4,3,2,1,1,4,3,2,1,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,1,5,4,3,2,1,7,6,5,4,3,2,1,3,2,1,6,5,4,3,2,1,4,3,2,1,3,2,1,2,1,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,4,3,2,1,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,3,2,1,5,4,3,2,1,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,1,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,2,1,9,8,7,6,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,3,2,1,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,1,1,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,4,3,2,1,8,7,6,5,4,3,2,1,1,4,3,2,1,1,8,7,6,5,4,3,2,1,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,4,3,2,1,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,4,3,2,1,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,3,2,1,8,7,6,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,1,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,1,6,5,4,3,2,1,1,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,1,6,5,4,3,2,1,1,10,9,8,7,6,5,4,3,2,1,4,3,2,1,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,10,9,8,7,6,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,3,2,1,5,4,3,2,1,1,5,4,3,2,1,7,6,5,4,3,2,1,2,1,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,1,6,5,4,3,2,1,6,5,4,3,2,1,1,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,2,1,3,2,1,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,3,2,1,9,8,7,6,5,4,3,2,1,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,1,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,3,2,1,4,3,2,1,4,3,2,1,1,6,5,4,3,2,1,5,4,3,2,1,1,6,5,4,3,2,1,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,1,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,1,1,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,1,1,1,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,1,6,5,4,3,2,1,6,5,4,3,2,1,1,9,8,7,6,5,4,3,2,1,1,7,6,5,4,3,2,1,1,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,1,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,3,2,1,1,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,1,12,11,10,9,8,7,6,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,3,2,1,1,6,5,4,3,2,1,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,1,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,4,3,2,1,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,3,2,1,1,6,5,4,3,2,1,7,6,5,4,3,2,1,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,1,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,4,3,2,1,7,6,5,4,3,2,1,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,1,1,7,6,5,4,3,2,1,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,1,9,8,7,6,5,4,3,2,1,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,4,3,2,1,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,3,2,1,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,1,4,3,2,1,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,4,3,2,1,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,5,4,3,2,1,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,8,7,6,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1],&#34;label&#34;:[&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;asNamespace&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;alist&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;alist&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;::&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;row.names&lt;-.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;::&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[.data.frame&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;::&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;rhs_or_expr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;::&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;asNamespace&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;~&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rlang::eval_tidy&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;alist&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs.parsedFormula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;rhs_or_expr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs_or_expr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;alist&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;::&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[[.data.frame&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs_or_expr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs_or_expr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;::&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs.parsedFormula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[.data.frame&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;alist&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;alist&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;alist&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rownames&lt;-&#34;,&#34;row.names&lt;-.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;dim.data.frame&#34;,&#34;ncol&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;::&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;::&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;asNamespace&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;::&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;alist&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;local&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;::&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;local&#34;,&#34;local&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;::&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;enexpr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;as.data.frame.vector&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;eval&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;::&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs_or_expr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;alist&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;alist&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;alist&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;asNamespace&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;local&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs_or_expr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;local&#34;,&#34;mosaicCore::joinFrames&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[[.data.frame&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;&lt;GC&gt;&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;::&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse1&#34;,&#34;as.data.frame.numeric&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;sample.default&#34;,&#34;shuffle&#34;,&#34;local&#34;,&#34;local&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.deparseOpts&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs.parsedFormula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;vapply&#34;,&#34;order&#34;,&#34;make.names&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;rhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;match.arg&#34;,&#34;order&#34;,&#34;factor&#34;,&#34;as.factor&#34;,&#34;interaction&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;split.default&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;mode&#34;,&#34;deparse&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;parse.formula&#34;,&#34;condition.formula&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;[.data.frame&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;deparse1&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;rhs_or_expr&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;alist&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;as.data.frame.character&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;deparse&#34;,&#34;data.frame&#34;,&#34;evalSubFormula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;mosaicCore::mosaic_formula_q&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;FUN&#34;,&#34;lapply&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;lhs.formula&#34;,&#34;mosaicCore::evalFormula&#34;,&#34;maggregate&#34;,&#34;mean_&#34;,&#34;diffmean&#34;,&#34;local&#34;,&#34;.list2tidy.data.frame&#34;,&#34;*&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;],&#34;filenum&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],&#34;linenum&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],&#34;memalloc&#34;:[29.4688034057617,29.4688034057617,29.4688034057617,29.4688034057617,29.4688034057617,29.4688034057617,29.9425506591797,29.9425506591797,29.9425506591797,29.9425506591797,29.9425506591797,29.9425506591797,29.9425506591797,30.3809661865234,30.8688278198242,30.8688278198242,30.8688278198242,30.8688278198242,30.8688278198242,30.8688278198242,30.8688278198242,30.8688278198242,31.3587341308594,31.3587341308594,31.3587341308594,31.3587341308594,31.3587341308594,31.8361587524414,31.8361587524414,31.8361587524414,31.8361587524414,31.8361587524414,31.8361587524414,31.8361587524414,31.8361587524414,31.8361587524414,32.3368072509766,32.3368072509766,32.3368072509766,32.3368072509766,32.8169784545898,32.8169784545898,32.8169784545898,32.8169784545898,32.8169784545898,32.8169784545898,32.8169784545898,33.682373046875,34.2825622558594,34.2825622558594,34.2825622558594,34.2825622558594,34.2825622558594,34.2825622558594,34.8033142089844,34.8033142089844,34.8033142089844,34.8033142089844,34.8033142089844,34.8033142089844,34.8033142089844,34.8033142089844,34.8033142089844,35.2803344726562,35.2803344726562,35.2803344726562,35.2803344726562,35.2803344726562,35.2803344726562,35.8827819824219,35.8827819824219,35.8827819824219,35.8827819824219,36.2967376708984,36.2967376708984,36.2967376708984,36.2967376708984,36.2967376708984,36.2967376708984,36.2967376708984,29.3482360839844,29.3482360839844,29.3482360839844,29.3482360839844,29.3482360839844,29.9457015991211,29.9457015991211,29.9457015991211,29.9457015991211,29.9457015991211,29.9457015991211,29.9457015991211,29.9457015991211,29.9457015991211,30.3801574707031,30.3801574707031,30.3801574707031,30.3801574707031,30.3801574707031,30.3801574707031,30.3801574707031,30.3801574707031,30.9971466064453,30.9971466064453,30.9971466064453,30.9971466064453,30.9971466064453,30.9971466064453,31.5438613891602,31.5438613891602,31.5438613891602,31.5438613891602,31.5438613891602,31.5438613891602,32.0704040527344,32.0704040527344,32.0704040527344,32.5319976806641,32.5319976806641,32.5319976806641,32.5319976806641,32.5319976806641,32.5319976806641,32.5319976806641,32.9965667724609,32.9965667724609,32.9965667724609,32.9965667724609,32.9965667724609,33.5725173950195,33.5725173950195,33.5725173950195,33.5725173950195,33.5725173950195,33.5725173950195,34.0593872070312,34.0593872070312,34.0593872070312,34.0593872070312,34.0593872070312,34.0593872070312,34.0593872070312,34.0593872070312,34.0593872070312,34.0593872070312,34.4994430541992,34.4994430541992,34.4994430541992,34.4994430541992,34.4994430541992,34.4994430541992,34.9794387817383,34.9794387817383,34.9794387817383,34.9794387817383,34.9794387817383,34.9794387817383,34.9794387817383,34.9794387817383,34.9794387817383,35.4476013183594,35.4476013183594,35.4476013183594,35.4476013183594,35.4476013183594,35.4476013183594,35.4476013183594,35.4476013183594,35.8830184936523,35.8830184936523,35.8830184936523,35.8830184936523,35.8830184936523,35.8830184936523,35.8830184936523,35.8830184936523,35.8830184936523,36.3744735717773,36.3744735717773,36.3744735717773,36.3744735717773,29.3432693481445,29.3432693481445,29.3432693481445,29.3432693481445,29.3432693481445,29.3432693481445,29.3432693481445,29.8643112182617,29.8643112182617,29.8643112182617,29.8643112182617,29.8643112182617,29.8643112182617,30.3085556030273,30.3085556030273,30.3085556030273,30.8178176879883,30.8178176879883,30.8178176879883,30.8178176879883,30.8178176879883,30.8178176879883,30.8178176879883,30.8178176879883,30.8178176879883,30.8178176879883,31.3264312744141,31.7900161743164,31.7900161743164,31.7900161743164,31.7900161743164,32.2732467651367,32.2732467651367,32.2732467651367,32.2732467651367,32.8091506958008,32.8091506958008,32.8091506958008,32.8091506958008,32.8091506958008,32.8091506958008,33.2465591430664,33.2465591430664,33.2465591430664,33.2465591430664,33.2465591430664,33.2465591430664,33.7837371826172,34.3253173828125,34.3253173828125,34.3253173828125,34.3253173828125,34.3253173828125,34.7645111083984,34.7645111083984,34.7645111083984,34.7645111083984,34.7645111083984,34.7645111083984,34.7645111083984,35.2385482788086,35.2385482788086,35.2385482788086,35.7189636230469,35.7189636230469,35.7189636230469,35.7189636230469,35.7189636230469,35.7189636230469,36.2155838012695,36.2155838012695,36.2155838012695,36.2155838012695,29.1674194335938,29.1674194335938,29.1674194335938,29.6735153198242,29.6735153198242,30.1658325195312,30.1658325195312,30.1658325195312,30.1658325195312,30.1658325195312,30.1658325195312,30.6361999511719,30.6361999511719,30.6361999511719,30.6361999511719,30.6361999511719,30.6361999511719,30.6361999511719,30.6361999511719,30.6361999511719,30.6361999511719,30.6361999511719,31.1295928955078,31.1295928955078,31.1295928955078,31.1295928955078,31.6313858032227,31.6313858032227,31.6313858032227,32.1223526000977,32.1223526000977,32.1223526000977,32.1223526000977,32.1223526000977,32.1223526000977,32.1223526000977,32.1223526000977,32.1223526000977,32.6207580566406,32.6207580566406,32.6207580566406,32.6207580566406,32.6207580566406,32.6207580566406,33.0889053344727,33.0889053344727,33.0889053344727,33.0889053344727,33.0889053344727,33.0889053344727,33.5926284790039,33.5926284790039,33.5926284790039,33.5926284790039,33.5926284790039,34.1377563476562,34.1377563476562,34.1377563476562,34.1377563476562,34.1377563476562,34.1377563476562,34.1377563476562,34.1377563476562,34.1377563476562,34.1377563476562,34.5738220214844,34.5738220214844,34.5738220214844,34.5738220214844,34.5738220214844,34.5738220214844,35.0537185668945,35.0537185668945,35.0537185668945,35.5517807006836,35.5517807006836,35.5517807006836,35.5517807006836,35.5517807006836,36.0231628417969,36.0231628417969,36.0231628417969,29.3682708740234,29.3682708740234,29.3682708740234,29.3682708740234,29.3682708740234,29.3682708740234,29.3682708740234,29.3682708740234,29.817512512207,29.817512512207,29.817512512207,29.817512512207,29.817512512207,29.817512512207,29.817512512207,29.817512512207,29.817512512207,30.7139053344727,30.7139053344727,30.7139053344727,30.7139053344727,30.7139053344727,30.7139053344727,30.7139053344727,30.7139053344727,31.1683044433594,31.1683044433594,31.1683044433594,31.1683044433594,31.1683044433594,31.1683044433594,32.0626602172852,32.0626602172852,32.0626602172852,32.0626602172852,32.0626602172852,32.0626602172852,32.0626602172852,32.0626602172852,32.0626602172852,32.0626602172852,32.0626602172852,32.0626602172852,32.9590377807617,32.9590377807617,32.9590377807617,32.9590377807617,32.9590377807617,33.8412246704102,33.8412246704102,33.8412246704102,33.8412246704102,33.8412246704102,33.8412246704102,33.8412246704102,34.3123474121094,34.3123474121094,34.3123474121094,34.9365539550781,34.9365539550781,34.9365539550781,34.9365539550781,34.9365539550781,34.9365539550781,34.9365539550781,34.9365539550781,35.3760604858398,35.3760604858398,35.3760604858398,35.3760604858398,35.3760604858398,35.3760604858398,35.3760604858398,35.3760604858398,35.9164352416992,35.9164352416992,35.9164352416992,35.9164352416992,35.9164352416992,35.9164352416992,35.9164352416992,35.9164352416992,35.9164352416992,36.4041213989258,36.4041213989258,36.4041213989258,36.4041213989258,36.4041213989258,36.4041213989258,36.4041213989258,29.4151992797852,29.4151992797852,29.4151992797852,29.4151992797852,29.4151992797852,29.4151992797852,29.4151992797852,29.4151992797852,29.4151992797852,29.4151992797852,29.4151992797852,29.8282623291016,29.8282623291016,29.8282623291016,29.8282623291016,29.8282623291016,29.8282623291016,29.8282623291016,29.8282623291016,30.3319320678711,30.3319320678711,30.3319320678711,30.3319320678711,30.3319320678711,30.3319320678711,30.7847290039062,31.2616500854492,31.2616500854492,31.2616500854492,31.2616500854492,31.2616500854492,31.2616500854492,31.2616500854492,31.7166366577148,31.7166366577148,31.7166366577148,31.7166366577148,31.7166366577148,31.7166366577148,32.2377014160156,32.2377014160156,32.2377014160156,32.2377014160156,32.2377014160156,32.7151412963867,32.7151412963867,32.7151412963867,32.7151412963867,32.7151412963867,32.7151412963867,32.7151412963867,32.7151412963867,32.7151412963867,32.7151412963867,32.7151412963867,32.7151412963867,33.2013473510742,33.2013473510742,33.2013473510742,33.2013473510742,33.2013473510742,33.2013473510742,33.2013473510742,33.2013473510742,33.6940002441406,33.6940002441406,33.6940002441406,33.6940002441406,33.6940002441406,34.1340484619141,34.1340484619141,34.1340484619141,34.1340484619141,34.1340484619141,34.1340484619141,34.1340484619141,34.1340484619141,34.1340484619141,34.1340484619141,34.1340484619141,35.0155334472656,35.0155334472656,35.0155334472656,35.0155334472656,35.0155334472656,35.9021377563477,35.9021377563477,35.9021377563477,35.9021377563477,35.9021377563477,35.9021377563477,35.9021377563477,29.2593383789062,29.2593383789062,29.2593383789062,29.2593383789062,29.2593383789062,29.2593383789062,30.1629257202148,30.1629257202148,30.1629257202148,30.1629257202148,30.6070785522461,30.6070785522461,30.6070785522461,30.6070785522461,30.6070785522461,31.3168182373047,31.3168182373047,31.3168182373047,31.3168182373047,31.3168182373047,31.3168182373047,31.3168182373047,31.7610092163086,31.7610092163086,31.7610092163086,31.7610092163086,32.2250061035156,32.2250061035156,32.6716461181641,32.6716461181641,32.6716461181641,32.6716461181641,32.6716461181641,32.6716461181641,32.6716461181641,32.6716461181641,32.6716461181641,33.5761795043945,33.5761795043945,33.5761795043945,33.5761795043945,34.2180480957031,34.2180480957031,34.2180480957031,34.2180480957031,34.8924789428711,34.8924789428711,34.8924789428711,34.8924789428711,35.7757568359375,35.7757568359375,35.7757568359375,35.7757568359375,35.7757568359375,36.2150497436523,36.2150497436523,36.2150497436523,36.2150497436523,36.2150497436523,29.5884780883789,29.5884780883789,29.5884780883789,29.5884780883789,29.5884780883789,29.5884780883789,29.5884780883789,29.5884780883789,29.5884780883789,30.4921264648438,30.4921264648438,30.4921264648438,30.4921264648438,30.4921264648438,30.4921264648438,30.4921264648438,31.4035568237305,31.4035568237305,31.4035568237305,31.4035568237305,31.4035568237305,31.4035568237305,31.4035568237305,31.4035568237305,31.8552627563477,31.8552627563477,31.8552627563477,31.8552627563477,31.8552627563477,31.8552627563477,32.7651977539062,32.7651977539062,32.7651977539062,32.7651977539062,32.7651977539062,32.7651977539062,32.7651977539062,32.7651977539062,32.7651977539062,33.6614685058594,33.6614685058594,33.6614685058594,34.456787109375,34.456787109375,34.456787109375,34.456787109375,34.456787109375,34.9078369140625,34.9078369140625,34.9078369140625,34.9078369140625,34.9078369140625,34.9078369140625,35.7949447631836,35.7949447631836,35.7949447631836,35.7949447631836,35.7949447631836,35.7949447631836,35.7949447631836,36.2436981201172,36.2436981201172,36.2436981201172,36.2436981201172,36.2436981201172,36.2436981201172,36.2436981201172,36.2436981201172,36.2436981201172,29.6359405517578,29.6359405517578,29.6359405517578,29.6359405517578,29.6359405517578,29.6359405517578,30.5352325439453,30.5352325439453,30.5352325439453,30.5352325439453,30.5352325439453,30.5352325439453,30.5352325439453,30.5352325439453,30.9889831542969,30.9889831542969,30.9889831542969,30.9889831542969,30.9889831542969,30.9889831542969,30.9889831542969,30.9889831542969,31.899055480957,31.899055480957,31.899055480957,31.899055480957,32.8027877807617,32.8027877807617,32.8027877807617,32.8027877807617,32.8027877807617,32.8027877807617,32.8027877807617,32.8027877807617,33.6955718994141,33.6955718994141,33.6955718994141,33.6955718994141,33.6955718994141,34.590087890625,34.590087890625,34.590087890625,34.590087890625,34.590087890625,34.590087890625,35.4853973388672,35.4853973388672,35.4853973388672,35.4853973388672,35.4853973388672,35.4853973388672,35.4853973388672,35.4853973388672,36.3804321289062,36.3804321289062,36.3804321289062,36.3804321289062,29.7695541381836,29.7695541381836,29.7695541381836,29.7695541381836,29.7695541381836,30.2236785888672,30.2236785888672,30.2236785888672,30.2236785888672,30.2236785888672,31.1354370117188,31.1354370117188,31.1354370117188,31.1354370117188,31.1354370117188,31.1354370117188,32.0297698974609,32.0297698974609,32.0297698974609,32.0297698974609,32.0297698974609,32.0297698974609,32.0297698974609,32.0297698974609,32.4862060546875,32.4862060546875,32.4862060546875,32.4862060546875,32.4862060546875,32.4862060546875,32.4862060546875,32.4862060546875,32.4862060546875,33.3843536376953,33.3843536376953,33.3843536376953,33.3843536376953,33.3843536376953,33.3843536376953,34.2772598266602,34.2772598266602,34.2772598266602,34.2772598266602,34.2772598266602,34.2772598266602,34.2772598266602,35.1377639770508,35.5718307495117,35.5718307495117,35.5718307495117,35.5718307495117,35.5718307495117,36.2584228515625,36.2584228515625,36.2584228515625,36.2584228515625,36.2584228515625,36.2584228515625,36.2584228515625,36.2584228515625,36.2584228515625,36.2584228515625,29.1672592163086,29.1672592163086,29.1672592163086,29.1672592163086,29.7204666137695,29.7204666137695,29.7204666137695,29.7204666137695,29.7204666137695,29.7204666137695,30.1511688232422,30.1511688232422,30.1511688232422,30.1511688232422,30.1511688232422,30.1511688232422,30.1511688232422,30.1511688232422,30.1511688232422,30.7374725341797,30.7374725341797,30.7374725341797,30.7374725341797,30.7374725341797,30.7374725341797,31.1776580810547,31.1776580810547,31.1776580810547,31.1776580810547,31.1776580810547,31.1776580810547,31.6334075927734,31.6334075927734,31.6334075927734,31.6334075927734,31.6334075927734,31.6334075927734,32.1204071044922,32.1204071044922,32.1204071044922,32.1204071044922,32.6281356811523,32.6281356811523,32.6281356811523,32.6281356811523,32.6281356811523,32.6281356811523,33.0673141479492,33.0673141479492,33.0673141479492,33.0673141479492,33.0673141479492,33.0673141479492,33.5451583862305,33.5451583862305,33.5451583862305,33.5451583862305,33.5451583862305,33.5451583862305,33.5451583862305,34.1138000488281,34.8307113647461,35.2980346679688,35.2980346679688,35.2980346679688,35.2980346679688,35.2980346679688,36.177734375,36.177734375,36.177734375,36.177734375,36.177734375,36.177734375,36.177734375,35.1545639038086,35.1545639038086,35.1545639038086,35.1545639038086,35.1545639038086,35.1545639038086,35.1545639038086,35.1545639038086,30.0010223388672,30.0010223388672,30.0010223388672,30.0010223388672,30.0010223388672,30.0010223388672,30.0010223388672,30.5754928588867,30.5754928588867,30.5754928588867,30.5754928588867,30.5754928588867,30.5754928588867,30.5754928588867,31.3318176269531,31.3318176269531,31.3318176269531,31.3318176269531,31.3318176269531,31.3318176269531,31.3318176269531,31.7847290039062,31.7847290039062,32.2316360473633,32.2316360473633,32.2316360473633,32.2316360473633,32.2316360473633,32.2316360473633,32.2316360473633,32.2316360473633,33.0668334960938,33.0668334960938,33.0668334960938,33.0668334960938,33.4941940307617,33.4941940307617,33.4941940307617,33.4941940307617,33.4941940307617,33.4941940307617,33.4941940307617,33.4941940307617,33.940673828125,34.3820266723633,34.3820266723633,34.3820266723633,34.3820266723633,34.8190307617188,35.2509078979492,35.2509078979492,35.2509078979492,35.2509078979492,35.2509078979492,35.2509078979492,35.2509078979492,35.2509078979492,35.6973876953125,36.129264831543,36.129264831543,36.129264831543,36.129264831543,36.129264831543,36.129264831543,36.129264831543,36.129264831543,36.5185089111328,36.5185089111328,36.5185089111328,36.5185089111328,36.5185089111328,36.5185089111328,36.5185089111328,36.5185089111328,29.9837875366211,29.9837875366211,29.9837875366211,29.9837875366211,29.9837875366211,29.9837875366211,29.9837875366211,29.9837875366211,29.9837875366211,29.9837875366211,30.880485534668,30.880485534668,30.880485534668,30.880485534668,31.3242034912109,31.3242034912109,31.3242034912109,31.3242034912109,31.3242034912109,31.3242034912109,31.3242034912109,32.2319107055664,32.2319107055664,32.2319107055664,32.2319107055664,33.1084747314453,33.1084747314453,33.1084747314453,33.1084747314453,33.5796432495117,33.5796432495117,34.0598449707031,34.0598449707031,34.0598449707031,34.0598449707031,34.0598449707031,34.0598449707031,34.0598449707031,34.88720703125,34.88720703125,34.88720703125,34.88720703125,34.88720703125,34.88720703125,34.88720703125,34.88720703125,35.336296081543,35.336296081543,35.336296081543,35.336296081543,36.218391418457,36.218391418457,36.218391418457,36.218391418457,29.6138763427734,29.6138763427734,29.6138763427734,29.6138763427734,29.6138763427734,29.6138763427734,29.6138763427734,29.6138763427734,29.6138763427734,29.6138763427734,29.6138763427734,30.0651245117188,30.7877044677734,30.7877044677734,30.7877044677734,30.7877044677734,30.7877044677734,30.7877044677734,30.7877044677734,31.4225769042969,31.4225769042969,31.4225769042969,31.4225769042969,31.4225769042969,31.4225769042969,31.4225769042969,31.4225769042969,32.3242340087891,32.3242340087891,32.3242340087891,32.3242340087891,32.3242340087891,32.3242340087891,32.3242340087891,32.3242340087891,33.0380249023438,33.0380249023438,33.0380249023438,33.0380249023438,33.0380249023438,33.0380249023438,33.793098449707,33.793098449707,33.793098449707,33.793098449707,33.793098449707,33.793098449707,34.3139724731445,34.3139724731445,34.3139724731445,35.1285171508789,35.1285171508789,35.1285171508789,35.1285171508789,35.1285171508789,35.1285171508789,35.1285171508789,35.1285171508789,36.0187454223633,36.0187454223633,36.0187454223633,29.4029235839844,29.4029235839844,29.4029235839844,29.4029235839844,29.4029235839844,29.4029235839844,29.4029235839844,30.3046188354492,30.3046188354492,30.3046188354492,30.3046188354492,30.3046188354492,30.3046188354492,30.3046188354492,30.3046188354492,30.3046188354492,30.3046188354492,30.7599639892578,30.7599639892578,30.7599639892578,30.7599639892578,30.7599639892578,30.7599639892578,31.225830078125,32.1072998046875,32.1072998046875,32.1072998046875,32.1072998046875,32.1072998046875,32.1072998046875,32.9990692138672,32.9990692138672,32.9990692138672,32.9990692138672,32.9990692138672,32.9990692138672,32.9990692138672,32.9990692138672,32.9990692138672,32.9990692138672,32.9990692138672,33.8794937133789,33.8794937133789,33.8794937133789,33.8794937133789,33.8794937133789,33.8794937133789,33.8794937133789,34.7639694213867,34.7639694213867,34.7639694213867,34.7639694213867,34.7639694213867,34.7639694213867,34.7639694213867,34.7639694213867,34.7639694213867,34.7639694213867,35.3351821899414,35.3351821899414,35.3351821899414,35.3351821899414,35.3351821899414,35.3351821899414,35.7351760864258,35.7351760864258,35.7351760864258,36.1828231811523,36.1828231811523,36.1828231811523,36.1828231811523,36.1828231811523,36.1828231811523,36.1828231811523,29.1482849121094,29.1482849121094,29.1482849121094,29.1482849121094,29.1482849121094,29.1482849121094,29.7526931762695,29.7526931762695,29.7526931762695,29.7526931762695,29.7526931762695,29.7526931762695,29.7526931762695,29.7526931762695,29.7526931762695,30.196044921875,30.196044921875,30.196044921875,30.196044921875,30.196044921875,30.196044921875,30.196044921875,30.7620086669922,30.7620086669922,31.2365112304688,31.2365112304688,31.2365112304688,31.2365112304688,31.2365112304688,31.9272842407227,31.9272842407227,31.9272842407227,31.9272842407227,31.9272842407227,31.9272842407227,31.9272842407227,31.9272842407227,31.9272842407227,31.9272842407227,32.3889312744141,33.0649108886719,33.0649108886719,33.0649108886719,33.0649108886719,33.0649108886719,33.0649108886719,33.7405548095703,34.3846588134766,34.3846588134766,34.3846588134766,34.3846588134766,34.88916015625,34.88916015625,34.88916015625,34.88916015625,34.88916015625,34.88916015625,35.3597106933594,35.3597106933594,35.3597106933594,35.3597106933594,35.3597106933594,35.3597106933594,35.3597106933594,35.3597106933594,35.8633193969727,35.8633193969727,35.8633193969727,35.8633193969727,35.8633193969727,35.8633193969727,36.3445358276367,36.3445358276367,36.3445358276367,36.3445358276367,36.3445358276367,36.3445358276367,29.3378982543945,29.3378982543945,29.3378982543945,29.3378982543945,29.3378982543945,29.829704284668,29.829704284668,29.829704284668,29.829704284668,29.829704284668,29.829704284668,29.829704284668,29.829704284668,29.829704284668,29.829704284668,29.829704284668,29.829704284668,30.2728042602539,30.2728042602539,30.2728042602539,30.2728042602539,30.2728042602539,30.2728042602539,30.2728042602539,30.7555847167969,30.7555847167969,30.7555847167969,30.7555847167969,30.7555847167969,30.7555847167969,30.7555847167969,30.7555847167969,31.2977600097656,31.2977600097656,31.2977600097656,31.2977600097656,31.2977600097656,31.2977600097656,31.7953186035156,31.7953186035156,31.7953186035156,31.7953186035156,32.2932052612305,32.2932052612305,32.2932052612305,32.2932052612305,32.7845230102539,32.7845230102539,32.7845230102539,32.7845230102539,33.2697982788086,33.7498397827148,33.7498397827148,33.7498397827148,33.7498397827148,33.7498397827148,33.7498397827148,34.2020721435547,34.7134017944336,34.7134017944336,34.7134017944336,34.7134017944336,34.7134017944336,34.7134017944336,34.7134017944336,34.7134017944336,34.7134017944336,34.7134017944336,35.2002944946289,35.2002944946289,35.2002944946289,35.2002944946289,35.6783752441406,35.6783752441406,36.166374206543,36.166374206543,36.166374206543,36.166374206543,36.166374206543,36.166374206543,36.166374206543,36.166374206543,29.2067489624023,29.2067489624023,29.2067489624023,29.2067489624023,29.2067489624023,29.2067489624023,29.6467132568359,29.6467132568359,29.6467132568359,29.6467132568359,29.6467132568359,29.6467132568359,30.1847534179688,30.1847534179688,30.1847534179688,30.1847534179688,30.1847534179688,30.6878890991211,30.6878890991211,30.6878890991211,30.6878890991211,31.1272811889648,31.1272811889648,31.1272811889648,31.1272811889648,31.1272811889648,31.1272811889648,31.1272811889648,31.6106567382812,31.6106567382812,31.6106567382812,31.6106567382812,31.6106567382812,31.6106567382812,32.1132431030273,32.1132431030273,32.1132431030273,32.1132431030273,32.1132431030273,32.1132431030273,32.1132431030273,32.1132431030273,32.1132431030273,32.1132431030273,32.1132431030273,32.1132431030273,32.6139068603516,32.6139068603516,32.6139068603516,32.6139068603516,33.1371612548828,33.1371612548828,33.1371612548828,33.1371612548828,33.1371612548828,33.1371612548828,33.6329040527344,33.6329040527344,33.6329040527344,33.6329040527344,33.6329040527344,33.6329040527344,33.6329040527344,34.1099624633789,34.1099624633789,34.1099624633789,34.1099624633789,34.1099624633789,34.1099624633789,34.5427551269531,34.5427551269531,34.5427551269531,34.5427551269531,35.0491714477539,35.0491714477539,35.0491714477539,35.0491714477539,35.0491714477539,35.4882431030273,35.4882431030273,35.4882431030273,35.4882431030273,35.4882431030273,35.4882431030273,35.9275665283203,35.9275665283203,35.9275665283203,35.9275665283203,35.9275665283203,36.3740539550781,36.3740539550781,36.3740539550781,36.3740539550781,36.3740539550781,36.3740539550781,29.4139022827148,29.4139022827148,29.4139022827148,29.4139022827148,29.4139022827148,29.4139022827148,29.4139022827148,29.4139022827148,29.4139022827148,29.9175338745117,29.9175338745117,29.9175338745117,29.9175338745117,29.9175338745117,29.9175338745117,29.9175338745117,29.9175338745117,30.3704299926758,30.3704299926758,30.3704299926758,30.3704299926758,30.3704299926758,31.2671813964844,31.2671813964844,31.2671813964844,31.2671813964844,31.2671813964844,31.2671813964844,31.2671813964844,31.2671813964844,31.2671813964844,31.8976287841797,31.8976287841797,31.8976287841797,31.8976287841797,31.8976287841797,31.8976287841797,31.8976287841797,31.8976287841797,31.8976287841797,31.8976287841797,32.8008575439453,32.8008575439453,32.8008575439453,33.4640045166016,33.4640045166016,33.4640045166016,33.4640045166016,33.4640045166016,33.4640045166016,33.4640045166016,33.9374771118164,33.9374771118164,33.9374771118164,33.9374771118164,33.9374771118164,34.4443740844727,34.4443740844727,34.4443740844727,34.4443740844727,34.4443740844727,34.4443740844727,34.4443740844727,34.8988800048828,34.8988800048828,34.8988800048828,34.8988800048828,34.8988800048828,34.8988800048828,35.3436279296875,35.3436279296875,35.3436279296875,35.3436279296875,35.3436279296875,35.3436279296875,36.0134582519531,36.0134582519531,36.0134582519531,36.0134582519531,36.0134582519531,36.4495086669922,36.4495086669922,36.4495086669922,36.4495086669922,29.8153457641602,29.8153457641602,29.8153457641602,29.8153457641602,29.8153457641602,29.8153457641602,29.8153457641602,30.3842086791992,30.3842086791992,30.3842086791992,30.3842086791992,30.3842086791992,30.9922790527344,30.9922790527344,30.9922790527344,30.9922790527344,30.9922790527344,31.6659698486328,31.6659698486328,31.6659698486328,31.6659698486328,32.3793182373047,32.3793182373047,32.3793182373047,32.3793182373047,32.9319763183594,32.9319763183594,32.9319763183594,32.9319763183594,32.9319763183594,32.9319763183594,32.9319763183594,32.9319763183594,32.9319763183594,32.9319763183594,33.3572769165039,33.3572769165039,33.3572769165039,33.9110412597656,33.9110412597656,33.9110412597656,33.9110412597656,33.9110412597656,33.9110412597656,33.9110412597656,34.3707656860352,34.3707656860352,34.3707656860352,34.3707656860352,34.3707656860352,34.9074859619141,34.9074859619141,34.9074859619141,34.9074859619141,35.3558044433594,35.3558044433594,35.3558044433594,35.3558044433594,35.3558044433594,35.3558044433594,35.3558044433594,35.3558044433594,35.3558044433594,35.3558044433594,35.9408874511719,35.9408874511719,35.9408874511719,35.9408874511719,35.9408874511719,35.9408874511719,35.9408874511719,35.9408874511719,29.1137390136719,29.1137390136719,29.1137390136719,29.1137390136719,29.1137390136719,29.1137390136719,29.5543060302734,29.5543060302734,29.5543060302734,29.5543060302734,29.5543060302734,29.5543060302734,29.5543060302734,30.0621719360352,30.0621719360352,30.0621719360352,30.0621719360352,30.0621719360352,30.0621719360352,30.0621719360352,30.4998397827148,30.4998397827148,30.4998397827148,30.4998397827148,30.4998397827148,31.0083541870117,31.0083541870117,31.0083541870117,31.0083541870117,31.0083541870117,31.4979476928711,31.4979476928711,31.4979476928711,31.4979476928711,31.4979476928711,31.9490509033203,31.9490509033203,31.9490509033203,31.9490509033203,31.9490509033203,31.9490509033203,31.9490509033203,32.3934631347656,32.3934631347656,32.3934631347656,32.3934631347656,32.3934631347656,33.0520629882812,33.0520629882812,33.0520629882812,33.0520629882812,33.0520629882812,33.0520629882812,33.5091705322266,33.5091705322266,33.5091705322266,33.5091705322266,33.5091705322266,33.5091705322266,33.5091705322266,33.5091705322266,33.5091705322266,33.5091705322266,34.0793838500977,34.0793838500977,34.0793838500977,34.0793838500977,34.0793838500977,34.5709533691406,34.5709533691406,34.5709533691406,34.5709533691406,34.5709533691406,34.5709533691406,34.5709533691406,34.5709533691406,35.1938095092773,35.1938095092773,35.6712493896484,35.6712493896484,35.6712493896484,35.6712493896484,35.6712493896484,35.6712493896484,35.6712493896484,35.6712493896484,36.140739440918,36.140739440918,36.140739440918,36.140739440918,36.140739440918,34.7978134155273,34.7978134155273,34.7978134155273,34.7978134155273,34.7978134155273,34.7978134155273,34.7978134155273,34.7978134155273,34.7978134155273,29.762565612793,29.762565612793,29.762565612793,29.762565612793,29.762565612793,30.2039184570312,30.2039184570312,30.2039184570312,30.2039184570312,30.2039184570312,30.8124847412109,30.8124847412109,30.8124847412109,30.8124847412109,30.8124847412109,31.3165435791016,32.0331649780273,32.0331649780273,32.0331649780273,32.0331649780273,32.0331649780273,32.0331649780273,32.0331649780273,32.0331649780273,32.5899276733398,32.5899276733398,32.5899276733398,32.5899276733398,32.5899276733398,32.5899276733398,32.5899276733398,32.5899276733398,33.0378265380859,33.0378265380859,33.0378265380859,33.0378265380859,33.9356384277344,33.9356384277344,33.9356384277344,33.9356384277344,33.9356384277344,33.9356384277344,33.9356384277344,33.9356384277344,33.9356384277344,34.8339691162109,34.8339691162109,34.8339691162109,34.8339691162109,34.8339691162109,34.8339691162109,35.7404632568359,35.7404632568359,35.7404632568359,36.2488708496094,36.2488708496094,36.2488708496094,36.2488708496094,36.2488708496094,29.1819229125977,29.672248840332,29.672248840332,29.672248840332,29.672248840332,29.672248840332,30.143684387207,30.143684387207,30.143684387207,30.143684387207,30.143684387207,30.143684387207,30.143684387207,30.5914688110352,30.5914688110352,31.1218032836914,31.1218032836914,31.1218032836914,31.1218032836914,31.6161346435547,31.6161346435547,31.6161346435547,31.6161346435547,31.6161346435547,31.6161346435547,32.1103210449219,32.1103210449219,32.1103210449219,32.1103210449219,32.1103210449219,32.1103210449219,32.1103210449219,32.1103210449219,32.1103210449219,32.6758575439453,32.6758575439453,32.6758575439453,32.6758575439453,32.6758575439453,33.1321716308594,33.1321716308594,33.1321716308594,33.1321716308594,33.1321716308594,33.1321716308594,33.1321716308594,33.1321716308594,33.1321716308594,33.1321716308594,33.1321716308594,33.5560913085938,33.5560913085938,33.5560913085938,33.5560913085938,33.5560913085938,34.0604553222656,34.0604553222656,34.0604553222656,34.0604553222656,34.5428085327148,34.5428085327148,34.5428085327148,34.5428085327148,34.5428085327148,34.5428085327148,34.5428085327148,34.5428085327148,35.0411758422852,35.0411758422852,35.0411758422852,35.0411758422852,35.0411758422852,35.0411758422852,35.0411758422852,35.5827865600586,36.0202026367188,36.0202026367188,36.0202026367188,36.0202026367188,36.0202026367188,36.0202026367188,36.4928359985352,36.4928359985352,36.4928359985352,36.4928359985352,36.4928359985352,36.4928359985352,29.5427932739258,30.0306396484375,30.0306396484375,30.0306396484375,30.4748382568359,30.4748382568359,30.4748382568359,30.4748382568359,30.4748382568359,30.4748382568359,30.4748382568359,30.4748382568359,30.4748382568359,30.9819107055664,30.9819107055664,30.9819107055664,30.9819107055664,30.9819107055664,30.9819107055664,30.9819107055664,30.9819107055664,31.4743881225586,31.4743881225586,31.4743881225586,31.4743881225586,31.4743881225586,31.4743881225586,31.9665679931641,31.9665679931641,31.9665679931641,31.9665679931641,31.9665679931641,31.9665679931641,31.9665679931641,31.9665679931641,32.8551559448242,32.8551559448242,32.8551559448242,32.8551559448242,32.8551559448242,32.8551559448242,33.7338485717773,33.7338485717773,34.1745758056641,34.1745758056641,34.1745758056641,34.6156311035156,34.6156311035156,34.6156311035156,34.6156311035156,35.4983367919922,35.4983367919922,35.4983367919922,35.4983367919922,35.4983367919922,35.4983367919922,35.4983367919922,36.3965377807617,36.3965377807617,36.3965377807617,36.3965377807617,36.3965377807617,36.3965377807617,29.5314178466797,29.5314178466797,29.5314178466797,29.5314178466797,29.5314178466797,29.9723129272461,29.9723129272461,29.9723129272461,29.9723129272461,30.4468688964844,30.4468688964844,30.4468688964844,30.4468688964844,30.9181289672852,30.9181289672852,30.9181289672852,30.9181289672852,30.9181289672852,31.3596343994141,31.3596343994141,31.3596343994141,31.3596343994141,31.3596343994141,31.3596343994141,31.8823318481445,31.8823318481445,31.8823318481445,31.8823318481445,31.8823318481445,31.8823318481445,32.3695983886719,32.8994216918945,32.8994216918945,32.8994216918945,32.8994216918945,32.8994216918945,32.8994216918945,32.8994216918945,32.8994216918945,32.8994216918945,33.3329315185547,33.3329315185547,33.3329315185547,33.3329315185547,33.3329315185547,33.3329315185547,33.3329315185547,33.821907043457,33.821907043457,33.821907043457,33.821907043457,34.2505950927734,34.2505950927734,34.2505950927734,34.2505950927734,34.2505950927734,34.2505950927734,34.2505950927734,34.2505950927734,34.2505950927734,34.2505950927734,34.7041702270508,34.7041702270508,34.7041702270508,34.7041702270508,34.7041702270508,34.7041702270508,35.2762603759766,35.2762603759766,35.2762603759766,35.7537994384766,35.7537994384766,35.7537994384766,35.7537994384766,35.7537994384766,35.7537994384766,35.7537994384766,35.7537994384766,35.7537994384766,36.2397689819336,36.2397689819336,36.2397689819336,36.2397689819336,29.2195434570312,29.2195434570312,29.2195434570312,29.2195434570312,29.2195434570312,29.2195434570312,29.2195434570312,29.2195434570312,29.7206954956055,29.7206954956055,29.7206954956055,29.7206954956055,29.7206954956055,30.2155151367188,30.7093887329102,30.7093887329102,30.7093887329102,30.7093887329102,31.2093048095703,31.2093048095703,31.2093048095703,31.2093048095703,31.2093048095703,31.2093048095703,31.2093048095703,31.7127914428711,31.7127914428711,31.7127914428711,31.7127914428711,31.7127914428711,31.7127914428711,32.2170562744141,32.2170562744141,32.2170562744141,32.2170562744141,32.2170562744141,32.2170562744141,32.6952667236328,32.6952667236328,32.6952667236328,32.6952667236328,32.6952667236328,33.1850433349609,33.1850433349609,33.1850433349609,33.1850433349609,33.7071075439453,33.7071075439453,33.7071075439453,33.7071075439453,34.1447982788086,34.1447982788086,34.1447982788086,34.651123046875,34.651123046875,34.651123046875,34.651123046875,35.1373443603516,35.1373443603516,35.1373443603516,35.1373443603516,35.6137924194336,36.0695266723633,36.0695266723633,36.0695266723633,36.0695266723633,36.0695266723633,36.0695266723633,36.5079116821289,36.5079116821289,36.5079116821289,36.5079116821289,36.5079116821289,29.9709930419922,30.6535568237305,30.6535568237305,30.6535568237305,30.6535568237305,30.6535568237305,30.6535568237305,31.3219375610352,31.3219375610352,31.3219375610352,32.2187805175781,32.2187805175781,32.2187805175781,32.2187805175781,32.2187805175781,32.2187805175781,32.2187805175781,33.1130828857422,33.1130828857422,33.1130828857422,33.1130828857422,33.1130828857422,33.5535278320312,33.5535278320312,33.5535278320312,33.5535278320312,33.5535278320312,33.5535278320312,33.9943923950195,33.9943923950195,33.9943923950195,33.9943923950195,33.9943923950195,34.4344863891602,34.4344863891602,34.4344863891602,34.4344863891602,34.4344863891602,34.4344863891602,34.4344863891602,35.1094207763672,35.1094207763672,35.1094207763672,35.1094207763672,35.1094207763672,35.7711563110352,35.7711563110352,35.7711563110352,35.7711563110352,35.7711563110352,35.7711563110352,35.7711563110352,35.7711563110352,35.7711563110352,35.7711563110352,29.1838226318359,29.1838226318359,29.1838226318359,29.1838226318359,29.1838226318359,29.1838226318359,29.1838226318359,30.0890731811523,30.0890731811523,30.0890731811523,30.0890731811523,30.0890731811523,30.0890731811523,30.5443496704102,30.5443496704102,30.5443496704102,30.5443496704102,30.5443496704102,30.5443496704102,30.5443496704102,31.1432342529297,31.1432342529297,31.1432342529297,31.1432342529297,31.1432342529297,31.1432342529297,31.1432342529297,31.8791122436523,31.8791122436523,31.8791122436523,31.8791122436523,31.8791122436523,31.8791122436523,32.3355026245117,32.3355026245117,32.3355026245117,32.3355026245117,32.3355026245117,33.243278503418,33.243278503418,33.243278503418,33.243278503418,34.1317443847656,34.1317443847656,34.1317443847656,34.1317443847656,34.1317443847656,34.5847625732422,34.5847625732422,34.5847625732422,34.5847625732422,34.5847625732422,34.5847625732422,34.5847625732422,34.5847625732422,35.0355987548828,35.0355987548828,35.0355987548828,35.0355987548828,35.0355987548828,35.0355987548828,35.478874206543,36.3706970214844,36.3706970214844,36.3706970214844,36.3706970214844,36.3706970214844,36.3706970214844,29.3360366821289,29.3360366821289,29.3360366821289,29.3360366821289,29.3360366821289,29.3360366821289,29.3360366821289,29.3360366821289,29.7927703857422,30.7039642333984,30.7039642333984,30.7039642333984,30.7039642333984,30.7039642333984,30.7039642333984,31.3109970092773,31.3109970092773,31.3109970092773,31.3109970092773,31.3109970092773,31.3109970092773,31.3109970092773,31.7376403808594,31.7376403808594,31.7376403808594,31.7376403808594,31.7376403808594,31.7376403808594,31.7376403808594,32.2908325195312,32.2908325195312,32.2908325195312,32.2908325195312,32.2908325195312,32.7735061645508,33.2134628295898,33.7507705688477,33.7507705688477,33.7507705688477,33.7507705688477,33.7507705688477,33.7507705688477,33.7507705688477,33.7507705688477,33.7507705688477,34.2417602539062,34.2417602539062,34.2417602539062,34.2417602539062,34.2417602539062,34.2417602539062,34.2417602539062,34.2417602539062,34.2417602539062,34.2417602539062,34.6894226074219,34.6894226074219,34.6894226074219,34.6894226074219,35.2213973999023,35.2213973999023,35.2213973999023,35.2213973999023,35.2213973999023,35.2213973999023,35.2213973999023,35.2213973999023,35.6553344726562,35.6553344726562,35.6553344726562,35.6553344726562,35.6553344726562,35.6553344726562,35.6553344726562,35.6553344726562,35.6553344726562,36.0849151611328,36.0849151611328,36.0849151611328,36.0849151611328,36.0849151611328,36.0849151611328,36.5167541503906,36.5167541503906,36.5167541503906,36.5167541503906,36.5167541503906,36.5167541503906,29.8490447998047,29.8490447998047,29.8490447998047,30.3418579101562,30.3418579101562,30.3418579101562,30.3418579101562,30.3418579101562,30.3418579101562,30.3418579101562,30.3418579101562,30.3418579101562,31.1860198974609,31.1860198974609,31.1860198974609,31.1860198974609,31.1860198974609,31.1860198974609,31.1860198974609,31.6395721435547,31.6395721435547,31.6395721435547,31.6395721435547,32.3871841430664,32.3871841430664,32.3871841430664,32.3871841430664,32.3871841430664,32.3871841430664,32.8278198242188,32.8278198242188,32.8278198242188,32.8278198242188,32.8278198242188,32.8278198242188,32.8278198242188,32.8278198242188,32.8278198242188,32.8278198242188,33.2705307006836,33.2705307006836,33.2705307006836,33.2705307006836,33.2705307006836,33.2705307006836,33.2705307006836,33.7171173095703,33.7171173095703,33.7171173095703,33.7171173095703,33.7171173095703,33.7171173095703,33.7171173095703,33.7171173095703,33.7171173095703,33.7171173095703,33.7171173095703,33.7171173095703,34.1610641479492,34.8895568847656,35.4924697875977,35.9343185424805,35.9343185424805,35.9343185424805,35.9343185424805,35.9343185424805,35.9343185424805,36.3760070800781,36.3760070800781,36.3760070800781,36.3760070800781,36.3760070800781,36.3760070800781,36.3760070800781,36.3760070800781,36.3760070800781,36.3760070800781,36.3760070800781,29.7210235595703,29.7210235595703,29.7210235595703,29.7210235595703,29.7210235595703,29.7210235595703,29.7210235595703,30.2574157714844,30.2574157714844,30.2574157714844,30.2574157714844,30.2574157714844,30.2574157714844,30.2574157714844,30.7052688598633,30.7052688598633,30.7052688598633,30.7052688598633,31.1677017211914,31.1677017211914,31.1677017211914,31.1677017211914,31.1677017211914,31.1677017211914,31.6103057861328,31.6103057861328,31.6103057861328,31.6103057861328,31.6103057861328,32.5105209350586,33.4003829956055,33.4003829956055,33.4003829956055,33.4003829956055,33.4003829956055,33.4003829956055,33.8401489257812,33.8401489257812,33.8401489257812,33.8401489257812,33.8401489257812,33.8401489257812,34.7247619628906,35.6115646362305,35.6115646362305,35.6115646362305,35.6115646362305,35.6115646362305,35.6115646362305,35.6115646362305,35.6115646362305,35.6115646362305,36.3052368164062,29.4558410644531,29.4558410644531,29.4558410644531,29.4558410644531,29.4558410644531,29.4558410644531,29.4558410644531,30.3569869995117,31.2549133300781,31.2549133300781,31.2549133300781,31.2549133300781,31.2549133300781,31.2549133300781,31.2549133300781,31.2549133300781,31.2549133300781,31.2549133300781,31.2549133300781,31.7106170654297,31.7106170654297,31.7106170654297,31.7106170654297,31.7106170654297,31.7106170654297,32.6054916381836,33.3035354614258,33.3035354614258,33.3035354614258,33.3035354614258,33.9263687133789,33.9263687133789,33.9263687133789,33.9263687133789,33.9263687133789,33.9263687133789,34.5828628540039,34.5828628540039,34.5828628540039,34.5828628540039,34.5828628540039,34.5828628540039,35.0074005126953,35.0074005126953,35.0074005126953,35.0074005126953,35.0074005126953,35.0074005126953,35.444450378418,35.444450378418,35.444450378418,35.444450378418,35.444450378418,35.444450378418,35.444450378418,35.444450378418,35.444450378418,35.444450378418,35.8487014770508,35.8487014770508,35.8487014770508,35.8487014770508,35.8487014770508,35.8487014770508,35.8487014770508,36.357666015625,36.357666015625,36.357666015625,36.357666015625,36.357666015625,36.357666015625,36.357666015625,36.357666015625,36.357666015625,29.3128662109375,29.3128662109375,29.3128662109375,29.3128662109375,29.3128662109375,29.7624816894531,29.7624816894531,29.7624816894531,29.7624816894531,29.7624816894531,29.7624816894531,29.7624816894531,30.1973342895508,30.1973342895508,30.1973342895508,30.1973342895508,30.1973342895508,30.1973342895508,30.1973342895508,30.1973342895508,30.1973342895508,30.1973342895508,30.1973342895508,30.9259872436523,30.9259872436523,30.9259872436523,30.9259872436523,30.9259872436523,30.9259872436523,30.9259872436523,30.9259872436523,31.6151733398438,31.6151733398438,31.6151733398438,31.6151733398438,31.6151733398438,32.1598358154297,32.1598358154297,32.1598358154297,32.1598358154297,32.1598358154297,32.1598358154297,32.1598358154297,32.1598358154297,32.6931457519531,32.6931457519531,32.6931457519531,33.1322402954102,33.5730895996094,33.5730895996094,33.5730895996094,34.1297149658203,34.1297149658203,34.1297149658203,34.1297149658203,34.1297149658203,34.1297149658203,34.1297149658203,34.5848617553711,34.5848617553711,34.5848617553711,34.5848617553711,34.5848617553711,34.5848617553711,34.5848617553711,34.5848617553711,35.0303497314453,35.0303497314453,35.0303497314453,35.0303497314453,35.0303497314453,35.0303497314453,35.0303497314453,35.0303497314453,35.0303497314453,35.534782409668,35.534782409668,35.534782409668,35.534782409668,35.534782409668,35.534782409668,35.534782409668,35.9731903076172,35.9731903076172,35.9731903076172,35.9731903076172,35.9731903076172,35.9731903076172,36.3954620361328,36.3954620361328,36.3954620361328,36.3954620361328,29.4247665405273,29.4247665405273,29.4247665405273,29.4247665405273,29.4247665405273,29.4247665405273,29.9155654907227,29.9155654907227,29.9155654907227,29.9155654907227,30.6436080932617,30.6436080932617,30.6436080932617,30.6436080932617,30.6436080932617,30.6436080932617,30.6436080932617,30.6436080932617,30.6436080932617,30.6436080932617,31.1985321044922,31.1985321044922,31.1985321044922,31.1985321044922,31.1985321044922,31.1985321044922,31.6551208496094,31.6551208496094,31.6551208496094,31.6551208496094,31.6551208496094,31.6551208496094,31.6551208496094,32.2098083496094,32.8057250976562,32.8057250976562,32.8057250976562,32.8057250976562,32.8057250976562,32.8057250976562,32.8057250976562,32.8057250976562,32.8057250976562,32.8057250976562,33.315544128418,33.315544128418,33.315544128418,33.315544128418,33.315544128418,33.315544128418,33.315544128418,33.8516235351562,33.8516235351562,33.8516235351562,33.8516235351562,33.8516235351562,33.8516235351562,33.8516235351562,34.3202056884766,34.3202056884766,34.3202056884766,34.3202056884766,34.3202056884766,34.7581787109375,34.7581787109375,34.7581787109375,34.7581787109375,34.7581787109375,34.7581787109375,34.7581787109375,35.2674560546875,35.2674560546875,35.2674560546875,35.2674560546875,35.2674560546875,35.2674560546875,35.6900100708008,35.6900100708008,35.6900100708008,35.6900100708008,35.6900100708008,35.6900100708008,35.6900100708008,36.1130981445312,29.202392578125,29.202392578125,29.202392578125,29.202392578125,29.202392578125,29.202392578125,29.202392578125,29.202392578125,29.202392578125,29.202392578125,29.202392578125,29.202392578125,29.6572189331055,29.6572189331055,29.6572189331055,29.6572189331055,30.1812591552734,30.1812591552734,30.1812591552734,30.1812591552734,30.1812591552734,30.1812591552734,30.6549758911133,30.6549758911133,30.6549758911133,30.6549758911133,30.6549758911133,30.6549758911133,30.6549758911133,30.6549758911133,30.6549758911133,30.6549758911133,31.0921859741211,31.0921859741211,31.0921859741211,31.0921859741211,31.0921859741211,31.0921859741211,31.0921859741211,31.5439758300781,31.5439758300781,31.5439758300781,31.5439758300781,31.5439758300781,31.5439758300781,31.5439758300781,32.1371765136719,32.1371765136719,32.1371765136719,32.1371765136719,32.1371765136719,32.1371765136719,32.1371765136719,32.1371765136719,32.1371765136719,32.8308334350586,32.8308334350586,32.8308334350586,32.8308334350586,32.8308334350586,32.8308334350586,32.8308334350586,32.8308334350586,32.8308334350586,33.2722778320312,33.2722778320312,33.2722778320312,33.2722778320312,33.2722778320312,33.2722778320312,33.9781723022461,33.9781723022461,33.9781723022461,33.9781723022461,33.9781723022461,33.9781723022461,33.9781723022461,33.9781723022461,33.9781723022461,33.9781723022461,34.5020446777344,34.5020446777344,34.5020446777344,34.9753341674805,35.3996505737305,35.3996505737305,35.3996505737305,35.3996505737305,35.3996505737305,35.3996505737305,35.85302734375,35.85302734375,36.4255676269531,36.4255676269531,36.4255676269531,36.4255676269531,36.4255676269531,36.4255676269531,36.4255676269531,29.4172821044922,29.4172821044922,29.4172821044922,29.4172821044922,29.4172821044922,29.4172821044922,29.4172821044922,29.4172821044922,29.4172821044922,29.8671340942383,29.8671340942383,29.8671340942383,29.8671340942383,29.8671340942383,29.8671340942383,29.8671340942383,29.8671340942383,30.3547058105469,30.3547058105469,30.3547058105469,30.3547058105469,30.3547058105469,30.3547058105469,30.7799911499023,30.7799911499023,30.7799911499023,30.7799911499023,30.7799911499023,30.7799911499023,30.7799911499023,30.7799911499023,30.7799911499023,31.2586212158203,31.2586212158203,31.2586212158203,31.2586212158203,31.2586212158203,31.2586212158203,31.2586212158203,31.2586212158203,31.8150482177734,31.8150482177734,31.8150482177734,31.8150482177734,31.8150482177734,31.8150482177734,31.8150482177734,31.8150482177734,32.3061141967773,32.3061141967773,32.3061141967773,32.3061141967773,32.3061141967773,32.3061141967773,32.3061141967773,32.7412414550781,33.1946105957031,33.1946105957031,33.1946105957031,33.1946105957031,33.1946105957031,33.6852951049805,33.6852951049805,33.6852951049805,33.6852951049805,33.6852951049805,33.6852951049805,33.6852951049805,34.2488403320312,34.2488403320312,34.2488403320312,34.2488403320312,34.2488403320312,34.2488403320312,34.2488403320312,34.2488403320312,34.2488403320312,34.2488403320312,34.6877288818359,34.6877288818359,34.6877288818359,34.6877288818359,34.6877288818359,34.6877288818359,34.6877288818359,34.6877288818359,34.6877288818359,35.1379623413086,35.1379623413086,35.1379623413086,35.1379623413086,35.1379623413086,35.1379623413086,35.1379623413086,35.5633926391602,35.5633926391602,35.5633926391602,35.5633926391602,35.5633926391602,35.5633926391602,36.1352310180664,36.1352310180664,36.1352310180664,36.1352310180664,36.1352310180664,36.1352310180664,29.3523559570312,29.3523559570312,29.3523559570312,29.3523559570312,29.8458938598633,29.8458938598633,29.8458938598633,29.8458938598633,30.2979278564453,30.2979278564453,30.2979278564453,30.2979278564453,30.2979278564453,30.2979278564453,30.8436508178711,30.8436508178711,30.8436508178711,30.8436508178711,30.8436508178711,30.8436508178711,30.8436508178711,30.8436508178711,30.8436508178711,30.8436508178711,30.8436508178711,30.8436508178711,31.3314971923828,31.3314971923828,31.3314971923828,31.3314971923828,31.3314971923828,31.3314971923828,31.8888168334961,31.8888168334961,31.8888168334961,31.8888168334961,31.8888168334961,31.8888168334961,31.8888168334961,32.7804489135742,32.7804489135742,32.7804489135742,32.7804489135742,32.7804489135742,32.7804489135742,32.7804489135742,32.7804489135742,32.7804489135742,32.7804489135742,33.6625442504883,33.6625442504883,33.6625442504883,33.6625442504883,33.6625442504883,33.6625442504883,33.6625442504883,34.5534591674805,34.5534591674805,34.5534591674805,34.5534591674805,34.5534591674805,34.5534591674805,34.9935531616211,34.9935531616211,34.9935531616211,34.9935531616211,34.9935531616211,34.9935531616211,35.433349609375,35.433349609375,35.433349609375,35.433349609375,35.8729400634766,35.8729400634766,35.8729400634766,29.2886428833008,29.7380752563477,29.7380752563477,29.7380752563477,29.7380752563477,29.7380752563477,29.7380752563477,30.6303863525391,30.6303863525391,30.6303863525391,30.6303863525391,30.6303863525391,30.6303863525391,30.6303863525391,31.0815734863281,31.9790496826172,31.9790496826172,31.9790496826172,31.9790496826172,31.9790496826172,31.9790496826172,32.4374237060547,32.4374237060547,32.4374237060547,32.4374237060547,32.4374237060547,32.4374237060547,32.4374237060547,32.4374237060547,32.4374237060547,32.4374237060547,33.3410797119141,33.3410797119141,33.3410797119141,33.3410797119141,33.3410797119141,33.3410797119141,33.7930068969727,34.6801223754883,35.2243270874023,35.2243270874023,35.2243270874023,35.2243270874023,35.2243270874023,35.2243270874023,35.2243270874023,35.2243270874023,35.2243270874023,36.0217208862305,36.0217208862305,36.0217208862305,36.0217208862305,36.0217208862305,36.0217208862305,36.0217208862305,29.4624252319336,29.4624252319336,29.4624252319336,29.4624252319336,29.4624252319336,30.3746337890625,30.3746337890625,30.3746337890625,30.3746337890625,30.8311004638672,30.8311004638672,30.8311004638672,30.8311004638672,30.8311004638672,30.8311004638672,30.8311004638672,31.2885665893555,31.2885665893555,31.2885665893555,32.2009735107422,32.2009735107422,32.2009735107422,32.2009735107422,32.2009735107422,32.2009735107422,32.6557846069336,32.6557846069336,32.6557846069336,32.6557846069336,32.6557846069336,32.6557846069336,33.5513534545898,33.5513534545898,33.5513534545898,33.5513534545898,33.5513534545898,34.4473037719727,34.4473037719727,34.4473037719727,34.4473037719727,34.4473037719727,34.4473037719727,34.9012069702148,34.9012069702148,34.9012069702148,34.9012069702148,34.9012069702148,34.9012069702148,35.7964782714844,35.7964782714844,35.7964782714844,35.7964782714844,35.7964782714844,35.7964782714844,35.7964782714844,29.2326202392578,29.2326202392578,29.2326202392578,29.2326202392578,29.2326202392578,29.2326202392578,29.6930389404297,29.6930389404297,29.6930389404297,29.6930389404297,29.6930389404297,29.6930389404297,29.6930389404297,29.6930389404297,29.6930389404297,30.1250457763672,30.7148742675781,31.4425201416016,31.4425201416016,31.4425201416016,31.4425201416016,31.4425201416016,31.4425201416016,31.4425201416016,32.0506286621094,32.4761657714844,32.4761657714844,32.4761657714844,32.4761657714844,32.4761657714844,32.9130554199219,32.9130554199219,32.9130554199219,32.9130554199219,32.9130554199219,32.9130554199219,32.9130554199219,32.9130554199219,32.9130554199219,32.9130554199219,33.4873504638672,33.4873504638672,33.4873504638672,33.4873504638672,33.4873504638672,33.4873504638672,33.4873504638672,33.4873504638672,33.4873504638672,34.1799011230469,34.1799011230469,34.1799011230469,34.1799011230469,34.1799011230469,34.1799011230469,34.603645324707,34.603645324707,34.603645324707,34.603645324707,34.603645324707,34.603645324707,35.0415267944336,35.0415267944336,35.0415267944336,35.0415267944336,35.0415267944336,35.0415267944336,35.0415267944336,35.0415267944336,35.0415267944336,35.4829635620117,35.4829635620117,35.4829635620117,35.4829635620117,35.4829635620117,35.4829635620117,35.4829635620117,35.9726867675781,35.9726867675781,35.9726867675781,35.9726867675781,35.9726867675781,36.464729309082,36.464729309082,36.464729309082,36.464729309082,36.464729309082,36.464729309082,36.464729309082,36.464729309082,29.583381652832,29.583381652832,29.583381652832,29.583381652832,29.583381652832,29.583381652832,29.583381652832,29.583381652832,30.0370864868164,30.5050888061523,30.5050888061523,30.5050888061523,30.5050888061523,30.5050888061523,30.5050888061523,30.5050888061523,30.5050888061523,30.5050888061523,31.1725082397461,31.7598266601562,31.7598266601562,31.7598266601562,31.7598266601562,31.7598266601562,31.7598266601562,32.2366256713867,32.2366256713867,32.2366256713867,32.2366256713867,32.2366256713867,32.2366256713867,32.2366256713867,32.2366256713867,32.789306640625,32.789306640625,32.789306640625,32.789306640625,32.789306640625,32.789306640625,33.2593688964844,33.2593688964844,33.2593688964844,33.2593688964844,33.2593688964844,33.9703979492188,33.9703979492188,33.9703979492188,33.9703979492188,33.9703979492188,33.9703979492188,34.6609954833984,34.6609954833984,34.6609954833984,34.6609954833984,34.6609954833984,34.6609954833984,34.6609954833984,34.6609954833984,34.6609954833984,34.6609954833984,35.5416030883789,35.5416030883789,35.5416030883789,35.5416030883789,35.5416030883789,35.5416030883789,35.5416030883789,35.5416030883789,35.5416030883789,35.5416030883789,36.4221115112305,36.4221115112305,36.4221115112305,36.4221115112305,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,36.5547637939453,29.1216125488281,29.1216125488281,29.1216125488281,29.1216125488281,29.1216125488281,29.1216125488281,29.1216125488281,29.1216125488281,29.1216125488281,29.2374420166016,29.2374420166016,29.2374420166016,29.2374420166016,29.2374420166016,29.2374420166016,29.6963272094727,29.6963272094727,29.6963272094727,29.6963272094727,29.6963272094727,29.6963272094727,29.6963272094727,30.6100234985352,30.6100234985352,30.6100234985352,30.6100234985352,30.6100234985352,30.6100234985352,30.6100234985352,31.5367202758789,31.5367202758789,31.5367202758789,31.5367202758789,31.5367202758789,32.2121963500977,32.9216766357422,32.9216766357422,32.9216766357422,32.9216766357422,32.9216766357422,32.9216766357422,32.9216766357422,32.9216766357422,33.7929000854492,33.7929000854492,33.7929000854492,33.7929000854492,33.7929000854492,33.7929000854492,33.7929000854492,34.2432098388672,34.2432098388672,34.2432098388672,34.2432098388672,34.2432098388672,34.2432098388672,35.0339889526367,35.0339889526367,35.0339889526367,35.0339889526367,35.0339889526367,35.0339889526367,35.0339889526367,35.4596328735352,35.4596328735352,35.4596328735352,35.4596328735352,35.4596328735352,35.4596328735352,35.4596328735352,35.4596328735352,35.4596328735352,36.3232803344727,36.3232803344727,36.3232803344727,36.3232803344727,36.3232803344727,36.3232803344727,36.3232803344727,36.3232803344727,29.7358779907227,29.7358779907227,29.7358779907227,30.6472396850586,31.5693740844727,31.5693740844727,31.5693740844727,31.5693740844727,31.5693740844727,31.5693740844727,31.5693740844727,31.5693740844727,31.5693740844727,31.5693740844727,32.0254135131836,32.0254135131836,32.0254135131836,32.0254135131836,32.0254135131836,32.0254135131836,32.9366302490234,33.6927719116211,33.6927719116211,33.6927719116211,33.6927719116211,34.3033447265625,34.7450790405273,34.7450790405273,34.7450790405273,34.7450790405273,34.7450790405273,34.7450790405273,34.7450790405273,34.7450790405273,34.7450790405273,35.4325103759766,35.4325103759766,35.4325103759766,35.4325103759766,35.4325103759766,35.4325103759766,35.8595657348633,35.8595657348633,35.8595657348633,35.8595657348633,35.8595657348633,35.8595657348633,35.8595657348633,36.2807998657227,36.2807998657227,36.2807998657227,36.2807998657227,29.3328018188477,29.3328018188477,29.3328018188477,29.3328018188477,29.8359527587891,29.8359527587891,29.8359527587891,29.8359527587891,29.8359527587891,29.8359527587891,30.3208465576172,30.3208465576172,30.3208465576172,30.3208465576172,30.3208465576172,30.3208465576172,30.8016204833984,30.8016204833984,30.8016204833984,30.8016204833984,30.8016204833984,30.8016204833984,30.8016204833984,30.8016204833984,30.8016204833984,30.8016204833984,30.8016204833984,31.2937088012695,31.2937088012695,31.2937088012695,31.2937088012695,31.2937088012695,31.2937088012695,31.7837829589844,31.7837829589844,31.7837829589844,31.7837829589844,31.7837829589844,31.7837829589844,32.2566375732422,32.2566375732422,32.2566375732422,32.2566375732422,32.2566375732422,32.2566375732422,32.2566375732422,32.2566375732422,32.2566375732422,32.2566375732422,32.7468948364258,32.7468948364258,32.7468948364258,32.7468948364258,32.7468948364258,33.250129699707,33.250129699707,33.250129699707,33.250129699707,33.250129699707,33.250129699707,34.1387100219727,34.1387100219727,34.1387100219727,34.1387100219727,34.1387100219727,34.1387100219727,34.1387100219727,34.5896606445312,34.5896606445312,34.5896606445312,34.5896606445312,35.471321105957,35.471321105957,35.471321105957,35.471321105957,35.471321105957,35.471321105957,35.471321105957,35.471321105957,35.471321105957,35.471321105957,35.9147720336914,35.9147720336914,35.9147720336914,35.9147720336914,35.9147720336914,29.3379821777344,29.3379821777344,29.3379821777344,29.3379821777344,29.3379821777344,29.3379821777344,29.3379821777344,29.3379821777344,29.3379821777344,29.3379821777344,29.3379821777344,29.3379821777344,30.2361068725586,30.2361068725586,30.2361068725586,30.2361068725586,30.2361068725586,30.2361068725586,31.1333770751953,31.1333770751953,31.1333770751953,31.1333770751953,31.1333770751953,31.5863342285156,31.5863342285156,31.5863342285156,31.5863342285156,31.5863342285156,31.5863342285156,31.5863342285156,31.5863342285156,31.5863342285156,32.4808349609375,32.4808349609375,32.4808349609375,32.4808349609375,32.4808349609375,32.4808349609375,32.4808349609375,32.4808349609375,32.4808349609375,33.2094650268555,33.2094650268555,33.2094650268555,33.2094650268555,33.2094650268555,33.7822952270508,33.7822952270508,34.6925354003906,34.6925354003906,34.6925354003906,34.6925354003906,34.6925354003906,34.6925354003906,34.6925354003906,35.5877075195312,35.5877075195312,35.5877075195312,35.5877075195312,35.5877075195312,35.5877075195312,35.5877075195312,35.5877075195312,36.4028167724609,36.4028167724609,36.4028167724609,36.4028167724609,36.4028167724609,36.4028167724609,29.4891357421875,29.4891357421875,29.4891357421875,29.4891357421875,29.4891357421875,30.4006881713867,30.4006881713867,30.4006881713867,30.4006881713867,30.4006881713867,30.4006881713867,30.4006881713867,31.3204650878906,31.3204650878906,31.3204650878906,31.3204650878906,31.3204650878906,31.3204650878906,31.3204650878906,31.7767639160156,31.7767639160156,31.7767639160156,31.7767639160156,31.7767639160156,31.7767639160156,32.3866653442383,32.3866653442383,32.3866653442383,32.3866653442383,32.8662948608398,32.8662948608398,32.8662948608398,32.8662948608398,32.8662948608398,32.8662948608398,32.8662948608398,32.8662948608398,33.367317199707,33.367317199707,33.367317199707,33.367317199707,33.8711013793945,33.8711013793945,33.8711013793945,33.8711013793945,33.8711013793945,33.8711013793945,34.3498916625977,34.3498916625977,34.3498916625977,34.3498916625977,34.3498916625977,34.3498916625977,34.9465713500977,34.9465713500977,34.9465713500977,34.9465713500977,34.9465713500977,34.9465713500977],&#34;meminc&#34;:[0,0,0,0,0,0,0.473747253417969,0,0,0,0,0,0,0.43841552734375,0.487861633300781,0,0,0,0,0,0,0,0.489906311035156,0,0,0,0,0.477424621582031,0,0,0,0,0,0,0,0,0.500648498535156,0,0,0,0.480171203613281,0,0,0,0,0,0,0.865394592285156,0.600189208984375,0,0,0,0,0,0.520751953125,0,0,0,0,0,0,0,0,0.477020263671875,0,0,0,0,0,0.602447509765625,0,0,0,0.413955688476562,0,0,0,0,0,0,-6.94850158691406,0,0,0,0,0.597465515136719,0,0,0,0,0,0,0,0,0.434455871582031,0,0,0,0,0,0,0,0.616989135742188,0,0,0,0,0,0.546714782714844,0,0,0,0,0,0.526542663574219,0,0,0.461593627929688,0,0,0,0,0,0,0.464569091796875,0,0,0,0,0.575950622558594,0,0,0,0,0,0.486869812011719,0,0,0,0,0,0,0,0,0,0.440055847167969,0,0,0,0,0,0.479995727539062,0,0,0,0,0,0,0,0,0.468162536621094,0,0,0,0,0,0,0,0.435417175292969,0,0,0,0,0,0,0,0,0.491455078125,0,0,0,-7.03120422363281,0,0,0,0,0,0,0.521041870117188,0,0,0,0,0,0.444244384765625,0,0,0.509262084960938,0,0,0,0,0,0,0,0,0,0.508613586425781,0.463584899902344,0,0,0,0.483230590820312,0,0,0,0.535903930664062,0,0,0,0,0,0.437408447265625,0,0,0,0,0,0.537178039550781,0.541580200195312,0,0,0,0,0.439193725585938,0,0,0,0,0,0,0.474037170410156,0,0,0.480415344238281,0,0,0,0,0,0.496620178222656,0,0,0,-7.04816436767578,0,0,0.506095886230469,0,0.492317199707031,0,0,0,0,0,0.470367431640625,0,0,0,0,0,0,0,0,0,0,0.493392944335938,0,0,0,0.501792907714844,0,0,0.490966796875,0,0,0,0,0,0,0,0,0.498405456542969,0,0,0,0,0,0.468147277832031,0,0,0,0,0,0.50372314453125,0,0,0,0,0.545127868652344,0,0,0,0,0,0,0,0,0,0.436065673828125,0,0,0,0,0,0.479896545410156,0,0,0.498062133789062,0,0,0,0,0.471382141113281,0,0,-6.65489196777344,0,0,0,0,0,0,0,0.449241638183594,0,0,0,0,0,0,0,0,0.896392822265625,0,0,0,0,0,0,0,0.454399108886719,0,0,0,0,0,0.894355773925781,0,0,0,0,0,0,0,0,0,0,0,0.896377563476562,0,0,0,0,0.882186889648438,0,0,0,0,0,0,0.471122741699219,0,0,0.62420654296875,0,0,0,0,0,0,0,0.439506530761719,0,0,0,0,0,0,0,0.540374755859375,0,0,0,0,0,0,0,0,0.487686157226562,0,0,0,0,0,0,-6.98892211914062,0,0,0,0,0,0,0,0,0,0,0.413063049316406,0,0,0,0,0,0,0,0.503669738769531,0,0,0,0,0,0.452796936035156,0.476921081542969,0,0,0,0,0,0,0.454986572265625,0,0,0,0,0,0.521064758300781,0,0,0,0,0.477439880371094,0,0,0,0,0,0,0,0,0,0,0,0.4862060546875,0,0,0,0,0,0,0,0.492652893066406,0,0,0,0,0.440048217773438,0,0,0,0,0,0,0,0,0,0,0.881484985351562,0,0,0,0,0.886604309082031,0,0,0,0,0,0,-6.64279937744141,0,0,0,0,0,0.903587341308594,0,0,0,0.44415283203125,0,0,0,0,0.709739685058594,0,0,0,0,0,0,0.444190979003906,0,0,0,0.463996887207031,0,0.446640014648438,0,0,0,0,0,0,0,0,0.904533386230469,0,0,0,0.641868591308594,0,0,0,0.674430847167969,0,0,0,0.883277893066406,0,0,0,0,0.439292907714844,0,0,0,0,-6.62657165527344,0,0,0,0,0,0,0,0,0.903648376464844,0,0,0,0,0,0,0.911430358886719,0,0,0,0,0,0,0,0.451705932617188,0,0,0,0,0,0.909934997558594,0,0,0,0,0,0,0,0,0.896270751953125,0,0,0.795318603515625,0,0,0,0,0.4510498046875,0,0,0,0,0,0.887107849121094,0,0,0,0,0,0,0.448753356933594,0,0,0,0,0,0,0,0,-6.60775756835938,0,0,0,0,0,0.8992919921875,0,0,0,0,0,0,0,0.453750610351562,0,0,0,0,0,0,0,0.910072326660156,0,0,0,0.903732299804688,0,0,0,0,0,0,0,0.892784118652344,0,0,0,0,0.894515991210938,0,0,0,0,0,0.895309448242188,0,0,0,0,0,0,0,0.895034790039062,0,0,0,-6.61087799072266,0,0,0,0,0.454124450683594,0,0,0,0,0.911758422851562,0,0,0,0,0,0.894332885742188,0,0,0,0,0,0,0,0.456436157226562,0,0,0,0,0,0,0,0,0.898147583007812,0,0,0,0,0,0.892906188964844,0,0,0,0,0,0,0.860504150390625,0.434066772460938,0,0,0,0,0.686592102050781,0,0,0,0,0,0,0,0,0,-7.09116363525391,0,0,0,0.553207397460938,0,0,0,0,0,0.430702209472656,0,0,0,0,0,0,0,0,0.5863037109375,0,0,0,0,0,0.440185546875,0,0,0,0,0,0.45574951171875,0,0,0,0,0,0.48699951171875,0,0,0,0.507728576660156,0,0,0,0,0,0.439178466796875,0,0,0,0,0,0.47784423828125,0,0,0,0,0,0,0.568641662597656,0.716911315917969,0.467323303222656,0,0,0,0,0.87969970703125,0,0,0,0,0,0,-1.02317047119141,0,0,0,0,0,0,0,-5.15354156494141,0,0,0,0,0,0,0.574470520019531,0,0,0,0,0,0,0.756324768066406,0,0,0,0,0,0,0.452911376953125,0,0.446907043457031,0,0,0,0,0,0,0,0.835197448730469,0,0,0,0.427360534667969,0,0,0,0,0,0,0,0.446479797363281,0.441352844238281,0,0,0,0.437004089355469,0.431877136230469,0,0,0,0,0,0,0,0.446479797363281,0.431877136230469,0,0,0,0,0,0,0,0.389244079589844,0,0,0,0,0,0,0,-6.53472137451172,0,0,0,0,0,0,0,0,0,0.896697998046875,0,0,0,0.443717956542969,0,0,0,0,0,0,0.907707214355469,0,0,0,0.876564025878906,0,0,0,0.471168518066406,0,0.480201721191406,0,0,0,0,0,0,0.827362060546875,0,0,0,0,0,0,0,0.449089050292969,0,0,0,0.882095336914062,0,0,0,-6.60451507568359,0,0,0,0,0,0,0,0,0,0,0.451248168945312,0.722579956054688,0,0,0,0,0,0,0.634872436523438,0,0,0,0,0,0,0,0.901657104492188,0,0,0,0,0,0,0,0.713790893554688,0,0,0,0,0,0.755073547363281,0,0,0,0,0,0.5208740234375,0,0,0.814544677734375,0,0,0,0,0,0,0,0.890228271484375,0,0,-6.61582183837891,0,0,0,0,0,0,0.901695251464844,0,0,0,0,0,0,0,0,0,0.455345153808594,0,0,0,0,0,0.465866088867188,0.8814697265625,0,0,0,0,0,0.891769409179688,0,0,0,0,0,0,0,0,0,0,0.880424499511719,0,0,0,0,0,0,0.884475708007812,0,0,0,0,0,0,0,0,0,0.571212768554688,0,0,0,0,0,0.399993896484375,0,0,0.447647094726562,0,0,0,0,0,0,-7.03453826904297,0,0,0,0,0,0.604408264160156,0,0,0,0,0,0,0,0,0.443351745605469,0,0,0,0,0,0,0.565963745117188,0,0.474502563476562,0,0,0,0,0.690773010253906,0,0,0,0,0,0,0,0,0,0.461647033691406,0.675979614257812,0,0,0,0,0,0.675643920898438,0.64410400390625,0,0,0,0.504501342773438,0,0,0,0,0,0.470550537109375,0,0,0,0,0,0,0,0.503608703613281,0,0,0,0,0,0.481216430664062,0,0,0,0,0,-7.00663757324219,0,0,0,0,0.491806030273438,0,0,0,0,0,0,0,0,0,0,0,0.443099975585938,0,0,0,0,0,0,0.482780456542969,0,0,0,0,0,0,0,0.54217529296875,0,0,0,0,0,0.49755859375,0,0,0,0.497886657714844,0,0,0,0.491317749023438,0,0,0,0.485275268554688,0.48004150390625,0,0,0,0,0,0.452232360839844,0.511329650878906,0,0,0,0,0,0,0,0,0,0.486892700195312,0,0,0,0.478080749511719,0,0.487998962402344,0,0,0,0,0,0,0,-6.95962524414062,0,0,0,0,0,0.439964294433594,0,0,0,0,0,0.538040161132812,0,0,0,0,0.503135681152344,0,0,0,0.43939208984375,0,0,0,0,0,0,0.483375549316406,0,0,0,0,0,0.502586364746094,0,0,0,0,0,0,0,0,0,0,0,0.500663757324219,0,0,0,0.52325439453125,0,0,0,0,0,0.495742797851562,0,0,0,0,0,0,0.477058410644531,0,0,0,0,0,0.432792663574219,0,0,0,0.506416320800781,0,0,0,0,0.439071655273438,0,0,0,0,0,0.439323425292969,0,0,0,0,0.446487426757812,0,0,0,0,0,-6.96015167236328,0,0,0,0,0,0,0,0,0.503631591796875,0,0,0,0,0,0,0,0.452896118164062,0,0,0,0,0.896751403808594,0,0,0,0,0,0,0,0,0.630447387695312,0,0,0,0,0,0,0,0,0,0.903228759765625,0,0,0.66314697265625,0,0,0,0,0,0,0.473472595214844,0,0,0,0,0.50689697265625,0,0,0,0,0,0,0.454505920410156,0,0,0,0,0,0.444747924804688,0,0,0,0,0,0.669830322265625,0,0,0,0,0.436050415039062,0,0,0,-6.63416290283203,0,0,0,0,0,0,0.568862915039062,0,0,0,0,0.608070373535156,0,0,0,0,0.673690795898438,0,0,0,0.713348388671875,0,0,0,0.552658081054688,0,0,0,0,0,0,0,0,0,0.425300598144531,0,0,0.553764343261719,0,0,0,0,0,0,0.459724426269531,0,0,0,0,0.536720275878906,0,0,0,0.448318481445312,0,0,0,0,0,0,0,0,0,0.5850830078125,0,0,0,0,0,0,0,-6.8271484375,0,0,0,0,0,0.440567016601562,0,0,0,0,0,0,0.507865905761719,0,0,0,0,0,0,0.437667846679688,0,0,0,0,0.508514404296875,0,0,0,0,0.489593505859375,0,0,0,0,0.451103210449219,0,0,0,0,0,0,0.444412231445312,0,0,0,0,0.658599853515625,0,0,0,0,0,0.457107543945312,0,0,0,0,0,0,0,0,0,0.570213317871094,0,0,0,0,0.491569519042969,0,0,0,0,0,0,0,0.622856140136719,0,0.477439880371094,0,0,0,0,0,0,0,0.469490051269531,0,0,0,0,-1.34292602539062,0,0,0,0,0,0,0,0,-5.03524780273438,0,0,0,0,0.441352844238281,0,0,0,0,0.608566284179688,0,0,0,0,0.504058837890625,0.716621398925781,0,0,0,0,0,0,0,0.5567626953125,0,0,0,0,0,0,0,0.447898864746094,0,0,0,0.897811889648438,0,0,0,0,0,0,0,0,0.898330688476562,0,0,0,0,0,0.906494140625,0,0,0.508407592773438,0,0,0,0,-7.06694793701172,0.490325927734375,0,0,0,0,0.471435546875,0,0,0,0,0,0,0.447784423828125,0,0.53033447265625,0,0,0,0.494331359863281,0,0,0,0,0,0.494186401367188,0,0,0,0,0,0,0,0,0.565536499023438,0,0,0,0,0.456314086914062,0,0,0,0,0,0,0,0,0,0,0.423919677734375,0,0,0,0,0.504364013671875,0,0,0,0.482353210449219,0,0,0,0,0,0,0,0.498367309570312,0,0,0,0,0,0,0.541610717773438,0.437416076660156,0,0,0,0,0,0.472633361816406,0,0,0,0,0,-6.95004272460938,0.487846374511719,0,0,0.444198608398438,0,0,0,0,0,0,0,0,0.507072448730469,0,0,0,0,0,0,0,0.492477416992188,0,0,0,0,0,0.492179870605469,0,0,0,0,0,0,0,0.888587951660156,0,0,0,0,0,0.878692626953125,0,0.440727233886719,0,0,0.441055297851562,0,0,0,0.882705688476562,0,0,0,0,0,0,0.898200988769531,0,0,0,0,0,-6.86511993408203,0,0,0,0,0.440895080566406,0,0,0,0.474555969238281,0,0,0,0.471260070800781,0,0,0,0,0.441505432128906,0,0,0,0,0,0.522697448730469,0,0,0,0,0,0.487266540527344,0.529823303222656,0,0,0,0,0,0,0,0,0.433509826660156,0,0,0,0,0,0,0.488975524902344,0,0,0,0.428688049316406,0,0,0,0,0,0,0,0,0,0.453575134277344,0,0,0,0,0,0.572090148925781,0,0,0.4775390625,0,0,0,0,0,0,0,0,0.485969543457031,0,0,0,-7.02022552490234,0,0,0,0,0,0,0,0.501152038574219,0,0,0,0,0.494819641113281,0.493873596191406,0,0,0,0.499916076660156,0,0,0,0,0,0,0.503486633300781,0,0,0,0,0,0.504264831542969,0,0,0,0,0,0.47821044921875,0,0,0,0,0.489776611328125,0,0,0,0.522064208984375,0,0,0,0.437690734863281,0,0,0.506324768066406,0,0,0,0.486221313476562,0,0,0,0.476448059082031,0.455734252929688,0,0,0,0,0,0.438385009765625,0,0,0,0,-6.53691864013672,0.682563781738281,0,0,0,0,0,0.668380737304688,0,0,0.896842956542969,0,0,0,0,0,0,0.894302368164062,0,0,0,0,0.440444946289062,0,0,0,0,0,0.440864562988281,0,0,0,0,0.440093994140625,0,0,0,0,0,0,0.674934387207031,0,0,0,0,0.661735534667969,0,0,0,0,0,0,0,0,0,-6.58733367919922,0,0,0,0,0,0,0.905250549316406,0,0,0,0,0,0.455276489257812,0,0,0,0,0,0,0.598884582519531,0,0,0,0,0,0,0.735877990722656,0,0,0,0,0,0.456390380859375,0,0,0,0,0.90777587890625,0,0,0,0.888465881347656,0,0,0,0,0.453018188476562,0,0,0,0,0,0,0,0.450836181640625,0,0,0,0,0,0.443275451660156,0.891822814941406,0,0,0,0,0,-7.03466033935547,0,0,0,0,0,0,0,0.456733703613281,0.91119384765625,0,0,0,0,0,0.607032775878906,0,0,0,0,0,0,0.426643371582031,0,0,0,0,0,0,0.553192138671875,0,0,0,0,0.482673645019531,0.439956665039062,0.537307739257812,0,0,0,0,0,0,0,0,0.490989685058594,0,0,0,0,0,0,0,0,0,0.447662353515625,0,0,0,0.531974792480469,0,0,0,0,0,0,0,0.433937072753906,0,0,0,0,0,0,0,0,0.429580688476562,0,0,0,0,0,0.431838989257812,0,0,0,0,0,-6.66770935058594,0,0,0.492813110351562,0,0,0,0,0,0,0,0,0.844161987304688,0,0,0,0,0,0,0.45355224609375,0,0,0,0.747611999511719,0,0,0,0,0,0.440635681152344,0,0,0,0,0,0,0,0,0,0.442710876464844,0,0,0,0,0,0,0.446586608886719,0,0,0,0,0,0,0,0,0,0,0,0.443946838378906,0.728492736816406,0.602912902832031,0.441848754882812,0,0,0,0,0,0.441688537597656,0,0,0,0,0,0,0,0,0,0,-6.65498352050781,0,0,0,0,0,0,0.536392211914062,0,0,0,0,0,0,0.447853088378906,0,0,0,0.462432861328125,0,0,0,0,0,0.442604064941406,0,0,0,0,0.900215148925781,0.889862060546875,0,0,0,0,0,0.439765930175781,0,0,0,0,0,0.884613037109375,0.886802673339844,0,0,0,0,0,0,0,0,0.693672180175781,-6.84939575195312,0,0,0,0,0,0,0.901145935058594,0.897926330566406,0,0,0,0,0,0,0,0,0,0,0.455703735351562,0,0,0,0,0,0.894874572753906,0.698043823242188,0,0,0,0.622833251953125,0,0,0,0,0,0.656494140625,0,0,0,0,0,0.424537658691406,0,0,0,0,0,0.437049865722656,0,0,0,0,0,0,0,0,0,0.404251098632812,0,0,0,0,0,0,0.508964538574219,0,0,0,0,0,0,0,0,-7.0447998046875,0,0,0,0,0.449615478515625,0,0,0,0,0,0,0.434852600097656,0,0,0,0,0,0,0,0,0,0,0.728652954101562,0,0,0,0,0,0,0,0.689186096191406,0,0,0,0,0.544662475585938,0,0,0,0,0,0,0,0.533309936523438,0,0,0.439094543457031,0.440849304199219,0,0,0.556625366210938,0,0,0,0,0,0,0.455146789550781,0,0,0,0,0,0,0,0.445487976074219,0,0,0,0,0,0,0,0,0.504432678222656,0,0,0,0,0,0,0.438407897949219,0,0,0,0,0,0.422271728515625,0,0,0,-6.97069549560547,0,0,0,0,0,0.490798950195312,0,0,0,0.728042602539062,0,0,0,0,0,0,0,0,0,0.554924011230469,0,0,0,0,0,0.456588745117188,0,0,0,0,0,0,0.5546875,0.595916748046875,0,0,0,0,0,0,0,0,0,0.509819030761719,0,0,0,0,0,0,0.536079406738281,0,0,0,0,0,0,0.468582153320312,0,0,0,0,0.437973022460938,0,0,0,0,0,0,0.50927734375,0,0,0,0,0,0.422554016113281,0,0,0,0,0,0,0.423088073730469,-6.91070556640625,0,0,0,0,0,0,0,0,0,0,0,0.454826354980469,0,0,0,0.524040222167969,0,0,0,0,0,0.473716735839844,0,0,0,0,0,0,0,0,0,0.437210083007812,0,0,0,0,0,0,0.451789855957031,0,0,0,0,0,0,0.59320068359375,0,0,0,0,0,0,0,0,0.693656921386719,0,0,0,0,0,0,0,0,0.441444396972656,0,0,0,0,0,0.705894470214844,0,0,0,0,0,0,0,0,0,0.523872375488281,0,0,0.473289489746094,0.42431640625,0,0,0,0,0,0.453376770019531,0,0.572540283203125,0,0,0,0,0,0,-7.00828552246094,0,0,0,0,0,0,0,0,0.449851989746094,0,0,0,0,0,0,0,0.487571716308594,0,0,0,0,0,0.425285339355469,0,0,0,0,0,0,0,0,0.478630065917969,0,0,0,0,0,0,0,0.556427001953125,0,0,0,0,0,0,0,0.491065979003906,0,0,0,0,0,0,0.435127258300781,0.453369140625,0,0,0,0,0.490684509277344,0,0,0,0,0,0,0.563545227050781,0,0,0,0,0,0,0,0,0,0.438888549804688,0,0,0,0,0,0,0,0,0.450233459472656,0,0,0,0,0,0,0.425430297851562,0,0,0,0,0,0.57183837890625,0,0,0,0,0,-6.78287506103516,0,0,0,0.493537902832031,0,0,0,0.452033996582031,0,0,0,0,0,0.545722961425781,0,0,0,0,0,0,0,0,0,0,0,0.487846374511719,0,0,0,0,0,0.557319641113281,0,0,0,0,0,0,0.891632080078125,0,0,0,0,0,0,0,0,0,0.882095336914062,0,0,0,0,0,0,0.890914916992188,0,0,0,0,0,0.440093994140625,0,0,0,0,0,0.439796447753906,0,0,0,0.439590454101562,0,0,-6.58429718017578,0.449432373046875,0,0,0,0,0,0.892311096191406,0,0,0,0,0,0,0.451187133789062,0.897476196289062,0,0,0,0,0,0.4583740234375,0,0,0,0,0,0,0,0,0,0.903656005859375,0,0,0,0,0,0.451927185058594,0.887115478515625,0.544204711914062,0,0,0,0,0,0,0,0,0.797393798828125,0,0,0,0,0,0,-6.55929565429688,0,0,0,0,0.912208557128906,0,0,0,0.456466674804688,0,0,0,0,0,0,0.457466125488281,0,0,0.912406921386719,0,0,0,0,0,0.454811096191406,0,0,0,0,0,0.89556884765625,0,0,0,0,0.895950317382812,0,0,0,0,0,0.453903198242188,0,0,0,0,0,0.895271301269531,0,0,0,0,0,0,-6.56385803222656,0,0,0,0,0,0.460418701171875,0,0,0,0,0,0,0,0,0.4320068359375,0.589828491210938,0.727645874023438,0,0,0,0,0,0,0.608108520507812,0.425537109375,0,0,0,0,0.4368896484375,0,0,0,0,0,0,0,0,0,0.574295043945312,0,0,0,0,0,0,0,0,0.692550659179688,0,0,0,0,0,0.423744201660156,0,0,0,0,0,0.437881469726562,0,0,0,0,0,0,0,0,0.441436767578125,0,0,0,0,0,0,0.489723205566406,0,0,0,0,0.492042541503906,0,0,0,0,0,0,0,-6.88134765625,0,0,0,0,0,0,0,0.453704833984375,0.468002319335938,0,0,0,0,0,0,0,0,0.66741943359375,0.587318420410156,0,0,0,0,0,0.476799011230469,0,0,0,0,0,0,0,0.552680969238281,0,0,0,0,0,0.470062255859375,0,0,0,0,0.711029052734375,0,0,0,0,0,0.690597534179688,0,0,0,0,0,0,0,0,0,0.880607604980469,0,0,0,0,0,0,0,0,0,0.880508422851562,0,0,0,0.132652282714844,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-7.43315124511719,0,0,0,0,0,0,0,0,0.115829467773438,0,0,0,0,0,0.458885192871094,0,0,0,0,0,0,0.9136962890625,0,0,0,0,0,0,0.92669677734375,0,0,0,0,0.67547607421875,0.709480285644531,0,0,0,0,0,0,0,0.871223449707031,0,0,0,0,0,0,0.450309753417969,0,0,0,0,0,0.790779113769531,0,0,0,0,0,0,0.425643920898438,0,0,0,0,0,0,0,0,0.8636474609375,0,0,0,0,0,0,0,-6.58740234375,0,0,0.911361694335938,0.922134399414062,0,0,0,0,0,0,0,0,0,0.456039428710938,0,0,0,0,0,0.911216735839844,0.756141662597656,0,0,0,0.610572814941406,0.441734313964844,0,0,0,0,0,0,0,0,0.687431335449219,0,0,0,0,0,0.427055358886719,0,0,0,0,0,0,0.421234130859375,0,0,0,-6.947998046875,0,0,0,0.503150939941406,0,0,0,0,0,0.484893798828125,0,0,0,0,0,0.48077392578125,0,0,0,0,0,0,0,0,0,0,0.492088317871094,0,0,0,0,0,0.490074157714844,0,0,0,0,0,0.472854614257812,0,0,0,0,0,0,0,0,0,0.490257263183594,0,0,0,0,0.50323486328125,0,0,0,0,0,0.888580322265625,0,0,0,0,0,0,0.450950622558594,0,0,0,0.881660461425781,0,0,0,0,0,0,0,0,0,0.443450927734375,0,0,0,0,-6.57678985595703,0,0,0,0,0,0,0,0,0,0,0,0.898124694824219,0,0,0,0,0,0.897270202636719,0,0,0,0,0.452957153320312,0,0,0,0,0,0,0,0,0.894500732421875,0,0,0,0,0,0,0,0,0.728630065917969,0,0,0,0,0.572830200195312,0,0.910240173339844,0,0,0,0,0,0,0.895172119140625,0,0,0,0,0,0,0,0.815109252929688,0,0,0,0,0,-6.91368103027344,0,0,0,0,0.911552429199219,0,0,0,0,0,0,0.919776916503906,0,0,0,0,0,0,0.456298828125,0,0,0,0,0,0.609901428222656,0,0,0,0.479629516601562,0,0,0,0,0,0,0,0.501022338867188,0,0,0,0.5037841796875,0,0,0,0,0,0.478790283203125,0,0,0,0,0,0.5966796875,0,0,0,0,0],&#34;filename&#34;:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},&#34;interval&#34;:10,&#34;files&#34;:[],&#34;prof_output&#34;:&#34;/var/folders/f3/t51slq3x2dlfgk3ksp7vddzm0000gq/T//RtmpqnUq8M/filec0d94477b8.prof&#34;,&#34;highlight&#34;:{&#34;output&#34;:[&#34;^output\\$&#34;],&#34;gc&#34;:[&#34;^&lt;GC&gt;$&#34;],&#34;stacktrace&#34;:[&#34;^\\.\\.stacktraceo(n|ff)\\.\\.$&#34;]},&#34;split&#34;:&#34;h&#34;}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;div id=&#34;htmlwidget-4&#34; style=&#34;width:100%;height:600px;&#34; class=&#34;profvis html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-4&#34;&gt;{&#34;x&#34;:{&#34;message&#34;:{&#34;prof&#34;:{&#34;time&#34;:[1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,13,13,13,13,13,13,13,14,14,14,14,14,14,14,15,15,15,15,15,15,15,16,16,16,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,19,19,19,19,19,19,19,20,20,20,20,20,20,21,21,21,21,21,21,21],&#34;depth&#34;:[9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1],&#34;label&#34;:[&#34;getExportedValue&#34;,&#34;::&#34;,&#34;sum&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sum&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;getExportedValue&#34;,&#34;::&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sum&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;sum&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;,&#34;base::sample&#34;,&#34;fastSimNullDistR_work&#34;,&#34;fastSimNullDistRMean&#34;,&#34;eval&#34;,&#34;eval&#34;,&#34;eval.parent&#34;,&#34;local&#34;],&#34;filenum&#34;:[null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null,null,1,null,null,null,null,null,null,1,null,null,null,null],&#34;linenum&#34;:[null,null,null,null,3,null,null,null,null,null,null,3,null,null,null,null,null,3,null,null,null,null,null,null,3,null,null,null,null,null,null,3,null,null,null,null,null,null,3,null,null,null,null,null,null,3,null,null,null,null,null,null,3,null,null,null,null,null,null,3,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,3,null,null,null,null,null,null,3,null,null,null,null,null,null,3,null,null,null,null,null,null,3,null,null,null,null,null,null,3,null,null,null,null,null,null,3,null,null,null,null,null,null,3,null,null,null,null,null,null,3,null,null,null,null,null,3,null,null,null,null,null,null,3,null,null,null,null],&#34;memalloc&#34;:[31.1977844238281,31.1977844238281,31.1977844238281,31.1977844238281,31.1977844238281,31.1977844238281,31.1977844238281,31.1977844238281,31.1977844238281,34.8770065307617,34.8770065307617,34.8770065307617,34.8770065307617,34.8770065307617,34.8770065307617,34.8770065307617,38.2881698608398,38.2881698608398,38.2881698608398,38.2881698608398,38.2881698608398,38.2881698608398,41.991584777832,41.991584777832,41.991584777832,41.991584777832,41.991584777832,41.991584777832,41.991584777832,45.7495346069336,45.7495346069336,45.7495346069336,45.7495346069336,45.7495346069336,45.7495346069336,45.7495346069336,49.8423690795898,49.8423690795898,49.8423690795898,49.8423690795898,49.8423690795898,49.8423690795898,49.8423690795898,52.9419250488281,52.9419250488281,52.9419250488281,52.9419250488281,52.9419250488281,52.9419250488281,52.9419250488281,56.9266128540039,56.9266128540039,56.9266128540039,56.9266128540039,56.9266128540039,56.9266128540039,56.9266128540039,60.1708374023438,60.1708374023438,60.1708374023438,60.1708374023438,60.1708374023438,60.1708374023438,60.1708374023438,63.4548568725586,63.4548568725586,63.4548568725586,63.4548568725586,63.4548568725586,63.4548568725586,31.297737121582,31.297737121582,31.297737121582,31.297737121582,31.297737121582,31.297737121582,31.297737121582,31.297737121582,35.0414810180664,35.0414810180664,35.0414810180664,35.0414810180664,35.0414810180664,35.0414810180664,35.0414810180664,38.8297424316406,38.8297424316406,38.8297424316406,38.8297424316406,38.8297424316406,38.8297424316406,38.8297424316406,42.6218948364258,42.6218948364258,42.6218948364258,42.6218948364258,42.6218948364258,42.6218948364258,42.6218948364258,46.220947265625,46.220947265625,46.220947265625,46.220947265625,46.220947265625,46.220947265625,46.220947265625,50.091796875,50.091796875,50.091796875,50.091796875,50.091796875,50.091796875,50.091796875,54.798942565918,54.798942565918,54.798942565918,54.798942565918,54.798942565918,54.798942565918,54.798942565918,57.8434295654297,57.8434295654297,57.8434295654297,57.8434295654297,57.8434295654297,57.8434295654297,57.8434295654297,61.7484741210938,61.7484741210938,61.7484741210938,61.7484741210938,61.7484741210938,61.7484741210938,61.7484741210938,32.2715911865234,32.2715911865234,32.2715911865234,32.2715911865234,32.2715911865234,32.2715911865234,35.6102523803711,35.6102523803711,35.6102523803711,35.6102523803711,35.6102523803711,35.6102523803711,35.6102523803711],&#34;meminc&#34;:[0,0,0,0,0,0,0,0,0,3.67922210693359,0,0,0,0,0,0,3.41116333007812,0,0,0,0,0,3.70341491699219,0,0,0,0,0,0,3.75794982910156,0,0,0,0,0,0,4.09283447265625,0,0,0,0,0,0,3.09955596923828,0,0,0,0,0,0,3.98468780517578,0,0,0,0,0,0,3.24422454833984,0,0,0,0,0,0,3.28401947021484,0,0,0,0,0,-32.1571197509766,0,0,0,0,0,0,0,3.74374389648438,0,0,0,0,0,0,3.78826141357422,0,0,0,0,0,0,3.79215240478516,0,0,0,0,0,0,3.59905242919922,0,0,0,0,0,0,3.870849609375,0,0,0,0,0,0,4.70714569091797,0,0,0,0,0,0,3.04448699951172,0,0,0,0,0,0,3.90504455566406,0,0,0,0,0,0,-29.4768829345703,0,0,0,0,0,3.33866119384766,0,0,0,0,0,0],&#34;filename&#34;:[null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null,null,null,&#34;&lt;expr&gt;&#34;,null,null,null,null]},&#34;interval&#34;:10,&#34;files&#34;:[{&#34;filename&#34;:&#34;&lt;expr&gt;&#34;,&#34;content&#34;:&#34;set.seed(2009)\nprofvis({\n    NullDistFSNDR_mw &lt;- fastSimNullDistRMean(total_bill ~ time, data=tips)\n})&#34;,&#34;normpath&#34;:&#34;&lt;expr&gt;&#34;}],&#34;prof_output&#34;:&#34;/var/folders/f3/t51slq3x2dlfgk3ksp7vddzm0000gq/T//RtmpqnUq8M/filec0d519c75eb.prof&#34;,&#34;highlight&#34;:{&#34;output&#34;:[&#34;^output\\$&#34;],&#34;gc&#34;:[&#34;^&lt;GC&gt;$&#34;],&#34;stacktrace&#34;:[&#34;^\\.\\.stacktraceo(n|ff)\\.\\.$&#34;]},&#34;split&#34;:&#34;h&#34;}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;Das mit den beiden Routinen aus FastSimNullDistR die gleichen Ergebnisse zu erwarten sind, sie also ein “(quasi-)drop-in-replacements” der Mosaic Routinen darstellen, kann man an den folgenden QQ-Plots erkennen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df.diffprop &amp;lt;- data_frame(diffprop = c(NullDistFSNDR_aw$diffprop, 
    NullDistMosaic_aw$diffprop), type = c(rep(&amp;quot;FSNDR&amp;quot;, 10000), 
    rep(&amp;quot;mosaic&amp;quot;, 10000)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: `data_frame()` is deprecated as of tibble 1.1.0.
## Please use `tibble()` instead.
## This warning is displayed once every 8 hours.
## Call `lifecycle::last_warnings()` to see where this warning was generated.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gf_qq(~diffprop, color = ~type, data = df.diffprop)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-05-02-ein-wenig-schneller-zur-simulierten-nullverteilung_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df.diffmean &amp;lt;- data_frame(diffmean = c(NullDistFSNDR_mw$diffmean, 
    NullDistMosaic_mw$diffmean), type = c(rep(&amp;quot;FSNDR&amp;quot;, 10000), 
    rep(&amp;quot;mosaic&amp;quot;, 10000)))
gf_qq(~diffmean, color = ~type, data = df.diffmean)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-05-02-ein-wenig-schneller-zur-simulierten-nullverteilung_files/figure-html/unnamed-chunk-15-2.png&#34; width=&#34;672&#34; /&gt;
# qqplot(NullDistFSNDR_aw&lt;span class=&#34;math inline&#34;&gt;\(diffprop, NullDistMosaic_aw\)&lt;/span&gt;diffprop)
gf_qq(FSNDR ~ Mosaic, data=df)
# qqplot(NullDistFSNDR_mw&lt;span class=&#34;math inline&#34;&gt;\(diffmean, NullDistMosaic_mw\)&lt;/span&gt;diffmean)
gf_qq(NullDistFSNDR_mw&lt;span class=&#34;math inline&#34;&gt;\(diffmean ~ NullDistMosaic_mw\)&lt;/span&gt;diffmean)
```&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;woher-kommt-die-geschwindigkeit&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Woher kommt die Geschwindigkeit?&lt;/h2&gt;
&lt;p&gt;Schaut man sich den Quellcode von Mosaic an, wird einem schnell klar, dass es zwar didaktisch sinnvoll ist die unabhängige Variable mit &lt;code&gt;shuffle()&lt;/code&gt; zu bearbeiten, nicht aber programmiertechnisch. Und wenn, dann nicht in dem man die ganze Datenzeile für die Berechnung kopiert. Statt also &lt;span class=&#34;math inline&#34;&gt;\(10\,000\)&lt;/span&gt; mal die ganzen Daten im Speicher zu kopieren wäre es doch sinnvoller mit Hilfe eines Index auf die unveränderten Daten zuzugreifen. Und genau das machen die zwei Routinen. Es wird also nur dieser Zugriffsindex wird &lt;em&gt;geshuffelt&lt;/em&gt; und das spart Speicherplatz und deutlich auch Rechenzeit.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Nur ein wenig lineare Regression</title>
      <link>/post/nur-ein-wenig-lineare-regression/</link>
      <pubDate>Mon, 08 Jan 2018 00:00:00 +0000</pubDate>
      <guid>/post/nur-ein-wenig-lineare-regression/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Der &lt;em&gt;tipping&lt;/em&gt; Datensatz wird oft analysiert. Das Verhältnis von Trinkgeld (&lt;em&gt;tip&lt;/em&gt;) und Rechnungsbetrag (&lt;em&gt;total_bill&lt;/em&gt;) steht dabei im Vordergrund einer lineare Regressionsanalyse.
So auch hier. Wir wollen die einzelnen Angaben von &lt;strong&gt;R&lt;/strong&gt; dabei in den Fokus rücken und einmal Hinterfragen, was wir bei der Ausgabe von &lt;strong&gt;R&lt;/strong&gt; eigentlich genau sehen, woher es kommt und wie man es interpretieren kann.&lt;/p&gt;
&lt;p&gt;Zunächst laden wir dazu die &lt;strong&gt;tipping&lt;/strong&gt; Daten mittels&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mosaic)
download.file(&amp;quot;https://goo.gl/whKjnl&amp;quot;, destfile = &amp;quot;tips.csv&amp;quot;)
tips &amp;lt;- read.csv2(&amp;quot;tips.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in den Arbeitsspeicher.&lt;/p&gt;
&lt;p&gt;Eine lineares Modell wird schnell mit&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;linMod &amp;lt;- lm(tip ~ total_bill, data = tips)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;erstellt.
Betrachten wir die Zusammenfassung:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(linMod)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = tip ~ total_bill, data = tips)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -3.1982 -0.5652 -0.0974  0.4863  3.7434 
## 
## Coefficients:
##             Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept) 0.920270   0.159735   5.761 2.53e-08 ***
## total_bill  0.105025   0.007365  14.260  &amp;lt; 2e-16 ***
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 1.022 on 242 degrees of freedom
## Multiple R-squared:  0.4566, Adjusted R-squared:  0.4544 
## F-statistic: 203.4 on 1 and 242 DF,  p-value: &amp;lt; 2.2e-16&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Die zentrale Frage bei einer linearen Regression ist, finden wir einen linearen Zusammenhang in unserer Stichprobe, den wir auf die Population (als die Grundgesamtheit) übertragen können.&lt;/p&gt;
&lt;p&gt;Die Spalte &lt;strong&gt;Estimate&lt;/strong&gt; im Abschnitt &lt;strong&gt;Coefficients&lt;/strong&gt; liefert uns in unser Stichprobe einen möglichen linearen Zusammenhang gemäß&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\hat{y}_{\text{tip}} = \hat{\beta}_{\text{0}} + \hat{\beta}_{\text{total_bill}} \cdot x_{\text{total_bill}},\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;mit den &lt;em&gt;Regressionskoeffizienten&lt;/em&gt; &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}_0=0.9202696\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}_{\text{total_bill}}=0.1050245\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Graphisch ergibt sich damit das Modell wie folgt:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Statt plotModel(linMod) besser:
mypanel &amp;lt;- function(x, y) {
    # Scatterplot:
    panel.xyplot(x, y, col = &amp;quot;darkgreen&amp;quot;) 
    # Regressionsgerade:
    panel.abline(linMod, col = &amp;quot;red&amp;quot;, lwd = 1.2, lty = 2)
}
xyplot(
    tip ~ total_bill, data = tips, 
    panel = mypanel,
    main  = &amp;quot;Streudiagramm der Trinkgelder&amp;quot;,
    ylab  = &amp;quot;Trinkgeld&amp;quot;,
    xlab  = &amp;quot;Rechnungsbetrag&amp;quot;,
    key = list(
            space = &amp;quot;bottom&amp;quot;, padding.text = 8,
            lines = list(col = c(&amp;quot;red&amp;quot;), lty = c(2), lwd = 1.2),
            text = list(c(&amp;quot;Regressionsgerade&amp;quot;))
          )
     )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-01-08-nur-ein-wenig-lineare-regression_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Was hat es mit dem y-Achsenabschnitt &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}_0\)&lt;/span&gt; auf sich?&lt;/p&gt;
&lt;p&gt;Ist es etwa eine Art &lt;em&gt;Grundtrinkgeld&lt;/em&gt;, mit dem der Kellern rechnen kann, auch wenn der Kunde gar nichts bestellt?&lt;/p&gt;
&lt;p&gt;Nun ja, es so etwas in der Art, aber eben ein rein fiktiver Wert, der durch die Konstruktion der Parameter entsteht.
Eine (affin-)lineare Gerade geht nun einmal irgendwann durch die y-Achse (wenn sie nicht parallel dazu ist) und es kann passieren, dass eine sinnvolle Interpretation nicht so ohne weiteres möglich ist.&lt;/p&gt;
&lt;p&gt;Wir können aber dieses &lt;em&gt;Grundtrinkgeld&lt;/em&gt; heraus nehmen und den y-Achsenabschnitt auf Null setzen. Dazu ziehen wir &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}_0\)&lt;/span&gt; einfach von alle Trinkgeldern ab. Wir erhalten quasi nur noch den &lt;em&gt;Trinkgeldzuwach&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;beta_0 &amp;lt;- coef(linMod)[&amp;quot;(Intercept)&amp;quot;]  # Grundtrinkgeld
tips$delta_tip &amp;lt;- tips$tip - beta_0    # wird abgezogen&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vergleichen wir das alte lineare Modell mit dem neuen Modell (&lt;em&gt;linModDelta&lt;/em&gt;):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;linModDelta &amp;lt;- lm(delta_tip ~ total_bill, data = tips)
summary(linModDelta)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = delta_tip ~ total_bill, data = tips)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -3.1982 -0.5652 -0.0974  0.4863  3.7434 
## 
## Coefficients:
##               Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept) -4.549e-15  1.597e-01    0.00        1    
## total_bill   1.050e-01  7.365e-03   14.26   &amp;lt;2e-16 ***
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 1.022 on 242 degrees of freedom
## Multiple R-squared:  0.4566, Adjusted R-squared:  0.4544 
## F-statistic: 203.4 on 1 and 242 DF,  p-value: &amp;lt; 2.2e-16&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In diesem Modell ist der Wert für den y-Achsenabschnitt numerisch gleich 0. – Ja, da mag zwar &lt;span class=&#34;math inline&#34;&gt;\(-4.5487837\times 10^{-15}\)&lt;/span&gt; stehen, jedoch sind so kleine Werte der jedem Rechner inne wohnenden Ungenauigkeit in der Gleitkomma-Arithmetik geschuldet und ist faktisch gleich 0.&lt;/p&gt;
&lt;p&gt;Der Wert für die Steigung lautet weiterhin &lt;span class=&#34;math inline&#34;&gt;\(0.1050245\)&lt;/span&gt;.
Das war auch zu erwarten, denn wir haben unsere Regressionsgerade eigentlich nur um &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}_0\)&lt;/span&gt; nach unten verschoben. (Der Fachmann spricht von einer Translation (Parallelverschiebung)&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; um &lt;span class=&#34;math inline&#34;&gt;\(-\hat{\beta}_0\)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Statt plotModel(linModDelta) besser:
mypanel &amp;lt;- function(x, y) {
    # Scatterplot:
    panel.xyplot(x, y, col = &amp;quot;darkgreen&amp;quot;) 
    # Regressionsgerade:
    panel.abline(linModDelta, col = &amp;quot;red&amp;quot;, lwd = 1.2, lty = 2)
}
xyplot(
    delta_tip ~ total_bill, data=tips, 
    panel = mypanel,
    main  = &amp;quot;Streudiagramm der Delta Trinkgelder&amp;quot;,
    ylab  = &amp;quot;Delta Trinkgeld&amp;quot;,
    xlab  = &amp;quot;Rechnungsbetrag&amp;quot;,
    key = list(
            space=&amp;quot;bottom&amp;quot;, padding.text=8,
            lines=list(col=c(&amp;quot;red&amp;quot;), lty=c(2), lwd=1.2),
            text=list(c(&amp;quot;Regressionsgerade&amp;quot;)))
     )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-01-08-nur-ein-wenig-lineare-regression_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Vergleichen wir die beiden Zusammenfassungen, so stellen wir fest das sich mit Ausnahme der &lt;em&gt;[Intercept]&lt;/em&gt; Zeile praktisch nichts geändert hat. Das ist kein Wunder, sondern Absicht!&lt;/p&gt;
&lt;p&gt;Die Regressionsgerade stellt für unsere Stichprobe die Gerade mit dem geringsten Fehler an den Datenpunkten dar. Mathematisch heißt das folgendes:&lt;/p&gt;
&lt;p&gt;An den &lt;span class=&#34;math inline&#34;&gt;\(n=244\)&lt;/span&gt; Datenpunkten unserer Stichprobe &lt;span class=&#34;math inline&#34;&gt;\((x_i, y_i)=(tips\$total\_bill[i], tips\$tip[i])\)&lt;/span&gt; [für &lt;span class=&#34;math inline&#34;&gt;\((i=1, \dots, n)\)&lt;/span&gt;] sind die &lt;em&gt;Residuen&lt;/em&gt;, also die &lt;em&gt;Fehlerterme&lt;/em&gt;,&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
 \hat{e}_i =\hat{y}_i - y_i = \left[\hat{\beta}_{\text{0}} + \hat{\beta}_{\text{total_bill}} \cdot x_i\right] - y_i
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;durch die verwendete &lt;em&gt;Methode der kleinsten Quadrate&lt;/em&gt;&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; &lt;em&gt;quadratisch minimal&lt;/em&gt;. Kurz:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    \sum_{i=1}^n (\hat{e}_i)^2 \text{ ist minimal!}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir können diese Fehlerterme graphisch ansehen um die Varianz der Residuen zu sehen.
Dazu ziehen wir von allen Datenpunkten &lt;span class=&#34;math inline&#34;&gt;\(y_i\)&lt;/span&gt; den geschätzten Wert &lt;span class=&#34;math inline&#34;&gt;\(\hat{y}_i\)&lt;/span&gt; ab und erstellen ein neues lineares Modell:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;beta_total_bill &amp;lt;- coef(linModDelta)[&amp;quot;total_bill&amp;quot;]
tips$error_tip &amp;lt;- (tips$tip - beta_0 - beta_total_bill * tips$total_bill)
linModError &amp;lt;- lm(error_tip ~ total_bill, data = tips)
summary(linModError)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = error_tip ~ total_bill, data = tips)
## 
## Residuals:
##     Min      1Q  Median      3Q     Max 
## -3.1982 -0.5652 -0.0974  0.4863  3.7434 
## 
## Coefficients:
##               Estimate Std. Error t value Pr(&amp;gt;|t|)
## (Intercept)  1.900e-15  1.597e-01       0        1
## total_bill  -8.740e-17  7.365e-03       0        1
## 
## Residual standard error: 1.022 on 242 degrees of freedom
## Multiple R-squared:  6.665e-31,  Adjusted R-squared:  -0.004132 
## F-statistic: 1.613e-28 on 1 and 242 DF,  p-value: 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also Diagramm sieht es dann so aus:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Statt plotModel(linModError) besser:
mypanel &amp;lt;- function(x, y) {
    # Scatterplot:
    panel.xyplot(x, y, col = &amp;quot;darkgreen&amp;quot;) 
    # Regressionsgerade:
    panel.abline(linModError, col = &amp;quot;red&amp;quot;, lwd = 1.2, lty = 2)
}
xyplot(
    error_tip ~ total_bill, data = tips, 
    panel = mypanel,
    main  = &amp;quot;Streudiagramm der Residuen&amp;quot;,
    ylab  = &amp;quot;Residuen&amp;quot;,
    xlab  = &amp;quot;Rechnungsbetrag&amp;quot;,
    key = list(
            space = &amp;quot;bottom&amp;quot;, rows = 3, padding.text = 8,
            lines = list(col=c(&amp;quot;red&amp;quot;), lty = c(2), lwd = 1.2),
            text = list(c(&amp;quot;Regressionsgerade / x-Achse&amp;quot;))
          )
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-01-08-nur-ein-wenig-lineare-regression_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Wir können die Graphik im wesentlichen auch einfacher über den Befehl&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;xyplot(residuals(linMod) ~ fitted(linMod))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-01-08-nur-ein-wenig-lineare-regression_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;erhalten.&lt;/p&gt;
&lt;p&gt;Betrachten wir kurz nur die Residuen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;favstats(~residuals(linMod))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        min         Q1      median        Q3      max          mean       sd   n
##  -3.198225 -0.5651615 -0.09744499 0.4863111 3.743435 -2.022281e-17 1.019943 244
##  missing
##        0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wir sehe, dass wir in der Zusammenfassung immer genau diese Werte unter dem Abschnitt &lt;em&gt;Residuals&lt;/em&gt; gefunden haben. Minimum, das 1. Quantil, der Median, das 3. Quantil und das Maximum stimmen überein.&lt;/p&gt;
&lt;p&gt;Der erwartungstreue und unverzerrte Schätzer für den Standardfehler der Residuen, lautet&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{align*}
    SE_{\text{Residuen}} &amp;amp;= \sqrt{\frac{1}{n-2} \cdot \sum_{i=1}^n (\hat{e_i})^2} = \sqrt{\frac{n-1}{n-2} \cdot \frac{1}{n-1} \cdot \sum_{i=1}^n (\hat{e_i})^2} \\
                         &amp;amp;= \sqrt{\frac{n-1}{n-2}} \cdot \sqrt{\frac{1}{n-1} \cdot \sum_{i=1}^n (\hat{e_i})^2} \\
                         &amp;amp;= \sqrt{\frac{n-1}{n-2}} \cdot s_{\text{Residuen}}
\end{align*}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Also finden wir den Wert &lt;em&gt;Residual standard error&lt;/em&gt; aus der Zeile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Residual standard error: 1.022 on 242 degrees of freedom&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in dem wir den in den &lt;em&gt;favstats&lt;/em&gt; gefundenen Wert für die Standardabweichung entsprechen korrigieren:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    SE_{\text{Residuen}} = \sqrt{\frac{n-1}{n-2}} \cdot s_{\text{Residuen}} = \sqrt{\frac{243}{242}} \cdot 1.0199426 = 1.0220477
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Der Median der Residuen ist nicht gleich Null, wie der Mittelwert. (Welcher auch hier als numerisch Null interpretiert werden muss!)
Es könnte also eine linkssteile, rechtsschiefe Verteilung der Residuen vorliegen.
Betrachten wir dazu das Histogramm:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;histogram(~residuals(linMod), nint = 19)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-01-08-nur-ein-wenig-lineare-regression_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Schon beim ersten Blick auf das Histogramm kann an eine Normalverteilung der Residuen nicht mehr so ganz geglaubt werden.&lt;/p&gt;
&lt;p&gt;Ein Shapiro-Wilk-Test&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; hat als Nullhypothese die Annahme, dass die Daten normalverteilt sind!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;shapiro.test(residuals(linMod))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Shapiro-Wilk normality test
## 
## data:  residuals(linMod)
## W = 0.96728, p-value = 2.171e-05&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Davon ist nach dem Ergebnis eben sowenig auszugehen, wie nach einem Blick auf das QQ-Normal-Diagramm:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qqnorm(residuals(linMod), col = &amp;quot;darkgreen&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-01-08-nur-ein-wenig-lineare-regression_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Ein K.O.-Kriterium für gute Prognosen.&lt;/p&gt;
&lt;p&gt;Wie gut aber beschreibt unsere Regressionsgerade die Daten?&lt;/p&gt;
&lt;p&gt;Als Maß dafür können wir das Bestimmtheitsmaß nehmen.&lt;/p&gt;
&lt;p&gt;Ein kurzer Blick auf die Situation, der Mittelwert der Trinkgelder ist&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    \bar{y} =  \frac{1}{n} \cdot \sum_{i=1}^n y_i = 2.9982787.
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir erhalten so folgendes Diagramm:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mypanel &amp;lt;- function(x, y) {
    panel.xyplot(x, y)
    panel.abline(h = mean(y), lwd = 1.2, lty = 2, col = &amp;quot;darkgreen&amp;quot;)
    panel.lmline(x, y, col = &amp;quot;red&amp;quot;, lwd = 1.2, lty = 2)
}
xyplot(
    tip ~ total_bill, data = tips, 
    panel = mypanel,
    main  = &amp;quot;Streudiagramm der Trinkgelder&amp;quot;,
    ylab  = &amp;quot;Trinkgeld&amp;quot;,
    xlab  = &amp;quot;Rechnungsbetrag&amp;quot;,
    key = list(
            space = &amp;quot;bottom&amp;quot;,
            padding.text = 8,
            columns = 2,
            just = c(&amp;quot;center&amp;quot;, &amp;quot;bottom&amp;quot;),
            lines = list(col = c(&amp;quot;darkgreen&amp;quot;, &amp;quot;red&amp;quot;), lty = c(2, 2), lwd = 1.2),
            text = list(c(expression(bar(y)), expression(hat(beta)[0]+hat(beta)[total_bill] * x[total_bill]))),
            text = list(c(&amp;quot;Mittelwert Trinkgeld&amp;quot;, &amp;quot;Regressionsgerade&amp;quot;))
    )
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-01-08-nur-ein-wenig-lineare-regression_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Die Varianz &lt;span class=&#34;math inline&#34;&gt;\(s^2_{y_i}=1.9144546\)&lt;/span&gt; beschreibt die mittlere quadratische Abweichung der Datenpunkte &lt;span class=&#34;math inline&#34;&gt;\(y_i\)&lt;/span&gt; vom Mittelwert &lt;span class=&#34;math inline&#34;&gt;\(\bar{y}\)&lt;/span&gt;.
Diese Varianz lässt sich Zerlegen in einen Anteil, der durch die Regressionsgerade &lt;em&gt;erklärt&lt;/em&gt; wird und in einen Anteil, der durch die Regressionsgerade &lt;em&gt;nicht erklärt&lt;/em&gt; wird.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    s^2_{y_i} = s^2_{\hat{y}_i} + s^2_{\hat{e}_i}
\]&lt;/span&gt;
Dividiert man beider Seiten durch die Varianz &lt;span class=&#34;math inline&#34;&gt;\(s^2_{y_i}\)&lt;/span&gt;, so normiert man den Ausdruck und kann den Faktor &lt;span class=&#34;math inline&#34;&gt;\(\frac{1}{n-1}\)&lt;/span&gt; (bzw. &lt;span class=&#34;math inline&#34;&gt;\(\frac{1}{n}\)&lt;/span&gt;) herauskürzen. Es bleibt dann:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    1 = \frac{\sum_{i=1}^n (\bar{y}- \hat{y_i})^2}{\sum_{i=1}^n (\bar{y}-y_i)^2} + \frac{\sum_{i=1}^n (\hat{e_i})^2}{\sum_{i=1}^n (\bar{y}-y_i)^2}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Multipliziert man beide Seiten mit &lt;span class=&#34;math inline&#34;&gt;\(\sum_{i=1}^n (y_i)^2\)&lt;/span&gt;, so erhält man:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    \sum_{i=1}^n (\bar{y}- y_i)^2 = \sum_{i=1}^n (\bar{y}- \hat{y_i})^2+ \sum_{i=1}^n (\hat{e_i})^2 
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Zur Vereinfachung nennt man die einzelnen Summen in dem Ausdruck wie folgt:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Der erste Ausdruck heißt &lt;strong&gt;Gesamtvarianz&lt;/strong&gt; oder &lt;strong&gt;total sum of squares&lt;/strong&gt; oder kurz &lt;strong&gt;&lt;span class=&#34;math inline&#34;&gt;\(SS_T\)&lt;/span&gt;&lt;/strong&gt;, (oder &lt;strong&gt;TSS&lt;/strong&gt;) er ist die Summe der quadrierten Differenzen&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    SS_T = \sum_{i=1}^n (\bar{y}-y_i)^2
\]&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Der zweite Ausdruck heißt &lt;strong&gt;Modellvarianz&lt;/strong&gt; oder &lt;strong&gt;model sum of squares&lt;/strong&gt; oder kurz &lt;strong&gt;&lt;span class=&#34;math inline&#34;&gt;\(SS_M\)&lt;/span&gt;&lt;/strong&gt; (oder &lt;strong&gt;RSS&lt;/strong&gt;), er ist die Summe der quadrierten Differenzen aus dem Mittelwert &lt;span class=&#34;math inline&#34;&gt;\(\bar{y}\)&lt;/span&gt; und der Punkte auf der Regressionsgeraden &lt;span class=&#34;math inline&#34;&gt;\(\hat{y}_i\)&lt;/span&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    SS_M = \sum_{i=1}^n (\bar{y}-\hat{y}_i)^2
\]&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Der dritte Ausdruck heißt &lt;strong&gt;Gesamt-Verhersage-Fehler&lt;/strong&gt;, &lt;strong&gt;Fehlersteuung der Regression&lt;/strong&gt; oder &lt;strong&gt;error sum of squares&lt;/strong&gt; oder kurz &lt;span class=&#34;math inline&#34;&gt;\(SS_E\)&lt;/span&gt; (oder &lt;strong&gt;ESS&lt;/strong&gt;), er ist die Summe der quadratischen Differenz aus den Datenpunkten &lt;span class=&#34;math inline&#34;&gt;\(y_i\)&lt;/span&gt; und den Punkten der Regressionsgeraden &lt;span class=&#34;math inline&#34;&gt;\(\hat{y}_i\)&lt;/span&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    SS_E = \sum_{i=1}^n (\hat{y}_i-y_i)^2 = \sum_{i=1}^n (\hat{e}_i)^2
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wir können daher auch kurz&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    SS_T = SS_M + SS_E
\]&lt;/span&gt;
schreiben und sparen uns die ganzen Summenzeichen.&lt;/p&gt;
&lt;p&gt;Die Güte einer Regression wollen wir durch den Anteil der durch das Model erklärten Varianz (also der &lt;span class=&#34;math inline&#34;&gt;\(SS_M\)&lt;/span&gt;) ausdrücken und stellen daher nach &lt;span class=&#34;math inline&#34;&gt;\(SS_M\)&lt;/span&gt; um:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    SS_M = SS_T - SS_E
\]&lt;/span&gt;
Teilen wir beide Seiten durch &lt;span class=&#34;math inline&#34;&gt;\(SS_T\)&lt;/span&gt; also der maximalen (weil totalen) Quadratsumme, so erhalten wir:
&lt;span class=&#34;math display&#34;&gt;\[
    \frac{SS_M}{SS_T} = \frac{SS_T}{SS_T} - \frac{SS_E}{SS_T} = 1 - \frac{SS_E}{SS_T}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Den Ausdruck &lt;span class=&#34;math inline&#34;&gt;\(\frac{SS_M}{SS_T}\)&lt;/span&gt; nennen wir &lt;strong&gt;Bestimmtheitsmaß&lt;/strong&gt; und schreiben dafür &lt;span class=&#34;math inline&#34;&gt;\(R^2\)&lt;/span&gt;. Es ist ein Wert zwischen 0 und 1, der den Anteil der durch das Modell beschriebenen Varianz in Bezug auf die Gesamtvarianz angibt. Kraft Definition ist &lt;span class=&#34;math inline&#34;&gt;\(R^2\)&lt;/span&gt; im eindimensionalen Fall tatsächlich das Quadrat des (Pearson-)Korrelationskoeffizienten &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt;. (M.a.W.: &lt;span class=&#34;math inline&#34;&gt;\(R^2= r^2\)&lt;/span&gt;.)&lt;/p&gt;
&lt;p&gt;In unserer Zusammenfassung des linearen Models findet sich dieser Wert auch. Und zwar unter dem Begriff:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Multiple R-squared:  0.4566, &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Es gilt ja:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    R^2 = 1 - \frac{SS_E}{SS_T} = 1 - \frac{s^2_{\hat{e}_i}}{s^2_{y_i}} = 1 - \frac{1.0402829}{1.9144546} = 0.4566166
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Der Wert&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## ..., Adjusted R-squared:  0.4544&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;erklärt sich daraus&lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;, dass das Bestimmheitsmaß um so größer wird je größer die Zahl der unabhängigen Variablen wird.
Und zwar &lt;em&gt;unabhöngig&lt;/em&gt; davon, ob weitere unabhängige Variablen wirklich einen Beitrag zur Erklärungskraft liefern.
Daher nutzt man besser das &lt;strong&gt;korrigierte Bestimmtheitsmaß&lt;/strong&gt; (engl.: &lt;em&gt;adjusted R-squared&lt;/em&gt;) &lt;span class=&#34;math inline&#34;&gt;\(\bar{R}^2\)&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    \begin{align*}
        \bar{R}^2 &amp;amp;= 1- (1-R^2) \cdot \frac{n-1}{n-p-1}\\ 
                  &amp;amp;= R^2 - (1-R^2)  \cdot \frac{p}{n-p-1}
    \end{align*}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Wobei &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; die Anzahl der unabhängigen Variablen im Modell darstellt.
In unserem Beispiel gilt daher:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    \begin{align*}
        \bar{R}^2 &amp;amp;= 1 - (1-R^2)  \cdot \frac{n-1}{n-p-1} \\
                  &amp;amp;= 1 - (1- 0.4566166)  \cdot \frac{244-1}{244- 1- 1} \\
                  &amp;amp;= 0.4543712
    \end{align*}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vorsicht:&lt;/strong&gt; Das &lt;em&gt;korrigierte Bestimmtheitsmaß&lt;/em&gt; ist nicht mehr an das Intervall &lt;span class=&#34;math inline&#34;&gt;\([0; 1]\)&lt;/span&gt; gebunden!
Es kann negative Werte annehmen, ist in der Regel kleiner als das (unkorrigierte) Bestimmtheitsmaß und erreicht die obere Grenze (&lt;span class=&#34;math inline&#34;&gt;\(\bar{R}^2=1\)&lt;/span&gt;) genau dann, wenn &lt;span class=&#34;math inline&#34;&gt;\(R^2 = 1\)&lt;/span&gt; ist.&lt;/p&gt;
&lt;p&gt;Bei der &lt;strong&gt;Gesamtsignifikanz des Modells&lt;/strong&gt; (auch &lt;strong&gt;Overall-F-Test&lt;/strong&gt; genannt) wird geprüft, ob mindestens eine Variable einen Erklärungsgehalt für das Modell liefert.&lt;/p&gt;
&lt;p&gt;Falls diese Hypothese verworfen wird ist somit das Modell nutzlos.
Dieser Test lässt sich so interpretieren als würde man die gesamte Güte des Modells, also das &lt;span class=&#34;math inline&#34;&gt;\(R^2\)&lt;/span&gt; des Modells, testen.
Aus diesem Grund wird der F-Test der Gesamtsignifikanz des Modells auch als Anpassungsgüte-Test bezeichnet.
Die Nullhypothese des F-Test der Gesamtsignifikanz des Modells sagt aus, dass alle erklärenden Variablen keinen Einfluss auf die abhängige Variable haben.
Sowohl die abhängige Variable als auch die unabhängigen Variablen können binär (kategoriell) oder metrisch sein.
Der &lt;em&gt;Wald-Test&lt;/em&gt; kann dann die Hypothesen testen (ohne Einbezug des Achsenabschnittes):&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    H_{0}\colon \beta _{1}=\beta _{2}=\ldots =\beta _{k}\;=\;0\Rightarrow R^{2}=0
\]&lt;/span&gt;
gegen&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    H_{1}:\beta _{j}\;\neq \;0\;\mathrm {f{\ddot {u}}r\;mindestens\;ein} \;j\in \{1,\ldots ,k\}\Rightarrow R^{2}\neq 0
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Die Teststatistik dieses Tests lautet&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
    F\;\;{\stackrel {H_{0}}{=}}{\frac {R^{2}}{1-R^{2}}} \cdot {\frac {n-p-1}{p}}\;\;{\stackrel {H_{0}}{\sim }}\;\;F(p,n-p)
\end{aligned}.
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;mit &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(\displaystyle (n-p-1)\)&lt;/span&gt; Freiheitsgraden.
Überschreitet der empirische F-Wert einen kritischen F-Wert, der zu einem a priori festgelegten Signifikanzniveau &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt;, so verwirft man die Nullhypothese &lt;span class=&#34;math inline&#34;&gt;\(H_{0}\)&lt;/span&gt;.
Das &lt;span class=&#34;math inline&#34;&gt;\(R^{2}\)&lt;/span&gt; ist dann ausreichend groß und mindestens ein Regressor trägt also vermutlich genügend viel Information zur Erklärung von &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; bei.
Es ist naheliegend bei hohen F-Werten die Nullhypothese zu verwerfen, da ein hohes Bestimmtheitsmaß zu einem hohen F-Wert führt.
Wenn der &lt;em&gt;Wald-Test&lt;/em&gt; für eine oder mehrere unabhängige Variablen die Nullhypothese ablehnt, dann kann man davon ausgehen, dass die zugehörigen Parameter ungleich Null sind, so dass die Variable(n) in das Modell mit einbezogen werden sollten.&lt;/p&gt;
&lt;p&gt;In unserem Beispiel ist&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
    F={\frac {R^{2}}{1-R^{2}}} \cdot {\frac {n-p-1}{p}} = \frac{0.4566166}{1-0.4566166} \cdot \frac{244-1-1}{1} = 203.3577233
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;der Wert in der Zeile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## F-statistic: 203.4 on 1 and 242 DF,  p-value: &amp;lt; 2.2e-16&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mit Parametern &lt;span class=&#34;math inline&#34;&gt;\(p=1\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(n-p-1=242\)&lt;/span&gt; Freiheitsgraden.&lt;/p&gt;
&lt;p&gt;Der p-Wert von (numerisch) 0, liefert also ein hinreichendes Indiz dafür, dass der Rechnungsbetrag einen echten Beitrag liefert.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;vgl.: &lt;a href=&#34;https://de.wikipedia.org/wiki/Parallelverschiebung&#34; class=&#34;uri&#34;&gt;https://de.wikipedia.org/wiki/Parallelverschiebung&lt;/a&gt;&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;vgl.: &lt;a href=&#34;https://de.wikipedia.org/wiki/Methode_der_kleinsten_Quadrate&#34; class=&#34;uri&#34;&gt;https://de.wikipedia.org/wiki/Methode_der_kleinsten_Quadrate&lt;/a&gt;&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;vgl.: &lt;a href=&#34;https://de.wikipedia.org/wiki/Shapiro-Wilk-Test&#34; class=&#34;uri&#34;&gt;https://de.wikipedia.org/wiki/Shapiro-Wilk-Test&lt;/a&gt;&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;vgl.: &lt;a href=&#34;https://de.wikipedia.org/wiki/Bestimmtheitsmaß#Das_korrigierte_Bestimmtheitsmaß&#34; class=&#34;uri&#34;&gt;https://de.wikipedia.org/wiki/Bestimmtheitsmaß#Das_korrigierte_Bestimmtheitsmaß&lt;/a&gt;&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Prognose-, Konfidenz- und Fiduzialintervalle</title>
      <link>/post/prognose-konfidenz-und-fiduzialintervalle/</link>
      <pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate>
      <guid>/post/prognose-konfidenz-und-fiduzialintervalle/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;*&lt;strong&gt;WORK IN PROGRESS&lt;/strong&gt;
Dieser Eintrag ist noch nicht fertig und wird in der Zukunft erweitert!&lt;/p&gt;
&lt;div id=&#34;konfidenzintervalle&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Konfidenzintervalle&lt;/h2&gt;
&lt;div id=&#34;definition-von-konfidenzintervallen&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Definition von Konfidenzintervallen&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Für unabhängig identisch verteilte Zufallsvariablen &lt;span class=&#34;math inline&#34;&gt;\(X_1,\dotsc, X_n\)&lt;/span&gt; mit unbekanntem reellen Verteilungsparameter &lt;span class=&#34;math inline&#34;&gt;\(\vartheta\)&lt;/span&gt; kann unter bestimmten Umständen zwei Stichprobenfunktionen &lt;span class=&#34;math inline&#34;&gt;\(U\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(V\)&lt;/span&gt; angeben, so dass&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[P(U &amp;lt; \vartheta &amp;lt; V) \geq \gamma\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;gilt, mit &lt;span class=&#34;math inline&#34;&gt;\(\gamma \in (0,1)\)&lt;/span&gt;.
Dann heißt das (stochastische) Intervall &lt;span class=&#34;math inline&#34;&gt;\([U, V]\)&lt;/span&gt; ein &lt;strong&gt;Konfidenzintervall&lt;/strong&gt; für &lt;span class=&#34;math inline&#34;&gt;\(\vartheta\)&lt;/span&gt; zum Konfidenzniveau &lt;span class=&#34;math inline&#34;&gt;\(\gamma\)&lt;/span&gt; (auch: ein &lt;strong&gt;&lt;span class=&#34;math inline&#34;&gt;\(\gamma\)&lt;/span&gt;-Konfidenzintervall&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;Die Realisationen &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; von &lt;span class=&#34;math inline&#34;&gt;\(U\)&lt;/span&gt; bzw. &lt;span class=&#34;math inline&#34;&gt;\(V\)&lt;/span&gt; bilden das &lt;strong&gt;Schätzintervall&lt;/strong&gt; &lt;span class=&#34;math inline&#34;&gt;\([u, v]\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Da die Realisationen &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; der Grenzen &lt;span class=&#34;math inline&#34;&gt;\(U\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(V\)&lt;/span&gt; keine Zufallsvariablen sind und &lt;span class=&#34;math inline&#34;&gt;\(\vartheta\)&lt;/span&gt; ein fixer Wert ist, kann man &lt;strong&gt;nicht&lt;/strong&gt; sagen, dass das Schätzintervall &lt;span class=&#34;math inline&#34;&gt;\([u, v]\)&lt;/span&gt; mit einer Wahrscheinlichkeit von &lt;span class=&#34;math inline&#34;&gt;\(\gamma\)&lt;/span&gt; den unbekannten Parameter &lt;span class=&#34;math inline&#34;&gt;\(\vartheta\)&lt;/span&gt; enthält. Es bedeutet vielmehr, dass im Mittel ein Anteil von &lt;span class=&#34;math inline&#34;&gt;\(\gamma\)&lt;/span&gt; aller so berechneten Schätzintervalle den unbekannten Parameter überdecken. Dem nicht widersprechend, kann –- wie bereits von Ronald Fisher festgestellt – in manchen Modellen die Qualität des Schätzintervalls von den Daten abhängen und sogar zu Antworten führen, die mit Blick auf die Daten unsinnig sind. Probleme mit solcher Post-Data-Inkohärenz führen zur Theorie der bedingten Inferenz. Ein weiteres Problem sind die Stichprobenfunktionen U und V an sich. Um diese zu finden werden oft Vereinfachungen getroffen, dadurch können systematische Fehler entstehen, oft es gibt mehrere Konfidenzintervalle (bei der Binomialverteilung z.B. nach Clopper-Pearson, Agresti-Coull oder Wald), welche oft unterschiedliche Werte liefern.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ein-beispiel&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Ein Beispiel&lt;/h3&gt;
&lt;p&gt;Wir nehmen zunächst als Population &lt;span class=&#34;math inline&#34;&gt;\(N=1000\)&lt;/span&gt; normalverteilte Zufallszahlen mit dem Mittelwert &lt;span class=&#34;math inline&#34;&gt;\(\mu= 0\)&lt;/span&gt; und der Standardabweichung &lt;span class=&#34;math inline&#34;&gt;\(\sigma=2.0088\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Dazu das Histogramm der Population:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;histogram(pop, xlab=&amp;quot;Population&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-01-04-prognose-konfidenz-und-fiduzialintervalle_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Aus dieser Population ziehen wir eine Stichprobe &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; vom Umfang $n=$40 und erhalten die folgenden statistischen Daten:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;favstats(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    min      Q1 median    Q3   max   mean    sd  n missing
##  -3.38 -0.9781 0.2042 1.546 4.002 0.1877 1.901 40       0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wir wollen nun den wahren Mittelwert &lt;span class=&#34;math inline&#34;&gt;\(\vartheta=\mu\)&lt;/span&gt; mit Hilfe der Stichprobe &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; schätzen. So ist es ja in der Realität auch, denn normalerweise haben wir die Daten über die Population nicht.&lt;/p&gt;
&lt;p&gt;Die Schätzfunktion für den Mittelwert lautet nun
&lt;span class=&#34;math display&#34;&gt;\[\bar{X} = \frac1n \sum_{i=1}^n X_i\]&lt;/span&gt;,
und damit die konkrete Punktschätzung
&lt;span class=&#34;math display&#34;&gt;\[\hat{\mu}=\bar{x}= \sum_{i=1}^n x_i\]&lt;/span&gt;
liefert den Wert &lt;span class=&#34;math inline&#34;&gt;\(\hat{\mu}=\)&lt;/span&gt; 0.1877.&lt;/p&gt;
&lt;p&gt;In unserem Beispiel unterscheiden sich die beiden Werte um &lt;span class=&#34;math inline&#34;&gt;\(\mu - \hat{\mu}=\)&lt;/span&gt; -0.1877.&lt;/p&gt;
&lt;p&gt;Ein 95%-Konfidenzintervall nimmt nun den geschätzen Wert &lt;span class=&#34;math inline&#34;&gt;\(\hat{\mu}\)&lt;/span&gt; als Grundlage und gibt liefert ein Intervall mit der Eigentschaft, ausgehend von den konkreten Stichproben in 95% der Fälle den tatsächlichen Wert &lt;span class=&#34;math inline&#34;&gt;\(\mu\)&lt;/span&gt; zu umfassen. Es ist also
&lt;span class=&#34;math display&#34;&gt;\[\gamma = 0.95 = 1 - \alpha = 1 - 0.05, \quad \alpha = 0.05\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Dazu werden die beiden Stichprobenfunktionen&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[U=U(X_1, \dots, X_n)=\bar{X}-z_{\left(1-\frac{\alpha}{2}\right)}\cdot\frac{\sigma}{\sqrt{n}}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;und&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[V=V(X_1, \dots, X_n)=\bar{X}-z_{\left(1-\frac{\alpha}{2}\right)}\cdot\frac{\sigma}{\sqrt{n}}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;mit der &lt;em&gt;bekannten&lt;/em&gt; Standardabweichung &lt;span class=&#34;math inline&#34;&gt;\(\sigma\)&lt;/span&gt; der &lt;em&gt;Population&lt;/em&gt; und der Stichprobengröße &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; nun mit der konkreten Realisation &lt;span class=&#34;math inline&#34;&gt;\(x_1, \dots, x_n\)&lt;/span&gt; der Stichprobe gefüttert und wir erhalten damit&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[u = \bar{x}-z_{\left(1-\frac{\alpha}{2}\right)}\cdot\frac{\sigma}{\sqrt{n}} = 0.1877-z_{\left(0.975\right)}\cdot\frac{2.0088}{\sqrt{40}}=-0.4348\]&lt;/span&gt;
und&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[v = \bar{x}+z_{\left(1-\frac{\alpha}{2}\right)}\cdot\frac{\sigma}{\sqrt{n}} = 0.1877+z_{\left(0.975\right)}\cdot\frac{2.0088}{\sqrt{40}}=0.8102.\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Die Realisation unseres 95%-Konfidenzintervall lautet nun also:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[[-0.4348; 0.8102]\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Was hat es nun mit den ominösen 95% auf sich?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Das Konfidenzintervall ist ein stochastisches Intervall, d.h. die hier angegebenen Werte für &lt;span class=&#34;math inline&#34;&gt;\(u\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(v\)&lt;/span&gt; sind abhängig von der Realisation &lt;span class=&#34;math inline&#34;&gt;\(x_1, \dots, x_n\)&lt;/span&gt;, also der konkreten Stichprobe.&lt;/p&gt;
&lt;p&gt;Nehmen wir nun also einmal eine neue Stichprobe und berechnen erneut die Realisation unseres 95%-Konfidenzintervalls, so erhalten wir:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[[-0.7033; 0.5418]\]&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Interval coverage:&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     cover
## n     Low  Yes High
##   40 0.00 0.98 0.02&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-01-04-prognose-konfidenz-und-fiduzialintervalle_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;prognoseintervalle&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Prognoseintervalle&lt;/h2&gt;
&lt;/div&gt;
&lt;div id=&#34;fuduzialintervalle&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Fuduzialintervalle&lt;/h2&gt;
&lt;p&gt;Quellen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Logik in der Statistik; Andrea Wiencierz, 7.10.2007 Link: &lt;a href=&#34;https://static.aminer.org/pdf/PDF/000/230/772/induktive_inferenz_und_mehrwertige_logik.pdf&#34; class=&#34;uri&#34;&gt;https://static.aminer.org/pdf/PDF/000/230/772/induktive_inferenz_und_mehrwertige_logik.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;vgl: &lt;a href=&#34;https://de.wikipedia.org/wiki/Konfidenzintervall&#34; class=&#34;uri&#34;&gt;https://de.wikipedia.org/wiki/Konfidenzintervall&lt;/a&gt;&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Konfidenzintervalle</title>
      <link>/post/konfidenzintervalle/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>/post/konfidenzintervalle/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Stub!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zentrales Schwankungsintervall</title>
      <link>/post/zentrales-schwankungsintervall/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>/post/zentrales-schwankungsintervall/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Das &lt;strong&gt;zentrale Schwankungsintervall&lt;/strong&gt; sagt etwas über die Präzision der Lageschätzung eines Parameters (zum Beispiel eines Mittelwertes) aus. Das Schwankungsintervall schließt einen Bereich um den wahren Wert des Parameters in der Grundgesamtheit ein, der – vereinfacht gesprochen – mit einer zuvor festgelegten Sicherheitswahrscheinlichkeit den aus der Stichprobe geschätzten Parameter enthält.&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;vgl: &lt;a href=&#34;https://de.wikipedia.org/wiki/Zentrales_Schwankungsintervall&#34; class=&#34;uri&#34;&gt;https://de.wikipedia.org/wiki/Zentrales_Schwankungsintervall&lt;/a&gt;&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Ein paar interessante Links</title>
      <link>/post/ein-paar-interessante-links/</link>
      <pubDate>Sun, 31 Dec 2017 00:00:00 +0000</pubDate>
      <guid>/post/ein-paar-interessante-links/</guid>
      <description>&lt;p&gt;Im Laufe der Zeit sammeln sich bei mir mehr und mehr Links zu anderen Seiten an, die ich irgendwie speichern will aber nicht ernsthaft sortieren möchte.
So ist diese Sammlung hier entstanden:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www2.hs-fulda.de/~grams/hoppla/wordpress/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Blog von Prof. Dr. Timm Grams&lt;/a&gt; &amp;ndash; &amp;ldquo;Ein Weblogbuch über sonderbare Nachrichten und alltäglichen Statistikplunder&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www2.hs-fulda.de/~grams/dnkfln.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Denkfallen und Paradoxa&lt;/a&gt; &amp;ndash; Prof. Dr. Timm Grams gibt einen Überblick&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www2.hs-fulda.de/~grams/mathehilft/schaetzen/Vierfeldertafel.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Signifikanztest mit der Vierfeldertafel&lt;/a&gt; &amp;ndash; Prof. Dr. Timm Grams&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www2.hs-fulda.de/~grams/Heuristik/Lektionen/Querbeet.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Querbeet &amp;ndash; Eine Problemsammlung&lt;/a&gt; &amp;ndash; Prof. Dr. Timm Grams&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://data-se.netlify.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Blog von Prof. Dr. Sebastian Sauer&lt;/a&gt; &amp;ndash; Quelle der Erleuchtung und Intuition&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.six-sigma-material.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Six Sigma Material&lt;/a&gt; &amp;ndash; Six Sigma Seite&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.foundstat.statistik.uni-muenchen.de/studium_lehre/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AG Method(olgo)ische Grundlagen der Statistik und Ihre Anwendung&lt;/a&gt; &amp;ndash; LMU München &amp;hellip; WOW!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.beltz.de/fileadmin/beltz/leseproben/978-3-7799-3658-9.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Leseprobe &amp;ldquo;Induktive Statistik und soziologische Theorie&amp;rdquo;&lt;/a&gt; &amp;ndash; Markus Ziegler - Eine Analyse des theoretischen Potenzials der Bayes-Statistik&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://support.minitab.com/de-de/minitab/18/help-and-how-to/modeling-statistics/reliability/how-to/probit-analysis/perform-the-analysis/estimate-percentiles-and-probabilities/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fiduzial&lt;/a&gt; &amp;ndash;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.stefanbartz.de/dateien/Vorsicht-bei-der-sigma-Regel.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vorsicht bei der σ-Regel&lt;/a&gt; &amp;ndash; Stefan Bartz&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Quartile, Quantile, Perzentile etc.</title>
      <link>/post/quartile-quantile-perzentile-etc/</link>
      <pubDate>Tue, 19 Dec 2017 00:00:00 +0000</pubDate>
      <guid>/post/quartile-quantile-perzentile-etc/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;“Was hat das eigentlich mit den Quartilen, Quantilen und so weiter auf sich?”
Diese Frage kommt ab und zu in Vorlesungen zur Statistik vor. Dabei ist die Antwort recht einfach.&lt;/p&gt;
&lt;div id=&#34;quantile&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Quantile&lt;/h2&gt;
&lt;div id=&#34;definitorische-antwort&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Definitorische Antwort&lt;/h3&gt;
&lt;p&gt;Für eine gegebene reelle Zufallsvariable &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt; heißt eine reelle Zahl &lt;span class=&#34;math inline&#34;&gt;\(x_p\)&lt;/span&gt; ein &lt;strong&gt;p-Quantil&lt;/strong&gt; (von &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt;), falls gilt:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[P(X \leq x_p) \leq p \quad \text{ und }\quad P(x_p \leq X) \geq 1-p.\]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;was-bedeutet-das-denn-nun-konkret&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Was bedeutet das denn nun konkret?&lt;/h3&gt;
&lt;p&gt;Nun, ein Quantil ist ein Schwellenwert.
Ein bestimmter Anteil der Werte ist kleiner als das Quantil, der Rest ist größer.
Das 25-%-Quantil beispielsweise ist der Wert, für den gilt, dass 25 % aller Werte kleiner sind als dieser Wert.
Quantile formalisieren praktische Aussagen wie „25 % aller Frauen sind kleiner als 1,62 m“ –- wobei 1,62 m hier das 25-%-Quantil ist.&lt;/p&gt;
&lt;p&gt;Spezielle Quantile sind der &lt;em&gt;Median&lt;/em&gt;, die &lt;em&gt;Quartile&lt;/em&gt;, die &lt;em&gt;Quintile&lt;/em&gt;, die &lt;em&gt;Dezile&lt;/em&gt; und die &lt;em&gt;Perzentile&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;Wir betrachten dazu in den Bespielen die Datenreihe &lt;code&gt;dr&lt;/code&gt; an:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Die Zahlen von 0 bis 600 
dr &amp;lt;- 0:600&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;median&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Median&lt;/h3&gt;
&lt;p&gt;Der &lt;strong&gt;Median&lt;/strong&gt; (von lat. &lt;em&gt;Medium&lt;/em&gt; für „Mitte, Mittelpunkt“ abgeleiteter Begriff mit der Bedeutung “in der Mitte gelegen”) die das 50-%-Quantil. Der Wert, welcher die Datenreihe (bestenfalls) in zwei (etwa) gleich große Abschnitte trennt. Sehr oft schreibt man &lt;span class=&#34;math inline&#34;&gt;\(x_{med}\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(x_{50\%}\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(x_{Med}\)&lt;/span&gt; oder &lt;span class=&#34;math inline&#34;&gt;\(Q_2\)&lt;/span&gt; für den Median&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;median(dr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 300&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;terzile&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Terzile&lt;/h3&gt;
&lt;p&gt;Als &lt;strong&gt;Terile&lt;/strong&gt; (von lat. &lt;em&gt;tertius&lt;/em&gt; “der Dritte”) werden die beiden Quantile mit &lt;span class=&#34;math inline&#34;&gt;\(p=1/3\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(p=2/3\)&lt;/span&gt; bezeichnet.
Sie teilen die Datenreihe in drei Abschnitte.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quantile(dr, probs = seq(0, 1, 1/3))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        0% 33.33333% 66.66667%      100% 
##         0       200       400       600&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;quartile&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Quartile&lt;/h3&gt;
&lt;p&gt;Die &lt;strong&gt;Quartile&lt;/strong&gt; (von lat. &lt;em&gt;quartus&lt;/em&gt; „der Vierte“) werden die Quantile mit &lt;span class=&#34;math inline&#34;&gt;\(p=25\%\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(p=50\%\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(p=75\%\)&lt;/span&gt; bezeichnet.
Sie teilen die Datenreihe in vier Abschnitte.
Dabei schreibt man oft: &lt;span class=&#34;math inline&#34;&gt;\(Q_1 = x_{0{,}25}\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(x_{Med} = Q_2 = x_{0{,}50}\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(Q_3 = x_{0{,}75}\)&lt;/span&gt; für die drei Quantile.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quantile(dr) # oder auch: quantile(dr, probs=seq(0, 1, 1/4))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   0%  25%  50%  75% 100% 
##    0  150  300  450  600&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;quintile&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Quintile&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Quintile&lt;/strong&gt; (von lat. &lt;em&gt;quintus&lt;/em&gt; “der Fünfte”) werden die Quantile mit &lt;span class=&#34;math inline&#34;&gt;\(p=20\%\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(p=40\%\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(p=60\%\)&lt;/span&gt; und &lt;span class=&#34;math inline&#34;&gt;\(p=80\%\)&lt;/span&gt; bezeichnet.
Sie teilen die Datenreihe in fünf Abschnitte.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quantile(dr, probs = seq(0, 1, 1/5))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   0%  20%  40%  60%  80% 100% 
##    0  120  240  360  480  600&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;dezile&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Dezile&lt;/h3&gt;
&lt;p&gt;Die Quantile für vielfache von &lt;span class=&#34;math inline&#34;&gt;\(0{,}1\)&lt;/span&gt; also für &lt;span class=&#34;math inline&#34;&gt;\(p=0{,}1;0{,}2;\dots ;0{,}9\)&lt;/span&gt; werden &lt;strong&gt;Dezile&lt;/strong&gt; (von mittellateinisch &lt;em&gt;decimalis&lt;/em&gt;, zu lat. &lt;em&gt;decem&lt;/em&gt; „zehn“) genannt.
Dabei heißt das &lt;span class=&#34;math inline&#34;&gt;\(0{,}1\)&lt;/span&gt;-Quantil das erste Dezil, das &lt;span class=&#34;math inline&#34;&gt;\(0{,}2\)&lt;/span&gt;-Quantil das zweite Dezil usw.
Unterhalb des ersten Dezils liegen 10 % der Stichprobe, oberhalb entsprechend 90 % der Stichprobe.
Ebenso liegen 40 % der Stichprobe unterhalb des vierten Dezils und 60 % oberhalb.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quantile(dr, probs = seq(0, 1, 1/10))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   0%  10%  20%  30%  40%  50%  60%  70%  80%  90% 100% 
##    0   60  120  180  240  300  360  420  480  540  600&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;perzentile&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Perzentile&lt;/h3&gt;
&lt;p&gt;Als &lt;strong&gt;Perzentile&lt;/strong&gt; (von lat.-ital. &lt;em&gt;per centum&lt;/em&gt; “von Hundert, Hundertstel”) werden die Quantile von &lt;span class=&#34;math inline&#34;&gt;\(\displaystyle 0{,}01\)&lt;/span&gt; bis $ 0{,}99$ in Schritten von &lt;span class=&#34;math inline&#34;&gt;\(0{,}01\)&lt;/span&gt; bezeichnet.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quantile(dr, probs = seq(0, 1, 1/100))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   0%   1%   2%   3%   4%   5%   6%   7%   8%   9%  10%  11%  12%  13%  14%  15% 
##    0    6   12   18   24   30   36   42   48   54   60   66   72   78   84   90 
##  16%  17%  18%  19%  20%  21%  22%  23%  24%  25%  26%  27%  28%  29%  30%  31% 
##   96  102  108  114  120  126  132  138  144  150  156  162  168  174  180  186 
##  32%  33%  34%  35%  36%  37%  38%  39%  40%  41%  42%  43%  44%  45%  46%  47% 
##  192  198  204  210  216  222  228  234  240  246  252  258  264  270  276  282 
##  48%  49%  50%  51%  52%  53%  54%  55%  56%  57%  58%  59%  60%  61%  62%  63% 
##  288  294  300  306  312  318  324  330  336  342  348  354  360  366  372  378 
##  64%  65%  66%  67%  68%  69%  70%  71%  72%  73%  74%  75%  76%  77%  78%  79% 
##  384  390  396  402  408  414  420  426  432  438  444  450  456  462  468  474 
##  80%  81%  82%  83%  84%  85%  86%  87%  88%  89%  90%  91%  92%  93%  94%  95% 
##  480  486  492  498  504  510  516  522  528  534  540  546  552  558  564  570 
##  96%  97%  98%  99% 100% 
##  576  582  588  594  600&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Der Zentrale Grenzwertsatz</title>
      <link>/post/der-zentrale-grenzwertsatz/</link>
      <pubDate>Wed, 05 Apr 2017 00:00:00 +0000</pubDate>
      <guid>/post/der-zentrale-grenzwertsatz/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;der-zentrale-grenzwertsatz-der-statistik-bei-identischer-verteilung.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Der &lt;strong&gt;Zentrale Grenzwertsatz&lt;/strong&gt; der Statistik bei identischer Verteilung.&lt;/h2&gt;
&lt;div id=&#34;zentraler-grenzwertsatz&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Zentraler Grenzwertsatz&lt;/h3&gt;
&lt;p&gt;Seien &lt;span class=&#34;math inline&#34;&gt;\(X_1, X_2, ..., X_n\)&lt;/span&gt; unabhängige und identisch verteilte Zufallsvariablen mit bekanntem Erwartungswert &lt;span class=&#34;math inline&#34;&gt;\(E(X_i) = \mu\)&lt;/span&gt; und bekannter Varianz &lt;span class=&#34;math inline&#34;&gt;\(Var(X_i)=\sigma^2\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Für die Summe &lt;span class=&#34;math inline&#34;&gt;\(S_n = \sum_{i=1}^n X_i\)&lt;/span&gt; ist dann der Erwartungswert &lt;span class=&#34;math inline&#34;&gt;\(E(S_n)= n \cdot \mu\)&lt;/span&gt; und die Varianz &lt;span class=&#34;math inline&#34;&gt;\(Var(S_n)= n \cdot \sigma^2\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Dann gilt für die &lt;em&gt;standardisierte&lt;/em&gt; Zufallsvariable&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{align*}
Z_n &amp;amp;= \frac{\left(\sum\limits_{i=1}^n X_i\right) - n \cdot \mu}{\sqrt{n\cdot \sigma^2}}
    = \frac{S_n - n \cdot \mu}{\sigma \cdot \sqrt{n}} 
    = \frac{n \cdot \bar{X}_n-n \cdot \mu}{\sigma \cdot n / \sqrt{n}} \\
    &amp;amp;= \frac{\bar{X}_n - \mu}{\sigma / \sqrt{n}} 
    = \frac{\bar{X}_n - \mu}{\sigma} \cdot \sqrt{n},
\end{align*}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;dass sie für wachsendes &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; immer besser durch die &lt;em&gt;Standardnormalverteilung&lt;/em&gt; &lt;span class=&#34;math inline&#34;&gt;\(N(0, 1)\)&lt;/span&gt; approximiert werden kann.&lt;/p&gt;
&lt;p&gt;Mit anderen Worten:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
P(Z_n \leq x) \longrightarrow \Phi(x), \quad \text{ für }\; n \rightarrow \infty
\]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;ein-beispiel&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Ein Beispiel:&lt;/h2&gt;
&lt;p&gt;Nehmen wir drei Verteilungen mit Zufallsvariable &lt;span class=&#34;math inline&#34;&gt;\(U\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(X\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; und jeweils &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; Realisationen &lt;span class=&#34;math inline&#34;&gt;\(u_1,\dots, u_n\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(x_1,\dots, x_n\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(y_1,\dots, y_n\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Wählen wir zunächst &lt;span class=&#34;math inline&#34;&gt;\(n=5\)&lt;/span&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;u&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 19.726 69.683 60.790  0.955 42.901&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  7.942 15.905 12.917  6.818  4.434&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;y&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 59.961 56.552 51.094 75.288 47.985&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Standardisieren wir die Werte:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(mosaic)
zscore(u)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -0.6695256  1.0830283  0.7710507 -1.3280357  0.1434823&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;zscore(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -0.3543069  1.3440714  0.7067796 -0.5940379 -1.1025063&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;zscore(y)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  0.1677971 -0.1526624 -0.6657361  1.6085958 -0.9579944&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Die Behauptung des Zentralengrenzwertsatzes ist nun, dass mit steigender Anzahl an Werten &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; die standardisierten Werte in der empirischen Verteilungsfunktion sich immer mehr der Verteilungsfunktion der Standardnormalverteilung annähern:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-05-der-zentrale-grenzwertsatz_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;/post/2017-04-05-der-zentrale-grenzwertsatz_files/figure-html/unnamed-chunk-4-2.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;/post/2017-04-05-der-zentrale-grenzwertsatz_files/figure-html/unnamed-chunk-4-3.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;/post/2017-04-05-der-zentrale-grenzwertsatz_files/figure-html/unnamed-chunk-4-4.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Weiterführende Literatur und Quellen dieses Eintrags:&lt;/strong&gt;&lt;/p&gt;
&lt;div id=&#34;refs&#34; class=&#34;references csl-bib-body&#34;&gt;
&lt;div id=&#34;ref-Schira2005&#34; class=&#34;csl-entry&#34;&gt;
&lt;p&gt;&lt;div class=&#34;csl-left-margin&#34;&gt;1. &lt;/div&gt;&lt;div class=&#34;csl-right-inline&#34;&gt;Schira, J.: Statistische Methoden der VWL und BWL. PEARSON Studion, München (2005)&lt;/div&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-website:WikipediaZGS&#34; class=&#34;csl-entry&#34;&gt;
&lt;p&gt;&lt;div class=&#34;csl-left-margin&#34;&gt;2. &lt;/div&gt;&lt;div class=&#34;csl-right-inline&#34;&gt;Wikipedia: Zentraler Grenzwertsatz, &lt;a href=&#34;https://de.wikipedia.org/w/index.php?title=Zentraler_Grenzwertsatz&amp;amp;oldid=162715036&#34;&gt;https://de.wikipedia.org/w/index.php?title=Zentraler_Grenzwertsatz&amp;amp;oldid=162715036&lt;/a&gt;, (2017)&lt;/div&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-website:WolframMathWorldCLT&#34; class=&#34;csl-entry&#34;&gt;
&lt;p&gt;&lt;div class=&#34;csl-left-margin&#34;&gt;3. &lt;/div&gt;&lt;div class=&#34;csl-right-inline&#34;&gt;Weisstein, E.W.: Central limit theorem, &lt;a href=&#34;http://mathworld.wolfram.com/CentralLimitTheorem.html&#34;&gt;http://mathworld.wolfram.com/CentralLimitTheorem.html&lt;/a&gt;, (2017)&lt;/div&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Etwas R am Abend</title>
      <link>/project/etwas-r-am-abend/</link>
      <pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate>
      <guid>/project/etwas-r-am-abend/</guid>
      <description></description>
    </item>
    
    <item>
      <title>FastSimNullDistR</title>
      <link>/project/fastsimnulldistr/</link>
      <pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate>
      <guid>/project/fastsimnulldistr/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
